#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [8, 4], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":18:0)
#loc1 = loc(unknown)
#loc26 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":43:25)
#loc56 = loc(callsite(#loc1 at #loc26))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 2 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":18:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":18:0), %arg3: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":18:0), %arg4: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":18:0), %arg5: i32 loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":18:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":18:0)) attributes {noinline = false} {
    %cst = arith.constant dense<9.99999974E-6> : tensor<16x1xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<16x8xf16, #blocked> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<4096> : tensor<1x8xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<4096> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<1x8xf16, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<16x8xf32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<4.096000e+03> : tensor<16x1xf32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<4.096000e+03> : tensor<16x1xf32, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<9.99999974E-6> : tensor<16x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<16x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<16x1xi32, #blocked1> loc(#loc5)
    %10 = tt.splat %arg5 : i32 -> tensor<16x1xi32, #blocked> loc(#loc6)
    %11 = tt.splat %arg5 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc6)
    %12 = arith.cmpi slt, %8, %10 : tensor<16x1xi32, #blocked> loc(#loc6)
    %13 = arith.cmpi slt, %9, %11 : tensor<16x1xi32, #blocked1> loc(#loc6)
    %14 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %15 = tt.expand_dims %14 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc7)
    %16 = arith.muli %8, %cst_2 : tensor<16x1xi32, #blocked> loc(#loc8)
    %17 = tt.broadcast %16 : tensor<16x1xi32, #blocked> -> tensor<16x8xi32, #blocked> loc(#loc9)
    %18 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<16x8x!tt.ptr<f16>, #blocked> loc(#loc10)
    %19 = tt.broadcast %12 : tensor<16x1xi1, #blocked> -> tensor<16x8xi1, #blocked> loc(#loc11)
    %20 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<16x8x!tt.ptr<f16>, #blocked> loc(#loc12)
    %21 = scf.for %arg7 = %c0_i32 to %c4096_i32 step %c8_i32 iter_args(%arg8 = %cst_4) -> (tensor<16x8xf32, #blocked>)  : i32 {
      %37 = tt.splat %arg7 : i32 -> tensor<1x8xi32, #blocked> loc(#loc14)
      %38 = arith.addi %37, %15 : tensor<1x8xi32, #blocked> loc(#loc14)
      %39 = arith.cmpi slt, %38, %cst_1 : tensor<1x8xi32, #blocked> loc(#loc15)
      %40 = tt.broadcast %38 : tensor<1x8xi32, #blocked> -> tensor<16x8xi32, #blocked> loc(#loc9)
      %41 = arith.addi %40, %17 : tensor<16x8xi32, #blocked> loc(#loc9)
      %42 = tt.addptr %18, %41 : tensor<16x8x!tt.ptr<f16>, #blocked>, tensor<16x8xi32, #blocked> loc(#loc10)
      %43 = tt.broadcast %39 : tensor<1x8xi1, #blocked> -> tensor<16x8xi1, #blocked> loc(#loc11)
      %44 = arith.andi %43, %19 : tensor<16x8xi1, #blocked> loc(#loc11)
      %45 = tt.load %42, %44, %cst_0 evictionPolicy = evict_last : tensor<16x8x!tt.ptr<f16>, #blocked> loc(#loc16)
      %46 = arith.extf %45 : tensor<16x8xf16, #blocked> to tensor<16x8xf32, #blocked> loc(#loc17)
      %47 = tt.addptr %20, %41 : tensor<16x8x!tt.ptr<f16>, #blocked>, tensor<16x8xi32, #blocked> loc(#loc12)
      %48 = tt.load %47, %44, %cst_0 evictionPolicy = evict_last : tensor<16x8x!tt.ptr<f16>, #blocked> loc(#loc18)
      %49 = arith.extf %48 : tensor<16x8xf16, #blocked> to tensor<16x8xf32, #blocked> loc(#loc19)
      %50 = arith.addf %46, %49 : tensor<16x8xf32, #blocked> loc(#loc20)
      %51 = arith.mulf %50, %50 : tensor<16x8xf32, #blocked> loc(#loc21)
      %52 = arith.addf %arg8, %51 : tensor<16x8xf32, #blocked> loc(#loc22)
      %53 = arith.select %44, %52, %arg8 : tensor<16x8xi1, #blocked>, tensor<16x8xf32, #blocked> loc(#loc23)
      scf.yield %53 : tensor<16x8xf32, #blocked> loc(#loc24)
    } loc(#loc13)
    %22 = "tt.reduce"(%21) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc26)), %arg8: f32 loc(callsite(#loc1 at #loc26))):
      %37 = arith.addf %arg7, %arg8 : f32 loc(#loc58)
      tt.reduce.return %37 : f32 loc(#loc55)
    }) : (tensor<16x8xf32, #blocked>) -> tensor<16xf32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc55)
    %23 = ttg.convert_layout %22 : tensor<16xf32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16xf32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc28)
    %24 = tt.expand_dims %23 {axis = 1 : i32} : tensor<16xf32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xf32, #blocked1> loc(#loc29)
    %25 = tt.expand_dims %22 {axis = 1 : i32} : tensor<16xf32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xf32, #blocked> loc(#loc29)
    %26 = arith.divf %24, %cst_6 : tensor<16x1xf32, #blocked1> loc(#loc30)
    %27 = arith.divf %25, %cst_5 : tensor<16x1xf32, #blocked> loc(#loc30)
    %28 = arith.addf %26, %cst_7 : tensor<16x1xf32, #blocked1> loc(#loc31)
    %29 = arith.addf %27, %cst : tensor<16x1xf32, #blocked> loc(#loc31)
    %30 = tt.extern_elementwise %28 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<16x1xf32, #blocked1>) -> tensor<16x1xf32, #blocked1> loc(#loc28)
    %31 = tt.extern_elementwise %29 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<16x1xf32, #blocked>) -> tensor<16x1xf32, #blocked> loc(#loc28)
    gpu.barrier loc(#loc32)
    %32 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<16x1x!tt.ptr<f32>, #blocked1> loc(#loc33)
    %33 = tt.addptr %32, %9 : tensor<16x1x!tt.ptr<f32>, #blocked1>, tensor<16x1xi32, #blocked1> loc(#loc33)
    tt.store %33, %30, %13 : tensor<16x1x!tt.ptr<f32>, #blocked1> loc(#loc34)
    %34 = tt.splat %arg3 : !tt.ptr<f16> -> tensor<1x8x!tt.ptr<f16>, #blocked> loc(#loc35)
    %35 = tt.broadcast %31 : tensor<16x1xf32, #blocked> -> tensor<16x8xf32, #blocked> loc(#loc36)
    %36 = tt.splat %arg4 : !tt.ptr<f16> -> tensor<16x8x!tt.ptr<f16>, #blocked> loc(#loc37)
    scf.for %arg7 = %c0_i32 to %c4096_i32 step %c8_i32  : i32 {
      %37 = tt.splat %arg7 : i32 -> tensor<1x8xi32, #blocked> loc(#loc39)
      %38 = arith.addi %37, %15 : tensor<1x8xi32, #blocked> loc(#loc39)
      %39 = arith.cmpi slt, %38, %cst_1 : tensor<1x8xi32, #blocked> loc(#loc40)
      %40 = tt.addptr %34, %38 : tensor<1x8x!tt.ptr<f16>, #blocked>, tensor<1x8xi32, #blocked> loc(#loc35)
      %41 = tt.load %40, %39, %cst_3 evictionPolicy = evict_last : tensor<1x8x!tt.ptr<f16>, #blocked> loc(#loc41)
      %42 = arith.extf %41 : tensor<1x8xf16, #blocked> to tensor<1x8xf32, #blocked> loc(#loc42)
      %43 = tt.broadcast %38 : tensor<1x8xi32, #blocked> -> tensor<16x8xi32, #blocked> loc(#loc43)
      %44 = arith.addi %43, %17 : tensor<16x8xi32, #blocked> loc(#loc43)
      %45 = tt.addptr %18, %44 : tensor<16x8x!tt.ptr<f16>, #blocked>, tensor<16x8xi32, #blocked> loc(#loc44)
      %46 = tt.broadcast %39 : tensor<1x8xi1, #blocked> -> tensor<16x8xi1, #blocked> loc(#loc45)
      %47 = arith.andi %46, %19 : tensor<16x8xi1, #blocked> loc(#loc45)
      %48 = tt.load %45, %47, %cst_0 evictionPolicy = evict_first : tensor<16x8x!tt.ptr<f16>, #blocked> loc(#loc46)
      %49 = arith.extf %48 : tensor<16x8xf16, #blocked> to tensor<16x8xf32, #blocked> loc(#loc47)
      %50 = tt.addptr %20, %44 : tensor<16x8x!tt.ptr<f16>, #blocked>, tensor<16x8xi32, #blocked> loc(#loc48)
      %51 = tt.load %50, %47, %cst_0 evictionPolicy = evict_first : tensor<16x8x!tt.ptr<f16>, #blocked> loc(#loc49)
      %52 = arith.extf %51 : tensor<16x8xf16, #blocked> to tensor<16x8xf32, #blocked> loc(#loc50)
      %53 = arith.addf %49, %52 : tensor<16x8xf32, #blocked> loc(#loc51)
      %54 = arith.mulf %53, %35 : tensor<16x8xf32, #blocked> loc(#loc36)
      %55 = tt.broadcast %42 : tensor<1x8xf32, #blocked> -> tensor<16x8xf32, #blocked> loc(#loc52)
      %56 = arith.mulf %55, %54 : tensor<16x8xf32, #blocked> loc(#loc52)
      %57 = tt.addptr %36, %44 : tensor<16x8x!tt.ptr<f16>, #blocked>, tensor<16x8xi32, #blocked> loc(#loc37)
      %58 = arith.truncf %56 : tensor<16x8xf32, #blocked> to tensor<16x8xf16, #blocked> loc(#loc53)
      tt.store %57, %58, %47 : tensor<16x8x!tt.ptr<f16>, #blocked> loc(#loc53)
    } loc(#loc38)
    tt.return loc(#loc54)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":22:28)
#loc3 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":22:33)
#loc4 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":23:44)
#loc5 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":23:23)
#loc6 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":24:21)
#loc7 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":25:37)
#loc8 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":35:46)
#loc9 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":35:41)
#loc10 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":35:34)
#loc11 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":35:61)
#loc12 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":36:34)
#loc13 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":29:40)
#loc14 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":30:31)
#loc15 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":31:29)
#loc16 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":35:51)
#loc17 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":35:112)
#loc18 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":36:51)
#loc19 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":36:112)
#loc20 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":37:22)
#loc21 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":39:22)
#loc22 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":41:23)
#loc23 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":42:48)
#loc24 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":42:8)
#loc25 = loc("/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language/standard.py":286:36)
#loc27 = loc("/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language/standard.py":256:15)
#loc28 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":48:28)
#loc29 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":43:28)
#loc30 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":45:19)
#loc31 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":47:19)
#loc32 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":49:4)
#loc33 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":50:28)
#loc34 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":50:40)
#loc35 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":57:35)
#loc36 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":62:24)
#loc37 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":65:29)
#loc38 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":51:40)
#loc39 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":52:31)
#loc40 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":53:29)
#loc41 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":57:42)
#loc42 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":57:95)
#loc43 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":58:42)
#loc44 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":58:35)
#loc45 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":58:62)
#loc46 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":58:52)
#loc47 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":58:114)
#loc48 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":59:35)
#loc49 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":59:52)
#loc50 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":59:114)
#loc51 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":60:24)
#loc52 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":64:24)
#loc53 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":65:53)
#loc54 = loc("./local_cache/5k/c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py":51:4)
#loc55 = loc(callsite(#loc25 at #loc26))
#loc57 = loc(callsite(#loc27 at #loc25))
#loc58 = loc(callsite(#loc57 at #loc26))
