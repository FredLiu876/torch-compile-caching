; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_div_mul_pow_sum_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = shl i32 %10, 2, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %.lobit2 = lshr i32 %12, 4, !dbg !11
  %13 = and i32 %.lobit2, 3, !dbg !11
  %14 = or disjoint i32 %13, %11, !dbg !12
  %15 = icmp slt i32 %14, %6, !dbg !13
  %16 = shl i32 %12, 2, !dbg !14
  %17 = and i32 %16, 60, !dbg !14
  %18 = and i32 %12, 63, !dbg !14
  %19 = shl i32 %14, 12, !dbg !15
  %20 = or disjoint i32 %19, %17
  %21 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %18
  %22 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %17
  %23 = zext nneg i32 %18 to i64, !dbg !16
  %24 = getelementptr inbounds nuw i8, ptr addrspace(3) %22, i32 8
  %25 = insertelement <4 x i1> poison, i1 %15, i64 0, !dbg !17
  %26 = shufflevector <4 x i1> %25, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !17
  br label %27, !dbg !16

27:                                               ; preds = %9, %27
  %indvars.iv = phi i64 [ 0, %9 ], [ %indvars.iv.next, %27 ]
  %28 = phi <4 x float> [ zeroinitializer, %9 ], [ %67, %27 ]
  %29 = or disjoint i64 %indvars.iv, %23, !dbg !18
  %30 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !19
  %31 = or i32 %20, %30, !dbg !19
  %32 = sext i32 %31 to i64, !dbg !20
  %33 = getelementptr half, ptr addrspace(1) %1, i64 %32, !dbg !20
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %33, i1 %15) #3, !dbg !21
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !21
  %36 = bitcast i32 %35 to <2 x half>, !dbg !21
  %37 = extractvalue { i32, i32 } %34, 1, !dbg !21
  %38 = bitcast i32 %37 to <2 x half>, !dbg !21
  %39 = getelementptr half, ptr addrspace(1) %2, i64 %32, !dbg !22
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %39, i1 %15) #3, !dbg !23
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !23
  %42 = bitcast i32 %41 to <2 x half>, !dbg !23
  %43 = extractvalue { i32, i32 } %40, 1, !dbg !23
  %44 = bitcast i32 %43 to <2 x half>, !dbg !23
  %45 = getelementptr half, ptr addrspace(1) %3, i64 %29, !dbg !24
  %46 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %45, i1 true) #3, !dbg !25
  %47 = bitcast i16 %46 to half, !dbg !25
  %48 = fpext half %47 to float, !dbg !26
  %49 = getelementptr half, ptr addrspace(1) %4, i64 %32, !dbg !27
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %49, i1 %15) #3, !dbg !28
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !28
  %52 = bitcast i32 %51 to <2 x half>, !dbg !28
  %53 = extractvalue { i32, i32 } %50, 1, !dbg !28
  %54 = bitcast i32 %53 to <2 x half>, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %55 = bitcast float %48 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %21, <1 x i32> %55, i1 true) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %56 = shufflevector <2 x half> %36, <2 x half> %38, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !30
  %57 = fpext <4 x half> %56 to <4 x float>, !dbg !30
  %58 = shufflevector <2 x half> %42, <2 x half> %44, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !31
  %59 = fpext <4 x half> %58 to <4 x float>, !dbg !31
  %60 = shufflevector <2 x half> %52, <2 x half> %54, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !32
  %61 = fpext <4 x half> %60 to <4 x float>, !dbg !32
  %62 = fadd <4 x float> %57, %59, !dbg !33
  %63 = load <4 x float>, ptr addrspace(3) %22, align 16, !dbg !29
  %64 = fmul <4 x float> %62, %63, !dbg !29
  %65 = fmul <4 x float> %64, %61, !dbg !34
  %66 = fadd <4 x float> %28, %65, !dbg !35
  %67 = select <4 x i1> %26, <4 x float> %66, <4 x float> %28, !dbg !17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !16
  %68 = icmp samesign ult i64 %indvars.iv, 4032, !dbg !16
  br i1 %68, label %27, label %69, !dbg !16

69:                                               ; preds = %27
  %shift = shufflevector <4 x float> %67, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !36
  %70 = fadd <4 x float> %67, %shift, !dbg !36
  %shift24 = shufflevector <4 x float> %67, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !36
  %71 = fadd <4 x float> %shift24, %70, !dbg !36
  %shift25 = shufflevector <4 x float> %67, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !36
  %72 = fadd <4 x float> %shift25, %71, !dbg !36
  %73 = extractelement <4 x float> %72, i64 0, !dbg !36
  %74 = bitcast float %73 to i32, !dbg !41
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 8, i32 31), !dbg !41
  %76 = bitcast i32 %75 to float, !dbg !41
  %77 = fadd float %73, %76, !dbg !36
  %78 = bitcast float %77 to i32, !dbg !41
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 4, i32 31), !dbg !41
  %80 = bitcast i32 %79 to float, !dbg !41
  %81 = fadd float %77, %80, !dbg !36
  %82 = bitcast float %81 to i32, !dbg !41
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 2, i32 31), !dbg !41
  %84 = bitcast i32 %83 to float, !dbg !41
  %85 = fadd float %81, %84, !dbg !36
  %86 = bitcast float %85 to i32, !dbg !41
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 1, i32 31), !dbg !41
  %88 = bitcast i32 %87 to float, !dbg !41
  %89 = fadd float %85, %88, !dbg !36
  %90 = sext i32 %14 to i64, !dbg !42
  %91 = getelementptr float, ptr addrspace(1) %5, i64 %90, !dbg !42
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %15) #3, !dbg !43
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %15) #3, !dbg !43
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %15) #3, !dbg !43
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %15) #3, !dbg !43
  %96 = bitcast i32 %95 to float, !dbg !43
  %97 = fmul float %89, -5.000000e-01, !dbg !44
  %98 = fmul float %96, %96, !dbg !45
  %99 = fmul float %98, %96, !dbg !46
  %100 = fmul float %97, %99, !dbg !47
  %101 = fmul float %100, 0x3F30000000000000, !dbg !48
  %102 = insertelement <2 x float> poison, float %101, i64 0, !dbg !49
  %103 = shufflevector <2 x float> %102, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %104 = insertelement <2 x float> poison, float %96, i64 0, !dbg !50
  %105 = shufflevector <2 x float> %104, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  br label %106, !dbg !51

106:                                              ; preds = %69, %106
  %indvars.iv13 = phi i64 [ 0, %69 ], [ %indvars.iv.next14, %106 ]
  %107 = or disjoint i64 %indvars.iv13, %23, !dbg !52
  %108 = trunc nuw nsw i64 %indvars.iv13 to i32, !dbg !53
  %109 = or i32 %20, %108, !dbg !53
  %110 = sext i32 %109 to i64, !dbg !54
  %111 = getelementptr half, ptr addrspace(1) %0, i64 %110, !dbg !54
  %112 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %111, i1 %15) #3, !dbg !55
  %113 = extractvalue { i32, i32 } %112, 0, !dbg !55
  %114 = bitcast i32 %113 to <2 x half>, !dbg !55
  %115 = extractvalue { i32, i32 } %112, 1, !dbg !55
  %116 = bitcast i32 %115 to <2 x half>, !dbg !55
  %117 = getelementptr half, ptr addrspace(1) %1, i64 %110, !dbg !56
  %118 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %117, i1 %15) #3, !dbg !57
  %119 = extractvalue { i32, i32 } %118, 0, !dbg !57
  %120 = bitcast i32 %119 to <2 x half>, !dbg !57
  %121 = extractvalue { i32, i32 } %118, 1, !dbg !57
  %122 = bitcast i32 %121 to <2 x half>, !dbg !57
  %123 = getelementptr half, ptr addrspace(1) %2, i64 %110, !dbg !58
  %124 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %123, i1 %15) #3, !dbg !59
  %125 = extractvalue { i32, i32 } %124, 0, !dbg !59
  %126 = bitcast i32 %125 to <2 x half>, !dbg !59
  %127 = extractvalue { i32, i32 } %124, 1, !dbg !59
  %128 = bitcast i32 %127 to <2 x half>, !dbg !59
  %129 = getelementptr half, ptr addrspace(1) %3, i64 %107, !dbg !60
  %130 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %129, i1 true) #3, !dbg !61
  %131 = bitcast i16 %130 to half, !dbg !61
  %132 = fpext half %131 to float, !dbg !62
  %133 = getelementptr half, ptr addrspace(1) %4, i64 %110, !dbg !63
  %134 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %133, i1 %15) #3, !dbg !64
  %135 = extractvalue { i32, i32 } %134, 0, !dbg !64
  %136 = bitcast i32 %135 to <2 x half>, !dbg !64
  %137 = extractvalue { i32, i32 } %134, 1, !dbg !64
  %138 = bitcast i32 %137 to <2 x half>, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %139 = bitcast float %132 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %21, <1 x i32> %139, i1 true) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %140 = fpext <2 x half> %114 to <2 x float>, !dbg !65
  %141 = fpext <2 x half> %120 to <2 x float>, !dbg !66
  %142 = fpext <2 x half> %126 to <2 x float>, !dbg !67
  %143 = fpext <2 x half> %136 to <2 x float>, !dbg !68
  %144 = fadd <2 x float> %141, %142, !dbg !69
  %145 = load <2 x float>, ptr addrspace(3) %22, align 16, !dbg !50
  %146 = fmul <2 x float> %144, %145, !dbg !70
  %147 = fmul <2 x float> %146, %105, !dbg !50
  %148 = fmul <2 x float> %143, splat (float 2.000000e+00), !dbg !71
  %149 = fmul <2 x float> %103, %148, !dbg !49
  %150 = fadd <2 x float> %149, %147, !dbg !72
  %151 = fadd <2 x float> %150, %140, !dbg !73
  %152 = fptrunc <2 x float> %151 to <2 x half>, !dbg !74
  %153 = fpext <2 x half> %116 to <2 x float>, !dbg !65
  %154 = fpext <2 x half> %122 to <2 x float>, !dbg !66
  %155 = fpext <2 x half> %128 to <2 x float>, !dbg !67
  %156 = fpext <2 x half> %138 to <2 x float>, !dbg !68
  %157 = fadd <2 x float> %154, %155, !dbg !69
  %158 = load <2 x float>, ptr addrspace(3) %24, align 8, !dbg !50
  %159 = fmul <2 x float> %157, %158, !dbg !70
  %160 = fmul <2 x float> %159, %105, !dbg !50
  %161 = fmul <2 x float> %156, splat (float 2.000000e+00), !dbg !71
  %162 = fmul <2 x float> %103, %161, !dbg !49
  %163 = fadd <2 x float> %162, %160, !dbg !72
  %164 = fadd <2 x float> %163, %153, !dbg !73
  %165 = fptrunc <2 x float> %164 to <2 x half>, !dbg !74
  %166 = bitcast <2 x half> %152 to i32, !dbg !74
  %167 = bitcast <2 x half> %165 to i32, !dbg !74
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %166, i32 %167, ptr addrspace(1) %111, i1 %15) #3, !dbg !74
  %indvars.iv.next14 = add nuw nsw i64 %indvars.iv13, 64, !dbg !51
  %168 = icmp samesign ult i64 %indvars.iv13, 4032, !dbg !51
  br i1 %168, label %106, label %169, !dbg !51

169:                                              ; preds = %106
  ret void, !dbg !75
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwurpsdpwva3f5frc5tvzo3fyhfiwqgisf52i24mru6cupi2tm3v.py", directory: "./local_cache/wu")
!4 = !{ptr @triton_red_fused__to_copy_add_div_mul_pow_sum_4, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_mul_pow_sum_4", linkageName: "triton_red_fused__to_copy_add_div_mul_pow_sum_4", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 29, column: 40, scope: !6)
!17 = !DILocation(line: 46, column: 50, scope: !6)
!18 = !DILocation(line: 30, column: 31, scope: !6)
!19 = !DILocation(line: 35, column: 41, scope: !6)
!20 = !DILocation(line: 35, column: 34, scope: !6)
!21 = !DILocation(line: 35, column: 51, scope: !6)
!22 = !DILocation(line: 36, column: 34, scope: !6)
!23 = !DILocation(line: 36, column: 51, scope: !6)
!24 = !DILocation(line: 37, column: 34, scope: !6)
!25 = !DILocation(line: 37, column: 41, scope: !6)
!26 = !DILocation(line: 37, column: 94, scope: !6)
!27 = !DILocation(line: 38, column: 34, scope: !6)
!28 = !DILocation(line: 38, column: 51, scope: !6)
!29 = !DILocation(line: 40, column: 22, scope: !6)
!30 = !DILocation(line: 35, column: 112, scope: !6)
!31 = !DILocation(line: 36, column: 112, scope: !6)
!32 = !DILocation(line: 38, column: 112, scope: !6)
!33 = !DILocation(line: 39, column: 22, scope: !6)
!34 = !DILocation(line: 43, column: 22, scope: !6)
!35 = !DILocation(line: 45, column: 25, scope: !6)
!36 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !40)
!37 = distinct !DILexicalBlockFile(scope: !39, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!39 = distinct !DILexicalBlockFile(scope: !6, file: !38, discriminator: 0)
!40 = !DILocation(line: 47, column: 27, scope: !6)
!41 = !DILocation(line: 286, column: 36, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 48, column: 31, scope: !6)
!43 = !DILocation(line: 48, column: 36, scope: !6)
!44 = !DILocation(line: 65, column: 24, scope: !6)
!45 = !DILocation(line: 66, column: 24, scope: !6)
!46 = !DILocation(line: 67, column: 24, scope: !6)
!47 = !DILocation(line: 68, column: 24, scope: !6)
!48 = !DILocation(line: 70, column: 24, scope: !6)
!49 = !DILocation(line: 74, column: 24, scope: !6)
!50 = !DILocation(line: 63, column: 24, scope: !6)
!51 = !DILocation(line: 49, column: 40, scope: !6)
!52 = !DILocation(line: 50, column: 31, scope: !6)
!53 = !DILocation(line: 55, column: 46, scope: !6)
!54 = !DILocation(line: 55, column: 39, scope: !6)
!55 = !DILocation(line: 55, column: 56, scope: !6)
!56 = !DILocation(line: 56, column: 35, scope: !6)
!57 = !DILocation(line: 56, column: 52, scope: !6)
!58 = !DILocation(line: 57, column: 35, scope: !6)
!59 = !DILocation(line: 57, column: 52, scope: !6)
!60 = !DILocation(line: 58, column: 35, scope: !6)
!61 = !DILocation(line: 58, column: 42, scope: !6)
!62 = !DILocation(line: 58, column: 95, scope: !6)
!63 = !DILocation(line: 59, column: 35, scope: !6)
!64 = !DILocation(line: 59, column: 52, scope: !6)
!65 = !DILocation(line: 55, column: 118, scope: !6)
!66 = !DILocation(line: 56, column: 114, scope: !6)
!67 = !DILocation(line: 57, column: 114, scope: !6)
!68 = !DILocation(line: 59, column: 114, scope: !6)
!69 = !DILocation(line: 60, column: 24, scope: !6)
!70 = !DILocation(line: 61, column: 24, scope: !6)
!71 = !DILocation(line: 73, column: 24, scope: !6)
!72 = !DILocation(line: 75, column: 24, scope: !6)
!73 = !DILocation(line: 77, column: 24, scope: !6)
!74 = !DILocation(line: 78, column: 56, scope: !6)
!75 = !DILocation(line: 49, column: 4, scope: !6)
