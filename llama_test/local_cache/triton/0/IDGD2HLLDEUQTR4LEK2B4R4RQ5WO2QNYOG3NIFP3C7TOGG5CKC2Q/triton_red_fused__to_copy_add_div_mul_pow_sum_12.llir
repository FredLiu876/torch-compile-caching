; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_red_fused__to_copy_add_div_mul_pow_sum_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = shl i32 %11, 4, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %14 = lshr i32 %13, 2, !dbg !11
  %15 = and i32 %14, 15, !dbg !11
  %16 = or disjoint i32 %15, %12, !dbg !12
  %17 = icmp slt i32 %16, %7, !dbg !13
  %18 = shl i32 %13, 1, !dbg !14
  %19 = and i32 %18, 6, !dbg !14
  %20 = shl i32 %16, 12, !dbg !15
  %invariant.op = or disjoint i32 %19, %20, !dbg !16
  %21 = zext nneg i32 %19 to i64, !dbg !16
  br label %22, !dbg !16

22:                                               ; preds = %10, %22
  %indvars.iv = phi i64 [ 0, %10 ], [ %indvars.iv.next, %22 ]
  %23 = phi float [ 0.000000e+00, %10 ], [ %73, %22 ]
  %24 = phi float [ 0.000000e+00, %10 ], [ %74, %22 ]
  %25 = or disjoint i64 %indvars.iv, %21, !dbg !17
  %26 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %26
  %27 = sext i32 %.reass to i64, !dbg !18
  %28 = getelementptr half, ptr addrspace(1) %1, i64 %27, !dbg !18
  %29 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %28, i1 %17) #2, !dbg !19
  %30 = bitcast i32 %29 to <2 x half>, !dbg !19
  %31 = extractelement <2 x half> %30, i64 0, !dbg !19
  %32 = extractelement <2 x half> %30, i64 1, !dbg !19
  %33 = fpext half %31 to float, !dbg !20
  %34 = fpext half %32 to float, !dbg !20
  %35 = getelementptr half, ptr addrspace(1) %2, i64 %27, !dbg !21
  %36 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %35, i1 %17) #2, !dbg !22
  %37 = bitcast i32 %36 to <2 x half>, !dbg !22
  %38 = extractelement <2 x half> %37, i64 0, !dbg !22
  %39 = extractelement <2 x half> %37, i64 1, !dbg !22
  %40 = fpext half %38 to float, !dbg !23
  %41 = fpext half %39 to float, !dbg !23
  %42 = getelementptr half, ptr addrspace(1) %3, i64 %25, !dbg !24
  %43 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %42, i1 true) #2, !dbg !25
  %44 = bitcast i32 %43 to <2 x half>, !dbg !25
  %45 = extractelement <2 x half> %44, i64 0, !dbg !25
  %46 = extractelement <2 x half> %44, i64 1, !dbg !25
  %47 = fpext half %45 to float, !dbg !26
  %48 = fpext half %46 to float, !dbg !26
  %49 = getelementptr half, ptr addrspace(1) %4, i64 %27, !dbg !27
  %50 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %49, i1 %17) #2, !dbg !28
  %51 = bitcast i32 %50 to <2 x half>, !dbg !28
  %52 = extractelement <2 x half> %51, i64 0, !dbg !28
  %53 = extractelement <2 x half> %51, i64 1, !dbg !28
  %54 = fpext half %52 to float, !dbg !29
  %55 = fpext half %53 to float, !dbg !29
  %56 = getelementptr half, ptr addrspace(1) %5, i64 %27, !dbg !30
  %57 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %56, i1 %17) #2, !dbg !31
  %58 = bitcast i32 %57 to <2 x half>, !dbg !31
  %59 = extractelement <2 x half> %58, i64 0, !dbg !31
  %60 = extractelement <2 x half> %58, i64 1, !dbg !31
  %61 = fpext half %59 to float, !dbg !32
  %62 = fpext half %60 to float, !dbg !32
  %63 = fadd float %33, %40, !dbg !33
  %64 = fadd float %34, %41, !dbg !33
  %65 = fmul float %63, %47, !dbg !34
  %66 = fmul float %64, %48, !dbg !34
  %67 = fadd float %54, %61, !dbg !35
  %68 = fadd float %55, %62, !dbg !35
  %69 = fmul float %65, %67, !dbg !36
  %70 = fmul float %66, %68, !dbg !36
  %71 = fadd float %23, %69, !dbg !37
  %72 = fadd float %24, %70, !dbg !37
  %73 = select i1 %17, float %71, float %23, !dbg !38
  %74 = select i1 %17, float %72, float %24, !dbg !38
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !16
  %75 = icmp samesign ult i64 %indvars.iv, 4088, !dbg !16
  br i1 %75, label %22, label %76, !dbg !16

76:                                               ; preds = %22
  %77 = fadd float %73, %74, !dbg !39
  %78 = bitcast float %77 to i32, !dbg !44
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 2, i32 31), !dbg !44
  %80 = bitcast i32 %79 to float, !dbg !44
  %81 = fadd float %77, %80, !dbg !39
  %82 = bitcast float %81 to i32, !dbg !44
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 1, i32 31), !dbg !44
  %84 = bitcast i32 %83 to float, !dbg !44
  %85 = fadd float %81, %84, !dbg !39
  %86 = sext i32 %16 to i64, !dbg !45
  %87 = getelementptr float, ptr addrspace(1) %6, i64 %86, !dbg !45
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %17) #2, !dbg !46
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %17) #2, !dbg !46
  %90 = bitcast i32 %89 to float, !dbg !46
  %91 = fmul float %85, -5.000000e-01, !dbg !47
  %92 = fmul float %90, %90, !dbg !48
  %93 = fmul float %92, %90, !dbg !49
  %94 = fmul float %91, %93, !dbg !50
  %95 = fmul float %94, 0x3F30000000000000, !dbg !51
  %96 = insertelement <2 x float> poison, float %90, i64 0, !dbg !52
  %97 = shufflevector <2 x float> %96, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %98 = insertelement <2 x float> poison, float %95, i64 0, !dbg !53
  %99 = shufflevector <2 x float> %98, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  br label %100, !dbg !54

100:                                              ; preds = %76, %100
  %indvars.iv5 = phi i64 [ 0, %76 ], [ %indvars.iv.next6, %100 ]
  %101 = or disjoint i64 %indvars.iv5, %21, !dbg !55
  %102 = trunc nuw nsw i64 %indvars.iv5 to i32
  %.reass3 = or i32 %invariant.op, %102
  %103 = sext i32 %.reass3 to i64, !dbg !56
  %104 = getelementptr half, ptr addrspace(1) %0, i64 %103, !dbg !56
  %105 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %104, i1 %17) #2, !dbg !57
  %106 = bitcast i32 %105 to <2 x half>, !dbg !57
  %107 = getelementptr half, ptr addrspace(1) %1, i64 %103, !dbg !58
  %108 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %107, i1 %17) #2, !dbg !59
  %109 = bitcast i32 %108 to <2 x half>, !dbg !59
  %110 = getelementptr half, ptr addrspace(1) %2, i64 %103, !dbg !60
  %111 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %110, i1 %17) #2, !dbg !61
  %112 = bitcast i32 %111 to <2 x half>, !dbg !61
  %113 = getelementptr half, ptr addrspace(1) %3, i64 %101, !dbg !62
  %114 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %113, i1 true) #2, !dbg !63
  %115 = bitcast i32 %114 to <2 x half>, !dbg !63
  %116 = getelementptr half, ptr addrspace(1) %4, i64 %103, !dbg !64
  %117 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %116, i1 %17) #2, !dbg !65
  %118 = bitcast i32 %117 to <2 x half>, !dbg !65
  %119 = getelementptr half, ptr addrspace(1) %5, i64 %103, !dbg !66
  %120 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %119, i1 %17) #2, !dbg !67
  %121 = bitcast i32 %120 to <2 x half>, !dbg !67
  %122 = fpext <2 x half> %106 to <2 x float>, !dbg !68
  %123 = fpext <2 x half> %109 to <2 x float>, !dbg !69
  %124 = fpext <2 x half> %112 to <2 x float>, !dbg !70
  %125 = fpext <2 x half> %115 to <2 x float>, !dbg !71
  %126 = fpext <2 x half> %118 to <2 x float>, !dbg !72
  %127 = fpext <2 x half> %121 to <2 x float>, !dbg !73
  %128 = fadd <2 x float> %123, %124, !dbg !74
  %129 = fmul <2 x float> %128, %125, !dbg !75
  %130 = fmul <2 x float> %129, %97, !dbg !52
  %131 = fadd <2 x float> %126, %127, !dbg !76
  %132 = fmul <2 x float> %131, splat (float 2.000000e+00), !dbg !77
  %133 = fmul <2 x float> %99, %132, !dbg !53
  %134 = fadd <2 x float> %130, %133, !dbg !78
  %135 = fadd <2 x float> %134, %122, !dbg !79
  %136 = fptrunc <2 x float> %135 to <2 x half>, !dbg !80
  %137 = bitcast <2 x half> %136 to i32, !dbg !80
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %137, ptr addrspace(1) %104, i1 %17) #2, !dbg !80
  %indvars.iv.next6 = add nuw nsw i64 %indvars.iv5, 8, !dbg !54
  %138 = icmp samesign ult i64 %indvars.iv5, 4088, !dbg !54
  br i1 %138, label %100, label %139, !dbg !54

139:                                              ; preds = %100
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "choyh3jijtvaaoyhoyvky737oi4kgipbhuu3mersun2kig4kgcax.py", directory: "./local_cache/ho")
!4 = !{ptr @triton_red_fused__to_copy_add_div_mul_pow_sum_12, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_mul_pow_sum_12", linkageName: "triton_red_fused__to_copy_add_div_mul_pow_sum_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 29, column: 40, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 35, column: 34, scope: !6)
!19 = !DILocation(line: 35, column: 51, scope: !6)
!20 = !DILocation(line: 35, column: 112, scope: !6)
!21 = !DILocation(line: 36, column: 34, scope: !6)
!22 = !DILocation(line: 36, column: 51, scope: !6)
!23 = !DILocation(line: 36, column: 112, scope: !6)
!24 = !DILocation(line: 37, column: 34, scope: !6)
!25 = !DILocation(line: 37, column: 41, scope: !6)
!26 = !DILocation(line: 37, column: 94, scope: !6)
!27 = !DILocation(line: 38, column: 34, scope: !6)
!28 = !DILocation(line: 38, column: 51, scope: !6)
!29 = !DILocation(line: 38, column: 112, scope: !6)
!30 = !DILocation(line: 39, column: 34, scope: !6)
!31 = !DILocation(line: 39, column: 51, scope: !6)
!32 = !DILocation(line: 39, column: 112, scope: !6)
!33 = !DILocation(line: 40, column: 22, scope: !6)
!34 = !DILocation(line: 41, column: 22, scope: !6)
!35 = !DILocation(line: 43, column: 22, scope: !6)
!36 = !DILocation(line: 45, column: 23, scope: !6)
!37 = !DILocation(line: 47, column: 25, scope: !6)
!38 = !DILocation(line: 48, column: 50, scope: !6)
!39 = !DILocation(line: 256, column: 15, scope: !40, inlinedAt: !43)
!40 = distinct !DILexicalBlockFile(scope: !42, file: !41, discriminator: 0)
!41 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!42 = distinct !DILexicalBlockFile(scope: !6, file: !41, discriminator: 0)
!43 = !DILocation(line: 49, column: 27, scope: !6)
!44 = !DILocation(line: 286, column: 36, scope: !42, inlinedAt: !43)
!45 = !DILocation(line: 50, column: 31, scope: !6)
!46 = !DILocation(line: 50, column: 36, scope: !6)
!47 = !DILocation(line: 68, column: 24, scope: !6)
!48 = !DILocation(line: 69, column: 24, scope: !6)
!49 = !DILocation(line: 70, column: 24, scope: !6)
!50 = !DILocation(line: 71, column: 24, scope: !6)
!51 = !DILocation(line: 73, column: 24, scope: !6)
!52 = !DILocation(line: 66, column: 24, scope: !6)
!53 = !DILocation(line: 78, column: 24, scope: !6)
!54 = !DILocation(line: 51, column: 40, scope: !6)
!55 = !DILocation(line: 52, column: 31, scope: !6)
!56 = !DILocation(line: 57, column: 39, scope: !6)
!57 = !DILocation(line: 57, column: 56, scope: !6)
!58 = !DILocation(line: 58, column: 35, scope: !6)
!59 = !DILocation(line: 58, column: 52, scope: !6)
!60 = !DILocation(line: 59, column: 35, scope: !6)
!61 = !DILocation(line: 59, column: 52, scope: !6)
!62 = !DILocation(line: 60, column: 35, scope: !6)
!63 = !DILocation(line: 60, column: 42, scope: !6)
!64 = !DILocation(line: 61, column: 35, scope: !6)
!65 = !DILocation(line: 61, column: 52, scope: !6)
!66 = !DILocation(line: 62, column: 35, scope: !6)
!67 = !DILocation(line: 62, column: 52, scope: !6)
!68 = !DILocation(line: 57, column: 118, scope: !6)
!69 = !DILocation(line: 58, column: 114, scope: !6)
!70 = !DILocation(line: 59, column: 114, scope: !6)
!71 = !DILocation(line: 60, column: 95, scope: !6)
!72 = !DILocation(line: 61, column: 114, scope: !6)
!73 = !DILocation(line: 62, column: 114, scope: !6)
!74 = !DILocation(line: 63, column: 24, scope: !6)
!75 = !DILocation(line: 64, column: 24, scope: !6)
!76 = !DILocation(line: 74, column: 24, scope: !6)
!77 = !DILocation(line: 77, column: 24, scope: !6)
!78 = !DILocation(line: 79, column: 24, scope: !6)
!79 = !DILocation(line: 81, column: 24, scope: !6)
!80 = !DILocation(line: 82, column: 56, scope: !6)
!81 = !DILocation(line: 51, column: 4, scope: !6)
