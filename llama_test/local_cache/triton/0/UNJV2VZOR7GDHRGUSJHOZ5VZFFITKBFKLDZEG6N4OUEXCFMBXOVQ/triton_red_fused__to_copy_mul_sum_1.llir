; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_mul_sum_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 3, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = shl i32 %10, 1, !dbg !11
  %12 = and i32 %11, 6, !dbg !11
  %13 = or disjoint i32 %12, %9, !dbg !12
  %14 = lshr i32 %10, 2, !dbg !13
  %15 = and i32 %14, 15, !dbg !13
  %16 = icmp sgt i32 %5, 0, !dbg !14
  br i1 %16, label %.lr.ph, label %._crit_edge, !dbg !14

.lr.ph:                                           ; preds = %7, %.lr.ph
  %17 = phi float [ %50, %.lr.ph ], [ 0.000000e+00, %7 ]
  %18 = phi float [ %51, %.lr.ph ], [ 0.000000e+00, %7 ]
  %19 = phi i32 [ %52, %.lr.ph ], [ 0, %7 ]
  %20 = or disjoint i32 %19, %15, !dbg !15
  %21 = icmp slt i32 %20, %5, !dbg !16
  %22 = shl i32 %20, 12, !dbg !17
  %23 = add i32 %13, %22, !dbg !18
  %24 = sext i32 %23 to i64, !dbg !19
  %25 = getelementptr half, ptr addrspace(1) %0, i64 %24, !dbg !19
  %26 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %25, i1 %21) #3, !dbg !20
  %27 = bitcast i32 %26 to <2 x half>, !dbg !20
  %28 = extractelement <2 x half> %27, i64 0, !dbg !20
  %29 = extractelement <2 x half> %27, i64 1, !dbg !20
  %30 = fpext half %28 to float, !dbg !21
  %31 = fpext half %29 to float, !dbg !21
  %32 = getelementptr half, ptr addrspace(1) %1, i64 %24, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 %21) #3, !dbg !23
  %34 = bitcast i32 %33 to <2 x half>, !dbg !23
  %35 = extractelement <2 x half> %34, i64 0, !dbg !23
  %36 = extractelement <2 x half> %34, i64 1, !dbg !23
  %37 = fpext half %35 to float, !dbg !24
  %38 = fpext half %36 to float, !dbg !24
  %39 = sext i32 %20 to i64, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !25
  %41 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %40, i1 %21) #3, !dbg !26
  %42 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %40, i1 %21) #3, !dbg !26
  %43 = bitcast i32 %42 to float, !dbg !26
  %44 = fmul float %37, %43, !dbg !27
  %45 = fmul float %38, %43, !dbg !27
  %46 = fmul float %44, %30, !dbg !28
  %47 = fmul float %45, %31, !dbg !28
  %48 = fadd float %17, %46, !dbg !29
  %49 = fadd float %18, %47, !dbg !29
  %50 = select i1 %21, float %48, float %17, !dbg !30
  %51 = select i1 %21, float %49, float %18, !dbg !30
  %52 = add i32 %19, 16, !dbg !14
  %53 = icmp slt i32 %52, %5, !dbg !14
  br i1 %53, label %.lr.ph, label %._crit_edge, !dbg !14

._crit_edge:                                      ; preds = %.lr.ph, %7
  %54 = phi float [ 0.000000e+00, %7 ], [ %50, %.lr.ph ]
  %55 = phi float [ 0.000000e+00, %7 ], [ %51, %.lr.ph ]
  %56 = lshr i32 %10, 5, !dbg !13
  %57 = and i32 %10, 28, !dbg !11
  %58 = and i32 %10, 7, !dbg !11
  %59 = or disjoint i32 %9, %58, !dbg !12
  %60 = bitcast float %54 to i32, !dbg !31
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 16, i32 31), !dbg !31
  %62 = bitcast i32 %61 to float, !dbg !31
  %63 = fadd float %54, %62, !dbg !35
  %64 = bitcast float %63 to i32, !dbg !31
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 8, i32 31), !dbg !31
  %66 = bitcast i32 %65 to float, !dbg !31
  %67 = fadd float %63, %66, !dbg !35
  %68 = bitcast float %67 to i32, !dbg !31
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 4, i32 31), !dbg !31
  %70 = bitcast i32 %69 to float, !dbg !31
  %71 = fadd float %67, %70, !dbg !35
  %72 = bitcast float %55 to i32, !dbg !31
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 16, i32 31), !dbg !31
  %74 = bitcast i32 %73 to float, !dbg !31
  %75 = fadd float %55, %74, !dbg !35
  %76 = bitcast float %75 to i32, !dbg !31
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 8, i32 31), !dbg !31
  %78 = bitcast i32 %77 to float, !dbg !31
  %79 = fadd float %75, %78, !dbg !35
  %80 = bitcast float %79 to i32, !dbg !31
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 4, i32 31), !dbg !31
  %82 = bitcast i32 %81 to float, !dbg !31
  %83 = fadd float %79, %82, !dbg !35
  %84 = and i32 %56, 1, !dbg !31
  %85 = icmp eq i32 %57, 0, !dbg !31
  %86 = shl nuw nsw i32 %12, 1, !dbg !31
  %87 = or disjoint i32 %86, %84, !dbg !31
  %88 = getelementptr float, ptr addrspace(3) @global_smem, i32 %87, !dbg !31
  %89 = bitcast float %71 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 %85) #3, !dbg !31
  %90 = or disjoint i32 %86, 2, !dbg !31
  %91 = or disjoint i32 %90, %84, !dbg !31
  %92 = getelementptr float, ptr addrspace(3) @global_smem, i32 %91, !dbg !31
  %93 = bitcast float %83 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 %85) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %94 = icmp slt i32 %10, 16, !dbg !31
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !31
  %96 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %95, i1 %94) #3, !dbg !31
  %97 = bitcast i32 %96 to float, !dbg !31
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 1, i32 31), !dbg !31
  %99 = bitcast i32 %98 to float, !dbg !31
  %100 = fadd float %97, %99, !dbg !35
  %101 = and i32 %10, 1, !dbg !31
  %102 = icmp eq i32 %101, 0, !dbg !31
  %103 = and i1 %94, %102, !dbg !31
  %104 = bitcast float %100 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %104, i1 %103) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i32 %86, !dbg !31
  %106 = load i32, ptr addrspace(3) %105, align 16, !dbg !31
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i32 %90, !dbg !31
  %108 = load i32, ptr addrspace(3) %107, align 8, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %109 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %12, !dbg !37
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %109, i32 %106, i32 %108, i1 true) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %110 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %58, !dbg !37
  %111 = load float, ptr addrspace(3) %110, align 4, !dbg !37
  %112 = sext i32 %59 to i64, !dbg !38
  %113 = getelementptr half, ptr addrspace(1) %3, i64 %112, !dbg !38
  %114 = fptrunc float %111 to half, !dbg !37
  %115 = and i32 %10, 56, !dbg !37
  %116 = icmp eq i32 %115, 0, !dbg !37
  %117 = bitcast half %114 to i16, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %117, ptr addrspace(1) %113, i1 %116) #3, !dbg !37
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3jfs7i2n4ghyv7a6upiokqmiavouth3wwa2rl3crrbt2daxwgbc.py", directory: "./local_cache/3j")
!4 = !{ptr @triton_red_fused__to_copy_mul_sum_1, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_mul_sum_1", linkageName: "triton_red_fused__to_copy_mul_sum_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 37, scope: !6)
!14 = !DILocation(line: 29, column: 40, scope: !6)
!15 = !DILocation(line: 30, column: 31, scope: !6)
!16 = !DILocation(line: 31, column: 29, scope: !6)
!17 = !DILocation(line: 35, column: 44, scope: !6)
!18 = !DILocation(line: 35, column: 39, scope: !6)
!19 = !DILocation(line: 35, column: 34, scope: !6)
!20 = !DILocation(line: 35, column: 51, scope: !6)
!21 = !DILocation(line: 35, column: 105, scope: !6)
!22 = !DILocation(line: 36, column: 34, scope: !6)
!23 = !DILocation(line: 36, column: 51, scope: !6)
!24 = !DILocation(line: 36, column: 105, scope: !6)
!25 = !DILocation(line: 37, column: 34, scope: !6)
!26 = !DILocation(line: 37, column: 41, scope: !6)
!27 = !DILocation(line: 39, column: 22, scope: !6)
!28 = !DILocation(line: 41, column: 22, scope: !6)
!29 = !DILocation(line: 43, column: 23, scope: !6)
!30 = !DILocation(line: 44, column: 40, scope: !6)
!31 = !DILocation(line: 286, column: 36, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !6, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!34 = !DILocation(line: 45, column: 25, scope: !6)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !34)
!36 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!37 = !DILocation(line: 46, column: 36, scope: !6)
!38 = !DILocation(line: 46, column: 25, scope: !6)
!39 = !DILocation(line: 46, column: 4, scope: !6)
