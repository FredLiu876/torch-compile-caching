; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [73 x i8] c"./local_cache/as/casz3ep5dxrodxni63f6fnstjrnur6lm6uexbggylreroa3mnfgf.py\00"
@assertMessage_0 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp4 < 128256\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !10 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %11 = shl i32 %10, 4, !dbg !12
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %13 = lshr i32 %12, 4, !dbg !13
  %14 = and i32 %13, 15, !dbg !13
  %15 = lshr i32 %12, 6, !dbg !13
  %16 = and i32 %15, 3, !dbg !13
  %17 = and i32 %12, 15, !dbg !13
  %18 = or disjoint i32 %14, %11, !dbg !14
  %19 = or disjoint i32 %11, %17, !dbg !14
  %20 = icmp slt i32 %18, %6, !dbg !15
  %21 = icmp slt i32 %19, %6, !dbg !15
  %22 = shl i32 %12, 2, !dbg !16
  %23 = and i32 %22, 60, !dbg !16
  %24 = sext i32 %18 to i64, !dbg !17
  %25 = getelementptr i64, ptr addrspace(1) %1, i64 %24, !dbg !17
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 %20) #6, !dbg !18
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 %20) #6, !dbg !18
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 %20) #6, !dbg !18
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 %20) #6, !dbg !18
  %30 = or disjoint i32 %16, %11, !dbg !14
  %31 = or disjoint i32 %30, 4, !dbg !14
  %32 = or disjoint i32 %30, 8, !dbg !14
  %33 = or disjoint i32 %30, 12, !dbg !14
  %34 = insertelement <4 x i32> poison, i32 %30, i64 0, !dbg !15
  %35 = insertelement <4 x i32> %34, i32 %31, i64 1, !dbg !15
  %36 = insertelement <4 x i32> %35, i32 %32, i64 2, !dbg !15
  %37 = insertelement <4 x i32> %36, i32 %33, i64 3, !dbg !15
  %38 = insertelement <4 x i32> poison, i32 %6, i64 0, !dbg !15
  %39 = shufflevector <4 x i32> %38, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !15
  %40 = icmp slt <4 x i32> %37, %39, !dbg !15
  %41 = sext i32 %30 to i64, !dbg !17
  %42 = getelementptr i64, ptr addrspace(1) %1, i64 %41, !dbg !17
  %43 = sext i32 %31 to i64, !dbg !17
  %44 = getelementptr i64, ptr addrspace(1) %1, i64 %43, !dbg !17
  %45 = sext i32 %32 to i64, !dbg !17
  %46 = getelementptr i64, ptr addrspace(1) %1, i64 %45, !dbg !17
  %47 = sext i32 %33 to i64, !dbg !17
  %48 = getelementptr i64, ptr addrspace(1) %1, i64 %47, !dbg !17
  %49 = extractelement <4 x i1> %40, i64 0, !dbg !18
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %42, i1 %49) #6, !dbg !18
  %51 = extractelement <4 x i1> %40, i64 1, !dbg !18
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %51) #6, !dbg !18
  %53 = extractelement <4 x i1> %40, i64 2, !dbg !18
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 %53) #6, !dbg !18
  %55 = extractelement <4 x i1> %40, i64 3, !dbg !18
  %56 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 %55) #6, !dbg !18
  %57 = insertelement <4 x i64> poison, i64 %50, i64 0, !dbg !19
  %58 = insertelement <4 x i64> %57, i64 %52, i64 1, !dbg !19
  %59 = insertelement <4 x i64> %58, i64 %54, i64 2, !dbg !19
  %60 = insertelement <4 x i64> %59, i64 %56, i64 3, !dbg !19
  %61 = add <4 x i64> %60, splat (i64 128256), !dbg !19
  %62 = icmp slt <4 x i64> %60, zeroinitializer, !dbg !20
  %63 = select <4 x i1> %62, <4 x i64> %61, <4 x i64> %60, !dbg !21
  %64 = icmp ugt <4 x i64> %63, splat (i64 128255), !dbg !22
  %65 = and <4 x i1> %40, %64, !dbg !23
  %66 = shl i32 %18, 12, !dbg !24
  %67 = bitcast <4 x i1> %65 to i4
  %.not = icmp eq i4 %67, 0
  %invariant.op = or disjoint i32 %23, %66, !dbg !25
  br i1 %.not, label %.split.preheader, label %109, !dbg !26

.split.preheader:                                 ; preds = %9
  %68 = icmp slt i64 %29, 0, !dbg !20
  %69 = shl i64 %29, 12, !dbg !27
  %70 = add i64 %69, 525336576, !dbg !27
  %71 = select i1 %68, i64 %70, i64 %69, !dbg !27
  %72 = zext nneg i32 %23 to i64, !dbg !25
  %73 = or disjoint i64 %71, %72
  br label %.split, !dbg !25

.split:                                           ; preds = %.split.preheader, %.split
  %indvars.iv = phi i64 [ 0, %.split.preheader ], [ %indvars.iv.next, %.split ]
  %74 = phi float [ 0.000000e+00, %.split.preheader ], [ %101, %.split ]
  %75 = phi float [ 0.000000e+00, %.split.preheader ], [ %102, %.split ]
  %76 = phi float [ 0.000000e+00, %.split.preheader ], [ %103, %.split ]
  %77 = phi float [ 0.000000e+00, %.split.preheader ], [ %104, %.split ]
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %78 = or i64 %73, %indvars.iv, !dbg !28
  %79 = getelementptr half, ptr addrspace(1) %2, i64 %78, !dbg !29
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %79, i1 %20) #6, !dbg !30
  %81 = extractvalue { i32, i32 } %80, 0, !dbg !30
  %82 = bitcast i32 %81 to <2 x half>, !dbg !30
  %83 = extractvalue { i32, i32 } %80, 1, !dbg !30
  %84 = bitcast i32 %83 to <2 x half>, !dbg !30
  %85 = extractelement <2 x half> %82, i64 0, !dbg !30
  %86 = extractelement <2 x half> %82, i64 1, !dbg !30
  %87 = extractelement <2 x half> %84, i64 0, !dbg !30
  %88 = extractelement <2 x half> %84, i64 1, !dbg !30
  %89 = fpext half %85 to float, !dbg !31
  %90 = fpext half %86 to float, !dbg !31
  %91 = fpext half %87 to float, !dbg !31
  %92 = fpext half %88 to float, !dbg !31
  %93 = fmul float %89, %89, !dbg !32
  %94 = fmul float %90, %90, !dbg !32
  %95 = fmul float %91, %91, !dbg !32
  %96 = fmul float %92, %92, !dbg !32
  %97 = fadd float %74, %93, !dbg !33
  %98 = fadd float %75, %94, !dbg !33
  %99 = fadd float %76, %95, !dbg !33
  %100 = fadd float %77, %96, !dbg !33
  %101 = select i1 %20, float %97, float %74, !dbg !34
  %102 = select i1 %20, float %98, float %75, !dbg !34
  %103 = select i1 %20, float %99, float %76, !dbg !34
  %104 = select i1 %20, float %100, float %77, !dbg !34
  %105 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %105
  %106 = sext i32 %.reass to i64, !dbg !35
  %107 = getelementptr half, ptr addrspace(1) %4, i64 %106, !dbg !35
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %81, i32 %83, ptr addrspace(1) %107, i1 %20) #6, !dbg !36
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !25
  %108 = icmp samesign ult i64 %indvars.iv, 4032, !dbg !25
  br i1 %108, label %.split, label %110, !dbg !25

109:                                              ; preds = %9
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !26
  unreachable, !dbg !26

110:                                              ; preds = %.split
  %111 = fadd float %101, %102, !dbg !37
  %112 = fadd float %103, %111, !dbg !37
  %113 = fadd float %104, %112, !dbg !37
  %114 = bitcast float %113 to i32, !dbg !42
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 8, i32 31), !dbg !42
  %116 = bitcast i32 %115 to float, !dbg !42
  %117 = fadd float %113, %116, !dbg !37
  %118 = bitcast float %117 to i32, !dbg !42
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 4, i32 31), !dbg !42
  %120 = bitcast i32 %119 to float, !dbg !42
  %121 = fadd float %117, %120, !dbg !37
  %122 = bitcast float %121 to i32, !dbg !42
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 2, i32 31), !dbg !42
  %124 = bitcast i32 %123 to float, !dbg !42
  %125 = fadd float %121, %124, !dbg !37
  %126 = bitcast float %125 to i32, !dbg !42
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 1, i32 31), !dbg !42
  %128 = bitcast i32 %127 to float, !dbg !42
  %129 = fadd float %125, %128, !dbg !37
  %130 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %14, !dbg !43
  %131 = bitcast float %129 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 true) #6, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %132 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %17, !dbg !43
  %133 = load float, ptr addrspace(3) %132, align 4, !dbg !43
  %134 = tail call float @llvm.nvvm.div.full(float %133, float 4.096000e+03), !dbg !44
  %135 = tail call float @llvm.nvvm.div.full(float %129, float 4.096000e+03), !dbg !44
  %136 = fadd float %134, 0x3EE4F8B580000000, !dbg !45
  %137 = fadd float %135, 0x3EE4F8B580000000, !dbg !45
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %.not.i = icmp eq i32 %138, 0, !dbg !43
  br i1 %.not.i, label %141, label %139, !dbg !43

139:                                              ; preds = %110
  %140 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %136), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

141:                                              ; preds = %110
  %142 = tail call float @llvm.nvvm.rsqrt.approx.f(float %136), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

__nv_rsqrtf.exit:                                 ; preds = %139, %141
  %.0.i = phi float [ %140, %139 ], [ %142, %141 ], !dbg !43
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %.not.i18 = icmp eq i32 %146, 0, !dbg !43
  br i1 %.not.i18, label %149, label %147, !dbg !43

147:                                              ; preds = %__nv_rsqrtf.exit
  %148 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %137), !dbg !43
  br label %__nv_rsqrtf.exit20, !dbg !43

149:                                              ; preds = %__nv_rsqrtf.exit
  %150 = tail call float @llvm.nvvm.rsqrt.approx.f(float %137), !dbg !43
  br label %__nv_rsqrtf.exit20, !dbg !43

__nv_rsqrtf.exit20:                               ; preds = %147, %149
  %.0.i19 = phi float [ %148, %147 ], [ %150, %149 ], !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %151 = sext i32 %19 to i64, !dbg !47
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !47
  %153 = and i32 %12, 240, !dbg !48
  %154 = icmp eq i32 %153, 0, !dbg !48
  %155 = bitcast float %.0.i to i32, !dbg !48
  %156 = and i1 %154, %21, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %155, ptr addrspace(1) %152, i1 %156) #6, !dbg !48
  %157 = insertelement <2 x float> poison, float %.0.i19, i64 0, !dbg !49
  %158 = shufflevector <2 x float> %157, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  br label %159, !dbg !50

159:                                              ; preds = %__nv_rsqrtf.exit20, %159
  %indvars.iv27 = phi i64 [ 0, %__nv_rsqrtf.exit20 ], [ %indvars.iv.next28, %159 ]
  %160 = or disjoint i64 %indvars.iv27, %72, !dbg !51
  %161 = getelementptr half, ptr addrspace(1) %3, i64 %160, !dbg !52
  %162 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %161, i1 true) #6, !dbg !53
  %163 = extractvalue { i32, i32 } %162, 0, !dbg !53
  %164 = bitcast i32 %163 to <2 x half>, !dbg !53
  %165 = extractvalue { i32, i32 } %162, 1, !dbg !53
  %166 = bitcast i32 %165 to <2 x half>, !dbg !53
  %167 = trunc nuw nsw i64 %indvars.iv27 to i32
  %.reass23 = or i32 %invariant.op, %167
  %168 = sext i32 %.reass23 to i64, !dbg !54
  %169 = getelementptr half, ptr addrspace(1) %4, i64 %168, !dbg !54
  %170 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %169, i1 %20) #6, !dbg !55
  %171 = extractvalue { i32, i32 } %170, 0, !dbg !55
  %172 = bitcast i32 %171 to <2 x half>, !dbg !55
  %173 = extractvalue { i32, i32 } %170, 1, !dbg !55
  %174 = bitcast i32 %173 to <2 x half>, !dbg !55
  %175 = getelementptr half, ptr addrspace(1) %5, i64 %168, !dbg !56
  %176 = fpext <2 x half> %164 to <2 x float>, !dbg !57
  %177 = fpext <2 x half> %172 to <2 x float>, !dbg !58
  %178 = fmul <2 x float> %158, %177, !dbg !49
  %179 = fmul <2 x float> %178, %176, !dbg !59
  %180 = fptrunc <2 x float> %179 to <2 x half>, !dbg !60
  %181 = fpext <2 x half> %166 to <2 x float>, !dbg !57
  %182 = fpext <2 x half> %174 to <2 x float>, !dbg !58
  %183 = fmul <2 x float> %158, %182, !dbg !49
  %184 = fmul <2 x float> %183, %181, !dbg !59
  %185 = fptrunc <2 x float> %184 to <2 x half>, !dbg !60
  %186 = bitcast <2 x half> %180 to i32, !dbg !60
  %187 = bitcast <2 x half> %185 to i32, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %186, i32 %187, ptr addrspace(1) %175, i1 %20) #6, !dbg !60
  %indvars.iv.next28 = add nuw nsw i64 %indvars.iv27, 64, !dbg !50
  %188 = icmp samesign ult i64 %indvars.iv27, 4032, !dbg !50
  br i1 %188, label %159, label %189, !dbg !50

189:                                              ; preds = %159
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "casz3ep5dxrodxni63f6fnstjrnur6lm6uexbggylreroa3mnfgf.py", directory: "./local_cache/as")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 22, column: 28, scope: !10)
!12 = !DILocation(line: 22, column: 33, scope: !10)
!13 = !DILocation(line: 23, column: 44, scope: !10)
!14 = !DILocation(line: 23, column: 23, scope: !10)
!15 = !DILocation(line: 24, column: 21, scope: !10)
!16 = !DILocation(line: 25, column: 37, scope: !10)
!17 = !DILocation(line: 28, column: 30, scope: !10)
!18 = !DILocation(line: 28, column: 35, scope: !10)
!19 = !DILocation(line: 37, column: 22, scope: !10)
!20 = !DILocation(line: 38, column: 22, scope: !10)
!21 = !DILocation(line: 39, column: 36, scope: !10)
!22 = !DILocation(line: 40, column: 41, scope: !10)
!23 = !DILocation(line: 40, column: 59, scope: !10)
!24 = !DILocation(line: 47, column: 41, scope: !10)
!25 = !DILocation(line: 30, column: 40, scope: !10)
!26 = !DILocation(line: 40, column: 69, scope: !10)
!27 = !DILocation(line: 41, column: 46, scope: !10)
!28 = !DILocation(line: 41, column: 41, scope: !10)
!29 = !DILocation(line: 41, column: 34, scope: !10)
!30 = !DILocation(line: 41, column: 53, scope: !10)
!31 = !DILocation(line: 41, column: 115, scope: !10)
!32 = !DILocation(line: 43, column: 22, scope: !10)
!33 = !DILocation(line: 45, column: 25, scope: !10)
!34 = !DILocation(line: 46, column: 50, scope: !10)
!35 = !DILocation(line: 47, column: 29, scope: !10)
!36 = !DILocation(line: 47, column: 52, scope: !10)
!37 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !41)
!38 = distinct !DILexicalBlockFile(scope: !40, file: !39, discriminator: 0)
!39 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!40 = distinct !DILexicalBlockFile(scope: !10, file: !39, discriminator: 0)
!41 = !DILocation(line: 48, column: 27, scope: !10)
!42 = !DILocation(line: 286, column: 36, scope: !40, inlinedAt: !41)
!43 = !DILocation(line: 53, column: 28, scope: !10)
!44 = !DILocation(line: 50, column: 21, scope: !10)
!45 = !DILocation(line: 52, column: 20, scope: !10)
!46 = !DILocation(line: 54, column: 4, scope: !10)
!47 = !DILocation(line: 55, column: 28, scope: !10)
!48 = !DILocation(line: 55, column: 40, scope: !10)
!49 = !DILocation(line: 65, column: 24, scope: !10)
!50 = !DILocation(line: 56, column: 40, scope: !10)
!51 = !DILocation(line: 57, column: 31, scope: !10)
!52 = !DILocation(line: 62, column: 35, scope: !10)
!53 = !DILocation(line: 62, column: 42, scope: !10)
!54 = !DILocation(line: 63, column: 36, scope: !10)
!55 = !DILocation(line: 63, column: 53, scope: !10)
!56 = !DILocation(line: 68, column: 29, scope: !10)
!57 = !DILocation(line: 62, column: 95, scope: !10)
!58 = !DILocation(line: 63, column: 115, scope: !10)
!59 = !DILocation(line: 67, column: 24, scope: !10)
!60 = !DILocation(line: 68, column: 53, scope: !10)
!61 = !DILocation(line: 56, column: 4, scope: !10)
