; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 3, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = lshr i32 %11, 6, !dbg !11
  %13 = and i32 %12, 7, !dbg !11
  %14 = and i32 %11, 31, !dbg !11
  %15 = or disjoint i32 %13, %10, !dbg !12
  %16 = icmp slt i32 %15, %5, !dbg !13
  %17 = shl i32 %11, 3, !dbg !14
  %18 = and i32 %17, 504, !dbg !14
  %19 = shl i32 %15, 12, !dbg !15
  %20 = or disjoint i32 %19, %18
  %21 = insertelement <8 x i1> poison, i1 %16, i64 0, !dbg !16
  %22 = shufflevector <8 x i1> %21, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !16
  br label %23, !dbg !17

23:                                               ; preds = %8, %23
  %24 = phi i32 [ 0, %8 ], [ %72, %23 ]
  %25 = phi <8 x float> [ zeroinitializer, %8 ], [ %71, %23 ]
  %26 = or i32 %20, %24, !dbg !18
  %27 = sext i32 %26 to i64, !dbg !19
  %28 = getelementptr half, ptr addrspace(1) %1, i64 %27, !dbg !19
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %28, i1 %16) #5, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !20
  %31 = bitcast i32 %30 to <2 x half>, !dbg !20
  %32 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !20
  %33 = bitcast i32 %32 to <2 x half>, !dbg !20
  %34 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !20
  %35 = bitcast i32 %34 to <2 x half>, !dbg !20
  %36 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !20
  %37 = bitcast i32 %36 to <2 x half>, !dbg !20
  %38 = getelementptr half, ptr addrspace(1) %2, i64 %27, !dbg !21
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %38, i1 %16) #5, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !22
  %41 = bitcast i32 %40 to <2 x half>, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !22
  %43 = bitcast i32 %42 to <2 x half>, !dbg !22
  %44 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !22
  %45 = bitcast i32 %44 to <2 x half>, !dbg !22
  %46 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !22
  %47 = bitcast i32 %46 to <2 x half>, !dbg !22
  %48 = shufflevector <2 x half> %31, <2 x half> %33, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %49 = shufflevector <2 x half> %35, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %50 = shufflevector <8 x half> %48, <8 x half> %49, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !23
  %51 = shufflevector <2 x half> %35, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %52 = shufflevector <8 x half> %50, <8 x half> %51, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !23
  %53 = shufflevector <2 x half> %37, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %54 = shufflevector <8 x half> %52, <8 x half> %53, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !23
  %55 = shufflevector <2 x half> %37, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %56 = shufflevector <8 x half> %54, <8 x half> %55, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !23
  %57 = fpext <8 x half> %56 to <8 x float>, !dbg !23
  %58 = shufflevector <2 x half> %41, <2 x half> %43, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %59 = shufflevector <2 x half> %45, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %60 = shufflevector <8 x half> %58, <8 x half> %59, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !24
  %61 = shufflevector <2 x half> %45, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %62 = shufflevector <8 x half> %60, <8 x half> %61, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !24
  %63 = shufflevector <2 x half> %47, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %64 = shufflevector <8 x half> %62, <8 x half> %63, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !24
  %65 = shufflevector <2 x half> %47, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %66 = shufflevector <8 x half> %64, <8 x half> %65, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !24
  %67 = fpext <8 x half> %66 to <8 x float>, !dbg !24
  %68 = fadd <8 x float> %57, %67, !dbg !25
  %69 = fmul <8 x float> %68, %68, !dbg !26
  %70 = fadd <8 x float> %25, %69, !dbg !27
  %71 = select <8 x i1> %22, <8 x float> %70, <8 x float> %25, !dbg !16
  %72 = add nuw nsw i32 %24, 512, !dbg !17
  %73 = icmp samesign ult i32 %24, 3584, !dbg !17
  br i1 %73, label %23, label %74, !dbg !17

74:                                               ; preds = %23
  %75 = lshr i32 %11, 5, !dbg !11
  %76 = and i32 %11, 7, !dbg !11
  %77 = or disjoint i32 %10, %76, !dbg !12
  %78 = icmp slt i32 %77, %5, !dbg !13
  %79 = and i32 %11, 511, !dbg !14
  %shift = shufflevector <8 x float> %71, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %80 = fadd <8 x float> %71, %shift, !dbg !28
  %shift56 = shufflevector <8 x float> %71, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %81 = fadd <8 x float> %shift56, %80, !dbg !28
  %shift57 = shufflevector <8 x float> %71, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %82 = fadd <8 x float> %shift57, %81, !dbg !28
  %shift58 = shufflevector <8 x float> %71, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %83 = fadd <8 x float> %shift58, %82, !dbg !28
  %shift59 = shufflevector <8 x float> %71, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %84 = fadd <8 x float> %shift59, %83, !dbg !28
  %shift60 = shufflevector <8 x float> %71, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %85 = fadd <8 x float> %shift60, %84, !dbg !28
  %shift61 = shufflevector <8 x float> %71, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %86 = fadd <8 x float> %shift61, %85, !dbg !28
  %87 = extractelement <8 x float> %86, i64 0, !dbg !28
  %88 = bitcast float %87 to i32, !dbg !33
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 16, i32 31), !dbg !33
  %90 = bitcast i32 %89 to float, !dbg !33
  %91 = fadd float %87, %90, !dbg !28
  %92 = bitcast float %91 to i32, !dbg !33
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 8, i32 31), !dbg !33
  %94 = bitcast i32 %93 to float, !dbg !33
  %95 = fadd float %91, %94, !dbg !28
  %96 = bitcast float %95 to i32, !dbg !33
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 4, i32 31), !dbg !33
  %98 = bitcast i32 %97 to float, !dbg !33
  %99 = fadd float %95, %98, !dbg !28
  %100 = bitcast float %99 to i32, !dbg !33
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 2, i32 31), !dbg !33
  %102 = bitcast i32 %101 to float, !dbg !33
  %103 = fadd float %99, %102, !dbg !28
  %104 = bitcast float %103 to i32, !dbg !33
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 1, i32 31), !dbg !33
  %106 = bitcast i32 %105 to float, !dbg !33
  %107 = fadd float %103, %106, !dbg !28
  %108 = and i32 %75, 1, !dbg !33
  %109 = icmp eq i32 %14, 0, !dbg !33
  %110 = shl nuw nsw i32 %13, 1, !dbg !33
  %111 = or disjoint i32 %110, %108, !dbg !33
  %112 = getelementptr float, ptr addrspace(3) @global_smem, i32 %111, !dbg !33
  %113 = bitcast float %107 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 %109) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %114 = icmp slt i32 %11, 16, !dbg !33
  %115 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !33
  %116 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %115, i1 %114) #5, !dbg !33
  %117 = bitcast i32 %116 to float, !dbg !33
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 1, i32 31), !dbg !33
  %119 = bitcast i32 %118 to float, !dbg !33
  %120 = fadd float %117, %119, !dbg !28
  %121 = and i32 %11, 1, !dbg !33
  %122 = icmp eq i32 %121, 0, !dbg !33
  %123 = and i1 %114, %122, !dbg !33
  %124 = bitcast float %120 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %124, i1 %123) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %125 = getelementptr float, ptr addrspace(3) @global_smem, i32 %110, !dbg !33
  %126 = load float, ptr addrspace(3) %125, align 8, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %127 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %13, !dbg !34
  %128 = bitcast float %126 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %128, i1 true) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %129 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %76, !dbg !34
  %130 = load float, ptr addrspace(3) %129, align 4, !dbg !34
  %131 = tail call float @llvm.nvvm.div.full(float %130, float 4.096000e+03), !dbg !35
  %132 = tail call float @llvm.nvvm.div.full(float %126, float 4.096000e+03), !dbg !35
  %133 = fadd float %131, 0x3EE4F8B580000000, !dbg !36
  %134 = fadd float %132, 0x3EE4F8B580000000, !dbg !36
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %.not.i = icmp eq i32 %135, 0, !dbg !34
  br i1 %.not.i, label %138, label %136, !dbg !34

136:                                              ; preds = %74
  %137 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %133), !dbg !34
  br label %__nv_rsqrtf.exit, !dbg !34

138:                                              ; preds = %74
  %139 = tail call float @llvm.nvvm.rsqrt.approx.f(float %133), !dbg !34
  br label %__nv_rsqrtf.exit, !dbg !34

__nv_rsqrtf.exit:                                 ; preds = %136, %138
  %.0.i = phi float [ %137, %136 ], [ %139, %138 ], !dbg !34
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %.not.i32 = icmp eq i32 %147, 0, !dbg !34
  br i1 %.not.i32, label %150, label %148, !dbg !34

148:                                              ; preds = %__nv_rsqrtf.exit
  %149 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %134), !dbg !34
  br label %__nv_rsqrtf.exit34, !dbg !34

150:                                              ; preds = %__nv_rsqrtf.exit
  %151 = tail call float @llvm.nvvm.rsqrt.approx.f(float %134), !dbg !34
  br label %__nv_rsqrtf.exit34, !dbg !34

__nv_rsqrtf.exit34:                               ; preds = %148, %150
  %.0.i33 = phi float [ %149, %148 ], [ %151, %150 ], !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %152 = sext i32 %77 to i64, !dbg !38
  %153 = getelementptr float, ptr addrspace(1) %0, i64 %152, !dbg !38
  %154 = and i32 %11, 504, !dbg !39
  %155 = icmp eq i32 %154, 0, !dbg !39
  %156 = bitcast float %.0.i to i32, !dbg !39
  %157 = and i1 %155, %78, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %156, ptr addrspace(1) %153, i1 %157) #5, !dbg !39
  %158 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %79
  %159 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %18
  %160 = or disjoint i32 %18, 4
  %161 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %160
  %162 = zext nneg i32 %79 to i64, !dbg !40
  %163 = getelementptr inbounds nuw i8, ptr addrspace(3) %159, i32 8
  %164 = getelementptr inbounds nuw i8, ptr addrspace(3) %161, i32 8
  %165 = insertelement <2 x float> poison, float %.0.i33, i64 0, !dbg !41
  %166 = shufflevector <2 x float> %165, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !41
  br label %167, !dbg !40

167:                                              ; preds = %__nv_rsqrtf.exit34, %167
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit34 ], [ %indvars.iv.next, %167 ]
  %168 = or disjoint i64 %indvars.iv, %162, !dbg !42
  %169 = getelementptr half, ptr addrspace(1) %3, i64 %168, !dbg !43
  %170 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %169, i1 true) #5, !dbg !44
  %171 = bitcast i16 %170 to half, !dbg !44
  %172 = fpext half %171 to float, !dbg !45
  %173 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !46
  %174 = or i32 %20, %173, !dbg !46
  %175 = sext i32 %174 to i64, !dbg !47
  %176 = getelementptr half, ptr addrspace(1) %1, i64 %175, !dbg !47
  %177 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %176, i1 %16) #5, !dbg !48
  %178 = extractvalue { i32, i32, i32, i32 } %177, 0, !dbg !48
  %179 = bitcast i32 %178 to <2 x half>, !dbg !48
  %180 = extractvalue { i32, i32, i32, i32 } %177, 1, !dbg !48
  %181 = bitcast i32 %180 to <2 x half>, !dbg !48
  %182 = extractvalue { i32, i32, i32, i32 } %177, 2, !dbg !48
  %183 = bitcast i32 %182 to <2 x half>, !dbg !48
  %184 = extractvalue { i32, i32, i32, i32 } %177, 3, !dbg !48
  %185 = bitcast i32 %184 to <2 x half>, !dbg !48
  %186 = getelementptr half, ptr addrspace(1) %2, i64 %175, !dbg !49
  %187 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %186, i1 %16) #5, !dbg !50
  %188 = extractvalue { i32, i32, i32, i32 } %187, 0, !dbg !50
  %189 = bitcast i32 %188 to <2 x half>, !dbg !50
  %190 = extractvalue { i32, i32, i32, i32 } %187, 1, !dbg !50
  %191 = bitcast i32 %190 to <2 x half>, !dbg !50
  %192 = extractvalue { i32, i32, i32, i32 } %187, 2, !dbg !50
  %193 = bitcast i32 %192 to <2 x half>, !dbg !50
  %194 = extractvalue { i32, i32, i32, i32 } %187, 3, !dbg !50
  %195 = bitcast i32 %194 to <2 x half>, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %196 = bitcast float %172 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %196, i1 true) #5, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %197 = getelementptr half, ptr addrspace(1) %4, i64 %175, !dbg !52
  %198 = fpext <2 x half> %179 to <2 x float>, !dbg !53
  %199 = fpext <2 x half> %189 to <2 x float>, !dbg !54
  %200 = fadd <2 x float> %198, %199, !dbg !55
  %201 = fmul <2 x float> %166, %200, !dbg !41
  %202 = load <2 x float>, ptr addrspace(3) %159, align 16, !dbg !51
  %203 = fmul <2 x float> %202, %201, !dbg !51
  %204 = fptrunc <2 x float> %203 to <2 x half>, !dbg !56
  %205 = fpext <2 x half> %181 to <2 x float>, !dbg !53
  %206 = fpext <2 x half> %191 to <2 x float>, !dbg !54
  %207 = fadd <2 x float> %205, %206, !dbg !55
  %208 = fmul <2 x float> %166, %207, !dbg !41
  %209 = load <2 x float>, ptr addrspace(3) %163, align 8, !dbg !51
  %210 = fmul <2 x float> %209, %208, !dbg !51
  %211 = fptrunc <2 x float> %210 to <2 x half>, !dbg !56
  %212 = fpext <2 x half> %183 to <2 x float>, !dbg !53
  %213 = fpext <2 x half> %193 to <2 x float>, !dbg !54
  %214 = fadd <2 x float> %212, %213, !dbg !55
  %215 = fmul <2 x float> %166, %214, !dbg !41
  %216 = load <2 x float>, ptr addrspace(3) %161, align 16, !dbg !51
  %217 = fmul <2 x float> %216, %215, !dbg !51
  %218 = fptrunc <2 x float> %217 to <2 x half>, !dbg !56
  %219 = fpext <2 x half> %185 to <2 x float>, !dbg !53
  %220 = fpext <2 x half> %195 to <2 x float>, !dbg !54
  %221 = fadd <2 x float> %219, %220, !dbg !55
  %222 = fmul <2 x float> %166, %221, !dbg !41
  %223 = load <2 x float>, ptr addrspace(3) %164, align 8, !dbg !51
  %224 = fmul <2 x float> %223, %222, !dbg !51
  %225 = fptrunc <2 x float> %224 to <2 x half>, !dbg !56
  %226 = bitcast <2 x half> %204 to i32, !dbg !56
  %227 = bitcast <2 x half> %211 to i32, !dbg !56
  %228 = bitcast <2 x half> %218 to i32, !dbg !56
  %229 = bitcast <2 x half> %225 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %226, i32 %227, i32 %228, i32 %229, ptr addrspace(1) %197, i1 %16) #5, !dbg !56
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !40
  %230 = icmp samesign ult i64 %indvars.iv, 3584, !dbg !40
  br i1 %230, label %167, label %231, !dbg !40

231:                                              ; preds = %167
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py", directory: "./local_cache/5k")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 42, column: 48, scope: !6)
!17 = !DILocation(line: 29, column: 40, scope: !6)
!18 = !DILocation(line: 35, column: 41, scope: !6)
!19 = !DILocation(line: 35, column: 34, scope: !6)
!20 = !DILocation(line: 35, column: 51, scope: !6)
!21 = !DILocation(line: 36, column: 34, scope: !6)
!22 = !DILocation(line: 36, column: 51, scope: !6)
!23 = !DILocation(line: 35, column: 112, scope: !6)
!24 = !DILocation(line: 36, column: 112, scope: !6)
!25 = !DILocation(line: 37, column: 22, scope: !6)
!26 = !DILocation(line: 39, column: 22, scope: !6)
!27 = !DILocation(line: 41, column: 23, scope: !6)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !32)
!29 = distinct !DILexicalBlockFile(scope: !31, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!31 = distinct !DILexicalBlockFile(scope: !6, file: !30, discriminator: 0)
!32 = !DILocation(line: 43, column: 25, scope: !6)
!33 = !DILocation(line: 286, column: 36, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 48, column: 28, scope: !6)
!35 = !DILocation(line: 45, column: 19, scope: !6)
!36 = !DILocation(line: 47, column: 19, scope: !6)
!37 = !DILocation(line: 49, column: 4, scope: !6)
!38 = !DILocation(line: 50, column: 28, scope: !6)
!39 = !DILocation(line: 50, column: 40, scope: !6)
!40 = !DILocation(line: 51, column: 40, scope: !6)
!41 = !DILocation(line: 62, column: 24, scope: !6)
!42 = !DILocation(line: 52, column: 31, scope: !6)
!43 = !DILocation(line: 57, column: 35, scope: !6)
!44 = !DILocation(line: 57, column: 42, scope: !6)
!45 = !DILocation(line: 57, column: 95, scope: !6)
!46 = !DILocation(line: 58, column: 42, scope: !6)
!47 = !DILocation(line: 58, column: 35, scope: !6)
!48 = !DILocation(line: 58, column: 52, scope: !6)
!49 = !DILocation(line: 59, column: 35, scope: !6)
!50 = !DILocation(line: 59, column: 52, scope: !6)
!51 = !DILocation(line: 64, column: 24, scope: !6)
!52 = !DILocation(line: 65, column: 29, scope: !6)
!53 = !DILocation(line: 58, column: 114, scope: !6)
!54 = !DILocation(line: 59, column: 114, scope: !6)
!55 = !DILocation(line: 60, column: 24, scope: !6)
!56 = !DILocation(line: 65, column: 53, scope: !6)
!57 = !DILocation(line: 51, column: 4, scope: !6)
