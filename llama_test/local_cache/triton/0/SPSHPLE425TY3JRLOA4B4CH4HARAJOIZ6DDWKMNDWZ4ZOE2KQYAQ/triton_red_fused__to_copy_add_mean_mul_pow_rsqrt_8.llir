; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = shl i32 %10, 4, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = lshr i32 %12, 2, !dbg !11
  %14 = and i32 %13, 15, !dbg !11
  %15 = or disjoint i32 %14, %11, !dbg !12
  %16 = icmp slt i32 %15, %6, !dbg !13
  %17 = shl i32 %12, 1, !dbg !14
  %18 = and i32 %17, 6, !dbg !14
  %19 = shl i32 %15, 12, !dbg !15
  %20 = or disjoint i32 %19, %18
  br label %21, !dbg !16

21:                                               ; preds = %9, %21
  %22 = phi float [ 0.000000e+00, %9 ], [ %47, %21 ]
  %23 = phi float [ 0.000000e+00, %9 ], [ %48, %21 ]
  %24 = phi i32 [ 0, %9 ], [ %51, %21 ]
  %25 = or i32 %20, %24, !dbg !17
  %26 = sext i32 %25 to i64, !dbg !18
  %27 = getelementptr half, ptr addrspace(1) %2, i64 %26, !dbg !18
  %28 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %27, i1 %16) #5, !dbg !19
  %29 = bitcast i32 %28 to <2 x half>, !dbg !19
  %30 = getelementptr half, ptr addrspace(1) %3, i64 %26, !dbg !20
  %31 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %30, i1 %16) #5, !dbg !21
  %32 = bitcast i32 %31 to <2 x half>, !dbg !21
  %33 = getelementptr half, ptr addrspace(1) %0, i64 %26, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %33, i1 %16) #5, !dbg !23
  %35 = bitcast i32 %34 to <2 x half>, !dbg !23
  %36 = fpext <2 x half> %29 to <2 x float>, !dbg !24
  %37 = fpext <2 x half> %32 to <2 x float>, !dbg !25
  %38 = fpext <2 x half> %35 to <2 x float>, !dbg !26
  %39 = fadd <2 x float> %36, %37, !dbg !27
  %40 = fadd <2 x float> %39, %38, !dbg !28
  %41 = fmul <2 x float> %40, %40, !dbg !29
  %42 = extractelement <2 x float> %41, i64 0, !dbg !29
  %43 = fmul <2 x float> %40, %40, !dbg !29
  %44 = extractelement <2 x float> %43, i64 1, !dbg !29
  %45 = fadd float %22, %42, !dbg !30
  %46 = fadd float %23, %44, !dbg !30
  %47 = select i1 %16, float %45, float %22, !dbg !31
  %48 = select i1 %16, float %46, float %23, !dbg !31
  %49 = fptrunc <2 x float> %40 to <2 x half>, !dbg !32
  %50 = bitcast <2 x half> %49 to i32, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %50, ptr addrspace(1) %33, i1 %16) #5, !dbg !32
  %51 = add nuw nsw i32 %24, 8, !dbg !16
  %52 = icmp samesign ult i32 %24, 4088, !dbg !16
  br i1 %52, label %21, label %53, !dbg !16

53:                                               ; preds = %21
  %54 = and i32 %12, 15, !dbg !11
  %55 = or disjoint i32 %11, %54, !dbg !12
  %56 = icmp slt i32 %55, %6, !dbg !13
  %57 = fadd float %47, %48, !dbg !33
  %58 = bitcast float %57 to i32, !dbg !38
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 2, i32 31), !dbg !38
  %60 = bitcast i32 %59 to float, !dbg !38
  %61 = fadd float %57, %60, !dbg !33
  %62 = bitcast float %61 to i32, !dbg !38
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 1, i32 31), !dbg !38
  %64 = bitcast i32 %63 to float, !dbg !38
  %65 = fadd float %61, %64, !dbg !33
  %66 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %14, !dbg !39
  %67 = bitcast float %65 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 true) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %68 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %54, !dbg !39
  %69 = load float, ptr addrspace(3) %68, align 4, !dbg !39
  %70 = tail call float @llvm.nvvm.div.full(float %69, float 4.096000e+03), !dbg !40
  %71 = tail call float @llvm.nvvm.div.full(float %65, float 4.096000e+03), !dbg !40
  %72 = fadd float %70, 0x3EE4F8B580000000, !dbg !41
  %73 = fadd float %71, 0x3EE4F8B580000000, !dbg !41
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i = icmp eq i32 %74, 0, !dbg !39
  br i1 %.not.i, label %77, label %75, !dbg !39

75:                                               ; preds = %53
  %76 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %72), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

77:                                               ; preds = %53
  %78 = tail call float @llvm.nvvm.rsqrt.approx.f(float %72), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

__nv_rsqrtf.exit:                                 ; preds = %75, %77
  %.0.i = phi float [ %76, %75 ], [ %78, %77 ], !dbg !39
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i7 = icmp eq i32 %80, 0, !dbg !39
  br i1 %.not.i7, label %83, label %81, !dbg !39

81:                                               ; preds = %__nv_rsqrtf.exit
  %82 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %73), !dbg !39
  br label %__nv_rsqrtf.exit9, !dbg !39

83:                                               ; preds = %__nv_rsqrtf.exit
  %84 = tail call float @llvm.nvvm.rsqrt.approx.f(float %73), !dbg !39
  br label %__nv_rsqrtf.exit9, !dbg !39

__nv_rsqrtf.exit9:                                ; preds = %81, %83
  %.0.i8 = phi float [ %82, %81 ], [ %84, %83 ], !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %85 = sext i32 %55 to i64, !dbg !43
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %85, !dbg !43
  %87 = and i32 %12, 48, !dbg !44
  %88 = icmp eq i32 %87, 0, !dbg !44
  %89 = bitcast float %.0.i to i32, !dbg !44
  %90 = and i1 %88, %56, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %89, ptr addrspace(1) %86, i1 %90) #5, !dbg !44
  %91 = zext nneg i32 %18 to i64, !dbg !45
  %92 = insertelement <2 x float> poison, float %.0.i8, i64 0, !dbg !46
  %93 = shufflevector <2 x float> %92, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !46
  br label %94, !dbg !45

94:                                               ; preds = %__nv_rsqrtf.exit9, %94
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit9 ], [ %indvars.iv.next, %94 ]
  %95 = or disjoint i64 %indvars.iv, %91, !dbg !47
  %96 = getelementptr half, ptr addrspace(1) %4, i64 %95, !dbg !48
  %97 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %96, i1 true) #5, !dbg !49
  %98 = bitcast i32 %97 to <2 x half>, !dbg !49
  %99 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %20, %99
  %100 = sext i32 %.reass to i64, !dbg !50
  %101 = getelementptr half, ptr addrspace(1) %0, i64 %100, !dbg !50
  %102 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %101, i1 %16) #5, !dbg !51
  %103 = bitcast i32 %102 to <2 x half>, !dbg !51
  %104 = getelementptr half, ptr addrspace(1) %5, i64 %100, !dbg !52
  %105 = fpext <2 x half> %98 to <2 x float>, !dbg !53
  %106 = fpext <2 x half> %103 to <2 x float>, !dbg !54
  %107 = fmul <2 x float> %93, %106, !dbg !46
  %108 = fmul <2 x float> %107, %105, !dbg !55
  %109 = fptrunc <2 x float> %108 to <2 x half>, !dbg !56
  %110 = bitcast <2 x half> %109 to i32, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %110, ptr addrspace(1) %104, i1 %16) #5, !dbg !56
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !45
  %111 = icmp samesign ult i64 %indvars.iv, 4088, !dbg !45
  br i1 %111, label %94, label %112, !dbg !45

112:                                              ; preds = %94
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cg3n6hvtx4do75kalztgulpaqncj5atzscma6f3lugjffmi36kyt.py", directory: "./local_cache/g3")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 29, column: 40, scope: !6)
!17 = !DILocation(line: 35, column: 41, scope: !6)
!18 = !DILocation(line: 35, column: 34, scope: !6)
!19 = !DILocation(line: 35, column: 51, scope: !6)
!20 = !DILocation(line: 36, column: 34, scope: !6)
!21 = !DILocation(line: 36, column: 51, scope: !6)
!22 = !DILocation(line: 37, column: 38, scope: !6)
!23 = !DILocation(line: 37, column: 55, scope: !6)
!24 = !DILocation(line: 35, column: 113, scope: !6)
!25 = !DILocation(line: 36, column: 113, scope: !6)
!26 = !DILocation(line: 37, column: 117, scope: !6)
!27 = !DILocation(line: 38, column: 22, scope: !6)
!28 = !DILocation(line: 39, column: 22, scope: !6)
!29 = !DILocation(line: 41, column: 22, scope: !6)
!30 = !DILocation(line: 43, column: 23, scope: !6)
!31 = !DILocation(line: 44, column: 48, scope: !6)
!32 = !DILocation(line: 45, column: 55, scope: !6)
!33 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !37)
!34 = distinct !DILexicalBlockFile(scope: !36, file: !35, discriminator: 0)
!35 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!36 = distinct !DILexicalBlockFile(scope: !6, file: !35, discriminator: 0)
!37 = !DILocation(line: 46, column: 25, scope: !6)
!38 = !DILocation(line: 286, column: 36, scope: !36, inlinedAt: !37)
!39 = !DILocation(line: 51, column: 28, scope: !6)
!40 = !DILocation(line: 48, column: 20, scope: !6)
!41 = !DILocation(line: 50, column: 20, scope: !6)
!42 = !DILocation(line: 52, column: 4, scope: !6)
!43 = !DILocation(line: 53, column: 28, scope: !6)
!44 = !DILocation(line: 53, column: 40, scope: !6)
!45 = !DILocation(line: 54, column: 40, scope: !6)
!46 = !DILocation(line: 63, column: 24, scope: !6)
!47 = !DILocation(line: 55, column: 31, scope: !6)
!48 = !DILocation(line: 60, column: 35, scope: !6)
!49 = !DILocation(line: 60, column: 42, scope: !6)
!50 = !DILocation(line: 61, column: 39, scope: !6)
!51 = !DILocation(line: 61, column: 56, scope: !6)
!52 = !DILocation(line: 66, column: 29, scope: !6)
!53 = !DILocation(line: 60, column: 95, scope: !6)
!54 = !DILocation(line: 61, column: 118, scope: !6)
!55 = !DILocation(line: 65, column: 24, scope: !6)
!56 = !DILocation(line: 66, column: 53, scope: !6)
!57 = !DILocation(line: 54, column: 4, scope: !6)
