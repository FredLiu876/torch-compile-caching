; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 4, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = lshr i32 %11, 2, !dbg !11
  %13 = and i32 %12, 15, !dbg !11
  %14 = and i32 %11, 3, !dbg !11
  %15 = and i32 %11, 15, !dbg !11
  %16 = or disjoint i32 %13, %10, !dbg !12
  %17 = or disjoint i32 %10, %15, !dbg !12
  %18 = icmp slt i32 %16, %5, !dbg !13
  %.fr = freeze i1 %18
  %19 = icmp slt i32 %17, %5, !dbg !13
  %20 = shl i32 %16, 12, !dbg !14
  %21 = or disjoint i32 %20, %14
  br i1 %.fr, label %.split.us, label %.split

.split.us:                                        ; preds = %8, %.split.us
  %22 = phi float [ %36, %.split.us ], [ 0.000000e+00, %8 ]
  %23 = phi i32 [ %37, %.split.us ], [ 0, %8 ]
  %24 = or i32 %21, %23, !dbg !15
  %25 = sext i32 %24 to i64, !dbg !16
  %26 = getelementptr half, ptr addrspace(1) %1, i64 %25, !dbg !16
  %27 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %26, i1 true) #5, !dbg !17
  %28 = bitcast i16 %27 to half, !dbg !17
  %29 = fpext half %28 to float, !dbg !18
  %30 = getelementptr half, ptr addrspace(1) %2, i64 %25, !dbg !19
  %31 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %30, i1 true) #5, !dbg !20
  %32 = bitcast i16 %31 to half, !dbg !20
  %33 = fpext half %32 to float, !dbg !21
  %34 = fadd float %29, %33, !dbg !22
  %35 = fmul float %34, %34, !dbg !23
  %36 = fadd float %22, %35, !dbg !24
  %37 = add nuw nsw i32 %23, 4, !dbg !25
  %38 = icmp samesign ult i32 %23, 4092, !dbg !25
  br i1 %38, label %.split.us, label %.split7.us, !dbg !25

.split:                                           ; preds = %8, %.split
  %39 = phi i32 [ %46, %.split ], [ 0, %8 ]
  %40 = or i32 %21, %39, !dbg !15
  %41 = sext i32 %40 to i64, !dbg !16
  %42 = getelementptr half, ptr addrspace(1) %1, i64 %41, !dbg !16
  %43 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %42, i1 false) #5, !dbg !17
  %44 = getelementptr half, ptr addrspace(1) %2, i64 %41, !dbg !19
  %45 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %44, i1 false) #5, !dbg !20
  %46 = add nuw nsw i32 %39, 4, !dbg !25
  %47 = icmp samesign ult i32 %39, 4092, !dbg !25
  br i1 %47, label %.split, label %.split7.us, !dbg !25

.split7.us:                                       ; preds = %.split, %.split.us
  %.us-phi = phi float [ %36, %.split.us ], [ 0.000000e+00, %.split ], !dbg !26
  %48 = bitcast float %.us-phi to i32, !dbg !26
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 2, i32 31), !dbg !26
  %50 = bitcast i32 %49 to float, !dbg !26
  %51 = fadd float %.us-phi, %50, !dbg !30
  %52 = bitcast float %51 to i32, !dbg !26
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 1, i32 31), !dbg !26
  %54 = bitcast i32 %53 to float, !dbg !26
  %55 = fadd float %51, %54, !dbg !30
  %56 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %13, !dbg !32
  %57 = bitcast float %55 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %57, i1 true) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %58 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %15, !dbg !32
  %59 = load float, ptr addrspace(3) %58, align 4, !dbg !32
  %60 = tail call float @llvm.nvvm.div.full(float %59, float 4.096000e+03), !dbg !33
  %61 = tail call float @llvm.nvvm.div.full(float %55, float 4.096000e+03), !dbg !33
  %62 = fadd float %60, 0x3EE4F8B580000000, !dbg !34
  %63 = fadd float %61, 0x3EE4F8B580000000, !dbg !34
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i = icmp eq i32 %64, 0, !dbg !35
  br i1 %.not.i, label %67, label %65, !dbg !35

65:                                               ; preds = %.split7.us
  %66 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %62), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

67:                                               ; preds = %.split7.us
  %68 = tail call float @llvm.nvvm.rsqrt.approx.f(float %62), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

__nv_rsqrtf.exit:                                 ; preds = %65, %67
  %.0.i = phi float [ %66, %65 ], [ %68, %67 ], !dbg !35
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i3 = icmp eq i32 %69, 0, !dbg !35
  br i1 %.not.i3, label %72, label %70, !dbg !35

70:                                               ; preds = %__nv_rsqrtf.exit
  %71 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %63), !dbg !35
  br label %__nv_rsqrtf.exit5, !dbg !35

72:                                               ; preds = %__nv_rsqrtf.exit
  %73 = tail call float @llvm.nvvm.rsqrt.approx.f(float %63), !dbg !35
  br label %__nv_rsqrtf.exit5, !dbg !35

__nv_rsqrtf.exit5:                                ; preds = %70, %72
  %.0.i4 = phi float [ %71, %70 ], [ %73, %72 ], !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %74 = sext i32 %17 to i64, !dbg !37
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !37
  %76 = and i32 %11, 240, !dbg !38
  %77 = icmp eq i32 %76, 0, !dbg !38
  %78 = bitcast float %.0.i to i32, !dbg !38
  %79 = and i1 %77, %19, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %78, ptr addrspace(1) %75, i1 %79) #5, !dbg !38
  %80 = and i32 %11, 192
  %81 = icmp eq i32 %80, 0
  %82 = and i1 %81, %.fr
  %83 = zext nneg i32 %14 to i64, !dbg !39
  br label %84, !dbg !39

84:                                               ; preds = %__nv_rsqrtf.exit5, %84
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit5 ], [ %indvars.iv.next, %84 ]
  %85 = or disjoint i64 %indvars.iv, %83, !dbg !40
  %86 = getelementptr half, ptr addrspace(1) %3, i64 %85, !dbg !41
  %87 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %86, i1 true) #5, !dbg !42
  %88 = bitcast i16 %87 to half, !dbg !42
  %89 = fpext half %88 to float, !dbg !43
  %90 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %21, %90
  %91 = sext i32 %.reass to i64, !dbg !44
  %92 = getelementptr half, ptr addrspace(1) %1, i64 %91, !dbg !44
  %93 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %92, i1 %.fr) #5, !dbg !45
  %94 = bitcast i16 %93 to half, !dbg !45
  %95 = fpext half %94 to float, !dbg !46
  %96 = getelementptr half, ptr addrspace(1) %2, i64 %91, !dbg !47
  %97 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %96, i1 %.fr) #5, !dbg !48
  %98 = bitcast i16 %97 to half, !dbg !48
  %99 = fpext half %98 to float, !dbg !49
  %100 = fadd float %95, %99, !dbg !50
  %101 = fmul float %.0.i4, %100, !dbg !51
  %102 = fmul float %101, %89, !dbg !52
  %103 = getelementptr half, ptr addrspace(1) %4, i64 %91, !dbg !53
  %104 = fptrunc float %102 to half, !dbg !54
  %105 = bitcast half %104 to i16, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %105, ptr addrspace(1) %103, i1 %82) #5, !dbg !54
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !39
  %106 = icmp samesign ult i64 %indvars.iv, 4092, !dbg !39
  br i1 %106, label %84, label %107, !dbg !39

107:                                              ; preds = %84
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py", directory: "./local_cache/5k")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 35, column: 46, scope: !6)
!15 = !DILocation(line: 35, column: 41, scope: !6)
!16 = !DILocation(line: 35, column: 34, scope: !6)
!17 = !DILocation(line: 35, column: 51, scope: !6)
!18 = !DILocation(line: 35, column: 112, scope: !6)
!19 = !DILocation(line: 36, column: 34, scope: !6)
!20 = !DILocation(line: 36, column: 51, scope: !6)
!21 = !DILocation(line: 36, column: 112, scope: !6)
!22 = !DILocation(line: 37, column: 22, scope: !6)
!23 = !DILocation(line: 39, column: 22, scope: !6)
!24 = !DILocation(line: 41, column: 23, scope: !6)
!25 = !DILocation(line: 29, column: 40, scope: !6)
!26 = !DILocation(line: 286, column: 36, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !6, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!29 = !DILocation(line: 43, column: 25, scope: !6)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !29)
!31 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!32 = !DILocation(line: 43, column: 28, scope: !6)
!33 = !DILocation(line: 45, column: 19, scope: !6)
!34 = !DILocation(line: 47, column: 19, scope: !6)
!35 = !DILocation(line: 48, column: 28, scope: !6)
!36 = !DILocation(line: 49, column: 4, scope: !6)
!37 = !DILocation(line: 50, column: 28, scope: !6)
!38 = !DILocation(line: 50, column: 40, scope: !6)
!39 = !DILocation(line: 51, column: 40, scope: !6)
!40 = !DILocation(line: 52, column: 31, scope: !6)
!41 = !DILocation(line: 57, column: 35, scope: !6)
!42 = !DILocation(line: 57, column: 42, scope: !6)
!43 = !DILocation(line: 57, column: 95, scope: !6)
!44 = !DILocation(line: 58, column: 35, scope: !6)
!45 = !DILocation(line: 58, column: 52, scope: !6)
!46 = !DILocation(line: 58, column: 114, scope: !6)
!47 = !DILocation(line: 59, column: 35, scope: !6)
!48 = !DILocation(line: 59, column: 52, scope: !6)
!49 = !DILocation(line: 59, column: 114, scope: !6)
!50 = !DILocation(line: 60, column: 24, scope: !6)
!51 = !DILocation(line: 62, column: 24, scope: !6)
!52 = !DILocation(line: 64, column: 24, scope: !6)
!53 = !DILocation(line: 65, column: 29, scope: !6)
!54 = !DILocation(line: 65, column: 53, scope: !6)
!55 = !DILocation(line: 51, column: 4, scope: !6)
