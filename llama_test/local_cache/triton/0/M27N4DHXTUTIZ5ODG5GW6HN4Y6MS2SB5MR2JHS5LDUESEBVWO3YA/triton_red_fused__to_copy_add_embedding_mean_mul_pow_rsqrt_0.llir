; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [73 x i8] c"./local_cache/as/casz3ep5dxrodxni63f6fnstjrnur6lm6uexbggylreroa3mnfgf.py\00"
@assertMessage_0 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp4 < 128256\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !10 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %11 = shl i32 %10, 4, !dbg !12
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %13 = lshr i32 %12, 2, !dbg !13
  %14 = and i32 %13, 15, !dbg !13
  %15 = lshr i32 %12, 3, !dbg !13
  %16 = and i32 %15, 7, !dbg !13
  %17 = and i32 %12, 15, !dbg !13
  %18 = or disjoint i32 %14, %11, !dbg !14
  %19 = or disjoint i32 %16, %11, !dbg !14
  %20 = or disjoint i32 %19, 8, !dbg !14
  %21 = or disjoint i32 %11, %17, !dbg !14
  %22 = icmp slt i32 %18, %6, !dbg !15
  %23 = icmp slt i32 %19, %6, !dbg !15
  %24 = icmp slt i32 %20, %6, !dbg !15
  %25 = icmp slt i32 %21, %6, !dbg !15
  %26 = shl i32 %12, 1, !dbg !16
  %27 = and i32 %26, 6, !dbg !16
  %28 = sext i32 %18 to i64, !dbg !17
  %29 = getelementptr i64, ptr addrspace(1) %1, i64 %28, !dbg !17
  %30 = sext i32 %19 to i64, !dbg !17
  %31 = getelementptr i64, ptr addrspace(1) %1, i64 %30, !dbg !17
  %32 = sext i32 %20 to i64, !dbg !17
  %33 = getelementptr i64, ptr addrspace(1) %1, i64 %32, !dbg !17
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 %22) #6, !dbg !18
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 %22) #6, !dbg !18
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 %23) #6, !dbg !18
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 %24) #6, !dbg !18
  %38 = insertelement <2 x i64> poison, i64 %37, i64 0, !dbg !19
  %39 = insertelement <2 x i64> %38, i64 %36, i64 1, !dbg !19
  %40 = add <2 x i64> %39, splat (i64 128256), !dbg !19
  %41 = icmp slt <2 x i64> %39, zeroinitializer, !dbg !20
  %42 = select <2 x i1> %41, <2 x i64> %40, <2 x i64> %39, !dbg !21
  %43 = icmp ugt <2 x i64> %42, splat (i64 128255), !dbg !22
  %44 = extractelement <2 x i1> %43, i64 1, !dbg !23
  %.not6 = and i1 %23, %44, !dbg !23
  %45 = extractelement <2 x i1> %43, i64 0, !dbg !24
  %.not7 = and i1 %24, %45, !dbg !24
  %46 = shl i32 %18, 12, !dbg !25
  %47 = or i1 %.not6, %.not7
  %invariant.op = or disjoint i32 %27, %46, !dbg !26
  br i1 %47, label %74, label %.split.preheader, !dbg !27

.split.preheader:                                 ; preds = %9
  %48 = icmp slt i64 %35, 0, !dbg !20
  %49 = shl i64 %35, 12, !dbg !24
  %50 = add i64 %49, 525336576, !dbg !24
  %51 = select i1 %48, i64 %50, i64 %49, !dbg !24
  %52 = zext nneg i32 %27 to i64, !dbg !26
  %53 = or disjoint i64 %51, %52
  br label %.split, !dbg !26

.split:                                           ; preds = %.split.preheader, %.split
  %indvars.iv = phi i64 [ 0, %.split.preheader ], [ %indvars.iv.next, %.split ]
  %54 = phi float [ 0.000000e+00, %.split.preheader ], [ %68, %.split ]
  %55 = phi float [ 0.000000e+00, %.split.preheader ], [ %69, %.split ]
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %56 = or i64 %53, %indvars.iv, !dbg !28
  %57 = getelementptr half, ptr addrspace(1) %2, i64 %56, !dbg !29
  %58 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %57, i1 %22) #6, !dbg !30
  %59 = bitcast i32 %58 to <2 x half>, !dbg !30
  %60 = extractelement <2 x half> %59, i64 0, !dbg !30
  %61 = extractelement <2 x half> %59, i64 1, !dbg !30
  %62 = fpext half %60 to float, !dbg !31
  %63 = fpext half %61 to float, !dbg !31
  %64 = fmul float %62, %62, !dbg !32
  %65 = fmul float %63, %63, !dbg !32
  %66 = fadd float %54, %64, !dbg !33
  %67 = fadd float %55, %65, !dbg !33
  %68 = select i1 %22, float %66, float %54, !dbg !34
  %69 = select i1 %22, float %67, float %55, !dbg !34
  %70 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %70
  %71 = sext i32 %.reass to i64, !dbg !35
  %72 = getelementptr half, ptr addrspace(1) %4, i64 %71, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %58, ptr addrspace(1) %72, i1 %22) #6, !dbg !36
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !26
  %73 = icmp samesign ult i64 %indvars.iv, 4088, !dbg !26
  br i1 %73, label %.split, label %75, !dbg !26

74:                                               ; preds = %9
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !27
  unreachable, !dbg !27

75:                                               ; preds = %.split
  %76 = fadd float %68, %69, !dbg !37
  %77 = bitcast float %76 to i32, !dbg !42
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 2, i32 31), !dbg !42
  %79 = bitcast i32 %78 to float, !dbg !42
  %80 = fadd float %76, %79, !dbg !37
  %81 = bitcast float %80 to i32, !dbg !42
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 1, i32 31), !dbg !42
  %83 = bitcast i32 %82 to float, !dbg !42
  %84 = fadd float %80, %83, !dbg !37
  %85 = zext nneg i32 %14 to i64, !dbg !43
  %86 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %85, !dbg !43
  %87 = bitcast float %84 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 true) #6, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %88 = zext nneg i32 %17 to i64, !dbg !43
  %89 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %88, !dbg !43
  %90 = load float, ptr addrspace(3) %89, align 4, !dbg !43
  %91 = tail call float @llvm.nvvm.div.full(float %90, float 4.096000e+03), !dbg !44
  %92 = tail call float @llvm.nvvm.div.full(float %84, float 4.096000e+03), !dbg !44
  %93 = fadd float %91, 0x3EE4F8B580000000, !dbg !45
  %94 = fadd float %92, 0x3EE4F8B580000000, !dbg !45
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %.not.i = icmp eq i32 %95, 0, !dbg !43
  br i1 %.not.i, label %98, label %96, !dbg !43

96:                                               ; preds = %75
  %97 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %93), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

98:                                               ; preds = %75
  %99 = tail call float @llvm.nvvm.rsqrt.approx.f(float %93), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

__nv_rsqrtf.exit:                                 ; preds = %96, %98
  %.0.i = phi float [ %97, %96 ], [ %99, %98 ], !dbg !43
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %.not.i11 = icmp eq i32 %101, 0, !dbg !43
  br i1 %.not.i11, label %104, label %102, !dbg !43

102:                                              ; preds = %__nv_rsqrtf.exit
  %103 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %94), !dbg !43
  br label %__nv_rsqrtf.exit13, !dbg !43

104:                                              ; preds = %__nv_rsqrtf.exit
  %105 = tail call float @llvm.nvvm.rsqrt.approx.f(float %94), !dbg !43
  br label %__nv_rsqrtf.exit13, !dbg !43

__nv_rsqrtf.exit13:                               ; preds = %102, %104
  %.0.i12 = phi float [ %103, %102 ], [ %105, %104 ], !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %106 = sext i32 %21 to i64, !dbg !47
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !47
  %108 = and i32 %12, 48, !dbg !48
  %109 = icmp eq i32 %108, 0, !dbg !48
  %110 = bitcast float %.0.i to i32, !dbg !48
  %111 = and i1 %109, %25, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %110, ptr addrspace(1) %107, i1 %111) #6, !dbg !48
  %112 = insertelement <2 x float> poison, float %.0.i12, i64 0, !dbg !49
  %113 = shufflevector <2 x float> %112, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  br label %114, !dbg !50

114:                                              ; preds = %__nv_rsqrtf.exit13, %114
  %indvars.iv18 = phi i64 [ 0, %__nv_rsqrtf.exit13 ], [ %indvars.iv.next19, %114 ]
  %115 = or disjoint i64 %indvars.iv18, %52, !dbg !51
  %116 = getelementptr half, ptr addrspace(1) %3, i64 %115, !dbg !52
  %117 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %116, i1 true) #6, !dbg !53
  %118 = bitcast i32 %117 to <2 x half>, !dbg !53
  %119 = trunc nuw nsw i64 %indvars.iv18 to i32
  %.reass16 = or i32 %invariant.op, %119
  %120 = sext i32 %.reass16 to i64, !dbg !54
  %121 = getelementptr half, ptr addrspace(1) %4, i64 %120, !dbg !54
  %122 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %121, i1 %22) #6, !dbg !55
  %123 = bitcast i32 %122 to <2 x half>, !dbg !55
  %124 = getelementptr half, ptr addrspace(1) %5, i64 %120, !dbg !56
  %125 = fpext <2 x half> %118 to <2 x float>, !dbg !57
  %126 = fpext <2 x half> %123 to <2 x float>, !dbg !58
  %127 = fmul <2 x float> %113, %126, !dbg !49
  %128 = fmul <2 x float> %127, %125, !dbg !59
  %129 = fptrunc <2 x float> %128 to <2 x half>, !dbg !60
  %130 = bitcast <2 x half> %129 to i32, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %130, ptr addrspace(1) %124, i1 %22) #6, !dbg !60
  %indvars.iv.next19 = add nuw nsw i64 %indvars.iv18, 8, !dbg !50
  %131 = icmp samesign ult i64 %indvars.iv18, 4088, !dbg !50
  br i1 %131, label %114, label %132, !dbg !50

132:                                              ; preds = %114
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "casz3ep5dxrodxni63f6fnstjrnur6lm6uexbggylreroa3mnfgf.py", directory: "./local_cache/as")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 22, column: 28, scope: !10)
!12 = !DILocation(line: 22, column: 33, scope: !10)
!13 = !DILocation(line: 23, column: 44, scope: !10)
!14 = !DILocation(line: 23, column: 23, scope: !10)
!15 = !DILocation(line: 24, column: 21, scope: !10)
!16 = !DILocation(line: 25, column: 37, scope: !10)
!17 = !DILocation(line: 28, column: 30, scope: !10)
!18 = !DILocation(line: 28, column: 35, scope: !10)
!19 = !DILocation(line: 37, column: 22, scope: !10)
!20 = !DILocation(line: 38, column: 22, scope: !10)
!21 = !DILocation(line: 39, column: 36, scope: !10)
!22 = !DILocation(line: 40, column: 41, scope: !10)
!23 = !DILocation(line: 40, column: 59, scope: !10)
!24 = !DILocation(line: 41, column: 46, scope: !10)
!25 = !DILocation(line: 47, column: 41, scope: !10)
!26 = !DILocation(line: 30, column: 40, scope: !10)
!27 = !DILocation(line: 40, column: 69, scope: !10)
!28 = !DILocation(line: 41, column: 41, scope: !10)
!29 = !DILocation(line: 41, column: 34, scope: !10)
!30 = !DILocation(line: 41, column: 53, scope: !10)
!31 = !DILocation(line: 41, column: 115, scope: !10)
!32 = !DILocation(line: 43, column: 22, scope: !10)
!33 = !DILocation(line: 45, column: 25, scope: !10)
!34 = !DILocation(line: 46, column: 50, scope: !10)
!35 = !DILocation(line: 47, column: 29, scope: !10)
!36 = !DILocation(line: 47, column: 52, scope: !10)
!37 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !41)
!38 = distinct !DILexicalBlockFile(scope: !40, file: !39, discriminator: 0)
!39 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!40 = distinct !DILexicalBlockFile(scope: !10, file: !39, discriminator: 0)
!41 = !DILocation(line: 48, column: 27, scope: !10)
!42 = !DILocation(line: 286, column: 36, scope: !40, inlinedAt: !41)
!43 = !DILocation(line: 53, column: 28, scope: !10)
!44 = !DILocation(line: 50, column: 21, scope: !10)
!45 = !DILocation(line: 52, column: 20, scope: !10)
!46 = !DILocation(line: 54, column: 4, scope: !10)
!47 = !DILocation(line: 55, column: 28, scope: !10)
!48 = !DILocation(line: 55, column: 40, scope: !10)
!49 = !DILocation(line: 65, column: 24, scope: !10)
!50 = !DILocation(line: 56, column: 40, scope: !10)
!51 = !DILocation(line: 57, column: 31, scope: !10)
!52 = !DILocation(line: 62, column: 35, scope: !10)
!53 = !DILocation(line: 62, column: 42, scope: !10)
!54 = !DILocation(line: 63, column: 36, scope: !10)
!55 = !DILocation(line: 63, column: 53, scope: !10)
!56 = !DILocation(line: 68, column: 29, scope: !10)
!57 = !DILocation(line: 62, column: 95, scope: !10)
!58 = !DILocation(line: 63, column: 115, scope: !10)
!59 = !DILocation(line: 67, column: 24, scope: !10)
!60 = !DILocation(line: 68, column: 53, scope: !10)
!61 = !DILocation(line: 56, column: 4, scope: !10)
