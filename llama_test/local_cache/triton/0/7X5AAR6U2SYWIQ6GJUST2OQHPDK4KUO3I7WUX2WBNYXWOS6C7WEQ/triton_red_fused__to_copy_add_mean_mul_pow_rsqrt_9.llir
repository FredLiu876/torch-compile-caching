; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 4, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = lshr i32 %11, 4, !dbg !11
  %13 = and i32 %12, 15, !dbg !11
  %14 = or disjoint i32 %13, %10, !dbg !12
  %15 = icmp slt i32 %14, %5, !dbg !13
  %16 = shl i32 %11, 2, !dbg !14
  %17 = and i32 %16, 60, !dbg !14
  %18 = shl i32 %14, 12, !dbg !15
  %19 = or disjoint i32 %18, %17
  br label %20, !dbg !16

20:                                               ; preds = %8, %20
  %21 = phi float [ 0.000000e+00, %8 ], [ %49, %20 ]
  %22 = phi float [ 0.000000e+00, %8 ], [ %50, %20 ]
  %23 = phi float [ 0.000000e+00, %8 ], [ %61, %20 ]
  %24 = phi float [ 0.000000e+00, %8 ], [ %62, %20 ]
  %25 = phi i32 [ 0, %8 ], [ %66, %20 ]
  %26 = or i32 %19, %25, !dbg !17
  %27 = sext i32 %26 to i64, !dbg !18
  %28 = getelementptr half, ptr addrspace(1) %2, i64 %27, !dbg !18
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %28, i1 %15) #5, !dbg !19
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !19
  %31 = bitcast i32 %30 to <2 x half>, !dbg !19
  %32 = extractvalue { i32, i32 } %29, 1, !dbg !19
  %33 = bitcast i32 %32 to <2 x half>, !dbg !19
  %34 = getelementptr half, ptr addrspace(1) %0, i64 %27, !dbg !20
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %34, i1 %15) #5, !dbg !21
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !21
  %37 = bitcast i32 %36 to <2 x half>, !dbg !21
  %38 = extractvalue { i32, i32 } %35, 1, !dbg !21
  %39 = bitcast i32 %38 to <2 x half>, !dbg !21
  %40 = fpext <2 x half> %31 to <2 x float>, !dbg !22
  %41 = fpext <2 x half> %37 to <2 x float>, !dbg !23
  %42 = fadd <2 x float> %40, %41, !dbg !24
  %43 = fmul <2 x float> %42, %42, !dbg !25
  %44 = extractelement <2 x float> %43, i64 0, !dbg !25
  %45 = fmul <2 x float> %42, %42, !dbg !25
  %46 = extractelement <2 x float> %45, i64 1, !dbg !25
  %47 = fadd float %21, %44, !dbg !26
  %48 = fadd float %22, %46, !dbg !26
  %49 = select i1 %15, float %47, float %21, !dbg !27
  %50 = select i1 %15, float %48, float %22, !dbg !27
  %51 = fptrunc <2 x float> %42 to <2 x half>, !dbg !28
  %52 = fpext <2 x half> %33 to <2 x float>, !dbg !22
  %53 = fpext <2 x half> %39 to <2 x float>, !dbg !23
  %54 = fadd <2 x float> %52, %53, !dbg !24
  %55 = fmul <2 x float> %54, %54, !dbg !25
  %56 = extractelement <2 x float> %55, i64 0, !dbg !25
  %57 = fmul <2 x float> %54, %54, !dbg !25
  %58 = extractelement <2 x float> %57, i64 1, !dbg !25
  %59 = fadd float %23, %56, !dbg !26
  %60 = fadd float %24, %58, !dbg !26
  %61 = select i1 %15, float %59, float %23, !dbg !27
  %62 = select i1 %15, float %60, float %24, !dbg !27
  %63 = fptrunc <2 x float> %54 to <2 x half>, !dbg !28
  %64 = bitcast <2 x half> %51 to i32, !dbg !28
  %65 = bitcast <2 x half> %63 to i32, !dbg !28
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %64, i32 %65, ptr addrspace(1) %34, i1 %15) #5, !dbg !28
  %66 = add nuw nsw i32 %25, 64, !dbg !16
  %67 = icmp samesign ult i32 %25, 4032, !dbg !16
  br i1 %67, label %20, label %68, !dbg !16

68:                                               ; preds = %20
  %69 = and i32 %11, 15, !dbg !11
  %70 = or disjoint i32 %10, %69, !dbg !12
  %71 = icmp slt i32 %70, %5, !dbg !13
  %72 = fadd float %49, %50, !dbg !29
  %73 = fadd float %61, %72, !dbg !29
  %74 = fadd float %62, %73, !dbg !29
  %75 = bitcast float %74 to i32, !dbg !34
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 8, i32 31), !dbg !34
  %77 = bitcast i32 %76 to float, !dbg !34
  %78 = fadd float %74, %77, !dbg !29
  %79 = bitcast float %78 to i32, !dbg !34
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 4, i32 31), !dbg !34
  %81 = bitcast i32 %80 to float, !dbg !34
  %82 = fadd float %78, %81, !dbg !29
  %83 = bitcast float %82 to i32, !dbg !34
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 2, i32 31), !dbg !34
  %85 = bitcast i32 %84 to float, !dbg !34
  %86 = fadd float %82, %85, !dbg !29
  %87 = bitcast float %86 to i32, !dbg !34
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 1, i32 31), !dbg !34
  %89 = bitcast i32 %88 to float, !dbg !34
  %90 = fadd float %86, %89, !dbg !29
  %91 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %13, !dbg !35
  %92 = bitcast float %90 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 true) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %93 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %69, !dbg !35
  %94 = load float, ptr addrspace(3) %93, align 4, !dbg !35
  %95 = tail call float @llvm.nvvm.div.full(float %94, float 4.096000e+03), !dbg !36
  %96 = tail call float @llvm.nvvm.div.full(float %90, float 4.096000e+03), !dbg !36
  %97 = fadd float %95, 0x3EE4F8B580000000, !dbg !37
  %98 = fadd float %96, 0x3EE4F8B580000000, !dbg !37
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i = icmp eq i32 %99, 0, !dbg !35
  br i1 %.not.i, label %102, label %100, !dbg !35

100:                                              ; preds = %68
  %101 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %97), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

102:                                              ; preds = %68
  %103 = tail call float @llvm.nvvm.rsqrt.approx.f(float %97), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

__nv_rsqrtf.exit:                                 ; preds = %100, %102
  %.0.i = phi float [ %101, %100 ], [ %103, %102 ], !dbg !35
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i12 = icmp eq i32 %107, 0, !dbg !35
  br i1 %.not.i12, label %110, label %108, !dbg !35

108:                                              ; preds = %__nv_rsqrtf.exit
  %109 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %98), !dbg !35
  br label %__nv_rsqrtf.exit14, !dbg !35

110:                                              ; preds = %__nv_rsqrtf.exit
  %111 = tail call float @llvm.nvvm.rsqrt.approx.f(float %98), !dbg !35
  br label %__nv_rsqrtf.exit14, !dbg !35

__nv_rsqrtf.exit14:                               ; preds = %108, %110
  %.0.i13 = phi float [ %109, %108 ], [ %111, %110 ], !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %112 = sext i32 %70 to i64, !dbg !39
  %113 = getelementptr float, ptr addrspace(1) %1, i64 %112, !dbg !39
  %114 = and i32 %11, 240, !dbg !40
  %115 = icmp eq i32 %114, 0, !dbg !40
  %116 = bitcast float %.0.i to i32, !dbg !40
  %117 = and i1 %115, %71, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %116, ptr addrspace(1) %113, i1 %117) #5, !dbg !40
  %118 = zext nneg i32 %17 to i64, !dbg !41
  %119 = insertelement <2 x float> poison, float %.0.i13, i64 0, !dbg !42
  %120 = shufflevector <2 x float> %119, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !42
  br label %121, !dbg !41

121:                                              ; preds = %__nv_rsqrtf.exit14, %121
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit14 ], [ %indvars.iv.next, %121 ]
  %122 = or disjoint i64 %indvars.iv, %118, !dbg !43
  %123 = getelementptr half, ptr addrspace(1) %3, i64 %122, !dbg !44
  %124 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %123, i1 true) #5, !dbg !45
  %125 = extractvalue { i32, i32 } %124, 0, !dbg !45
  %126 = bitcast i32 %125 to <2 x half>, !dbg !45
  %127 = extractvalue { i32, i32 } %124, 1, !dbg !45
  %128 = bitcast i32 %127 to <2 x half>, !dbg !45
  %129 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %19, %129
  %130 = sext i32 %.reass to i64, !dbg !46
  %131 = getelementptr half, ptr addrspace(1) %0, i64 %130, !dbg !46
  %132 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %131, i1 %15) #5, !dbg !47
  %133 = extractvalue { i32, i32 } %132, 0, !dbg !47
  %134 = bitcast i32 %133 to <2 x half>, !dbg !47
  %135 = extractvalue { i32, i32 } %132, 1, !dbg !47
  %136 = bitcast i32 %135 to <2 x half>, !dbg !47
  %137 = getelementptr half, ptr addrspace(1) %4, i64 %130, !dbg !48
  %138 = fpext <2 x half> %126 to <2 x float>, !dbg !49
  %139 = fpext <2 x half> %134 to <2 x float>, !dbg !50
  %140 = fmul <2 x float> %120, %139, !dbg !42
  %141 = fmul <2 x float> %140, %138, !dbg !51
  %142 = fptrunc <2 x float> %141 to <2 x half>, !dbg !52
  %143 = fpext <2 x half> %128 to <2 x float>, !dbg !49
  %144 = fpext <2 x half> %136 to <2 x float>, !dbg !50
  %145 = fmul <2 x float> %120, %144, !dbg !42
  %146 = fmul <2 x float> %145, %143, !dbg !51
  %147 = fptrunc <2 x float> %146 to <2 x half>, !dbg !52
  %148 = bitcast <2 x half> %142 to i32, !dbg !52
  %149 = bitcast <2 x half> %147 to i32, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %148, i32 %149, ptr addrspace(1) %137, i1 %15) #5, !dbg !52
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !41
  %150 = icmp samesign ult i64 %indvars.iv, 4032, !dbg !41
  br i1 %150, label %121, label %151, !dbg !41

151:                                              ; preds = %121
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5c3dyzot3z75ffv2rgpknn5id3oqk635hti77j23bckhoi55elb.py", directory: "./local_cache/5c")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 29, column: 40, scope: !6)
!17 = !DILocation(line: 35, column: 41, scope: !6)
!18 = !DILocation(line: 35, column: 34, scope: !6)
!19 = !DILocation(line: 35, column: 51, scope: !6)
!20 = !DILocation(line: 36, column: 38, scope: !6)
!21 = !DILocation(line: 36, column: 55, scope: !6)
!22 = !DILocation(line: 35, column: 113, scope: !6)
!23 = !DILocation(line: 36, column: 117, scope: !6)
!24 = !DILocation(line: 37, column: 22, scope: !6)
!25 = !DILocation(line: 39, column: 22, scope: !6)
!26 = !DILocation(line: 41, column: 23, scope: !6)
!27 = !DILocation(line: 42, column: 48, scope: !6)
!28 = !DILocation(line: 43, column: 55, scope: !6)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !33)
!30 = distinct !DILexicalBlockFile(scope: !32, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!32 = distinct !DILexicalBlockFile(scope: !6, file: !31, discriminator: 0)
!33 = !DILocation(line: 44, column: 25, scope: !6)
!34 = !DILocation(line: 286, column: 36, scope: !32, inlinedAt: !33)
!35 = !DILocation(line: 49, column: 28, scope: !6)
!36 = !DILocation(line: 46, column: 19, scope: !6)
!37 = !DILocation(line: 48, column: 19, scope: !6)
!38 = !DILocation(line: 50, column: 4, scope: !6)
!39 = !DILocation(line: 51, column: 28, scope: !6)
!40 = !DILocation(line: 51, column: 40, scope: !6)
!41 = !DILocation(line: 52, column: 40, scope: !6)
!42 = !DILocation(line: 61, column: 24, scope: !6)
!43 = !DILocation(line: 53, column: 31, scope: !6)
!44 = !DILocation(line: 58, column: 35, scope: !6)
!45 = !DILocation(line: 58, column: 42, scope: !6)
!46 = !DILocation(line: 59, column: 39, scope: !6)
!47 = !DILocation(line: 59, column: 56, scope: !6)
!48 = !DILocation(line: 64, column: 29, scope: !6)
!49 = !DILocation(line: 58, column: 95, scope: !6)
!50 = !DILocation(line: 59, column: 118, scope: !6)
!51 = !DILocation(line: 63, column: 24, scope: !6)
!52 = !DILocation(line: 64, column: 53, scope: !6)
!53 = !DILocation(line: 52, column: 4, scope: !6)
