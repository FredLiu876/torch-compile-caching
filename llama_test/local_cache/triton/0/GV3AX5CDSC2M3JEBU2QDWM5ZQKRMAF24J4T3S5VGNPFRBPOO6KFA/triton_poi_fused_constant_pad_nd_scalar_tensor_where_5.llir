; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [73 x i8] c"./local_cache/pa/cpax42nevszgrs2tm2wf6ksr7ss223bl62m5d3gfl6dipirhwljp.py\00"
@assertMessage_0 = internal constant [30 x i8] c"index out of bounds: x0 < ks2\00"

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_poi_fused_constant_pad_nd_scalar_tensor_where_5(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !10 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %9 = shl i32 %8, 8, !dbg !12
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %11 = and i32 %10, 63, !dbg !13
  %12 = or disjoint i32 %9, %11, !dbg !14
  %13 = or disjoint i32 %12, 64, !dbg !14
  %14 = or disjoint i32 %12, 128, !dbg !14
  %15 = or disjoint i32 %12, 192, !dbg !14
  %16 = insertelement <4 x i32> poison, i32 %12, i64 0, !dbg !15
  %17 = insertelement <4 x i32> %16, i32 %13, i64 1, !dbg !15
  %18 = insertelement <4 x i32> %17, i32 %14, i64 2, !dbg !15
  %19 = insertelement <4 x i32> %18, i32 %15, i64 3, !dbg !15
  %20 = insertelement <4 x i32> poison, i32 %5, i64 0, !dbg !15
  %21 = shufflevector <4 x i32> %20, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !15
  %22 = icmp slt <4 x i32> %19, %21, !dbg !15
  %23 = insertelement <4 x i32> poison, i32 %2, i64 0, !dbg !16
  %24 = shufflevector <4 x i32> %23, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !16
  %25 = srem <4 x i32> %19, %24, !dbg !16
  %26 = insertelement <4 x i32> poison, i32 %3, i64 0, !dbg !17
  %27 = shufflevector <4 x i32> %26, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !17
  %28 = icmp slt <4 x i32> %25, %27, !dbg !17
  %29 = insertelement <4 x i32> poison, i32 %4, i64 0, !dbg !18
  %30 = shufflevector <4 x i32> %29, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !18
  %31 = icmp sge <4 x i32> %25, %30, !dbg !18
  %32 = and <4 x i1> %22, %28, !dbg !19
  %33 = and <4 x i1> %31, %32, !dbg !20
  %34 = bitcast <4 x i1> %33 to i4, !dbg !21
  %.not = icmp eq i4 %34, 0, !dbg !21
  br i1 %.not, label %36, label %35, !dbg !21

35:                                               ; preds = %7
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 33, ptr nonnull @assertFunc_0, i64 1), !dbg !21
  unreachable, !dbg !21

36:                                               ; preds = %7
  %37 = shl i32 %10, 2, !dbg !13
  %38 = and i32 %37, 252, !dbg !13
  %39 = or disjoint i32 %9, %38, !dbg !14
  %40 = or disjoint i32 %39, 3, !dbg !14
  %41 = icmp slt i32 %40, %5, !dbg !15
  %42 = or disjoint i32 %39, 2, !dbg !14
  %43 = or disjoint i32 %39, 1, !dbg !14
  %44 = insertelement <4 x i32> poison, i32 %39, i64 0, !dbg !16
  %45 = insertelement <4 x i32> %44, i32 %43, i64 1, !dbg !16
  %46 = insertelement <4 x i32> %45, i32 %42, i64 2, !dbg !16
  %47 = insertelement <4 x i32> %46, i32 %40, i64 3, !dbg !16
  %.frozen = freeze <4 x i32> %47, !dbg !22
  %.frozen21 = freeze <4 x i32> %24, !dbg !22
  %48 = sdiv <4 x i32> %.frozen, %.frozen21, !dbg !22
  %49 = mul <4 x i32> %48, %.frozen21, !dbg !16
  %.decomposed = sub <4 x i32> %.frozen, %49, !dbg !16
  %50 = icmp slt <4 x i32> %.decomposed, %27, !dbg !17
  %51 = extractelement <4 x i1> %50, i64 3, !dbg !23
  %52 = and i1 %41, %51, !dbg !19
  %53 = icmp slt i32 %42, %5, !dbg !15
  %54 = extractelement <4 x i1> %50, i64 2, !dbg !23
  %55 = and i1 %53, %54, !dbg !19
  %56 = icmp slt i32 %43, %5, !dbg !15
  %57 = extractelement <4 x i1> %50, i64 1, !dbg !23
  %58 = and i1 %56, %57, !dbg !19
  %59 = icmp slt i32 %39, %5, !dbg !15
  %60 = extractelement <4 x i1> %50, i64 0, !dbg !23
  %61 = and i1 %59, %60, !dbg !19
  %62 = icmp sle <4 x i32> %.decomposed, %48, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %63 = extractelement <4 x i32> %.decomposed, i64 0, !dbg !25
  %64 = sext i32 %63 to i64, !dbg !25
  %65 = getelementptr i64, ptr addrspace(1) %0, i64 %64, !dbg !25
  %66 = extractelement <4 x i32> %.decomposed, i64 1, !dbg !25
  %67 = sext i32 %66 to i64, !dbg !25
  %68 = getelementptr i64, ptr addrspace(1) %0, i64 %67, !dbg !25
  %69 = extractelement <4 x i32> %.decomposed, i64 2, !dbg !25
  %70 = sext i32 %69 to i64, !dbg !25
  %71 = getelementptr i64, ptr addrspace(1) %0, i64 %70, !dbg !25
  %72 = extractelement <4 x i32> %.decomposed, i64 3, !dbg !25
  %73 = sext i32 %72 to i64, !dbg !25
  %74 = getelementptr i64, ptr addrspace(1) %0, i64 %73, !dbg !25
  %75 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 %61) #3, !dbg !26
  %76 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %68, i1 %58) #3, !dbg !26
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %71, i1 %55) #3, !dbg !26
  %78 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %74, i1 %52) #3, !dbg !26
  %79 = icmp ne i64 %75, 0, !dbg !27
  %80 = icmp ne i64 %76, 0, !dbg !27
  %81 = icmp ne i64 %77, 0, !dbg !27
  %82 = icmp ne i64 %78, 0, !dbg !27
  %83 = extractelement <4 x i1> %62, i64 0, !dbg !28
  %84 = and i1 %83, %79, !dbg !28
  %85 = extractelement <4 x i1> %62, i64 1, !dbg !28
  %86 = and i1 %85, %80, !dbg !28
  %87 = extractelement <4 x i1> %62, i64 2, !dbg !28
  %88 = and i1 %87, %81, !dbg !28
  %89 = extractelement <4 x i1> %62, i64 3, !dbg !28
  %90 = and i1 %89, %82, !dbg !28
  %91 = sext i32 %39 to i64, !dbg !29
  %92 = getelementptr half, ptr addrspace(1) %1, i64 %91, !dbg !29
  %93 = sext i32 %43 to i64, !dbg !29
  %94 = getelementptr half, ptr addrspace(1) %1, i64 %93, !dbg !29
  %95 = sext i32 %42 to i64, !dbg !29
  %96 = getelementptr half, ptr addrspace(1) %1, i64 %95, !dbg !29
  %97 = sext i32 %40 to i64, !dbg !29
  %98 = getelementptr half, ptr addrspace(1) %1, i64 %97, !dbg !29
  %99 = select i1 %84, i16 0, i16 -1024, !dbg !30
  %100 = select i1 %60, i16 %99, i16 0, !dbg !23
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %100, ptr addrspace(1) %92, i1 %59) #3, !dbg !31
  %101 = select i1 %86, i16 0, i16 -1024, !dbg !30
  %102 = select i1 %57, i16 %101, i16 0, !dbg !23
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %102, ptr addrspace(1) %94, i1 %56) #3, !dbg !31
  %103 = select i1 %88, i16 0, i16 -1024, !dbg !30
  %104 = select i1 %54, i16 %103, i16 0, !dbg !23
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %104, ptr addrspace(1) %96, i1 %53) #3, !dbg !31
  %105 = select i1 %90, i16 0, i16 -1024, !dbg !30
  %106 = select i1 %51, i16 %105, i16 0, !dbg !23
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %106, ptr addrspace(1) %98, i1 %41) #3, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpax42nevszgrs2tm2wf6ksr7ss223bl62m5d3gfl6dipirhwljp.py", directory: "./local_cache/pa")
!4 = !{ptr @triton_poi_fused_constant_pad_nd_scalar_tensor_where_5, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_poi_fused_constant_pad_nd_scalar_tensor_where_5", linkageName: "triton_poi_fused_constant_pad_nd_scalar_tensor_where_5", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 19, column: 28, scope: !10)
!12 = !DILocation(line: 19, column: 33, scope: !10)
!13 = !DILocation(line: 20, column: 36, scope: !10)
!14 = !DILocation(line: 20, column: 23, scope: !10)
!15 = !DILocation(line: 21, column: 21, scope: !10)
!16 = !DILocation(line: 22, column: 19, scope: !10)
!17 = !DILocation(line: 27, column: 18, scope: !10)
!18 = !DILocation(line: 33, column: 27, scope: !10)
!19 = !DILocation(line: 33, column: 44, scope: !10)
!20 = !DILocation(line: 33, column: 34, scope: !10)
!21 = !DILocation(line: 33, column: 51, scope: !10)
!22 = !DILocation(line: 23, column: 19, scope: !10)
!23 = !DILocation(line: 41, column: 34, scope: !10)
!24 = !DILocation(line: 30, column: 19, scope: !10)
!25 = !DILocation(line: 34, column: 30, scope: !10)
!26 = !DILocation(line: 34, column: 35, scope: !10)
!27 = !DILocation(line: 35, column: 21, scope: !10)
!28 = !DILocation(line: 36, column: 19, scope: !10)
!29 = !DILocation(line: 42, column: 25, scope: !10)
!30 = !DILocation(line: 39, column: 35, scope: !10)
!31 = !DILocation(line: 42, column: 37, scope: !10)
!32 = !DILocation(line: 42, column: 4, scope: !10)
