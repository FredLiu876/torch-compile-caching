; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = icmp slt i32 %9, %5, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 31, !dbg !11
  %13 = lshr i32 %11, 5, !dbg !11
  %14 = shl i32 %11, 3, !dbg !11
  %15 = and i32 %14, 2040, !dbg !11
  %16 = or disjoint i32 %15, 2048, !dbg !11
  %17 = shl i32 %9, 12, !dbg !12
  %18 = or disjoint i32 %15, %17, !dbg !13
  %19 = or disjoint i32 %16, %17, !dbg !13
  %20 = sext i32 %18 to i64, !dbg !14
  %21 = getelementptr half, ptr addrspace(1) %1, i64 %20, !dbg !14
  %22 = sext i32 %19 to i64, !dbg !14
  %23 = getelementptr half, ptr addrspace(1) %1, i64 %22, !dbg !14
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %21, i1 %10) #5, !dbg !15
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !15
  %26 = bitcast i32 %25 to <2 x half>, !dbg !15
  %27 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !15
  %28 = bitcast i32 %27 to <2 x half>, !dbg !15
  %29 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !15
  %30 = bitcast i32 %29 to <2 x half>, !dbg !15
  %31 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !15
  %32 = bitcast i32 %31 to <2 x half>, !dbg !15
  %33 = extractelement <2 x half> %26, i64 0, !dbg !15
  %34 = extractelement <2 x half> %26, i64 1, !dbg !15
  %35 = extractelement <2 x half> %28, i64 0, !dbg !15
  %36 = extractelement <2 x half> %28, i64 1, !dbg !15
  %37 = extractelement <2 x half> %30, i64 0, !dbg !15
  %38 = extractelement <2 x half> %30, i64 1, !dbg !15
  %39 = extractelement <2 x half> %32, i64 0, !dbg !15
  %40 = extractelement <2 x half> %32, i64 1, !dbg !15
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %23, i1 %10) #5, !dbg !15
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !15
  %43 = bitcast i32 %42 to <2 x half>, !dbg !15
  %44 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !15
  %45 = bitcast i32 %44 to <2 x half>, !dbg !15
  %46 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !15
  %47 = bitcast i32 %46 to <2 x half>, !dbg !15
  %48 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !15
  %49 = bitcast i32 %48 to <2 x half>, !dbg !15
  %50 = extractelement <2 x half> %43, i64 0, !dbg !15
  %51 = extractelement <2 x half> %43, i64 1, !dbg !15
  %52 = fpext half %33 to float, !dbg !16
  %53 = fpext half %34 to float, !dbg !16
  %54 = fpext half %35 to float, !dbg !16
  %55 = fpext half %36 to float, !dbg !16
  %56 = fpext half %37 to float, !dbg !16
  %57 = fpext half %38 to float, !dbg !16
  %58 = fpext half %39 to float, !dbg !16
  %59 = fpext half %40 to float, !dbg !16
  %60 = fpext half %50 to float, !dbg !16
  %61 = fpext half %51 to float, !dbg !16
  %62 = getelementptr half, ptr addrspace(1) %2, i64 %20, !dbg !17
  %63 = getelementptr half, ptr addrspace(1) %2, i64 %22, !dbg !17
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %62, i1 %10) #5, !dbg !18
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !18
  %66 = bitcast i32 %65 to <2 x half>, !dbg !18
  %67 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !18
  %68 = bitcast i32 %67 to <2 x half>, !dbg !18
  %69 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !18
  %70 = bitcast i32 %69 to <2 x half>, !dbg !18
  %71 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !18
  %72 = bitcast i32 %71 to <2 x half>, !dbg !18
  %73 = extractelement <2 x half> %66, i64 0, !dbg !18
  %74 = extractelement <2 x half> %66, i64 1, !dbg !18
  %75 = extractelement <2 x half> %68, i64 0, !dbg !18
  %76 = extractelement <2 x half> %68, i64 1, !dbg !18
  %77 = extractelement <2 x half> %70, i64 0, !dbg !18
  %78 = extractelement <2 x half> %70, i64 1, !dbg !18
  %79 = extractelement <2 x half> %72, i64 0, !dbg !18
  %80 = extractelement <2 x half> %72, i64 1, !dbg !18
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %63, i1 %10) #5, !dbg !18
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !18
  %83 = bitcast i32 %82 to <2 x half>, !dbg !18
  %84 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !18
  %85 = bitcast i32 %84 to <2 x half>, !dbg !18
  %86 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !18
  %87 = bitcast i32 %86 to <2 x half>, !dbg !18
  %88 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !18
  %89 = bitcast i32 %88 to <2 x half>, !dbg !18
  %90 = extractelement <2 x half> %83, i64 0, !dbg !18
  %91 = extractelement <2 x half> %83, i64 1, !dbg !18
  %92 = fpext half %73 to float, !dbg !19
  %93 = fpext half %74 to float, !dbg !19
  %94 = fpext half %75 to float, !dbg !19
  %95 = fpext half %76 to float, !dbg !19
  %96 = fpext half %77 to float, !dbg !19
  %97 = fpext half %78 to float, !dbg !19
  %98 = fpext half %79 to float, !dbg !19
  %99 = fpext half %80 to float, !dbg !19
  %100 = fpext half %90 to float, !dbg !19
  %101 = fpext half %91 to float, !dbg !19
  %102 = fadd float %52, %92, !dbg !20
  %103 = fadd float %53, %93, !dbg !20
  %104 = fadd float %54, %94, !dbg !20
  %105 = fadd float %55, %95, !dbg !20
  %106 = fadd float %56, %96, !dbg !20
  %107 = fadd float %57, %97, !dbg !20
  %108 = fadd float %58, %98, !dbg !20
  %109 = fadd float %59, %99, !dbg !20
  %110 = fadd float %60, %100, !dbg !20
  %111 = fadd float %61, %101, !dbg !20
  %112 = fmul float %102, %102, !dbg !21
  %113 = fmul float %103, %103, !dbg !21
  %114 = fmul float %104, %104, !dbg !21
  %115 = fmul float %105, %105, !dbg !21
  %116 = fmul float %106, %106, !dbg !21
  %117 = fmul float %107, %107, !dbg !21
  %118 = fmul float %108, %108, !dbg !21
  %119 = fmul float %109, %109, !dbg !21
  %120 = fmul float %110, %110, !dbg !21
  %121 = fmul float %111, %111, !dbg !21
  %122 = fpext <2 x half> %45 to <2 x float>, !dbg !16
  %123 = fpext <2 x half> %85 to <2 x float>, !dbg !19
  %124 = fadd <2 x float> %122, %123, !dbg !20
  %125 = fmul <2 x float> %124, %124, !dbg !21
  %126 = fpext <2 x half> %47 to <2 x float>, !dbg !16
  %127 = fpext <2 x half> %87 to <2 x float>, !dbg !19
  %128 = fadd <2 x float> %126, %127, !dbg !20
  %129 = fmul <2 x float> %128, %128, !dbg !21
  %130 = fpext <2 x half> %49 to <2 x float>, !dbg !16
  %131 = fpext <2 x half> %89 to <2 x float>, !dbg !19
  %132 = fadd <2 x float> %130, %131, !dbg !20
  %133 = fmul <2 x float> %132, %132, !dbg !21
  %134 = fadd float %112, %113, !dbg !22
  %135 = fadd float %114, %134, !dbg !22
  %136 = fadd float %115, %135, !dbg !22
  %137 = fadd float %116, %136, !dbg !22
  %138 = fadd float %117, %137, !dbg !22
  %139 = fadd float %118, %138, !dbg !22
  %140 = fadd float %119, %139, !dbg !22
  %141 = fadd float %120, %140, !dbg !22
  %142 = fadd float %121, %141, !dbg !22
  %143 = extractelement <2 x float> %125, i64 0, !dbg !22
  %144 = fadd float %143, %142, !dbg !22
  %145 = extractelement <2 x float> %125, i64 1, !dbg !22
  %146 = fadd float %145, %144, !dbg !22
  %147 = extractelement <2 x float> %129, i64 0, !dbg !22
  %148 = fadd float %147, %146, !dbg !22
  %149 = extractelement <2 x float> %129, i64 1, !dbg !22
  %150 = fadd float %149, %148, !dbg !22
  %151 = extractelement <2 x float> %133, i64 0, !dbg !22
  %152 = fadd float %151, %150, !dbg !22
  %153 = extractelement <2 x float> %133, i64 1, !dbg !22
  %154 = fadd float %153, %152, !dbg !22
  %155 = select i1 %10, float %154, float 0.000000e+00, !dbg !22
  %156 = bitcast float %155 to i32, !dbg !27
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 16, i32 31), !dbg !27
  %158 = bitcast i32 %157 to float, !dbg !27
  %159 = fadd float %155, %158, !dbg !22
  %160 = bitcast float %159 to i32, !dbg !27
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 8, i32 31), !dbg !27
  %162 = bitcast i32 %161 to float, !dbg !27
  %163 = fadd float %159, %162, !dbg !22
  %164 = bitcast float %163 to i32, !dbg !27
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 4, i32 31), !dbg !27
  %166 = bitcast i32 %165 to float, !dbg !27
  %167 = fadd float %163, %166, !dbg !22
  %168 = bitcast float %167 to i32, !dbg !27
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 2, i32 31), !dbg !27
  %170 = bitcast i32 %169 to float, !dbg !27
  %171 = fadd float %167, %170, !dbg !22
  %172 = bitcast float %171 to i32, !dbg !27
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 1, i32 31), !dbg !27
  %174 = bitcast i32 %173 to float, !dbg !27
  %175 = fadd float %171, %174, !dbg !22
  %176 = and i32 %13, 7, !dbg !27
  %177 = icmp eq i32 %12, 0, !dbg !27
  %178 = getelementptr float, ptr addrspace(3) @global_smem, i32 %176, !dbg !27
  %179 = bitcast float %175 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %178, <1 x i32> %179, i1 %177) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %180 = icmp slt i32 %11, 8, !dbg !27
  %181 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !27
  %182 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %181, i1 %180) #5, !dbg !27
  %183 = bitcast i32 %182 to float, !dbg !27
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 4, i32 31), !dbg !27
  %185 = bitcast i32 %184 to float, !dbg !27
  %186 = fadd float %183, %185, !dbg !22
  %187 = bitcast float %186 to i32, !dbg !27
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 2, i32 31), !dbg !27
  %189 = bitcast i32 %188 to float, !dbg !27
  %190 = fadd float %186, %189, !dbg !22
  %191 = bitcast float %190 to i32, !dbg !27
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 1, i32 31), !dbg !27
  %193 = bitcast i32 %192 to float, !dbg !27
  %194 = fadd float %190, %193, !dbg !22
  %195 = and i32 %11, 7, !dbg !27
  %196 = icmp eq i32 %195, 0, !dbg !27
  %197 = and i1 %180, %196, !dbg !27
  %198 = bitcast float %194 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %198, i1 %197) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %199 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !27
  %200 = tail call float @llvm.nvvm.div.full(float %199, float 4.096000e+03), !dbg !28
  %201 = fadd float %200, 0x3EE4F8B580000000, !dbg !29
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %.not.i = icmp eq i32 %202, 0, !dbg !30
  br i1 %.not.i, label %205, label %203, !dbg !30

203:                                              ; preds = %8
  %204 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %201), !dbg !30
  br label %__nv_rsqrtf.exit, !dbg !30

205:                                              ; preds = %8
  %206 = tail call float @llvm.nvvm.rsqrt.approx.f(float %201), !dbg !30
  br label %__nv_rsqrtf.exit, !dbg !30

__nv_rsqrtf.exit:                                 ; preds = %203, %205
  %.0.i = phi float [ %204, %203 ], [ %206, %205 ], !dbg !30
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %.not.i22 = icmp eq i32 %214, 0, !dbg !30
  br i1 %.not.i22, label %217, label %215, !dbg !30

215:                                              ; preds = %__nv_rsqrtf.exit
  %216 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %201), !dbg !30
  br label %__nv_rsqrtf.exit24, !dbg !30

217:                                              ; preds = %__nv_rsqrtf.exit
  %218 = tail call float @llvm.nvvm.rsqrt.approx.f(float %201), !dbg !30
  br label %__nv_rsqrtf.exit24, !dbg !30

__nv_rsqrtf.exit24:                               ; preds = %215, %217
  %.0.i23 = phi float [ %216, %215 ], [ %218, %217 ], !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %219 = sext i32 %9 to i64, !dbg !32
  %220 = getelementptr float, ptr addrspace(1) %0, i64 %219, !dbg !32
  %221 = and i32 %11, 255, !dbg !33
  %222 = icmp eq i32 %221, 0, !dbg !33
  %223 = bitcast float %.0.i to i32, !dbg !33
  %224 = and i1 %222, %10, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %223, ptr addrspace(1) %220, i1 %224) #5, !dbg !33
  %225 = zext nneg i32 %15 to i64, !dbg !34
  %226 = getelementptr half, ptr addrspace(1) %3, i64 %225, !dbg !34
  %227 = zext nneg i32 %16 to i64, !dbg !34
  %228 = getelementptr half, ptr addrspace(1) %3, i64 %227, !dbg !34
  %229 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %226, i1 true) #5, !dbg !35
  %230 = extractvalue { i32, i32, i32, i32 } %229, 0, !dbg !35
  %231 = bitcast i32 %230 to <2 x half>, !dbg !35
  %232 = extractvalue { i32, i32, i32, i32 } %229, 1, !dbg !35
  %233 = bitcast i32 %232 to <2 x half>, !dbg !35
  %234 = extractvalue { i32, i32, i32, i32 } %229, 2, !dbg !35
  %235 = bitcast i32 %234 to <2 x half>, !dbg !35
  %236 = extractvalue { i32, i32, i32, i32 } %229, 3, !dbg !35
  %237 = bitcast i32 %236 to <2 x half>, !dbg !35
  %238 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %228, i1 true) #5, !dbg !35
  %239 = extractvalue { i32, i32, i32, i32 } %238, 0, !dbg !35
  %240 = bitcast i32 %239 to <2 x half>, !dbg !35
  %241 = extractvalue { i32, i32, i32, i32 } %238, 1, !dbg !35
  %242 = bitcast i32 %241 to <2 x half>, !dbg !35
  %243 = extractvalue { i32, i32, i32, i32 } %238, 2, !dbg !35
  %244 = bitcast i32 %243 to <2 x half>, !dbg !35
  %245 = extractvalue { i32, i32, i32, i32 } %238, 3, !dbg !35
  %246 = bitcast i32 %245 to <2 x half>, !dbg !35
  %247 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %21, i1 %10) #5, !dbg !36
  %248 = extractvalue { i32, i32, i32, i32 } %247, 0, !dbg !36
  %249 = bitcast i32 %248 to <2 x half>, !dbg !36
  %250 = extractvalue { i32, i32, i32, i32 } %247, 1, !dbg !36
  %251 = bitcast i32 %250 to <2 x half>, !dbg !36
  %252 = extractvalue { i32, i32, i32, i32 } %247, 2, !dbg !36
  %253 = bitcast i32 %252 to <2 x half>, !dbg !36
  %254 = extractvalue { i32, i32, i32, i32 } %247, 3, !dbg !36
  %255 = bitcast i32 %254 to <2 x half>, !dbg !36
  %256 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %23, i1 %10) #5, !dbg !36
  %257 = extractvalue { i32, i32, i32, i32 } %256, 0, !dbg !36
  %258 = bitcast i32 %257 to <2 x half>, !dbg !36
  %259 = extractvalue { i32, i32, i32, i32 } %256, 1, !dbg !36
  %260 = bitcast i32 %259 to <2 x half>, !dbg !36
  %261 = extractvalue { i32, i32, i32, i32 } %256, 2, !dbg !36
  %262 = bitcast i32 %261 to <2 x half>, !dbg !36
  %263 = extractvalue { i32, i32, i32, i32 } %256, 3, !dbg !36
  %264 = bitcast i32 %263 to <2 x half>, !dbg !36
  %265 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %62, i1 %10) #5, !dbg !37
  %266 = extractvalue { i32, i32, i32, i32 } %265, 0, !dbg !37
  %267 = bitcast i32 %266 to <2 x half>, !dbg !37
  %268 = extractvalue { i32, i32, i32, i32 } %265, 1, !dbg !37
  %269 = bitcast i32 %268 to <2 x half>, !dbg !37
  %270 = extractvalue { i32, i32, i32, i32 } %265, 2, !dbg !37
  %271 = bitcast i32 %270 to <2 x half>, !dbg !37
  %272 = extractvalue { i32, i32, i32, i32 } %265, 3, !dbg !37
  %273 = bitcast i32 %272 to <2 x half>, !dbg !37
  %274 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %63, i1 %10) #5, !dbg !37
  %275 = extractvalue { i32, i32, i32, i32 } %274, 0, !dbg !37
  %276 = bitcast i32 %275 to <2 x half>, !dbg !37
  %277 = extractvalue { i32, i32, i32, i32 } %274, 1, !dbg !37
  %278 = bitcast i32 %277 to <2 x half>, !dbg !37
  %279 = extractvalue { i32, i32, i32, i32 } %274, 2, !dbg !37
  %280 = bitcast i32 %279 to <2 x half>, !dbg !37
  %281 = extractvalue { i32, i32, i32, i32 } %274, 3, !dbg !37
  %282 = bitcast i32 %281 to <2 x half>, !dbg !37
  %283 = getelementptr half, ptr addrspace(1) %4, i64 %20, !dbg !38
  %284 = getelementptr half, ptr addrspace(1) %4, i64 %22, !dbg !38
  %285 = fpext <2 x half> %231 to <2 x float>, !dbg !39
  %286 = fpext <2 x half> %249 to <2 x float>, !dbg !40
  %287 = fpext <2 x half> %267 to <2 x float>, !dbg !41
  %288 = fadd <2 x float> %286, %287, !dbg !42
  %289 = insertelement <2 x float> poison, float %.0.i23, i64 0, !dbg !43
  %290 = shufflevector <2 x float> %289, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !43
  %291 = fmul <2 x float> %290, %288, !dbg !43
  %292 = fmul <2 x float> %291, %285, !dbg !44
  %293 = fptrunc <2 x float> %292 to <2 x half>, !dbg !45
  %294 = fpext <2 x half> %233 to <2 x float>, !dbg !39
  %295 = fpext <2 x half> %251 to <2 x float>, !dbg !40
  %296 = fpext <2 x half> %269 to <2 x float>, !dbg !41
  %297 = fadd <2 x float> %295, %296, !dbg !42
  %298 = fmul <2 x float> %290, %297, !dbg !43
  %299 = fmul <2 x float> %298, %294, !dbg !44
  %300 = fptrunc <2 x float> %299 to <2 x half>, !dbg !45
  %301 = fpext <2 x half> %235 to <2 x float>, !dbg !39
  %302 = fpext <2 x half> %253 to <2 x float>, !dbg !40
  %303 = fpext <2 x half> %271 to <2 x float>, !dbg !41
  %304 = fadd <2 x float> %302, %303, !dbg !42
  %305 = fmul <2 x float> %290, %304, !dbg !43
  %306 = fmul <2 x float> %305, %301, !dbg !44
  %307 = fptrunc <2 x float> %306 to <2 x half>, !dbg !45
  %308 = fpext <2 x half> %237 to <2 x float>, !dbg !39
  %309 = fpext <2 x half> %255 to <2 x float>, !dbg !40
  %310 = fpext <2 x half> %273 to <2 x float>, !dbg !41
  %311 = fadd <2 x float> %309, %310, !dbg !42
  %312 = fmul <2 x float> %290, %311, !dbg !43
  %313 = fmul <2 x float> %312, %308, !dbg !44
  %314 = fptrunc <2 x float> %313 to <2 x half>, !dbg !45
  %315 = fpext <2 x half> %240 to <2 x float>, !dbg !39
  %316 = fpext <2 x half> %258 to <2 x float>, !dbg !40
  %317 = fpext <2 x half> %276 to <2 x float>, !dbg !41
  %318 = fadd <2 x float> %316, %317, !dbg !42
  %319 = fmul <2 x float> %290, %318, !dbg !43
  %320 = fmul <2 x float> %319, %315, !dbg !44
  %321 = fptrunc <2 x float> %320 to <2 x half>, !dbg !45
  %322 = fpext <2 x half> %242 to <2 x float>, !dbg !39
  %323 = fpext <2 x half> %260 to <2 x float>, !dbg !40
  %324 = fpext <2 x half> %278 to <2 x float>, !dbg !41
  %325 = fadd <2 x float> %323, %324, !dbg !42
  %326 = fmul <2 x float> %290, %325, !dbg !43
  %327 = fmul <2 x float> %326, %322, !dbg !44
  %328 = fptrunc <2 x float> %327 to <2 x half>, !dbg !45
  %329 = fpext <2 x half> %244 to <2 x float>, !dbg !39
  %330 = fpext <2 x half> %262 to <2 x float>, !dbg !40
  %331 = fpext <2 x half> %280 to <2 x float>, !dbg !41
  %332 = fadd <2 x float> %330, %331, !dbg !42
  %333 = fmul <2 x float> %290, %332, !dbg !43
  %334 = fmul <2 x float> %333, %329, !dbg !44
  %335 = fptrunc <2 x float> %334 to <2 x half>, !dbg !45
  %336 = fpext <2 x half> %246 to <2 x float>, !dbg !39
  %337 = fpext <2 x half> %264 to <2 x float>, !dbg !40
  %338 = fpext <2 x half> %282 to <2 x float>, !dbg !41
  %339 = fadd <2 x float> %337, %338, !dbg !42
  %340 = fmul <2 x float> %290, %339, !dbg !43
  %341 = fmul <2 x float> %340, %336, !dbg !44
  %342 = fptrunc <2 x float> %341 to <2 x half>, !dbg !45
  %343 = bitcast <2 x half> %293 to i32, !dbg !45
  %344 = bitcast <2 x half> %300 to i32, !dbg !45
  %345 = bitcast <2 x half> %307 to i32, !dbg !45
  %346 = bitcast <2 x half> %314 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %343, i32 %344, i32 %345, i32 %346, ptr addrspace(1) %283, i1 %10) #5, !dbg !45
  %347 = bitcast <2 x half> %321 to i32, !dbg !45
  %348 = bitcast <2 x half> %328 to i32, !dbg !45
  %349 = bitcast <2 x half> %335 to i32, !dbg !45
  %350 = bitcast <2 x half> %342 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %347, i32 %348, i32 %349, i32 %350, ptr addrspace(1) %284, i1 %10) #5, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxbiz6a53yuzne7tuzqghtuipdavwtl2jp3relur3ksonmtcg44q.py", directory: "./local_cache/xb")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 21, scope: !6)
!11 = !DILocation(line: 25, column: 37, scope: !6)
!12 = !DILocation(line: 35, column: 46, scope: !6)
!13 = !DILocation(line: 35, column: 41, scope: !6)
!14 = !DILocation(line: 35, column: 34, scope: !6)
!15 = !DILocation(line: 35, column: 51, scope: !6)
!16 = !DILocation(line: 35, column: 112, scope: !6)
!17 = !DILocation(line: 36, column: 34, scope: !6)
!18 = !DILocation(line: 36, column: 51, scope: !6)
!19 = !DILocation(line: 36, column: 112, scope: !6)
!20 = !DILocation(line: 37, column: 22, scope: !6)
!21 = !DILocation(line: 39, column: 22, scope: !6)
!22 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !26)
!23 = distinct !DILexicalBlockFile(scope: !25, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!25 = distinct !DILexicalBlockFile(scope: !6, file: !24, discriminator: 0)
!26 = !DILocation(line: 43, column: 25, scope: !6)
!27 = !DILocation(line: 286, column: 36, scope: !25, inlinedAt: !26)
!28 = !DILocation(line: 45, column: 19, scope: !6)
!29 = !DILocation(line: 47, column: 19, scope: !6)
!30 = !DILocation(line: 48, column: 28, scope: !6)
!31 = !DILocation(line: 49, column: 4, scope: !6)
!32 = !DILocation(line: 50, column: 28, scope: !6)
!33 = !DILocation(line: 50, column: 40, scope: !6)
!34 = !DILocation(line: 57, column: 35, scope: !6)
!35 = !DILocation(line: 57, column: 42, scope: !6)
!36 = !DILocation(line: 58, column: 52, scope: !6)
!37 = !DILocation(line: 59, column: 52, scope: !6)
!38 = !DILocation(line: 65, column: 29, scope: !6)
!39 = !DILocation(line: 57, column: 95, scope: !6)
!40 = !DILocation(line: 58, column: 114, scope: !6)
!41 = !DILocation(line: 59, column: 114, scope: !6)
!42 = !DILocation(line: 60, column: 24, scope: !6)
!43 = !DILocation(line: 62, column: 24, scope: !6)
!44 = !DILocation(line: 64, column: 24, scope: !6)
!45 = !DILocation(line: 65, column: 53, scope: !6)
!46 = !DILocation(line: 51, column: 4, scope: !6)
