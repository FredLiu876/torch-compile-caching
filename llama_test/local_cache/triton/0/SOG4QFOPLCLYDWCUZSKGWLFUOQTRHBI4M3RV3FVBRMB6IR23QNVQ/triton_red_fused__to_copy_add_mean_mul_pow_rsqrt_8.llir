; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = shl i32 %10, 2, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %.lobit2 = lshr i32 %12, 7, !dbg !11
  %13 = and i32 %.lobit2, 3, !dbg !11
  %14 = and i32 %12, 31, !dbg !11
  %15 = or disjoint i32 %13, %11, !dbg !12
  %16 = icmp slt i32 %15, %6, !dbg !13
  %17 = shl i32 %12, 2, !dbg !14
  %18 = and i32 %17, 508, !dbg !14
  %19 = shl i32 %15, 12, !dbg !15
  %20 = or disjoint i32 %19, %18
  br label %21, !dbg !16

21:                                               ; preds = %9, %21
  %22 = phi float [ 0.000000e+00, %9 ], [ %58, %21 ]
  %23 = phi float [ 0.000000e+00, %9 ], [ %59, %21 ]
  %24 = phi float [ 0.000000e+00, %9 ], [ %72, %21 ]
  %25 = phi float [ 0.000000e+00, %9 ], [ %73, %21 ]
  %26 = phi i32 [ 0, %9 ], [ %77, %21 ]
  %27 = or i32 %20, %26, !dbg !17
  %28 = sext i32 %27 to i64, !dbg !18
  %29 = getelementptr half, ptr addrspace(1) %2, i64 %28, !dbg !18
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %29, i1 %16) #5, !dbg !19
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !19
  %32 = bitcast i32 %31 to <2 x half>, !dbg !19
  %33 = extractvalue { i32, i32 } %30, 1, !dbg !19
  %34 = bitcast i32 %33 to <2 x half>, !dbg !19
  %35 = getelementptr half, ptr addrspace(1) %3, i64 %28, !dbg !20
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %35, i1 %16) #5, !dbg !21
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !21
  %38 = bitcast i32 %37 to <2 x half>, !dbg !21
  %39 = extractvalue { i32, i32 } %36, 1, !dbg !21
  %40 = bitcast i32 %39 to <2 x half>, !dbg !21
  %41 = getelementptr half, ptr addrspace(1) %0, i64 %28, !dbg !22
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %41, i1 %16) #5, !dbg !23
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !23
  %44 = bitcast i32 %43 to <2 x half>, !dbg !23
  %45 = extractvalue { i32, i32 } %42, 1, !dbg !23
  %46 = bitcast i32 %45 to <2 x half>, !dbg !23
  %47 = fpext <2 x half> %32 to <2 x float>, !dbg !24
  %48 = fpext <2 x half> %38 to <2 x float>, !dbg !25
  %49 = fpext <2 x half> %44 to <2 x float>, !dbg !26
  %50 = fadd <2 x float> %47, %48, !dbg !27
  %51 = fadd <2 x float> %50, %49, !dbg !28
  %52 = fmul <2 x float> %51, %51, !dbg !29
  %53 = extractelement <2 x float> %52, i64 0, !dbg !29
  %54 = fmul <2 x float> %51, %51, !dbg !29
  %55 = extractelement <2 x float> %54, i64 1, !dbg !29
  %56 = fadd float %22, %53, !dbg !30
  %57 = fadd float %23, %55, !dbg !30
  %58 = select i1 %16, float %56, float %22, !dbg !31
  %59 = select i1 %16, float %57, float %23, !dbg !31
  %60 = fptrunc <2 x float> %51 to <2 x half>, !dbg !32
  %61 = fpext <2 x half> %34 to <2 x float>, !dbg !24
  %62 = fpext <2 x half> %40 to <2 x float>, !dbg !25
  %63 = fpext <2 x half> %46 to <2 x float>, !dbg !26
  %64 = fadd <2 x float> %61, %62, !dbg !27
  %65 = fadd <2 x float> %64, %63, !dbg !28
  %66 = fmul <2 x float> %65, %65, !dbg !29
  %67 = extractelement <2 x float> %66, i64 0, !dbg !29
  %68 = fmul <2 x float> %65, %65, !dbg !29
  %69 = extractelement <2 x float> %68, i64 1, !dbg !29
  %70 = fadd float %24, %67, !dbg !30
  %71 = fadd float %25, %69, !dbg !30
  %72 = select i1 %16, float %70, float %24, !dbg !31
  %73 = select i1 %16, float %71, float %25, !dbg !31
  %74 = fptrunc <2 x float> %65 to <2 x half>, !dbg !32
  %75 = bitcast <2 x half> %60 to i32, !dbg !32
  %76 = bitcast <2 x half> %74 to i32, !dbg !32
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %75, i32 %76, ptr addrspace(1) %41, i1 %16) #5, !dbg !32
  %77 = add nuw nsw i32 %26, 512, !dbg !16
  %78 = icmp samesign ult i32 %26, 3584, !dbg !16
  br i1 %78, label %21, label %79, !dbg !16

79:                                               ; preds = %21
  %80 = lshr i32 %12, 5, !dbg !11
  %81 = and i32 %12, 3, !dbg !11
  %82 = or disjoint i32 %11, %81, !dbg !12
  %83 = icmp slt i32 %82, %6, !dbg !13
  %84 = and i32 %12, 511, !dbg !14
  %85 = fadd float %58, %59, !dbg !33
  %86 = fadd float %72, %85, !dbg !33
  %87 = fadd float %73, %86, !dbg !33
  %88 = bitcast float %87 to i32, !dbg !38
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 16, i32 31), !dbg !38
  %90 = bitcast i32 %89 to float, !dbg !38
  %91 = fadd float %87, %90, !dbg !33
  %92 = bitcast float %91 to i32, !dbg !38
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 8, i32 31), !dbg !38
  %94 = bitcast i32 %93 to float, !dbg !38
  %95 = fadd float %91, %94, !dbg !33
  %96 = bitcast float %95 to i32, !dbg !38
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 4, i32 31), !dbg !38
  %98 = bitcast i32 %97 to float, !dbg !38
  %99 = fadd float %95, %98, !dbg !33
  %100 = bitcast float %99 to i32, !dbg !38
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 2, i32 31), !dbg !38
  %102 = bitcast i32 %101 to float, !dbg !38
  %103 = fadd float %99, %102, !dbg !33
  %104 = bitcast float %103 to i32, !dbg !38
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 1, i32 31), !dbg !38
  %106 = bitcast i32 %105 to float, !dbg !38
  %107 = fadd float %103, %106, !dbg !33
  %108 = and i32 %80, 3, !dbg !38
  %109 = icmp eq i32 %14, 0, !dbg !38
  %110 = shl nuw nsw i32 %13, 2, !dbg !38
  %111 = or disjoint i32 %110, %108, !dbg !38
  %112 = getelementptr float, ptr addrspace(3) @global_smem, i32 %111, !dbg !38
  %113 = bitcast float %107 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 %109) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %114 = icmp slt i32 %12, 16, !dbg !38
  %115 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !38
  %116 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %115, i1 %114) #5, !dbg !38
  %117 = bitcast i32 %116 to float, !dbg !38
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 2, i32 31), !dbg !38
  %119 = bitcast i32 %118 to float, !dbg !38
  %120 = fadd float %117, %119, !dbg !33
  %121 = bitcast float %120 to i32, !dbg !38
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 1, i32 31), !dbg !38
  %123 = bitcast i32 %122 to float, !dbg !38
  %124 = fadd float %120, %123, !dbg !33
  %125 = icmp eq i32 %81, 0, !dbg !38
  %126 = and i1 %114, %125, !dbg !38
  %127 = bitcast float %124 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %127, i1 %126) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i32 %110, !dbg !38
  %129 = load float, ptr addrspace(3) %128, align 16, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %130 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %13, !dbg !39
  %131 = bitcast float %129 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 true) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %132 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %81, !dbg !39
  %133 = load float, ptr addrspace(3) %132, align 4, !dbg !39
  %134 = tail call float @llvm.nvvm.div.full(float %133, float 4.096000e+03), !dbg !40
  %135 = tail call float @llvm.nvvm.div.full(float %129, float 4.096000e+03), !dbg !40
  %136 = fadd float %134, 0x3EE4F8B580000000, !dbg !41
  %137 = fadd float %135, 0x3EE4F8B580000000, !dbg !41
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i = icmp eq i32 %138, 0, !dbg !39
  br i1 %.not.i, label %141, label %139, !dbg !39

139:                                              ; preds = %79
  %140 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %136), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

141:                                              ; preds = %79
  %142 = tail call float @llvm.nvvm.rsqrt.approx.f(float %136), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

__nv_rsqrtf.exit:                                 ; preds = %139, %141
  %.0.i = phi float [ %140, %139 ], [ %142, %141 ], !dbg !39
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i16 = icmp eq i32 %146, 0, !dbg !39
  br i1 %.not.i16, label %149, label %147, !dbg !39

147:                                              ; preds = %__nv_rsqrtf.exit
  %148 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %137), !dbg !39
  br label %__nv_rsqrtf.exit18, !dbg !39

149:                                              ; preds = %__nv_rsqrtf.exit
  %150 = tail call float @llvm.nvvm.rsqrt.approx.f(float %137), !dbg !39
  br label %__nv_rsqrtf.exit18, !dbg !39

__nv_rsqrtf.exit18:                               ; preds = %147, %149
  %.0.i17 = phi float [ %148, %147 ], [ %150, %149 ], !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %151 = sext i32 %82 to i64, !dbg !43
  %152 = getelementptr float, ptr addrspace(1) %1, i64 %151, !dbg !43
  %153 = and i32 %12, 508, !dbg !44
  %154 = icmp eq i32 %153, 0, !dbg !44
  %155 = bitcast float %.0.i to i32, !dbg !44
  %156 = and i1 %154, %83, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %155, ptr addrspace(1) %152, i1 %156) #5, !dbg !44
  %157 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %84
  %158 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %18
  %159 = zext nneg i32 %84 to i64, !dbg !45
  %160 = getelementptr inbounds nuw i8, ptr addrspace(3) %158, i32 8
  %161 = insertelement <2 x float> poison, float %.0.i17, i64 0, !dbg !46
  %162 = shufflevector <2 x float> %161, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !46
  br label %163, !dbg !45

163:                                              ; preds = %__nv_rsqrtf.exit18, %163
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit18 ], [ %indvars.iv.next, %163 ]
  %164 = or disjoint i64 %indvars.iv, %159, !dbg !47
  %165 = getelementptr half, ptr addrspace(1) %4, i64 %164, !dbg !48
  %166 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %165, i1 true) #5, !dbg !49
  %167 = bitcast i16 %166 to half, !dbg !49
  %168 = fpext half %167 to float, !dbg !50
  %169 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !51
  %170 = or i32 %20, %169, !dbg !51
  %171 = sext i32 %170 to i64, !dbg !52
  %172 = getelementptr half, ptr addrspace(1) %0, i64 %171, !dbg !52
  %173 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %172, i1 %16) #5, !dbg !53
  %174 = extractvalue { i32, i32 } %173, 0, !dbg !53
  %175 = bitcast i32 %174 to <2 x half>, !dbg !53
  %176 = extractvalue { i32, i32 } %173, 1, !dbg !53
  %177 = bitcast i32 %176 to <2 x half>, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %178 = bitcast float %168 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %178, i1 true) #5, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %179 = getelementptr half, ptr addrspace(1) %5, i64 %171, !dbg !55
  %180 = fpext <2 x half> %175 to <2 x float>, !dbg !56
  %181 = fmul <2 x float> %162, %180, !dbg !46
  %182 = load <2 x float>, ptr addrspace(3) %158, align 16, !dbg !54
  %183 = fmul <2 x float> %182, %181, !dbg !54
  %184 = fptrunc <2 x float> %183 to <2 x half>, !dbg !57
  %185 = fpext <2 x half> %177 to <2 x float>, !dbg !56
  %186 = fmul <2 x float> %162, %185, !dbg !46
  %187 = load <2 x float>, ptr addrspace(3) %160, align 8, !dbg !54
  %188 = fmul <2 x float> %187, %186, !dbg !54
  %189 = fptrunc <2 x float> %188 to <2 x half>, !dbg !57
  %190 = bitcast <2 x half> %184 to i32, !dbg !57
  %191 = bitcast <2 x half> %189 to i32, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %190, i32 %191, ptr addrspace(1) %179, i1 %16) #5, !dbg !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !45
  %192 = icmp samesign ult i64 %indvars.iv, 3584, !dbg !45
  br i1 %192, label %163, label %193, !dbg !45

193:                                              ; preds = %163
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cirveghol7wjrq7zwkkgu3sphruzjhq4ru5zcvmudgaexdo5niag.py", directory: "./local_cache/ir")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 29, column: 40, scope: !6)
!17 = !DILocation(line: 35, column: 41, scope: !6)
!18 = !DILocation(line: 35, column: 34, scope: !6)
!19 = !DILocation(line: 35, column: 51, scope: !6)
!20 = !DILocation(line: 36, column: 34, scope: !6)
!21 = !DILocation(line: 36, column: 51, scope: !6)
!22 = !DILocation(line: 37, column: 38, scope: !6)
!23 = !DILocation(line: 37, column: 55, scope: !6)
!24 = !DILocation(line: 35, column: 113, scope: !6)
!25 = !DILocation(line: 36, column: 113, scope: !6)
!26 = !DILocation(line: 37, column: 117, scope: !6)
!27 = !DILocation(line: 38, column: 22, scope: !6)
!28 = !DILocation(line: 39, column: 22, scope: !6)
!29 = !DILocation(line: 41, column: 22, scope: !6)
!30 = !DILocation(line: 43, column: 23, scope: !6)
!31 = !DILocation(line: 44, column: 48, scope: !6)
!32 = !DILocation(line: 45, column: 55, scope: !6)
!33 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !37)
!34 = distinct !DILexicalBlockFile(scope: !36, file: !35, discriminator: 0)
!35 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!36 = distinct !DILexicalBlockFile(scope: !6, file: !35, discriminator: 0)
!37 = !DILocation(line: 46, column: 25, scope: !6)
!38 = !DILocation(line: 286, column: 36, scope: !36, inlinedAt: !37)
!39 = !DILocation(line: 51, column: 28, scope: !6)
!40 = !DILocation(line: 48, column: 20, scope: !6)
!41 = !DILocation(line: 50, column: 20, scope: !6)
!42 = !DILocation(line: 52, column: 4, scope: !6)
!43 = !DILocation(line: 53, column: 28, scope: !6)
!44 = !DILocation(line: 53, column: 40, scope: !6)
!45 = !DILocation(line: 54, column: 40, scope: !6)
!46 = !DILocation(line: 63, column: 24, scope: !6)
!47 = !DILocation(line: 55, column: 31, scope: !6)
!48 = !DILocation(line: 60, column: 35, scope: !6)
!49 = !DILocation(line: 60, column: 42, scope: !6)
!50 = !DILocation(line: 60, column: 95, scope: !6)
!51 = !DILocation(line: 61, column: 46, scope: !6)
!52 = !DILocation(line: 61, column: 39, scope: !6)
!53 = !DILocation(line: 61, column: 56, scope: !6)
!54 = !DILocation(line: 65, column: 24, scope: !6)
!55 = !DILocation(line: 66, column: 29, scope: !6)
!56 = !DILocation(line: 61, column: 118, scope: !6)
!57 = !DILocation(line: 66, column: 53, scope: !6)
!58 = !DILocation(line: 54, column: 4, scope: !6)
