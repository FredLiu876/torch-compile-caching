; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [73 x i8] c"./local_cache/7p/c7pbg3l2pkvqtef7mnprrepoat4qlaxffimkbo2dg7te5trtgllm.py\00"
@assertMessage_0 = internal constant [41 x i8] c"index out of bounds: 0 <= tmp49 < 128256\00"

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_div_embedding_dense_backward_mul_pow_sum_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10, ptr addrspace(1) readnone captures(none) %11) local_unnamed_addr !dbg !10 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %14 = shl i32 %13, 2, !dbg !12
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %16 = lshr i32 %15, 2, !dbg !13
  %17 = and i32 %16, 3, !dbg !13
  %18 = or disjoint i32 %17, %14, !dbg !14
  %19 = icmp slt i32 %18, %9, !dbg !15
  %.fr = freeze i1 %19
  %20 = and i32 %15, 3, !dbg !16
  %21 = shl i32 %18, 12, !dbg !17
  %invariant.op = or disjoint i32 %20, %21, !dbg !18
  %22 = zext nneg i32 %20 to i64, !dbg !18
  br i1 %.fr, label %.split.us, label %.split

.split.us:                                        ; preds = %12, %.split.us
  %indvars.iv8 = phi i64 [ %indvars.iv.next9, %.split.us ], [ 0, %12 ]
  %23 = phi float [ %51, %.split.us ], [ 0.000000e+00, %12 ]
  %24 = or disjoint i64 %indvars.iv8, %22, !dbg !19
  %25 = trunc nuw nsw i64 %indvars.iv8 to i32
  %.reass.us = or i32 %invariant.op, %25
  %26 = sext i32 %.reass.us to i64, !dbg !20
  %27 = getelementptr half, ptr addrspace(1) %0, i64 %26, !dbg !20
  %28 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %27, i1 true) #4, !dbg !21
  %29 = bitcast i16 %28 to half, !dbg !21
  %30 = fpext half %29 to float, !dbg !22
  %31 = getelementptr half, ptr addrspace(1) %1, i64 %26, !dbg !23
  %32 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %31, i1 true) #4, !dbg !24
  %33 = bitcast i16 %32 to half, !dbg !24
  %34 = fpext half %33 to float, !dbg !25
  %35 = getelementptr half, ptr addrspace(1) %2, i64 %26, !dbg !26
  %36 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %35, i1 true) #4, !dbg !27
  %37 = bitcast i16 %36 to half, !dbg !27
  %38 = fpext half %37 to float, !dbg !28
  %39 = getelementptr half, ptr addrspace(1) %3, i64 %24, !dbg !29
  %40 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %39, i1 true) #4, !dbg !30
  %41 = bitcast i16 %40 to half, !dbg !30
  %42 = fpext half %41 to float, !dbg !31
  %43 = getelementptr half, ptr addrspace(1) %4, i64 %26, !dbg !32
  %44 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %43, i1 true) #4, !dbg !33
  %45 = bitcast i16 %44 to half, !dbg !33
  %46 = fpext half %45 to float, !dbg !34
  %47 = fadd float %30, %34, !dbg !35
  %48 = fadd float %47, %38, !dbg !36
  %49 = fmul float %48, %42, !dbg !37
  %50 = fmul float %49, %46, !dbg !38
  %51 = fadd float %23, %50, !dbg !39
  %indvars.iv.next9 = add nuw nsw i64 %indvars.iv8, 4, !dbg !18
  %52 = icmp samesign ult i64 %indvars.iv8, 4092, !dbg !18
  br i1 %52, label %.split.us, label %.split4.us, !dbg !18

.split:                                           ; preds = %12, %.split
  %indvars.iv = phi i64 [ %indvars.iv.next, %.split ], [ 0, %12 ]
  %53 = or disjoint i64 %indvars.iv, %22, !dbg !19
  %54 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %54
  %55 = sext i32 %.reass to i64, !dbg !20
  %56 = getelementptr half, ptr addrspace(1) %0, i64 %55, !dbg !20
  %57 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %56, i1 false) #4, !dbg !21
  %58 = getelementptr half, ptr addrspace(1) %1, i64 %55, !dbg !23
  %59 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %58, i1 false) #4, !dbg !24
  %60 = getelementptr half, ptr addrspace(1) %2, i64 %55, !dbg !26
  %61 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %60, i1 false) #4, !dbg !27
  %62 = getelementptr half, ptr addrspace(1) %3, i64 %53, !dbg !29
  %63 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %62, i1 true) #4, !dbg !30
  %64 = getelementptr half, ptr addrspace(1) %4, i64 %55, !dbg !32
  %65 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %64, i1 false) #4, !dbg !33
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !18
  %66 = icmp samesign ult i64 %indvars.iv, 4092, !dbg !18
  br i1 %66, label %.split, label %.split4.us, !dbg !18

.split4.us:                                       ; preds = %.split, %.split.us
  %.us-phi = phi float [ %51, %.split.us ], [ 0.000000e+00, %.split ], !dbg !40
  %67 = bitcast float %.us-phi to i32, !dbg !40
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 2, i32 31), !dbg !40
  %69 = bitcast i32 %68 to float, !dbg !40
  %70 = fadd float %.us-phi, %69, !dbg !44
  %71 = bitcast float %70 to i32, !dbg !40
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 1, i32 31), !dbg !40
  %73 = bitcast i32 %72 to float, !dbg !40
  %74 = fadd float %70, %73, !dbg !44
  %75 = sext i32 %18 to i64, !dbg !46
  %76 = getelementptr i64, ptr addrspace(1) %5, i64 %75, !dbg !46
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %76, i1 %.fr) #4, !dbg !47
  %78 = getelementptr float, ptr addrspace(1) %7, i64 %75, !dbg !48
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %.fr) #4, !dbg !49
  %80 = bitcast i32 %79 to float, !dbg !49
  %81 = icmp eq i64 %77, -1, !dbg !50
  %82 = fmul float %74, 5.000000e-01, !dbg !51
  %83 = fmul float %80, %80, !dbg !52
  %84 = fmul float %83, %80, !dbg !53
  %85 = fmul float %82, %84, !dbg !54
  %86 = fmul float %85, 0x3F30000000000000, !dbg !55
  %87 = add i64 %77, 128256, !dbg !56
  %88 = icmp slt i64 %77, 0, !dbg !57
  %89 = select i1 %88, i64 %87, i64 %77, !dbg !58
  %90 = icmp ugt i64 %89, 128255, !dbg !59
  %.not2 = and i1 %.fr, %90, !dbg !60
  %91 = and i32 %15, 240
  %92 = icmp eq i32 %91, 0
  %93 = and i1 %92, %.fr
  %.idx = shl i64 %89, 14
  %94 = getelementptr i8, ptr addrspace(1) %8, i64 %.idx
  %95 = insertelement <2 x float> poison, float %80, i64 0, !dbg !61
  %96 = insertelement <2 x float> %95, float %86, i64 1, !dbg !61
  br label %97, !dbg !62

97:                                               ; preds = %.split4.us, %114
  %indvars.iv10 = phi i64 [ 0, %.split4.us ], [ %indvars.iv.next11, %114 ]
  %98 = or disjoint i64 %indvars.iv10, %22, !dbg !63
  %99 = trunc nuw nsw i64 %indvars.iv10 to i32
  %.reass6 = or i32 %invariant.op, %99
  %100 = sext i32 %.reass6 to i64, !dbg !64
  %101 = getelementptr half, ptr addrspace(1) %6, i64 %100, !dbg !64
  %102 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %101, i1 %.fr) #4, !dbg !65
  %103 = getelementptr half, ptr addrspace(1) %0, i64 %100, !dbg !66
  %104 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %103, i1 %.fr) #4, !dbg !67
  %105 = getelementptr half, ptr addrspace(1) %1, i64 %100, !dbg !68
  %106 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %105, i1 %.fr) #4, !dbg !69
  %107 = getelementptr half, ptr addrspace(1) %2, i64 %100, !dbg !70
  %108 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %107, i1 %.fr) #4, !dbg !71
  %109 = getelementptr half, ptr addrspace(1) %3, i64 %98, !dbg !72
  %110 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %109, i1 true) #4, !dbg !73
  %111 = getelementptr half, ptr addrspace(1) %4, i64 %100, !dbg !74
  %112 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %111, i1 %.fr) #4, !dbg !75
  br i1 %.not2, label %113, label %114, !dbg !76

113:                                              ; preds = %97
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 92, ptr nonnull @assertFunc_0, i64 1), !dbg !76
  unreachable, !dbg !76

114:                                              ; preds = %97
  %115 = bitcast i16 %104 to half, !dbg !67
  %116 = fpext half %115 to float, !dbg !77
  %117 = bitcast i16 %106 to half, !dbg !69
  %118 = fpext half %117 to float, !dbg !78
  %119 = fadd float %116, %118, !dbg !79
  %120 = bitcast i16 %108 to half, !dbg !71
  %121 = fpext half %120 to float, !dbg !80
  %122 = fadd float %119, %121, !dbg !81
  %123 = insertelement <2 x i16> poison, i16 %110, i64 0, !dbg !73
  %124 = insertelement <2 x i16> %123, i16 %112, i64 1, !dbg !73
  %125 = bitcast <2 x i16> %124 to <2 x half>, !dbg !73
  %126 = fpext <2 x half> %125 to <2 x float>, !dbg !82
  %127 = insertelement <2 x float> <float poison, float 2.000000e+00>, float %122, i64 0, !dbg !83
  %128 = fmul <2 x float> %127, %126, !dbg !83
  %129 = fmul <2 x float> %128, %96, !dbg !61
  %shift = shufflevector <2 x float> %129, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !84
  %130 = fsub <2 x float> %129, %shift, !dbg !84
  %131 = extractelement <2 x float> %130, i64 0, !dbg !84
  %132 = bitcast i16 %102 to half, !dbg !65
  %133 = fpext half %132 to float, !dbg !85
  %134 = fadd float %131, %133, !dbg !86
  %135 = select i1 %81, float 0.000000e+00, float %134, !dbg !87
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %136 = getelementptr float, ptr addrspace(1) %94, i64 %98, !dbg !88
  %137 = tail call float asm sideeffect "mov.u32 $0, 0x0;\0A\09@$3 atom.global.gpu.relaxed.add.f32 $0, [ $1 + 0 ], $2;", "=r,l,r,b"(ptr addrspace(1) %136, float %135, i1 %93) #4, !dbg !89
  %indvars.iv.next11 = add nuw nsw i64 %indvars.iv10, 4, !dbg !62
  %138 = icmp samesign ult i64 %indvars.iv10, 4092, !dbg !62
  br i1 %138, label %97, label %139, !dbg !62

139:                                              ; preds = %114
  ret void, !dbg !90
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7pbg3l2pkvqtef7mnprrepoat4qlaxffimkbo2dg7te5trtgllm.py", directory: "./local_cache/7p")
!4 = !{ptr @triton_red_fused__to_copy_add_div_embedding_dense_backward_mul_pow_sum_13, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_embedding_dense_backward_mul_pow_sum_13", linkageName: "triton_red_fused__to_copy_add_div_embedding_dense_backward_mul_pow_sum_13", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 22, column: 28, scope: !10)
!12 = !DILocation(line: 22, column: 33, scope: !10)
!13 = !DILocation(line: 23, column: 44, scope: !10)
!14 = !DILocation(line: 23, column: 23, scope: !10)
!15 = !DILocation(line: 24, column: 21, scope: !10)
!16 = !DILocation(line: 25, column: 37, scope: !10)
!17 = !DILocation(line: 35, column: 46, scope: !10)
!18 = !DILocation(line: 29, column: 40, scope: !10)
!19 = !DILocation(line: 30, column: 31, scope: !10)
!20 = !DILocation(line: 35, column: 34, scope: !10)
!21 = !DILocation(line: 35, column: 51, scope: !10)
!22 = !DILocation(line: 35, column: 112, scope: !10)
!23 = !DILocation(line: 36, column: 34, scope: !10)
!24 = !DILocation(line: 36, column: 51, scope: !10)
!25 = !DILocation(line: 36, column: 112, scope: !10)
!26 = !DILocation(line: 37, column: 34, scope: !10)
!27 = !DILocation(line: 37, column: 51, scope: !10)
!28 = !DILocation(line: 37, column: 112, scope: !10)
!29 = !DILocation(line: 38, column: 34, scope: !10)
!30 = !DILocation(line: 38, column: 41, scope: !10)
!31 = !DILocation(line: 38, column: 94, scope: !10)
!32 = !DILocation(line: 39, column: 34, scope: !10)
!33 = !DILocation(line: 39, column: 51, scope: !10)
!34 = !DILocation(line: 39, column: 112, scope: !10)
!35 = !DILocation(line: 40, column: 22, scope: !10)
!36 = !DILocation(line: 41, column: 22, scope: !10)
!37 = !DILocation(line: 42, column: 22, scope: !10)
!38 = !DILocation(line: 45, column: 23, scope: !10)
!39 = !DILocation(line: 47, column: 25, scope: !10)
!40 = !DILocation(line: 286, column: 36, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !10, file: !42, discriminator: 0)
!42 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!43 = !DILocation(line: 49, column: 27, scope: !10)
!44 = !DILocation(line: 256, column: 15, scope: !45, inlinedAt: !43)
!45 = distinct !DILexicalBlockFile(scope: !41, file: !42, discriminator: 0)
!46 = !DILocation(line: 50, column: 31, scope: !10)
!47 = !DILocation(line: 50, column: 36, scope: !10)
!48 = !DILocation(line: 51, column: 31, scope: !10)
!49 = !DILocation(line: 51, column: 36, scope: !10)
!50 = !DILocation(line: 65, column: 25, scope: !10)
!51 = !DILocation(line: 72, column: 24, scope: !10)
!52 = !DILocation(line: 73, column: 24, scope: !10)
!53 = !DILocation(line: 74, column: 24, scope: !10)
!54 = !DILocation(line: 75, column: 24, scope: !10)
!55 = !DILocation(line: 77, column: 24, scope: !10)
!56 = !DILocation(line: 89, column: 24, scope: !10)
!57 = !DILocation(line: 90, column: 24, scope: !10)
!58 = !DILocation(line: 91, column: 39, scope: !10)
!59 = !DILocation(line: 92, column: 42, scope: !10)
!60 = !DILocation(line: 93, column: 62, scope: !10)
!61 = !DILocation(line: 70, column: 24, scope: !10)
!62 = !DILocation(line: 52, column: 40, scope: !10)
!63 = !DILocation(line: 53, column: 31, scope: !10)
!64 = !DILocation(line: 58, column: 35, scope: !10)
!65 = !DILocation(line: 58, column: 52, scope: !10)
!66 = !DILocation(line: 59, column: 35, scope: !10)
!67 = !DILocation(line: 59, column: 52, scope: !10)
!68 = !DILocation(line: 60, column: 35, scope: !10)
!69 = !DILocation(line: 60, column: 52, scope: !10)
!70 = !DILocation(line: 61, column: 35, scope: !10)
!71 = !DILocation(line: 61, column: 52, scope: !10)
!72 = !DILocation(line: 62, column: 35, scope: !10)
!73 = !DILocation(line: 62, column: 42, scope: !10)
!74 = !DILocation(line: 63, column: 35, scope: !10)
!75 = !DILocation(line: 63, column: 52, scope: !10)
!76 = !DILocation(line: 92, column: 71, scope: !10)
!77 = !DILocation(line: 59, column: 114, scope: !10)
!78 = !DILocation(line: 60, column: 114, scope: !10)
!79 = !DILocation(line: 66, column: 24, scope: !10)
!80 = !DILocation(line: 61, column: 114, scope: !10)
!81 = !DILocation(line: 67, column: 24, scope: !10)
!82 = !DILocation(line: 62, column: 95, scope: !10)
!83 = !DILocation(line: 68, column: 24, scope: !10)
!84 = !DILocation(line: 82, column: 24, scope: !10)
!85 = !DILocation(line: 58, column: 114, scope: !10)
!86 = !DILocation(line: 84, column: 24, scope: !10)
!87 = !DILocation(line: 87, column: 39, scope: !10)
!88 = !DILocation(line: 93, column: 34, scope: !10)
!89 = !DILocation(line: 93, column: 98, scope: !10)
!90 = !DILocation(line: 52, column: 4, scope: !10)
