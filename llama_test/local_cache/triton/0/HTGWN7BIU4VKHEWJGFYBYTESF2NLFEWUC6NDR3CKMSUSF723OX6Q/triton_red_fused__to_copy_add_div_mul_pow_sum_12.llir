; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_red_fused__to_copy_add_div_mul_pow_sum_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = shl i32 %11, 2, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %14 = lshr i32 %13, 3, !dbg !11
  %15 = and i32 %14, 3, !dbg !11
  %16 = or disjoint i32 %15, %12, !dbg !12
  %17 = icmp slt i32 %16, %7, !dbg !13
  %.fr = freeze i1 %17
  %18 = and i32 %13, 7, !dbg !14
  %19 = shl i32 %16, 12, !dbg !15
  %invariant.op = or disjoint i32 %18, %19, !dbg !16
  %20 = zext nneg i32 %18 to i64, !dbg !16
  br i1 %.fr, label %.split.us, label %.split

.split.us:                                        ; preds = %10, %.split.us
  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %.split.us ], [ 0, %10 ]
  %21 = phi float [ %50, %.split.us ], [ 0.000000e+00, %10 ]
  %22 = or disjoint i64 %indvars.iv7, %20, !dbg !17
  %23 = trunc nuw nsw i64 %indvars.iv7 to i32
  %.reass.us = or i32 %invariant.op, %23
  %24 = sext i32 %.reass.us to i64, !dbg !18
  %25 = getelementptr half, ptr addrspace(1) %1, i64 %24, !dbg !18
  %26 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %25, i1 true) #2, !dbg !19
  %27 = getelementptr half, ptr addrspace(1) %2, i64 %24, !dbg !20
  %28 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %27, i1 true) #2, !dbg !21
  %29 = getelementptr half, ptr addrspace(1) %3, i64 %22, !dbg !22
  %30 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %29, i1 true) #2, !dbg !23
  %31 = bitcast i16 %30 to half, !dbg !23
  %32 = fpext half %31 to float, !dbg !24
  %33 = getelementptr half, ptr addrspace(1) %4, i64 %24, !dbg !25
  %34 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %33, i1 true) #2, !dbg !26
  %35 = getelementptr half, ptr addrspace(1) %5, i64 %24, !dbg !27
  %36 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %35, i1 true) #2, !dbg !28
  %37 = insertelement <2 x i16> poison, i16 %26, i64 0, !dbg !19
  %38 = insertelement <2 x i16> %37, i16 %34, i64 1, !dbg !19
  %39 = bitcast <2 x i16> %38 to <2 x half>, !dbg !19
  %40 = fpext <2 x half> %39 to <2 x float>, !dbg !29
  %41 = insertelement <2 x i16> poison, i16 %28, i64 0, !dbg !21
  %42 = insertelement <2 x i16> %41, i16 %36, i64 1, !dbg !21
  %43 = bitcast <2 x i16> %42 to <2 x half>, !dbg !21
  %44 = fpext <2 x half> %43 to <2 x float>, !dbg !30
  %45 = fadd <2 x float> %40, %44, !dbg !31
  %46 = extractelement <2 x float> %45, i64 0, !dbg !32
  %47 = fmul float %46, %32, !dbg !32
  %48 = extractelement <2 x float> %45, i64 1, !dbg !33
  %49 = fmul float %47, %48, !dbg !33
  %50 = fadd float %21, %49, !dbg !34
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 8, !dbg !16
  %51 = icmp samesign ult i64 %indvars.iv7, 4088, !dbg !16
  br i1 %51, label %.split.us, label %.split3.us, !dbg !16

.split:                                           ; preds = %10, %.split
  %indvars.iv = phi i64 [ %indvars.iv.next, %.split ], [ 0, %10 ]
  %52 = or disjoint i64 %indvars.iv, %20, !dbg !17
  %53 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %53
  %54 = sext i32 %.reass to i64, !dbg !18
  %55 = getelementptr half, ptr addrspace(1) %1, i64 %54, !dbg !18
  %56 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %55, i1 false) #2, !dbg !19
  %57 = getelementptr half, ptr addrspace(1) %2, i64 %54, !dbg !20
  %58 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %57, i1 false) #2, !dbg !21
  %59 = getelementptr half, ptr addrspace(1) %3, i64 %52, !dbg !22
  %60 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %59, i1 true) #2, !dbg !23
  %61 = getelementptr half, ptr addrspace(1) %4, i64 %54, !dbg !25
  %62 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %61, i1 false) #2, !dbg !26
  %63 = getelementptr half, ptr addrspace(1) %5, i64 %54, !dbg !27
  %64 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %63, i1 false) #2, !dbg !28
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !16
  %65 = icmp samesign ult i64 %indvars.iv, 4088, !dbg !16
  br i1 %65, label %.split, label %.split3.us, !dbg !16

.split3.us:                                       ; preds = %.split, %.split.us
  %.us-phi = phi float [ %50, %.split.us ], [ 0.000000e+00, %.split ], !dbg !35
  %66 = bitcast float %.us-phi to i32, !dbg !35
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 4, i32 31), !dbg !35
  %68 = bitcast i32 %67 to float, !dbg !35
  %69 = fadd float %.us-phi, %68, !dbg !39
  %70 = bitcast float %69 to i32, !dbg !35
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 2, i32 31), !dbg !35
  %72 = bitcast i32 %71 to float, !dbg !35
  %73 = fadd float %69, %72, !dbg !39
  %74 = bitcast float %73 to i32, !dbg !35
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 1, i32 31), !dbg !35
  %76 = bitcast i32 %75 to float, !dbg !35
  %77 = fadd float %73, %76, !dbg !39
  %78 = sext i32 %16 to i64, !dbg !41
  %79 = getelementptr float, ptr addrspace(1) %6, i64 %78, !dbg !41
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %.fr) #2, !dbg !42
  %81 = bitcast i32 %80 to float, !dbg !42
  %82 = fmul float %77, 5.000000e-01, !dbg !43
  %83 = fmul float %81, %81, !dbg !44
  %84 = fmul float %83, %81, !dbg !45
  %85 = fmul float %82, %84, !dbg !46
  %86 = fmul float %85, 0x3F30000000000000, !dbg !47
  %87 = and i32 %13, 32
  %88 = icmp eq i32 %87, 0
  %89 = and i1 %88, %.fr
  %90 = insertelement <2 x float> poison, float %81, i64 0, !dbg !48
  %91 = insertelement <2 x float> %90, float %86, i64 1, !dbg !48
  br label %92, !dbg !49

92:                                               ; preds = %.split3.us, %92
  %indvars.iv9 = phi i64 [ 0, %.split3.us ], [ %indvars.iv.next10, %92 ]
  %93 = or disjoint i64 %indvars.iv9, %20, !dbg !50
  %94 = trunc nuw nsw i64 %indvars.iv9 to i32
  %.reass5 = or i32 %invariant.op, %94
  %95 = sext i32 %.reass5 to i64, !dbg !51
  %96 = getelementptr half, ptr addrspace(1) %0, i64 %95, !dbg !51
  %97 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %96, i1 %.fr) #2, !dbg !52
  %98 = bitcast i16 %97 to half, !dbg !52
  %99 = fpext half %98 to float, !dbg !53
  %100 = getelementptr half, ptr addrspace(1) %1, i64 %95, !dbg !54
  %101 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %100, i1 %.fr) #2, !dbg !55
  %102 = getelementptr half, ptr addrspace(1) %2, i64 %95, !dbg !56
  %103 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %102, i1 %.fr) #2, !dbg !57
  %104 = getelementptr half, ptr addrspace(1) %3, i64 %93, !dbg !58
  %105 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %104, i1 true) #2, !dbg !59
  %106 = bitcast i16 %105 to half, !dbg !59
  %107 = fpext half %106 to float, !dbg !60
  %108 = getelementptr half, ptr addrspace(1) %4, i64 %95, !dbg !61
  %109 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %108, i1 %.fr) #2, !dbg !62
  %110 = getelementptr half, ptr addrspace(1) %5, i64 %95, !dbg !63
  %111 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %110, i1 %.fr) #2, !dbg !64
  %112 = insertelement <2 x i16> poison, i16 %101, i64 0, !dbg !55
  %113 = insertelement <2 x i16> %112, i16 %109, i64 1, !dbg !55
  %114 = bitcast <2 x i16> %113 to <2 x half>, !dbg !55
  %115 = fpext <2 x half> %114 to <2 x float>, !dbg !65
  %116 = insertelement <2 x i16> poison, i16 %103, i64 0, !dbg !57
  %117 = insertelement <2 x i16> %116, i16 %111, i64 1, !dbg !57
  %118 = bitcast <2 x i16> %117 to <2 x half>, !dbg !57
  %119 = fpext <2 x half> %118 to <2 x float>, !dbg !66
  %120 = fadd <2 x float> %115, %119, !dbg !67
  %121 = insertelement <2 x float> <float poison, float 2.000000e+00>, float %107, i64 0, !dbg !68
  %122 = fmul <2 x float> %120, %121, !dbg !68
  %123 = fmul <2 x float> %122, %91, !dbg !48
  %shift = shufflevector <2 x float> %123, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !69
  %124 = fsub <2 x float> %123, %shift, !dbg !69
  %125 = extractelement <2 x float> %124, i64 0, !dbg !69
  %126 = fadd float %125, %99, !dbg !70
  %127 = fptrunc float %126 to half, !dbg !71
  %128 = bitcast half %127 to i16, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %128, ptr addrspace(1) %96, i1 %89) #2, !dbg !71
  %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 8, !dbg !49
  %129 = icmp samesign ult i64 %indvars.iv9, 4088, !dbg !49
  br i1 %129, label %92, label %130, !dbg !49

130:                                              ; preds = %92
  ret void, !dbg !72
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ct5b6awyifp6axgj3o2hglyu23vrueitmssagp2ltfkjebrjoxge.py", directory: "./local_cache/t5")
!4 = !{ptr @triton_red_fused__to_copy_add_div_mul_pow_sum_12, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_mul_pow_sum_12", linkageName: "triton_red_fused__to_copy_add_div_mul_pow_sum_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 29, column: 40, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 35, column: 34, scope: !6)
!19 = !DILocation(line: 35, column: 51, scope: !6)
!20 = !DILocation(line: 36, column: 34, scope: !6)
!21 = !DILocation(line: 36, column: 51, scope: !6)
!22 = !DILocation(line: 37, column: 34, scope: !6)
!23 = !DILocation(line: 37, column: 41, scope: !6)
!24 = !DILocation(line: 37, column: 94, scope: !6)
!25 = !DILocation(line: 38, column: 34, scope: !6)
!26 = !DILocation(line: 38, column: 51, scope: !6)
!27 = !DILocation(line: 39, column: 34, scope: !6)
!28 = !DILocation(line: 39, column: 51, scope: !6)
!29 = !DILocation(line: 35, column: 112, scope: !6)
!30 = !DILocation(line: 36, column: 112, scope: !6)
!31 = !DILocation(line: 40, column: 22, scope: !6)
!32 = !DILocation(line: 41, column: 22, scope: !6)
!33 = !DILocation(line: 45, column: 23, scope: !6)
!34 = !DILocation(line: 47, column: 25, scope: !6)
!35 = !DILocation(line: 286, column: 36, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !6, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!38 = !DILocation(line: 49, column: 27, scope: !6)
!39 = !DILocation(line: 256, column: 15, scope: !40, inlinedAt: !38)
!40 = distinct !DILexicalBlockFile(scope: !36, file: !37, discriminator: 0)
!41 = !DILocation(line: 50, column: 31, scope: !6)
!42 = !DILocation(line: 50, column: 36, scope: !6)
!43 = !DILocation(line: 68, column: 24, scope: !6)
!44 = !DILocation(line: 69, column: 24, scope: !6)
!45 = !DILocation(line: 70, column: 24, scope: !6)
!46 = !DILocation(line: 71, column: 24, scope: !6)
!47 = !DILocation(line: 73, column: 24, scope: !6)
!48 = !DILocation(line: 66, column: 24, scope: !6)
!49 = !DILocation(line: 51, column: 40, scope: !6)
!50 = !DILocation(line: 52, column: 31, scope: !6)
!51 = !DILocation(line: 57, column: 39, scope: !6)
!52 = !DILocation(line: 57, column: 56, scope: !6)
!53 = !DILocation(line: 57, column: 118, scope: !6)
!54 = !DILocation(line: 58, column: 35, scope: !6)
!55 = !DILocation(line: 58, column: 52, scope: !6)
!56 = !DILocation(line: 59, column: 35, scope: !6)
!57 = !DILocation(line: 59, column: 52, scope: !6)
!58 = !DILocation(line: 60, column: 35, scope: !6)
!59 = !DILocation(line: 60, column: 42, scope: !6)
!60 = !DILocation(line: 60, column: 95, scope: !6)
!61 = !DILocation(line: 61, column: 35, scope: !6)
!62 = !DILocation(line: 61, column: 52, scope: !6)
!63 = !DILocation(line: 62, column: 35, scope: !6)
!64 = !DILocation(line: 62, column: 52, scope: !6)
!65 = !DILocation(line: 58, column: 114, scope: !6)
!66 = !DILocation(line: 59, column: 114, scope: !6)
!67 = !DILocation(line: 63, column: 24, scope: !6)
!68 = !DILocation(line: 64, column: 24, scope: !6)
!69 = !DILocation(line: 79, column: 24, scope: !6)
!70 = !DILocation(line: 81, column: 24, scope: !6)
!71 = !DILocation(line: 82, column: 56, scope: !6)
!72 = !DILocation(line: 51, column: 4, scope: !6)
