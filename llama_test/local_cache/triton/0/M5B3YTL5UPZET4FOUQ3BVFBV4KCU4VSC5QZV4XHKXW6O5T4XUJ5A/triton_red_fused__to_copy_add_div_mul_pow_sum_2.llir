; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_div_mul_pow_sum_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 2, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %.lobit2 = lshr i32 %10, 4, !dbg !11
  %11 = and i32 %.lobit2, 3, !dbg !11
  %12 = or disjoint i32 %11, %9, !dbg !12
  %13 = icmp slt i32 %12, %4, !dbg !13
  %14 = shl i32 %10, 2, !dbg !14
  %15 = and i32 %14, 60, !dbg !14
  %16 = and i32 %10, 63, !dbg !14
  %17 = shl i32 %12, 12, !dbg !15
  %18 = or disjoint i32 %17, %15
  %19 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %16
  %20 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %15
  %21 = zext nneg i32 %16 to i64, !dbg !16
  %22 = getelementptr inbounds nuw i8, ptr addrspace(3) %20, i32 8
  %23 = insertelement <4 x i1> poison, i1 %13, i64 0, !dbg !17
  %24 = shufflevector <4 x i1> %23, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !17
  br label %25, !dbg !16

25:                                               ; preds = %7, %25
  %indvars.iv = phi i64 [ 0, %7 ], [ %indvars.iv.next, %25 ]
  %26 = phi <4 x float> [ zeroinitializer, %7 ], [ %56, %25 ]
  %27 = or disjoint i64 %indvars.iv, %21, !dbg !18
  %28 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !19
  %29 = or i32 %18, %28, !dbg !19
  %30 = sext i32 %29 to i64, !dbg !20
  %31 = getelementptr half, ptr addrspace(1) %0, i64 %30, !dbg !20
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %31, i1 %13) #3, !dbg !21
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !21
  %34 = bitcast i32 %33 to <2 x half>, !dbg !21
  %35 = extractvalue { i32, i32 } %32, 1, !dbg !21
  %36 = bitcast i32 %35 to <2 x half>, !dbg !21
  %37 = getelementptr half, ptr addrspace(1) %1, i64 %27, !dbg !22
  %38 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %37, i1 true) #3, !dbg !23
  %39 = bitcast i16 %38 to half, !dbg !23
  %40 = fpext half %39 to float, !dbg !24
  %41 = getelementptr half, ptr addrspace(1) %2, i64 %30, !dbg !25
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %41, i1 %13) #3, !dbg !26
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !26
  %44 = bitcast i32 %43 to <2 x half>, !dbg !26
  %45 = extractvalue { i32, i32 } %42, 1, !dbg !26
  %46 = bitcast i32 %45 to <2 x half>, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %47 = bitcast float %40 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %19, <1 x i32> %47, i1 true) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %48 = shufflevector <2 x half> %34, <2 x half> %36, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !28
  %49 = fpext <4 x half> %48 to <4 x float>, !dbg !28
  %50 = shufflevector <2 x half> %44, <2 x half> %46, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !29
  %51 = fpext <4 x half> %50 to <4 x float>, !dbg !29
  %52 = load <4 x float>, ptr addrspace(3) %20, align 16, !dbg !27
  %53 = fmul <4 x float> %52, %49, !dbg !27
  %54 = fmul <4 x float> %53, %51, !dbg !30
  %55 = fadd <4 x float> %26, %54, !dbg !31
  %56 = select <4 x i1> %24, <4 x float> %55, <4 x float> %26, !dbg !17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !16
  %57 = icmp samesign ult i64 %indvars.iv, 4032, !dbg !16
  br i1 %57, label %25, label %58, !dbg !16

58:                                               ; preds = %25
  %shift = shufflevector <4 x float> %56, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !32
  %59 = fadd <4 x float> %56, %shift, !dbg !32
  %shift24 = shufflevector <4 x float> %56, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !32
  %60 = fadd <4 x float> %shift24, %59, !dbg !32
  %shift25 = shufflevector <4 x float> %56, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !32
  %61 = fadd <4 x float> %shift25, %60, !dbg !32
  %62 = extractelement <4 x float> %61, i64 0, !dbg !32
  %63 = bitcast float %62 to i32, !dbg !37
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 8, i32 31), !dbg !37
  %65 = bitcast i32 %64 to float, !dbg !37
  %66 = fadd float %62, %65, !dbg !32
  %67 = bitcast float %66 to i32, !dbg !37
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 4, i32 31), !dbg !37
  %69 = bitcast i32 %68 to float, !dbg !37
  %70 = fadd float %66, %69, !dbg !32
  %71 = bitcast float %70 to i32, !dbg !37
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 2, i32 31), !dbg !37
  %73 = bitcast i32 %72 to float, !dbg !37
  %74 = fadd float %70, %73, !dbg !32
  %75 = bitcast float %74 to i32, !dbg !37
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 1, i32 31), !dbg !37
  %77 = bitcast i32 %76 to float, !dbg !37
  %78 = fadd float %74, %77, !dbg !32
  %79 = sext i32 %12 to i64, !dbg !38
  %80 = getelementptr float, ptr addrspace(1) %3, i64 %79, !dbg !38
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %13) #3, !dbg !39
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %13) #3, !dbg !39
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %13) #3, !dbg !39
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %13) #3, !dbg !39
  %85 = bitcast i32 %84 to float, !dbg !39
  %86 = fmul float %78, -5.000000e-01, !dbg !40
  %87 = fmul float %85, %85, !dbg !41
  %88 = fmul float %87, %85, !dbg !42
  %89 = fmul float %86, %88, !dbg !43
  %90 = fmul float %89, 0x3F30000000000000, !dbg !44
  %91 = insertelement <2 x float> poison, float %90, i64 0, !dbg !45
  %92 = shufflevector <2 x float> %91, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !45
  %93 = insertelement <2 x float> poison, float %85, i64 0, !dbg !46
  %94 = shufflevector <2 x float> %93, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !46
  br label %95, !dbg !47

95:                                               ; preds = %58, %95
  %indvars.iv13 = phi i64 [ 0, %58 ], [ %indvars.iv.next14, %95 ]
  %96 = or disjoint i64 %indvars.iv13, %21, !dbg !48
  %97 = trunc nuw nsw i64 %indvars.iv13 to i32, !dbg !49
  %98 = or i32 %18, %97, !dbg !49
  %99 = sext i32 %98 to i64, !dbg !50
  %100 = getelementptr half, ptr addrspace(1) %0, i64 %99, !dbg !50
  %101 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %100, i1 %13) #3, !dbg !51
  %102 = extractvalue { i32, i32 } %101, 0, !dbg !51
  %103 = bitcast i32 %102 to <2 x half>, !dbg !51
  %104 = extractvalue { i32, i32 } %101, 1, !dbg !51
  %105 = bitcast i32 %104 to <2 x half>, !dbg !51
  %106 = getelementptr half, ptr addrspace(1) %1, i64 %96, !dbg !52
  %107 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %106, i1 true) #3, !dbg !53
  %108 = bitcast i16 %107 to half, !dbg !53
  %109 = fpext half %108 to float, !dbg !54
  %110 = getelementptr half, ptr addrspace(1) %2, i64 %99, !dbg !55
  %111 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %110, i1 %13) #3, !dbg !56
  %112 = extractvalue { i32, i32 } %111, 0, !dbg !56
  %113 = bitcast i32 %112 to <2 x half>, !dbg !56
  %114 = extractvalue { i32, i32 } %111, 1, !dbg !56
  %115 = bitcast i32 %114 to <2 x half>, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %116 = bitcast float %109 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %19, <1 x i32> %116, i1 true) #3, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %117 = fpext <2 x half> %103 to <2 x float>, !dbg !57
  %118 = fpext <2 x half> %113 to <2 x float>, !dbg !58
  %119 = load <2 x float>, ptr addrspace(3) %20, align 16, !dbg !46
  %120 = fmul <2 x float> %119, %117, !dbg !59
  %121 = fmul <2 x float> %120, %94, !dbg !46
  %122 = fmul <2 x float> %118, splat (float 2.000000e+00), !dbg !60
  %123 = fmul <2 x float> %92, %122, !dbg !45
  %124 = fadd <2 x float> %123, %121, !dbg !61
  %125 = fptrunc <2 x float> %124 to <2 x half>, !dbg !62
  %126 = fpext <2 x half> %105 to <2 x float>, !dbg !57
  %127 = fpext <2 x half> %115 to <2 x float>, !dbg !58
  %128 = load <2 x float>, ptr addrspace(3) %22, align 8, !dbg !46
  %129 = fmul <2 x float> %128, %126, !dbg !59
  %130 = fmul <2 x float> %129, %94, !dbg !46
  %131 = fmul <2 x float> %127, splat (float 2.000000e+00), !dbg !60
  %132 = fmul <2 x float> %92, %131, !dbg !45
  %133 = fadd <2 x float> %132, %130, !dbg !61
  %134 = fptrunc <2 x float> %133 to <2 x half>, !dbg !62
  %135 = bitcast <2 x half> %125 to i32, !dbg !62
  %136 = bitcast <2 x half> %134 to i32, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %135, i32 %136, ptr addrspace(1) %100, i1 %13) #3, !dbg !62
  %indvars.iv.next14 = add nuw nsw i64 %indvars.iv13, 64, !dbg !47
  %137 = icmp samesign ult i64 %indvars.iv13, 4032, !dbg !47
  br i1 %137, label %95, label %138, !dbg !47

138:                                              ; preds = %95
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm2digt4hcus2fxymbfdumzjafjngblhe2d6qijkeeihhspgjvlp.py", directory: "./local_cache/m2")
!4 = !{ptr @triton_red_fused__to_copy_add_div_mul_pow_sum_2, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_mul_pow_sum_2", linkageName: "triton_red_fused__to_copy_add_div_mul_pow_sum_2", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 50, scope: !6)
!16 = !DILocation(line: 29, column: 40, scope: !6)
!17 = !DILocation(line: 44, column: 48, scope: !6)
!18 = !DILocation(line: 30, column: 31, scope: !6)
!19 = !DILocation(line: 35, column: 45, scope: !6)
!20 = !DILocation(line: 35, column: 38, scope: !6)
!21 = !DILocation(line: 35, column: 55, scope: !6)
!22 = !DILocation(line: 36, column: 34, scope: !6)
!23 = !DILocation(line: 36, column: 41, scope: !6)
!24 = !DILocation(line: 36, column: 94, scope: !6)
!25 = !DILocation(line: 37, column: 34, scope: !6)
!26 = !DILocation(line: 37, column: 51, scope: !6)
!27 = !DILocation(line: 38, column: 22, scope: !6)
!28 = !DILocation(line: 35, column: 116, scope: !6)
!29 = !DILocation(line: 37, column: 112, scope: !6)
!30 = !DILocation(line: 41, column: 22, scope: !6)
!31 = !DILocation(line: 43, column: 23, scope: !6)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !36)
!33 = distinct !DILexicalBlockFile(scope: !35, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!35 = distinct !DILexicalBlockFile(scope: !6, file: !34, discriminator: 0)
!36 = !DILocation(line: 45, column: 25, scope: !6)
!37 = !DILocation(line: 286, column: 36, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 46, column: 31, scope: !6)
!39 = !DILocation(line: 46, column: 36, scope: !6)
!40 = !DILocation(line: 60, column: 23, scope: !6)
!41 = !DILocation(line: 61, column: 24, scope: !6)
!42 = !DILocation(line: 62, column: 24, scope: !6)
!43 = !DILocation(line: 63, column: 24, scope: !6)
!44 = !DILocation(line: 65, column: 24, scope: !6)
!45 = !DILocation(line: 69, column: 24, scope: !6)
!46 = !DILocation(line: 58, column: 24, scope: !6)
!47 = !DILocation(line: 47, column: 40, scope: !6)
!48 = !DILocation(line: 48, column: 31, scope: !6)
!49 = !DILocation(line: 53, column: 46, scope: !6)
!50 = !DILocation(line: 53, column: 39, scope: !6)
!51 = !DILocation(line: 53, column: 56, scope: !6)
!52 = !DILocation(line: 54, column: 35, scope: !6)
!53 = !DILocation(line: 54, column: 42, scope: !6)
!54 = !DILocation(line: 54, column: 95, scope: !6)
!55 = !DILocation(line: 55, column: 35, scope: !6)
!56 = !DILocation(line: 55, column: 52, scope: !6)
!57 = !DILocation(line: 53, column: 118, scope: !6)
!58 = !DILocation(line: 55, column: 114, scope: !6)
!59 = !DILocation(line: 56, column: 24, scope: !6)
!60 = !DILocation(line: 68, column: 24, scope: !6)
!61 = !DILocation(line: 70, column: 24, scope: !6)
!62 = !DILocation(line: 72, column: 56, scope: !6)
!63 = !DILocation(line: 47, column: 4, scope: !6)
