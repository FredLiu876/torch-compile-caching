; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [73 x i8] c"./local_cache/7p/c7pbg3l2pkvqtef7mnprrepoat4qlaxffimkbo2dg7te5trtgllm.py\00"
@assertMessage_0 = internal constant [41 x i8] c"index out of bounds: 0 <= tmp49 < 128256\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_div_embedding_dense_backward_mul_pow_sum_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10, ptr addrspace(1) readnone captures(none) %11) local_unnamed_addr !dbg !10 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %14 = shl i32 %13, 2, !dbg !12
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %.lobit2 = lshr i32 %15, 4, !dbg !13
  %16 = and i32 %.lobit2, 3, !dbg !13
  %17 = or disjoint i32 %16, %14, !dbg !14
  %18 = or disjoint i32 %14, 2, !dbg !14
  %19 = icmp slt i32 %17, %9, !dbg !15
  %20 = icmp slt i32 %14, %9, !dbg !15
  %21 = icmp slt i32 %18, %9, !dbg !15
  %22 = shl i32 %15, 2, !dbg !16
  %23 = and i32 %22, 60, !dbg !16
  %24 = and i32 %15, 63, !dbg !16
  %25 = shl i32 %17, 12, !dbg !17
  %26 = or disjoint i32 %25, %23
  %27 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %24
  %28 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %23
  %29 = zext nneg i32 %24 to i64, !dbg !18
  %30 = insertelement <4 x i1> poison, i1 %19, i64 0, !dbg !19
  %31 = shufflevector <4 x i1> %30, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !19
  br label %32, !dbg !18

32:                                               ; preds = %12, %32
  %indvars.iv = phi i64 [ 0, %12 ], [ %indvars.iv.next, %32 ]
  %33 = phi <4 x float> [ zeroinitializer, %12 ], [ %81, %32 ]
  %34 = or disjoint i64 %indvars.iv, %29, !dbg !20
  %35 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !21
  %36 = or i32 %26, %35, !dbg !21
  %37 = sext i32 %36 to i64, !dbg !22
  %38 = getelementptr half, ptr addrspace(1) %0, i64 %37, !dbg !22
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %38, i1 %19) #4, !dbg !23
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !23
  %41 = bitcast i32 %40 to <2 x half>, !dbg !23
  %42 = extractvalue { i32, i32 } %39, 1, !dbg !23
  %43 = bitcast i32 %42 to <2 x half>, !dbg !23
  %44 = getelementptr half, ptr addrspace(1) %1, i64 %37, !dbg !24
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %44, i1 %19) #4, !dbg !25
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !25
  %47 = bitcast i32 %46 to <2 x half>, !dbg !25
  %48 = extractvalue { i32, i32 } %45, 1, !dbg !25
  %49 = bitcast i32 %48 to <2 x half>, !dbg !25
  %50 = getelementptr half, ptr addrspace(1) %2, i64 %37, !dbg !26
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %50, i1 %19) #4, !dbg !27
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !27
  %53 = bitcast i32 %52 to <2 x half>, !dbg !27
  %54 = extractvalue { i32, i32 } %51, 1, !dbg !27
  %55 = bitcast i32 %54 to <2 x half>, !dbg !27
  %56 = getelementptr half, ptr addrspace(1) %3, i64 %34, !dbg !28
  %57 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %56, i1 true) #4, !dbg !29
  %58 = bitcast i16 %57 to half, !dbg !29
  %59 = fpext half %58 to float, !dbg !30
  %60 = getelementptr half, ptr addrspace(1) %4, i64 %37, !dbg !31
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %60, i1 %19) #4, !dbg !32
  %62 = extractvalue { i32, i32 } %61, 0, !dbg !32
  %63 = bitcast i32 %62 to <2 x half>, !dbg !32
  %64 = extractvalue { i32, i32 } %61, 1, !dbg !32
  %65 = bitcast i32 %64 to <2 x half>, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %66 = bitcast float %59 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %27, <1 x i32> %66, i1 true) #4, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %67 = shufflevector <2 x half> %41, <2 x half> %43, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !34
  %68 = fpext <4 x half> %67 to <4 x float>, !dbg !34
  %69 = shufflevector <2 x half> %47, <2 x half> %49, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !35
  %70 = fpext <4 x half> %69 to <4 x float>, !dbg !35
  %71 = shufflevector <2 x half> %53, <2 x half> %55, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !36
  %72 = fpext <4 x half> %71 to <4 x float>, !dbg !36
  %73 = shufflevector <2 x half> %63, <2 x half> %65, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !37
  %74 = fpext <4 x half> %73 to <4 x float>, !dbg !37
  %75 = fadd <4 x float> %68, %70, !dbg !38
  %76 = fadd <4 x float> %75, %72, !dbg !39
  %77 = load <4 x float>, ptr addrspace(3) %28, align 16, !dbg !33
  %78 = fmul <4 x float> %76, %77, !dbg !33
  %79 = fmul <4 x float> %78, %74, !dbg !40
  %80 = fadd <4 x float> %33, %79, !dbg !41
  %81 = select <4 x i1> %31, <4 x float> %80, <4 x float> %33, !dbg !19
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !18
  %82 = icmp samesign ult i64 %indvars.iv, 4032, !dbg !18
  br i1 %82, label %32, label %83, !dbg !18

83:                                               ; preds = %32
  %84 = or disjoint i32 %14, 1, !dbg !14
  %85 = or disjoint i32 %14, 3, !dbg !14
  %86 = icmp slt i32 %84, %9, !dbg !15
  %87 = icmp slt i32 %85, %9, !dbg !15
  %shift = shufflevector <4 x float> %81, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !42
  %88 = fadd <4 x float> %81, %shift, !dbg !42
  %shift27 = shufflevector <4 x float> %81, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !42
  %89 = fadd <4 x float> %shift27, %88, !dbg !42
  %shift28 = shufflevector <4 x float> %81, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !42
  %90 = fadd <4 x float> %shift28, %89, !dbg !42
  %91 = extractelement <4 x float> %90, i64 0, !dbg !42
  %92 = bitcast float %91 to i32, !dbg !47
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 8, i32 31), !dbg !47
  %94 = bitcast i32 %93 to float, !dbg !47
  %95 = fadd float %91, %94, !dbg !42
  %96 = bitcast float %95 to i32, !dbg !47
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 4, i32 31), !dbg !47
  %98 = bitcast i32 %97 to float, !dbg !47
  %99 = fadd float %95, %98, !dbg !42
  %100 = bitcast float %99 to i32, !dbg !47
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 2, i32 31), !dbg !47
  %102 = bitcast i32 %101 to float, !dbg !47
  %103 = fadd float %99, %102, !dbg !42
  %104 = bitcast float %103 to i32, !dbg !47
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 1, i32 31), !dbg !47
  %106 = bitcast i32 %105 to float, !dbg !47
  %107 = fadd float %103, %106, !dbg !42
  %108 = sext i32 %17 to i64, !dbg !48
  %109 = getelementptr i64, ptr addrspace(1) %5, i64 %108, !dbg !48
  %110 = sext i32 %14 to i64, !dbg !48
  %111 = getelementptr i64, ptr addrspace(1) %5, i64 %110, !dbg !48
  %112 = sext i32 %84 to i64, !dbg !48
  %113 = getelementptr i64, ptr addrspace(1) %5, i64 %112, !dbg !48
  %114 = sext i32 %18 to i64, !dbg !48
  %115 = getelementptr i64, ptr addrspace(1) %5, i64 %114, !dbg !48
  %116 = sext i32 %85 to i64, !dbg !48
  %117 = getelementptr i64, ptr addrspace(1) %5, i64 %116, !dbg !48
  %118 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %109, i1 %19) #4, !dbg !49
  %119 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %109, i1 %19) #4, !dbg !49
  %120 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %109, i1 %19) #4, !dbg !49
  %121 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %109, i1 %19) #4, !dbg !49
  %122 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %111, i1 %20) #4, !dbg !49
  %123 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %113, i1 %86) #4, !dbg !49
  %124 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %115, i1 %21) #4, !dbg !49
  %125 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %117, i1 %87) #4, !dbg !49
  %126 = getelementptr float, ptr addrspace(1) %7, i64 %108, !dbg !50
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %19) #4, !dbg !51
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %19) #4, !dbg !51
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %19) #4, !dbg !51
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %19) #4, !dbg !51
  %131 = bitcast i32 %130 to float, !dbg !51
  %132 = icmp eq i64 %121, -1, !dbg !52
  %133 = fmul float %107, -5.000000e-01, !dbg !53
  %134 = fmul float %131, %131, !dbg !54
  %135 = fmul float %134, %131, !dbg !55
  %136 = fmul float %133, %135, !dbg !56
  %137 = fmul float %136, 0x3F30000000000000, !dbg !57
  %138 = icmp slt i64 %121, 0, !dbg !58
  %139 = insertelement <4 x i64> poison, i64 %125, i64 0, !dbg !59
  %140 = insertelement <4 x i64> %139, i64 %124, i64 1, !dbg !59
  %141 = insertelement <4 x i64> %140, i64 %123, i64 2, !dbg !59
  %142 = insertelement <4 x i64> %141, i64 %122, i64 3, !dbg !59
  %143 = add <4 x i64> %142, splat (i64 128256), !dbg !59
  %144 = icmp slt <4 x i64> %142, zeroinitializer, !dbg !58
  %145 = select <4 x i1> %144, <4 x i64> %143, <4 x i64> %142, !dbg !60
  %146 = icmp ugt <4 x i64> %145, splat (i64 128255), !dbg !61
  %147 = extractelement <4 x i1> %146, i64 3, !dbg !62
  %.not6 = and i1 %20, %147, !dbg !62
  %148 = extractelement <4 x i1> %146, i64 2, !dbg !62
  %.not7 = and i1 %86, %148, !dbg !62
  %149 = extractelement <4 x i1> %146, i64 1, !dbg !62
  %.not8 = and i1 %21, %149, !dbg !62
  %150 = extractelement <4 x i1> %146, i64 0, !dbg !63
  %.not9 = and i1 %87, %150, !dbg !63
  %151 = shl i64 %121, 12, !dbg !63
  %152 = add i64 %151, 525336576, !dbg !63
  %153 = select i1 %138, i64 %152, i64 %151, !dbg !63
  %invariant.op14 = or i1 %.not8, %.not9, !dbg !64
  %154 = or i1 %.not6, %.not7
  %.reass15 = or i1 %154, %invariant.op14
  %155 = zext nneg i32 %23 to i64, !dbg !64
  %156 = or disjoint i64 %153, %155
  br label %157, !dbg !64

157:                                              ; preds = %83, %177
  %indvars.iv19 = phi i64 [ 0, %83 ], [ %indvars.iv.next20, %177 ]
  %158 = or disjoint i64 %indvars.iv19, %29, !dbg !65
  %159 = trunc nuw nsw i64 %indvars.iv19 to i32
  %.reass = or i32 %26, %159
  %160 = sext i32 %.reass to i64, !dbg !66
  %161 = getelementptr half, ptr addrspace(1) %6, i64 %160, !dbg !66
  %162 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %161, i1 %19) #4, !dbg !67
  %163 = getelementptr half, ptr addrspace(1) %0, i64 %160, !dbg !68
  %164 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %163, i1 %19) #4, !dbg !69
  %165 = getelementptr half, ptr addrspace(1) %1, i64 %160, !dbg !70
  %166 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %165, i1 %19) #4, !dbg !71
  %167 = getelementptr half, ptr addrspace(1) %2, i64 %160, !dbg !72
  %168 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %167, i1 %19) #4, !dbg !73
  %169 = getelementptr half, ptr addrspace(1) %3, i64 %158, !dbg !74
  %170 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %169, i1 true) #4, !dbg !75
  %171 = bitcast i16 %170 to half, !dbg !75
  %172 = fpext half %171 to float, !dbg !76
  %173 = getelementptr half, ptr addrspace(1) %4, i64 %160, !dbg !77
  %174 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %173, i1 %19) #4, !dbg !78
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %175 = bitcast float %172 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %27, <1 x i32> %175, i1 true) #4, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  br i1 %.reass15, label %176, label %177, !dbg !80

176:                                              ; preds = %157
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 92, ptr nonnull @assertFunc_0, i64 1), !dbg !80
  unreachable, !dbg !80

177:                                              ; preds = %157
  %178 = extractvalue { i32, i32 } %164, 1, !dbg !69
  %179 = bitcast i32 %178 to <2 x half>, !dbg !69
  %180 = extractelement <2 x half> %179, i64 1, !dbg !69
  %181 = fpext half %180 to float, !dbg !81
  %182 = extractvalue { i32, i32 } %166, 1, !dbg !71
  %183 = bitcast i32 %182 to <2 x half>, !dbg !71
  %184 = extractelement <2 x half> %183, i64 1, !dbg !71
  %185 = fpext half %184 to float, !dbg !82
  %186 = fadd float %181, %185, !dbg !83
  %187 = extractvalue { i32, i32 } %168, 1, !dbg !73
  %188 = bitcast i32 %187 to <2 x half>, !dbg !73
  %189 = extractelement <2 x half> %188, i64 1, !dbg !73
  %190 = fpext half %189 to float, !dbg !84
  %191 = fadd float %186, %190, !dbg !85
  %192 = load <4 x float>, ptr addrspace(3) %28, align 16, !dbg !79
  %193 = extractelement <4 x float> %192, i64 3, !dbg !79
  %194 = fmul float %191, %193, !dbg !86
  %195 = fmul float %194, %131, !dbg !79
  %196 = extractvalue { i32, i32 } %174, 1, !dbg !78
  %197 = bitcast i32 %196 to <2 x half>, !dbg !78
  %198 = extractelement <2 x half> %197, i64 1, !dbg !78
  %199 = fpext half %198 to float, !dbg !87
  %200 = fmul float %199, 2.000000e+00, !dbg !88
  %201 = fmul float %137, %200, !dbg !89
  %202 = fadd float %201, %195, !dbg !90
  %203 = extractvalue { i32, i32 } %162, 1, !dbg !67
  %204 = bitcast i32 %203 to <2 x half>, !dbg !67
  %205 = extractelement <2 x half> %204, i64 1, !dbg !67
  %206 = fpext half %205 to float, !dbg !91
  %207 = fadd float %202, %206, !dbg !92
  %208 = select i1 %132, float 0.000000e+00, float %207, !dbg !93
  %209 = extractelement <2 x half> %179, i64 0, !dbg !69
  %210 = fpext half %209 to float, !dbg !81
  %211 = extractelement <2 x half> %183, i64 0, !dbg !71
  %212 = fpext half %211 to float, !dbg !82
  %213 = fadd float %210, %212, !dbg !83
  %214 = extractelement <2 x half> %188, i64 0, !dbg !73
  %215 = fpext half %214 to float, !dbg !84
  %216 = fadd float %213, %215, !dbg !85
  %217 = extractelement <4 x float> %192, i64 2, !dbg !79
  %218 = fmul float %216, %217, !dbg !86
  %219 = fmul float %218, %131, !dbg !79
  %220 = extractelement <2 x half> %197, i64 0, !dbg !78
  %221 = fpext half %220 to float, !dbg !87
  %222 = fmul float %221, 2.000000e+00, !dbg !88
  %223 = fmul float %137, %222, !dbg !89
  %224 = fadd float %223, %219, !dbg !90
  %225 = extractelement <2 x half> %204, i64 0, !dbg !67
  %226 = fpext half %225 to float, !dbg !91
  %227 = fadd float %224, %226, !dbg !92
  %228 = select i1 %132, float 0.000000e+00, float %227, !dbg !93
  %229 = extractvalue { i32, i32 } %164, 0, !dbg !69
  %230 = bitcast i32 %229 to <2 x half>, !dbg !69
  %231 = extractelement <2 x half> %230, i64 1, !dbg !69
  %232 = fpext half %231 to float, !dbg !81
  %233 = extractvalue { i32, i32 } %166, 0, !dbg !71
  %234 = bitcast i32 %233 to <2 x half>, !dbg !71
  %235 = extractelement <2 x half> %234, i64 1, !dbg !71
  %236 = fpext half %235 to float, !dbg !82
  %237 = fadd float %232, %236, !dbg !83
  %238 = extractvalue { i32, i32 } %168, 0, !dbg !73
  %239 = bitcast i32 %238 to <2 x half>, !dbg !73
  %240 = extractelement <2 x half> %239, i64 1, !dbg !73
  %241 = fpext half %240 to float, !dbg !84
  %242 = fadd float %237, %241, !dbg !85
  %243 = extractelement <4 x float> %192, i64 1, !dbg !79
  %244 = fmul float %242, %243, !dbg !86
  %245 = fmul float %244, %131, !dbg !79
  %246 = extractvalue { i32, i32 } %174, 0, !dbg !78
  %247 = bitcast i32 %246 to <2 x half>, !dbg !78
  %248 = extractelement <2 x half> %247, i64 1, !dbg !78
  %249 = fpext half %248 to float, !dbg !87
  %250 = fmul float %249, 2.000000e+00, !dbg !88
  %251 = fmul float %137, %250, !dbg !89
  %252 = fadd float %251, %245, !dbg !90
  %253 = extractvalue { i32, i32 } %162, 0, !dbg !67
  %254 = bitcast i32 %253 to <2 x half>, !dbg !67
  %255 = extractelement <2 x half> %254, i64 1, !dbg !67
  %256 = fpext half %255 to float, !dbg !91
  %257 = fadd float %252, %256, !dbg !92
  %258 = select i1 %132, float 0.000000e+00, float %257, !dbg !93
  %259 = extractelement <2 x half> %230, i64 0, !dbg !69
  %260 = fpext half %259 to float, !dbg !81
  %261 = extractelement <2 x half> %234, i64 0, !dbg !71
  %262 = fpext half %261 to float, !dbg !82
  %263 = fadd float %260, %262, !dbg !83
  %264 = extractelement <2 x half> %239, i64 0, !dbg !73
  %265 = fpext half %264 to float, !dbg !84
  %266 = fadd float %263, %265, !dbg !85
  %267 = extractelement <4 x float> %192, i64 0, !dbg !79
  %268 = fmul float %266, %267, !dbg !86
  %269 = fmul float %268, %131, !dbg !79
  %270 = extractelement <2 x half> %247, i64 0, !dbg !78
  %271 = fpext half %270 to float, !dbg !87
  %272 = fmul float %271, 2.000000e+00, !dbg !88
  %273 = fmul float %137, %272, !dbg !89
  %274 = fadd float %273, %269, !dbg !90
  %275 = extractelement <2 x half> %254, i64 0, !dbg !67
  %276 = fpext half %275 to float, !dbg !91
  %277 = fadd float %274, %276, !dbg !92
  %278 = select i1 %132, float 0.000000e+00, float %277, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %279 = or i64 %156, %indvars.iv19, !dbg !94
  %280 = getelementptr float, ptr addrspace(1) %8, i64 %279, !dbg !95
  %281 = tail call { float, float, float, float } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$9 atom.global.gpu.relaxed.add.v4.f32 { $0, $1, $2, $3 }, [ $4 + 0 ], { $5, $6, $7, $8 };", "=r,=r,=r,=r,l,r,r,r,r,b"(ptr addrspace(1) %280, float %278, float %258, float %228, float %208, i1 %19) #4, !dbg !96
  %indvars.iv.next20 = add nuw nsw i64 %indvars.iv19, 64, !dbg !64
  %282 = icmp samesign ult i64 %indvars.iv19, 4032, !dbg !64
  br i1 %282, label %157, label %283, !dbg !64

283:                                              ; preds = %177
  ret void, !dbg !97
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7pbg3l2pkvqtef7mnprrepoat4qlaxffimkbo2dg7te5trtgllm.py", directory: "./local_cache/7p")
!4 = !{ptr @triton_red_fused__to_copy_add_div_embedding_dense_backward_mul_pow_sum_13, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_embedding_dense_backward_mul_pow_sum_13", linkageName: "triton_red_fused__to_copy_add_div_embedding_dense_backward_mul_pow_sum_13", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 22, column: 28, scope: !10)
!12 = !DILocation(line: 22, column: 33, scope: !10)
!13 = !DILocation(line: 23, column: 44, scope: !10)
!14 = !DILocation(line: 23, column: 23, scope: !10)
!15 = !DILocation(line: 24, column: 21, scope: !10)
!16 = !DILocation(line: 25, column: 37, scope: !10)
!17 = !DILocation(line: 35, column: 46, scope: !10)
!18 = !DILocation(line: 29, column: 40, scope: !10)
!19 = !DILocation(line: 48, column: 50, scope: !10)
!20 = !DILocation(line: 30, column: 31, scope: !10)
!21 = !DILocation(line: 35, column: 41, scope: !10)
!22 = !DILocation(line: 35, column: 34, scope: !10)
!23 = !DILocation(line: 35, column: 51, scope: !10)
!24 = !DILocation(line: 36, column: 34, scope: !10)
!25 = !DILocation(line: 36, column: 51, scope: !10)
!26 = !DILocation(line: 37, column: 34, scope: !10)
!27 = !DILocation(line: 37, column: 51, scope: !10)
!28 = !DILocation(line: 38, column: 34, scope: !10)
!29 = !DILocation(line: 38, column: 41, scope: !10)
!30 = !DILocation(line: 38, column: 94, scope: !10)
!31 = !DILocation(line: 39, column: 34, scope: !10)
!32 = !DILocation(line: 39, column: 51, scope: !10)
!33 = !DILocation(line: 42, column: 22, scope: !10)
!34 = !DILocation(line: 35, column: 112, scope: !10)
!35 = !DILocation(line: 36, column: 112, scope: !10)
!36 = !DILocation(line: 37, column: 112, scope: !10)
!37 = !DILocation(line: 39, column: 112, scope: !10)
!38 = !DILocation(line: 40, column: 22, scope: !10)
!39 = !DILocation(line: 41, column: 22, scope: !10)
!40 = !DILocation(line: 45, column: 23, scope: !10)
!41 = !DILocation(line: 47, column: 25, scope: !10)
!42 = !DILocation(line: 256, column: 15, scope: !43, inlinedAt: !46)
!43 = distinct !DILexicalBlockFile(scope: !45, file: !44, discriminator: 0)
!44 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!45 = distinct !DILexicalBlockFile(scope: !10, file: !44, discriminator: 0)
!46 = !DILocation(line: 49, column: 27, scope: !10)
!47 = !DILocation(line: 286, column: 36, scope: !45, inlinedAt: !46)
!48 = !DILocation(line: 50, column: 31, scope: !10)
!49 = !DILocation(line: 50, column: 36, scope: !10)
!50 = !DILocation(line: 51, column: 31, scope: !10)
!51 = !DILocation(line: 51, column: 36, scope: !10)
!52 = !DILocation(line: 65, column: 25, scope: !10)
!53 = !DILocation(line: 72, column: 24, scope: !10)
!54 = !DILocation(line: 73, column: 24, scope: !10)
!55 = !DILocation(line: 74, column: 24, scope: !10)
!56 = !DILocation(line: 75, column: 24, scope: !10)
!57 = !DILocation(line: 77, column: 24, scope: !10)
!58 = !DILocation(line: 90, column: 24, scope: !10)
!59 = !DILocation(line: 89, column: 24, scope: !10)
!60 = !DILocation(line: 91, column: 39, scope: !10)
!61 = !DILocation(line: 92, column: 42, scope: !10)
!62 = !DILocation(line: 92, column: 61, scope: !10)
!63 = !DILocation(line: 93, column: 62, scope: !10)
!64 = !DILocation(line: 52, column: 40, scope: !10)
!65 = !DILocation(line: 53, column: 31, scope: !10)
!66 = !DILocation(line: 58, column: 35, scope: !10)
!67 = !DILocation(line: 58, column: 52, scope: !10)
!68 = !DILocation(line: 59, column: 35, scope: !10)
!69 = !DILocation(line: 59, column: 52, scope: !10)
!70 = !DILocation(line: 60, column: 35, scope: !10)
!71 = !DILocation(line: 60, column: 52, scope: !10)
!72 = !DILocation(line: 61, column: 35, scope: !10)
!73 = !DILocation(line: 61, column: 52, scope: !10)
!74 = !DILocation(line: 62, column: 35, scope: !10)
!75 = !DILocation(line: 62, column: 42, scope: !10)
!76 = !DILocation(line: 62, column: 95, scope: !10)
!77 = !DILocation(line: 63, column: 35, scope: !10)
!78 = !DILocation(line: 63, column: 52, scope: !10)
!79 = !DILocation(line: 70, column: 24, scope: !10)
!80 = !DILocation(line: 92, column: 71, scope: !10)
!81 = !DILocation(line: 59, column: 114, scope: !10)
!82 = !DILocation(line: 60, column: 114, scope: !10)
!83 = !DILocation(line: 66, column: 24, scope: !10)
!84 = !DILocation(line: 61, column: 114, scope: !10)
!85 = !DILocation(line: 67, column: 24, scope: !10)
!86 = !DILocation(line: 68, column: 24, scope: !10)
!87 = !DILocation(line: 63, column: 114, scope: !10)
!88 = !DILocation(line: 80, column: 24, scope: !10)
!89 = !DILocation(line: 81, column: 24, scope: !10)
!90 = !DILocation(line: 82, column: 24, scope: !10)
!91 = !DILocation(line: 58, column: 114, scope: !10)
!92 = !DILocation(line: 84, column: 24, scope: !10)
!93 = !DILocation(line: 87, column: 39, scope: !10)
!94 = !DILocation(line: 93, column: 57, scope: !10)
!95 = !DILocation(line: 93, column: 34, scope: !10)
!96 = !DILocation(line: 93, column: 98, scope: !10)
!97 = !DILocation(line: 52, column: 4, scope: !10)
