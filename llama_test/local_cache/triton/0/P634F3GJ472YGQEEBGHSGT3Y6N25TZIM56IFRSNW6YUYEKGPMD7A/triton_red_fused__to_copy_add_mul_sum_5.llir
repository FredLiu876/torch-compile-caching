; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_mul_sum_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 3, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = shl i32 %11, 1, !dbg !11
  %13 = and i32 %12, 6, !dbg !11
  %14 = or disjoint i32 %13, %10, !dbg !12
  %15 = lshr i32 %11, 2, !dbg !13
  %16 = and i32 %15, 15, !dbg !13
  %17 = icmp sgt i32 %6, 0, !dbg !14
  br i1 %17, label %.lr.ph, label %._crit_edge, !dbg !14

.lr.ph:                                           ; preds = %8, %.lr.ph
  %18 = phi float [ %60, %.lr.ph ], [ 0.000000e+00, %8 ]
  %19 = phi float [ %61, %.lr.ph ], [ 0.000000e+00, %8 ]
  %20 = phi i32 [ %62, %.lr.ph ], [ 0, %8 ]
  %21 = or disjoint i32 %20, %16, !dbg !15
  %22 = icmp slt i32 %21, %6, !dbg !16
  %23 = shl i32 %21, 12, !dbg !17
  %24 = add i32 %14, %23, !dbg !18
  %25 = sext i32 %24 to i64, !dbg !19
  %26 = getelementptr half, ptr addrspace(1) %0, i64 %25, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %26, i1 %22) #3, !dbg !20
  %28 = bitcast i32 %27 to <2 x half>, !dbg !20
  %29 = extractelement <2 x half> %28, i64 0, !dbg !20
  %30 = extractelement <2 x half> %28, i64 1, !dbg !20
  %31 = fpext half %29 to float, !dbg !21
  %32 = fpext half %30 to float, !dbg !21
  %33 = getelementptr half, ptr addrspace(1) %1, i64 %25, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %33, i1 %22) #3, !dbg !23
  %35 = bitcast i32 %34 to <2 x half>, !dbg !23
  %36 = extractelement <2 x half> %35, i64 0, !dbg !23
  %37 = extractelement <2 x half> %35, i64 1, !dbg !23
  %38 = fpext half %36 to float, !dbg !24
  %39 = fpext half %37 to float, !dbg !24
  %40 = getelementptr half, ptr addrspace(1) %2, i64 %25, !dbg !25
  %41 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %40, i1 %22) #3, !dbg !26
  %42 = bitcast i32 %41 to <2 x half>, !dbg !26
  %43 = extractelement <2 x half> %42, i64 0, !dbg !26
  %44 = extractelement <2 x half> %42, i64 1, !dbg !26
  %45 = fpext half %43 to float, !dbg !27
  %46 = fpext half %44 to float, !dbg !27
  %47 = sext i32 %21 to i64, !dbg !28
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !28
  %49 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %48, i1 %22) #3, !dbg !29
  %50 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %48, i1 %22) #3, !dbg !29
  %51 = bitcast i32 %50 to float, !dbg !29
  %52 = fadd float %31, %38, !dbg !30
  %53 = fadd float %32, %39, !dbg !30
  %54 = fmul float %45, %51, !dbg !31
  %55 = fmul float %46, %51, !dbg !31
  %56 = fmul float %52, %54, !dbg !32
  %57 = fmul float %53, %55, !dbg !32
  %58 = fadd float %18, %56, !dbg !33
  %59 = fadd float %19, %57, !dbg !33
  %60 = select i1 %22, float %58, float %18, !dbg !34
  %61 = select i1 %22, float %59, float %19, !dbg !34
  %62 = add i32 %20, 16, !dbg !14
  %63 = icmp slt i32 %62, %6, !dbg !14
  br i1 %63, label %.lr.ph, label %._crit_edge, !dbg !14

._crit_edge:                                      ; preds = %.lr.ph, %8
  %64 = phi float [ 0.000000e+00, %8 ], [ %60, %.lr.ph ]
  %65 = phi float [ 0.000000e+00, %8 ], [ %61, %.lr.ph ]
  %66 = lshr i32 %11, 5, !dbg !13
  %67 = and i32 %11, 28, !dbg !11
  %68 = and i32 %11, 7, !dbg !11
  %69 = or disjoint i32 %10, %68, !dbg !12
  %70 = bitcast float %64 to i32, !dbg !35
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 16, i32 31), !dbg !35
  %72 = bitcast i32 %71 to float, !dbg !35
  %73 = fadd float %64, %72, !dbg !39
  %74 = bitcast float %73 to i32, !dbg !35
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 8, i32 31), !dbg !35
  %76 = bitcast i32 %75 to float, !dbg !35
  %77 = fadd float %73, %76, !dbg !39
  %78 = bitcast float %77 to i32, !dbg !35
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 4, i32 31), !dbg !35
  %80 = bitcast i32 %79 to float, !dbg !35
  %81 = fadd float %77, %80, !dbg !39
  %82 = bitcast float %65 to i32, !dbg !35
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 16, i32 31), !dbg !35
  %84 = bitcast i32 %83 to float, !dbg !35
  %85 = fadd float %65, %84, !dbg !39
  %86 = bitcast float %85 to i32, !dbg !35
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 8, i32 31), !dbg !35
  %88 = bitcast i32 %87 to float, !dbg !35
  %89 = fadd float %85, %88, !dbg !39
  %90 = bitcast float %89 to i32, !dbg !35
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 4, i32 31), !dbg !35
  %92 = bitcast i32 %91 to float, !dbg !35
  %93 = fadd float %89, %92, !dbg !39
  %94 = and i32 %66, 1, !dbg !35
  %95 = icmp eq i32 %67, 0, !dbg !35
  %96 = shl nuw nsw i32 %13, 1, !dbg !35
  %97 = or disjoint i32 %96, %94, !dbg !35
  %98 = getelementptr float, ptr addrspace(3) @global_smem, i32 %97, !dbg !35
  %99 = bitcast float %81 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 %95) #3, !dbg !35
  %100 = or disjoint i32 %96, 2, !dbg !35
  %101 = or disjoint i32 %100, %94, !dbg !35
  %102 = getelementptr float, ptr addrspace(3) @global_smem, i32 %101, !dbg !35
  %103 = bitcast float %93 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 %95) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %104 = icmp slt i32 %11, 16, !dbg !35
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !35
  %106 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %105, i1 %104) #3, !dbg !35
  %107 = bitcast i32 %106 to float, !dbg !35
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 1, i32 31), !dbg !35
  %109 = bitcast i32 %108 to float, !dbg !35
  %110 = fadd float %107, %109, !dbg !39
  %111 = and i32 %11, 1, !dbg !35
  %112 = icmp eq i32 %111, 0, !dbg !35
  %113 = and i1 %104, %112, !dbg !35
  %114 = bitcast float %110 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %114, i1 %113) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %115 = getelementptr float, ptr addrspace(3) @global_smem, i32 %96, !dbg !35
  %116 = load i32, ptr addrspace(3) %115, align 16, !dbg !35
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i32 %100, !dbg !35
  %118 = load i32, ptr addrspace(3) %117, align 8, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %119 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %13, !dbg !41
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %119, i32 %116, i32 %118, i1 true) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %120 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %68, !dbg !41
  %121 = load float, ptr addrspace(3) %120, align 4, !dbg !41
  %122 = sext i32 %69 to i64, !dbg !42
  %123 = getelementptr half, ptr addrspace(1) %4, i64 %122, !dbg !42
  %124 = fptrunc float %121 to half, !dbg !41
  %125 = and i32 %11, 56, !dbg !41
  %126 = icmp eq i32 %125, 0, !dbg !41
  %127 = bitcast half %124 to i16, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %127, ptr addrspace(1) %123, i1 %126) #3, !dbg !41
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb6vgngmgusaq42w5g3gqwky4pfaktesyo3iqr644b5byz4ctmzl.py", directory: "./local_cache/b6")
!4 = !{ptr @triton_red_fused__to_copy_add_mul_sum_5, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mul_sum_5", linkageName: "triton_red_fused__to_copy_add_mul_sum_5", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 37, scope: !6)
!14 = !DILocation(line: 29, column: 40, scope: !6)
!15 = !DILocation(line: 30, column: 31, scope: !6)
!16 = !DILocation(line: 31, column: 29, scope: !6)
!17 = !DILocation(line: 35, column: 44, scope: !6)
!18 = !DILocation(line: 35, column: 39, scope: !6)
!19 = !DILocation(line: 35, column: 34, scope: !6)
!20 = !DILocation(line: 35, column: 51, scope: !6)
!21 = !DILocation(line: 35, column: 105, scope: !6)
!22 = !DILocation(line: 36, column: 34, scope: !6)
!23 = !DILocation(line: 36, column: 51, scope: !6)
!24 = !DILocation(line: 36, column: 105, scope: !6)
!25 = !DILocation(line: 37, column: 34, scope: !6)
!26 = !DILocation(line: 37, column: 51, scope: !6)
!27 = !DILocation(line: 37, column: 105, scope: !6)
!28 = !DILocation(line: 38, column: 34, scope: !6)
!29 = !DILocation(line: 38, column: 41, scope: !6)
!30 = !DILocation(line: 39, column: 22, scope: !6)
!31 = !DILocation(line: 41, column: 22, scope: !6)
!32 = !DILocation(line: 43, column: 22, scope: !6)
!33 = !DILocation(line: 45, column: 25, scope: !6)
!34 = !DILocation(line: 46, column: 42, scope: !6)
!35 = !DILocation(line: 286, column: 36, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !6, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!38 = !DILocation(line: 47, column: 27, scope: !6)
!39 = !DILocation(line: 256, column: 15, scope: !40, inlinedAt: !38)
!40 = distinct !DILexicalBlockFile(scope: !36, file: !37, discriminator: 0)
!41 = !DILocation(line: 48, column: 37, scope: !6)
!42 = !DILocation(line: 48, column: 25, scope: !6)
!43 = !DILocation(line: 48, column: 4, scope: !6)
