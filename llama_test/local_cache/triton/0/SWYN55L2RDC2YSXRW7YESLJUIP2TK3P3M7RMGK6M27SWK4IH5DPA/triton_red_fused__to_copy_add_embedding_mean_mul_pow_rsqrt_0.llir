; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [73 x i8] c"./local_cache/as/casz3ep5dxrodxni63f6fnstjrnur6lm6uexbggylreroa3mnfgf.py\00"
@assertMessage_0 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp4 < 128256\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !10 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %11 = shl i32 %10, 1, !dbg !12
  %12 = or disjoint i32 %11, 1, !dbg !13
  %13 = icmp slt i32 %11, %6, !dbg !14
  %14 = icmp slt i32 %12, %6, !dbg !14
  %15 = sext i32 %11 to i64, !dbg !15
  %16 = getelementptr i64, ptr addrspace(1) %1, i64 %15, !dbg !15
  %17 = sext i32 %12 to i64, !dbg !15
  %18 = getelementptr i64, ptr addrspace(1) %1, i64 %17, !dbg !15
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %13) #6, !dbg !16
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %13) #6, !dbg !16
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %13) #6, !dbg !16
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %13) #6, !dbg !16
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %13) #6, !dbg !16
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %13) #6, !dbg !16
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %13) #6, !dbg !16
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %13) #6, !dbg !16
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %14) #6, !dbg !16
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %14) #6, !dbg !16
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %14) #6, !dbg !16
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %14) #6, !dbg !16
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %14) #6, !dbg !16
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %14) #6, !dbg !16
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %14) #6, !dbg !16
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %14) #6, !dbg !16
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %13) #6, !dbg !16
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %14) #6, !dbg !16
  %37 = insertelement <2 x i64> poison, i64 %36, i64 0, !dbg !17
  %38 = insertelement <2 x i64> %37, i64 %35, i64 1, !dbg !17
  %39 = add <2 x i64> %38, splat (i64 128256), !dbg !17
  %40 = icmp slt <2 x i64> %38, zeroinitializer, !dbg !18
  %41 = select <2 x i1> %40, <2 x i64> %39, <2 x i64> %38, !dbg !19
  %42 = icmp ugt <2 x i64> %41, splat (i64 128255), !dbg !20
  %43 = extractelement <2 x i1> %42, i64 1, !dbg !21
  %.not1 = and i1 %13, %43, !dbg !21
  %44 = extractelement <2 x i1> %42, i64 0, !dbg !22
  %.not2 = and i1 %14, %44, !dbg !22
  %45 = or i1 %.not1, %.not2, !dbg !22
  br i1 %45, label %46, label %47, !dbg !22

46:                                               ; preds = %9
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !22
  unreachable, !dbg !22

47:                                               ; preds = %9
  %48 = icmp slt i64 %34, 0, !dbg !18
  %49 = icmp slt i64 %26, 0, !dbg !18
  %50 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !23
  %51 = shl i32 %50, 3, !dbg !24
  %52 = and i32 %51, 2040, !dbg !24
  %53 = or disjoint i32 %52, 2048, !dbg !24
  %54 = lshr i32 %50, 5, !dbg !24
  %55 = and i32 %50, 31, !dbg !23
  %56 = and i32 %50, 1, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %57 = shl i64 %26, 12, !dbg !25
  %58 = add i64 %57, 525336576, !dbg !25
  %59 = select i1 %49, i64 %58, i64 %57, !dbg !25
  %60 = shl i64 %34, 12, !dbg !25
  %61 = add i64 %60, 525336576, !dbg !25
  %62 = select i1 %48, i64 %61, i64 %60, !dbg !25
  %63 = zext nneg i32 %52 to i64, !dbg !26
  %64 = zext nneg i32 %53 to i64, !dbg !26
  %65 = getelementptr half, ptr addrspace(1) %2, i64 %59, !dbg !27
  %66 = getelementptr half, ptr addrspace(1) %65, i64 %63, !dbg !27
  %67 = getelementptr half, ptr addrspace(1) %65, i64 %64, !dbg !27
  %68 = getelementptr half, ptr addrspace(1) %2, i64 %62, !dbg !27
  %69 = getelementptr half, ptr addrspace(1) %68, i64 %63, !dbg !27
  %70 = getelementptr half, ptr addrspace(1) %68, i64 %64, !dbg !27
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %66, i1 %13) #6, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !28
  %73 = bitcast i32 %72 to <2 x half>, !dbg !28
  %74 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !28
  %75 = bitcast i32 %74 to <2 x half>, !dbg !28
  %76 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !28
  %77 = bitcast i32 %76 to <2 x half>, !dbg !28
  %78 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !28
  %79 = bitcast i32 %78 to <2 x half>, !dbg !28
  %80 = extractelement <2 x half> %73, i64 0, !dbg !28
  %81 = extractelement <2 x half> %73, i64 1, !dbg !28
  %82 = extractelement <2 x half> %75, i64 0, !dbg !28
  %83 = extractelement <2 x half> %75, i64 1, !dbg !28
  %84 = extractelement <2 x half> %77, i64 0, !dbg !28
  %85 = extractelement <2 x half> %77, i64 1, !dbg !28
  %86 = extractelement <2 x half> %79, i64 0, !dbg !28
  %87 = extractelement <2 x half> %79, i64 1, !dbg !28
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %67, i1 %13) #6, !dbg !28
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !28
  %90 = bitcast i32 %89 to <2 x half>, !dbg !28
  %91 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !28
  %92 = bitcast i32 %91 to <2 x half>, !dbg !28
  %93 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !28
  %94 = bitcast i32 %93 to <2 x half>, !dbg !28
  %95 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !28
  %96 = bitcast i32 %95 to <2 x half>, !dbg !28
  %97 = extractelement <2 x half> %90, i64 0, !dbg !28
  %98 = extractelement <2 x half> %90, i64 1, !dbg !28
  %99 = extractelement <2 x half> %92, i64 0, !dbg !28
  %100 = extractelement <2 x half> %92, i64 1, !dbg !28
  %101 = extractelement <2 x half> %94, i64 0, !dbg !28
  %102 = extractelement <2 x half> %94, i64 1, !dbg !28
  %103 = extractelement <2 x half> %96, i64 0, !dbg !28
  %104 = extractelement <2 x half> %96, i64 1, !dbg !28
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %69, i1 %14) #6, !dbg !28
  %106 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !28
  %107 = bitcast i32 %106 to <2 x half>, !dbg !28
  %108 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !28
  %109 = bitcast i32 %108 to <2 x half>, !dbg !28
  %110 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !28
  %111 = bitcast i32 %110 to <2 x half>, !dbg !28
  %112 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !28
  %113 = bitcast i32 %112 to <2 x half>, !dbg !28
  %114 = extractelement <2 x half> %107, i64 0, !dbg !28
  %115 = extractelement <2 x half> %107, i64 1, !dbg !28
  %116 = extractelement <2 x half> %109, i64 0, !dbg !28
  %117 = extractelement <2 x half> %109, i64 1, !dbg !28
  %118 = extractelement <2 x half> %111, i64 0, !dbg !28
  %119 = extractelement <2 x half> %111, i64 1, !dbg !28
  %120 = extractelement <2 x half> %113, i64 0, !dbg !28
  %121 = extractelement <2 x half> %113, i64 1, !dbg !28
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %70, i1 %14) #6, !dbg !28
  %123 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !28
  %124 = bitcast i32 %123 to <2 x half>, !dbg !28
  %125 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !28
  %126 = bitcast i32 %125 to <2 x half>, !dbg !28
  %127 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !28
  %128 = bitcast i32 %127 to <2 x half>, !dbg !28
  %129 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !28
  %130 = bitcast i32 %129 to <2 x half>, !dbg !28
  %131 = extractelement <2 x half> %124, i64 0, !dbg !28
  %132 = extractelement <2 x half> %124, i64 1, !dbg !28
  %133 = extractelement <2 x half> %126, i64 0, !dbg !28
  %134 = extractelement <2 x half> %126, i64 1, !dbg !28
  %135 = extractelement <2 x half> %128, i64 0, !dbg !28
  %136 = extractelement <2 x half> %128, i64 1, !dbg !28
  %137 = extractelement <2 x half> %130, i64 0, !dbg !28
  %138 = extractelement <2 x half> %130, i64 1, !dbg !28
  %139 = fpext half %80 to float, !dbg !29
  %140 = fpext half %81 to float, !dbg !29
  %141 = fpext half %82 to float, !dbg !29
  %142 = fpext half %83 to float, !dbg !29
  %143 = fpext half %84 to float, !dbg !29
  %144 = fpext half %85 to float, !dbg !29
  %145 = fpext half %86 to float, !dbg !29
  %146 = fpext half %87 to float, !dbg !29
  %147 = fpext half %97 to float, !dbg !29
  %148 = fpext half %98 to float, !dbg !29
  %149 = fpext half %99 to float, !dbg !29
  %150 = fpext half %100 to float, !dbg !29
  %151 = fpext half %101 to float, !dbg !29
  %152 = fpext half %102 to float, !dbg !29
  %153 = fpext half %103 to float, !dbg !29
  %154 = fpext half %104 to float, !dbg !29
  %155 = fpext half %114 to float, !dbg !29
  %156 = fpext half %115 to float, !dbg !29
  %157 = fpext half %116 to float, !dbg !29
  %158 = fpext half %117 to float, !dbg !29
  %159 = fpext half %118 to float, !dbg !29
  %160 = fpext half %119 to float, !dbg !29
  %161 = fpext half %120 to float, !dbg !29
  %162 = fpext half %121 to float, !dbg !29
  %163 = fpext half %131 to float, !dbg !29
  %164 = fpext half %132 to float, !dbg !29
  %165 = fpext half %133 to float, !dbg !29
  %166 = fpext half %134 to float, !dbg !29
  %167 = fpext half %135 to float, !dbg !29
  %168 = fpext half %136 to float, !dbg !29
  %169 = fpext half %137 to float, !dbg !29
  %170 = fpext half %138 to float, !dbg !29
  %171 = fmul float %139, %139, !dbg !30
  %172 = fmul float %140, %140, !dbg !30
  %173 = fmul float %141, %141, !dbg !30
  %174 = fmul float %142, %142, !dbg !30
  %175 = fmul float %143, %143, !dbg !30
  %176 = fmul float %144, %144, !dbg !30
  %177 = fmul float %145, %145, !dbg !30
  %178 = fmul float %146, %146, !dbg !30
  %179 = fmul float %147, %147, !dbg !30
  %180 = fmul float %148, %148, !dbg !30
  %181 = fmul float %149, %149, !dbg !30
  %182 = fmul float %150, %150, !dbg !30
  %183 = fmul float %151, %151, !dbg !30
  %184 = fmul float %152, %152, !dbg !30
  %185 = fmul float %153, %153, !dbg !30
  %186 = fmul float %154, %154, !dbg !30
  %187 = fmul float %155, %155, !dbg !30
  %188 = fmul float %156, %156, !dbg !30
  %189 = fmul float %157, %157, !dbg !30
  %190 = fmul float %158, %158, !dbg !30
  %191 = fmul float %159, %159, !dbg !30
  %192 = fmul float %160, %160, !dbg !30
  %193 = fmul float %161, %161, !dbg !30
  %194 = fmul float %162, %162, !dbg !30
  %195 = fmul float %163, %163, !dbg !30
  %196 = fmul float %164, %164, !dbg !30
  %197 = fmul float %165, %165, !dbg !30
  %198 = fmul float %166, %166, !dbg !30
  %199 = fmul float %167, %167, !dbg !30
  %200 = fmul float %168, %168, !dbg !30
  %201 = fmul float %169, %169, !dbg !30
  %202 = fmul float %170, %170, !dbg !30
  %203 = shl i32 %10, 13, !dbg !31
  %204 = shl i32 %12, 12, !dbg !31
  %205 = or disjoint i32 %52, %203, !dbg !32
  %206 = or disjoint i32 %53, %203, !dbg !32
  %207 = or disjoint i32 %204, %52, !dbg !32
  %208 = or disjoint i32 %53, %204, !dbg !32
  %209 = sext i32 %205 to i64, !dbg !33
  %210 = getelementptr half, ptr addrspace(1) %4, i64 %209, !dbg !33
  %211 = sext i32 %206 to i64, !dbg !33
  %212 = getelementptr half, ptr addrspace(1) %4, i64 %211, !dbg !33
  %213 = sext i32 %207 to i64, !dbg !33
  %214 = getelementptr half, ptr addrspace(1) %4, i64 %213, !dbg !33
  %215 = sext i32 %208 to i64, !dbg !33
  %216 = getelementptr half, ptr addrspace(1) %4, i64 %215, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %72, i32 %74, i32 %76, i32 %78, ptr addrspace(1) %210, i1 %13) #6, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %89, i32 %91, i32 %93, i32 %95, ptr addrspace(1) %212, i1 %13) #6, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %106, i32 %108, i32 %110, i32 %112, ptr addrspace(1) %214, i1 %14) #6, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %123, i32 %125, i32 %127, i32 %129, ptr addrspace(1) %216, i1 %14) #6, !dbg !34
  %217 = fadd float %171, %172, !dbg !35
  %218 = fadd float %173, %217, !dbg !35
  %219 = fadd float %174, %218, !dbg !35
  %220 = fadd float %175, %219, !dbg !35
  %221 = fadd float %176, %220, !dbg !35
  %222 = fadd float %177, %221, !dbg !35
  %223 = fadd float %178, %222, !dbg !35
  %224 = fadd float %179, %223, !dbg !35
  %225 = fadd float %180, %224, !dbg !35
  %226 = fadd float %181, %225, !dbg !35
  %227 = fadd float %182, %226, !dbg !35
  %228 = fadd float %183, %227, !dbg !35
  %229 = fadd float %184, %228, !dbg !35
  %230 = fadd float %185, %229, !dbg !35
  %231 = fadd float %186, %230, !dbg !35
  %232 = select i1 %13, float %231, float 0.000000e+00, !dbg !35
  %233 = fadd float %187, %188, !dbg !35
  %234 = fadd float %189, %233, !dbg !35
  %235 = fadd float %190, %234, !dbg !35
  %236 = fadd float %191, %235, !dbg !35
  %237 = fadd float %192, %236, !dbg !35
  %238 = fadd float %193, %237, !dbg !35
  %239 = fadd float %194, %238, !dbg !35
  %240 = fadd float %195, %239, !dbg !35
  %241 = fadd float %196, %240, !dbg !35
  %242 = fadd float %197, %241, !dbg !35
  %243 = fadd float %198, %242, !dbg !35
  %244 = fadd float %199, %243, !dbg !35
  %245 = fadd float %200, %244, !dbg !35
  %246 = fadd float %201, %245, !dbg !35
  %247 = fadd float %202, %246, !dbg !35
  %248 = select i1 %14, float %247, float 0.000000e+00, !dbg !35
  %249 = bitcast float %232 to i32, !dbg !40
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 16, i32 31), !dbg !40
  %251 = bitcast i32 %250 to float, !dbg !40
  %252 = fadd float %232, %251, !dbg !35
  %253 = bitcast float %252 to i32, !dbg !40
  %254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %253, i32 8, i32 31), !dbg !40
  %255 = bitcast i32 %254 to float, !dbg !40
  %256 = fadd float %252, %255, !dbg !35
  %257 = bitcast float %256 to i32, !dbg !40
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 4, i32 31), !dbg !40
  %259 = bitcast i32 %258 to float, !dbg !40
  %260 = fadd float %256, %259, !dbg !35
  %261 = bitcast float %260 to i32, !dbg !40
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 2, i32 31), !dbg !40
  %263 = bitcast i32 %262 to float, !dbg !40
  %264 = fadd float %260, %263, !dbg !35
  %265 = bitcast float %264 to i32, !dbg !40
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 1, i32 31), !dbg !40
  %267 = bitcast i32 %266 to float, !dbg !40
  %268 = fadd float %264, %267, !dbg !35
  %269 = bitcast float %248 to i32, !dbg !40
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 16, i32 31), !dbg !40
  %271 = bitcast i32 %270 to float, !dbg !40
  %272 = fadd float %248, %271, !dbg !35
  %273 = bitcast float %272 to i32, !dbg !40
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 8, i32 31), !dbg !40
  %275 = bitcast i32 %274 to float, !dbg !40
  %276 = fadd float %272, %275, !dbg !35
  %277 = bitcast float %276 to i32, !dbg !40
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 4, i32 31), !dbg !40
  %279 = bitcast i32 %278 to float, !dbg !40
  %280 = fadd float %276, %279, !dbg !35
  %281 = bitcast float %280 to i32, !dbg !40
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 2, i32 31), !dbg !40
  %283 = bitcast i32 %282 to float, !dbg !40
  %284 = fadd float %280, %283, !dbg !35
  %285 = bitcast float %284 to i32, !dbg !40
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 1, i32 31), !dbg !40
  %287 = bitcast i32 %286 to float, !dbg !40
  %288 = fadd float %284, %287, !dbg !35
  %289 = and i32 %54, 7, !dbg !40
  %290 = icmp eq i32 %55, 0, !dbg !40
  %291 = getelementptr float, ptr addrspace(3) @global_smem, i32 %289, !dbg !40
  %292 = bitcast float %268 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %291, <1 x i32> %292, i1 %290) #6, !dbg !40
  %293 = or disjoint i32 %289, 8, !dbg !40
  %294 = getelementptr float, ptr addrspace(3) @global_smem, i32 %293, !dbg !40
  %295 = bitcast float %288 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %295, i1 %290) #6, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %296 = icmp slt i32 %50, 16, !dbg !40
  %297 = getelementptr float, ptr addrspace(3) @global_smem, i32 %50, !dbg !40
  %298 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %297, i1 %296) #6, !dbg !40
  %299 = bitcast i32 %298 to float, !dbg !40
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 4, i32 31), !dbg !40
  %301 = bitcast i32 %300 to float, !dbg !40
  %302 = fadd float %299, %301, !dbg !35
  %303 = bitcast float %302 to i32, !dbg !40
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 2, i32 31), !dbg !40
  %305 = bitcast i32 %304 to float, !dbg !40
  %306 = fadd float %302, %305, !dbg !35
  %307 = bitcast float %306 to i32, !dbg !40
  %308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %307, i32 1, i32 31), !dbg !40
  %309 = bitcast i32 %308 to float, !dbg !40
  %310 = fadd float %306, %309, !dbg !35
  %311 = and i32 %50, 7, !dbg !40
  %312 = icmp eq i32 %311, 0, !dbg !40
  %313 = and i1 %296, %312, !dbg !40
  %314 = bitcast float %310 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, <1 x i32> %314, i1 %313) #6, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %315 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !40
  %316 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %317 = bitcast float %315 to i32, !dbg !41
  %318 = bitcast float %316 to i32, !dbg !41
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %317, i32 %318, i1 true) #6, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %319 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %56, !dbg !41
  %320 = load float, ptr addrspace(3) %319, align 4, !dbg !41
  %321 = tail call float @llvm.nvvm.div.full(float %320, float 4.096000e+03), !dbg !42
  %322 = tail call float @llvm.nvvm.div.full(float %315, float 4.096000e+03), !dbg !42
  %323 = tail call float @llvm.nvvm.div.full(float %316, float 4.096000e+03), !dbg !42
  %324 = fadd float %321, 0x3EE4F8B580000000, !dbg !43
  %325 = fadd float %322, 0x3EE4F8B580000000, !dbg !43
  %326 = fadd float %323, 0x3EE4F8B580000000, !dbg !43
  %327 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %.not.i = icmp eq i32 %327, 0, !dbg !41
  br i1 %.not.i, label %330, label %328, !dbg !41

328:                                              ; preds = %47
  %329 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %324), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

330:                                              ; preds = %47
  %331 = tail call float @llvm.nvvm.rsqrt.approx.f(float %324), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %328, %330
  %.0.i = phi float [ %329, %328 ], [ %331, %330 ], !dbg !41
  %332 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %333 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %334 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %335 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %336 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %337 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %338 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %339 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %.not.i24 = icmp eq i32 %339, 0, !dbg !41
  br i1 %.not.i24, label %342, label %340, !dbg !41

340:                                              ; preds = %__nv_rsqrtf.exit
  %341 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %325), !dbg !41
  br label %__nv_rsqrtf.exit26, !dbg !41

342:                                              ; preds = %__nv_rsqrtf.exit
  %343 = tail call float @llvm.nvvm.rsqrt.approx.f(float %325), !dbg !41
  br label %__nv_rsqrtf.exit26, !dbg !41

__nv_rsqrtf.exit26:                               ; preds = %340, %342
  %.0.i25 = phi float [ %341, %340 ], [ %343, %342 ], !dbg !41
  %344 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %345 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %346 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %347 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %348 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %349 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %350 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %351 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %.not.i48 = icmp eq i32 %351, 0, !dbg !41
  br i1 %.not.i48, label %354, label %352, !dbg !41

352:                                              ; preds = %__nv_rsqrtf.exit26
  %353 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %326), !dbg !41
  br label %__nv_rsqrtf.exit50, !dbg !41

354:                                              ; preds = %__nv_rsqrtf.exit26
  %355 = tail call float @llvm.nvvm.rsqrt.approx.f(float %326), !dbg !41
  br label %__nv_rsqrtf.exit50, !dbg !41

__nv_rsqrtf.exit50:                               ; preds = %352, %354
  %.0.i49 = phi float [ %353, %352 ], [ %355, %354 ], !dbg !41
  %356 = or disjoint i32 %11, %56, !dbg !13
  %357 = icmp slt i32 %356, %6, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %358 = sext i32 %356 to i64, !dbg !45
  %359 = getelementptr float, ptr addrspace(1) %0, i64 %358, !dbg !45
  %360 = and i32 %50, 254, !dbg !46
  %361 = icmp eq i32 %360, 0, !dbg !46
  %362 = bitcast float %.0.i to i32, !dbg !46
  %363 = and i1 %361, %357, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %362, ptr addrspace(1) %359, i1 %363) #6, !dbg !46
  %364 = getelementptr half, ptr addrspace(1) %3, i64 %63, !dbg !47
  %365 = getelementptr half, ptr addrspace(1) %3, i64 %64, !dbg !47
  %366 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %364, i1 true) #6, !dbg !48
  %367 = extractvalue { i32, i32, i32, i32 } %366, 0, !dbg !48
  %368 = bitcast i32 %367 to <2 x half>, !dbg !48
  %369 = extractvalue { i32, i32, i32, i32 } %366, 1, !dbg !48
  %370 = bitcast i32 %369 to <2 x half>, !dbg !48
  %371 = extractvalue { i32, i32, i32, i32 } %366, 2, !dbg !48
  %372 = bitcast i32 %371 to <2 x half>, !dbg !48
  %373 = extractvalue { i32, i32, i32, i32 } %366, 3, !dbg !48
  %374 = bitcast i32 %373 to <2 x half>, !dbg !48
  %375 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %365, i1 true) #6, !dbg !48
  %376 = extractvalue { i32, i32, i32, i32 } %375, 0, !dbg !48
  %377 = bitcast i32 %376 to <2 x half>, !dbg !48
  %378 = extractvalue { i32, i32, i32, i32 } %375, 1, !dbg !48
  %379 = bitcast i32 %378 to <2 x half>, !dbg !48
  %380 = extractvalue { i32, i32, i32, i32 } %375, 2, !dbg !48
  %381 = bitcast i32 %380 to <2 x half>, !dbg !48
  %382 = extractvalue { i32, i32, i32, i32 } %375, 3, !dbg !48
  %383 = bitcast i32 %382 to <2 x half>, !dbg !48
  %384 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %210, i1 %13) #6, !dbg !49
  %385 = extractvalue { i32, i32, i32, i32 } %384, 0, !dbg !49
  %386 = bitcast i32 %385 to <2 x half>, !dbg !49
  %387 = extractvalue { i32, i32, i32, i32 } %384, 1, !dbg !49
  %388 = bitcast i32 %387 to <2 x half>, !dbg !49
  %389 = extractvalue { i32, i32, i32, i32 } %384, 2, !dbg !49
  %390 = bitcast i32 %389 to <2 x half>, !dbg !49
  %391 = extractvalue { i32, i32, i32, i32 } %384, 3, !dbg !49
  %392 = bitcast i32 %391 to <2 x half>, !dbg !49
  %393 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %212, i1 %13) #6, !dbg !49
  %394 = extractvalue { i32, i32, i32, i32 } %393, 0, !dbg !49
  %395 = bitcast i32 %394 to <2 x half>, !dbg !49
  %396 = extractvalue { i32, i32, i32, i32 } %393, 1, !dbg !49
  %397 = bitcast i32 %396 to <2 x half>, !dbg !49
  %398 = extractvalue { i32, i32, i32, i32 } %393, 2, !dbg !49
  %399 = bitcast i32 %398 to <2 x half>, !dbg !49
  %400 = extractvalue { i32, i32, i32, i32 } %393, 3, !dbg !49
  %401 = bitcast i32 %400 to <2 x half>, !dbg !49
  %402 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %214, i1 %14) #6, !dbg !49
  %403 = extractvalue { i32, i32, i32, i32 } %402, 0, !dbg !49
  %404 = bitcast i32 %403 to <2 x half>, !dbg !49
  %405 = extractvalue { i32, i32, i32, i32 } %402, 1, !dbg !49
  %406 = bitcast i32 %405 to <2 x half>, !dbg !49
  %407 = extractvalue { i32, i32, i32, i32 } %402, 2, !dbg !49
  %408 = bitcast i32 %407 to <2 x half>, !dbg !49
  %409 = extractvalue { i32, i32, i32, i32 } %402, 3, !dbg !49
  %410 = bitcast i32 %409 to <2 x half>, !dbg !49
  %411 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %216, i1 %14) #6, !dbg !49
  %412 = extractvalue { i32, i32, i32, i32 } %411, 0, !dbg !49
  %413 = bitcast i32 %412 to <2 x half>, !dbg !49
  %414 = extractvalue { i32, i32, i32, i32 } %411, 1, !dbg !49
  %415 = bitcast i32 %414 to <2 x half>, !dbg !49
  %416 = extractvalue { i32, i32, i32, i32 } %411, 2, !dbg !49
  %417 = bitcast i32 %416 to <2 x half>, !dbg !49
  %418 = extractvalue { i32, i32, i32, i32 } %411, 3, !dbg !49
  %419 = bitcast i32 %418 to <2 x half>, !dbg !49
  %420 = getelementptr half, ptr addrspace(1) %5, i64 %209, !dbg !50
  %421 = getelementptr half, ptr addrspace(1) %5, i64 %211, !dbg !50
  %422 = getelementptr half, ptr addrspace(1) %5, i64 %213, !dbg !50
  %423 = getelementptr half, ptr addrspace(1) %5, i64 %215, !dbg !50
  %424 = fpext <2 x half> %368 to <2 x float>, !dbg !51
  %425 = fpext <2 x half> %386 to <2 x float>, !dbg !52
  %426 = insertelement <2 x float> poison, float %.0.i25, i64 0, !dbg !53
  %427 = shufflevector <2 x float> %426, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %428 = fmul <2 x float> %427, %425, !dbg !53
  %429 = fmul <2 x float> %428, %424, !dbg !54
  %430 = fptrunc <2 x float> %429 to <2 x half>, !dbg !55
  %431 = fpext <2 x half> %370 to <2 x float>, !dbg !51
  %432 = fpext <2 x half> %388 to <2 x float>, !dbg !52
  %433 = fmul <2 x float> %427, %432, !dbg !53
  %434 = fmul <2 x float> %433, %431, !dbg !54
  %435 = fptrunc <2 x float> %434 to <2 x half>, !dbg !55
  %436 = fpext <2 x half> %372 to <2 x float>, !dbg !51
  %437 = fpext <2 x half> %390 to <2 x float>, !dbg !52
  %438 = fmul <2 x float> %427, %437, !dbg !53
  %439 = fmul <2 x float> %438, %436, !dbg !54
  %440 = fptrunc <2 x float> %439 to <2 x half>, !dbg !55
  %441 = fpext <2 x half> %374 to <2 x float>, !dbg !51
  %442 = fpext <2 x half> %392 to <2 x float>, !dbg !52
  %443 = fmul <2 x float> %427, %442, !dbg !53
  %444 = fmul <2 x float> %443, %441, !dbg !54
  %445 = fptrunc <2 x float> %444 to <2 x half>, !dbg !55
  %446 = fpext <2 x half> %377 to <2 x float>, !dbg !51
  %447 = fpext <2 x half> %395 to <2 x float>, !dbg !52
  %448 = fmul <2 x float> %427, %447, !dbg !53
  %449 = fmul <2 x float> %448, %446, !dbg !54
  %450 = fptrunc <2 x float> %449 to <2 x half>, !dbg !55
  %451 = fpext <2 x half> %379 to <2 x float>, !dbg !51
  %452 = fpext <2 x half> %397 to <2 x float>, !dbg !52
  %453 = fmul <2 x float> %427, %452, !dbg !53
  %454 = fmul <2 x float> %453, %451, !dbg !54
  %455 = fptrunc <2 x float> %454 to <2 x half>, !dbg !55
  %456 = fpext <2 x half> %381 to <2 x float>, !dbg !51
  %457 = fpext <2 x half> %399 to <2 x float>, !dbg !52
  %458 = fmul <2 x float> %427, %457, !dbg !53
  %459 = fmul <2 x float> %458, %456, !dbg !54
  %460 = fptrunc <2 x float> %459 to <2 x half>, !dbg !55
  %461 = fpext <2 x half> %383 to <2 x float>, !dbg !51
  %462 = fpext <2 x half> %401 to <2 x float>, !dbg !52
  %463 = fmul <2 x float> %427, %462, !dbg !53
  %464 = fmul <2 x float> %463, %461, !dbg !54
  %465 = fptrunc <2 x float> %464 to <2 x half>, !dbg !55
  %466 = fpext <2 x half> %404 to <2 x float>, !dbg !52
  %467 = insertelement <2 x float> poison, float %.0.i49, i64 0, !dbg !53
  %468 = shufflevector <2 x float> %467, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %469 = fmul <2 x float> %468, %466, !dbg !53
  %470 = fmul <2 x float> %469, %424, !dbg !54
  %471 = fptrunc <2 x float> %470 to <2 x half>, !dbg !55
  %472 = fpext <2 x half> %406 to <2 x float>, !dbg !52
  %473 = fmul <2 x float> %468, %472, !dbg !53
  %474 = fmul <2 x float> %473, %431, !dbg !54
  %475 = fptrunc <2 x float> %474 to <2 x half>, !dbg !55
  %476 = fpext <2 x half> %408 to <2 x float>, !dbg !52
  %477 = fmul <2 x float> %468, %476, !dbg !53
  %478 = fmul <2 x float> %477, %436, !dbg !54
  %479 = fptrunc <2 x float> %478 to <2 x half>, !dbg !55
  %480 = fpext <2 x half> %410 to <2 x float>, !dbg !52
  %481 = fmul <2 x float> %468, %480, !dbg !53
  %482 = fmul <2 x float> %481, %441, !dbg !54
  %483 = fptrunc <2 x float> %482 to <2 x half>, !dbg !55
  %484 = fpext <2 x half> %413 to <2 x float>, !dbg !52
  %485 = fmul <2 x float> %468, %484, !dbg !53
  %486 = fmul <2 x float> %485, %446, !dbg !54
  %487 = fptrunc <2 x float> %486 to <2 x half>, !dbg !55
  %488 = fpext <2 x half> %415 to <2 x float>, !dbg !52
  %489 = fmul <2 x float> %468, %488, !dbg !53
  %490 = fmul <2 x float> %489, %451, !dbg !54
  %491 = fptrunc <2 x float> %490 to <2 x half>, !dbg !55
  %492 = fpext <2 x half> %417 to <2 x float>, !dbg !52
  %493 = fmul <2 x float> %468, %492, !dbg !53
  %494 = fmul <2 x float> %493, %456, !dbg !54
  %495 = fptrunc <2 x float> %494 to <2 x half>, !dbg !55
  %496 = fpext <2 x half> %419 to <2 x float>, !dbg !52
  %497 = fmul <2 x float> %468, %496, !dbg !53
  %498 = fmul <2 x float> %497, %461, !dbg !54
  %499 = fptrunc <2 x float> %498 to <2 x half>, !dbg !55
  %500 = bitcast <2 x half> %430 to i32, !dbg !55
  %501 = bitcast <2 x half> %435 to i32, !dbg !55
  %502 = bitcast <2 x half> %440 to i32, !dbg !55
  %503 = bitcast <2 x half> %445 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %500, i32 %501, i32 %502, i32 %503, ptr addrspace(1) %420, i1 %13) #6, !dbg !55
  %504 = bitcast <2 x half> %450 to i32, !dbg !55
  %505 = bitcast <2 x half> %455 to i32, !dbg !55
  %506 = bitcast <2 x half> %460 to i32, !dbg !55
  %507 = bitcast <2 x half> %465 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %504, i32 %505, i32 %506, i32 %507, ptr addrspace(1) %421, i1 %13) #6, !dbg !55
  %508 = bitcast <2 x half> %471 to i32, !dbg !55
  %509 = bitcast <2 x half> %475 to i32, !dbg !55
  %510 = bitcast <2 x half> %479 to i32, !dbg !55
  %511 = bitcast <2 x half> %483 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %508, i32 %509, i32 %510, i32 %511, ptr addrspace(1) %422, i1 %14) #6, !dbg !55
  %512 = bitcast <2 x half> %487 to i32, !dbg !55
  %513 = bitcast <2 x half> %491 to i32, !dbg !55
  %514 = bitcast <2 x half> %495 to i32, !dbg !55
  %515 = bitcast <2 x half> %499 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %512, i32 %513, i32 %514, i32 %515, ptr addrspace(1) %423, i1 %14) #6, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "casz3ep5dxrodxni63f6fnstjrnur6lm6uexbggylreroa3mnfgf.py", directory: "./local_cache/as")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 22, column: 28, scope: !10)
!12 = !DILocation(line: 22, column: 33, scope: !10)
!13 = !DILocation(line: 23, column: 23, scope: !10)
!14 = !DILocation(line: 24, column: 21, scope: !10)
!15 = !DILocation(line: 28, column: 30, scope: !10)
!16 = !DILocation(line: 28, column: 35, scope: !10)
!17 = !DILocation(line: 37, column: 22, scope: !10)
!18 = !DILocation(line: 38, column: 22, scope: !10)
!19 = !DILocation(line: 39, column: 36, scope: !10)
!20 = !DILocation(line: 40, column: 41, scope: !10)
!21 = !DILocation(line: 40, column: 59, scope: !10)
!22 = !DILocation(line: 40, column: 69, scope: !10)
!23 = !DILocation(line: 23, column: 44, scope: !10)
!24 = !DILocation(line: 25, column: 37, scope: !10)
!25 = !DILocation(line: 41, column: 46, scope: !10)
!26 = !DILocation(line: 41, column: 41, scope: !10)
!27 = !DILocation(line: 41, column: 34, scope: !10)
!28 = !DILocation(line: 41, column: 53, scope: !10)
!29 = !DILocation(line: 41, column: 115, scope: !10)
!30 = !DILocation(line: 43, column: 22, scope: !10)
!31 = !DILocation(line: 47, column: 41, scope: !10)
!32 = !DILocation(line: 47, column: 36, scope: !10)
!33 = !DILocation(line: 47, column: 29, scope: !10)
!34 = !DILocation(line: 47, column: 52, scope: !10)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !39)
!36 = distinct !DILexicalBlockFile(scope: !38, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!38 = distinct !DILexicalBlockFile(scope: !10, file: !37, discriminator: 0)
!39 = !DILocation(line: 48, column: 27, scope: !10)
!40 = !DILocation(line: 286, column: 36, scope: !38, inlinedAt: !39)
!41 = !DILocation(line: 53, column: 28, scope: !10)
!42 = !DILocation(line: 50, column: 21, scope: !10)
!43 = !DILocation(line: 52, column: 20, scope: !10)
!44 = !DILocation(line: 54, column: 4, scope: !10)
!45 = !DILocation(line: 55, column: 28, scope: !10)
!46 = !DILocation(line: 55, column: 40, scope: !10)
!47 = !DILocation(line: 62, column: 35, scope: !10)
!48 = !DILocation(line: 62, column: 42, scope: !10)
!49 = !DILocation(line: 63, column: 53, scope: !10)
!50 = !DILocation(line: 68, column: 29, scope: !10)
!51 = !DILocation(line: 62, column: 95, scope: !10)
!52 = !DILocation(line: 63, column: 115, scope: !10)
!53 = !DILocation(line: 65, column: 24, scope: !10)
!54 = !DILocation(line: 67, column: 24, scope: !10)
!55 = !DILocation(line: 68, column: 53, scope: !10)
!56 = !DILocation(line: 56, column: 4, scope: !10)
