; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_red_fused__to_copy_add_div_mul_pow_sum_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = shl i32 %11, 2, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %14 = lshr i32 %13, 2, !dbg !11
  %15 = and i32 %14, 3, !dbg !11
  %16 = or disjoint i32 %15, %12, !dbg !12
  %17 = icmp slt i32 %16, %7, !dbg !13
  %.fr = freeze i1 %17
  %18 = and i32 %13, 3, !dbg !14
  %19 = shl i32 %16, 12, !dbg !15
  %invariant.op = or disjoint i32 %18, %19, !dbg !16
  %20 = zext nneg i32 %18 to i64, !dbg !16
  br i1 %.fr, label %.split.us, label %.split

.split.us:                                        ; preds = %10, %.split.us
  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %.split.us ], [ 0, %10 ]
  %21 = phi float [ %49, %.split.us ], [ 0.000000e+00, %10 ]
  %22 = or disjoint i64 %indvars.iv7, %20, !dbg !17
  %23 = trunc nuw nsw i64 %indvars.iv7 to i32
  %.reass.us = or i32 %invariant.op, %23
  %24 = sext i32 %.reass.us to i64, !dbg !18
  %25 = getelementptr half, ptr addrspace(1) %1, i64 %24, !dbg !18
  %26 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %25, i1 true) #2, !dbg !19
  %27 = bitcast i16 %26 to half, !dbg !19
  %28 = fpext half %27 to float, !dbg !20
  %29 = getelementptr half, ptr addrspace(1) %2, i64 %24, !dbg !21
  %30 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %29, i1 true) #2, !dbg !22
  %31 = bitcast i16 %30 to half, !dbg !22
  %32 = fpext half %31 to float, !dbg !23
  %33 = getelementptr half, ptr addrspace(1) %3, i64 %24, !dbg !24
  %34 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %33, i1 true) #2, !dbg !25
  %35 = bitcast i16 %34 to half, !dbg !25
  %36 = fpext half %35 to float, !dbg !26
  %37 = getelementptr half, ptr addrspace(1) %4, i64 %22, !dbg !27
  %38 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %37, i1 true) #2, !dbg !28
  %39 = bitcast i16 %38 to half, !dbg !28
  %40 = fpext half %39 to float, !dbg !29
  %41 = getelementptr half, ptr addrspace(1) %5, i64 %24, !dbg !30
  %42 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %41, i1 true) #2, !dbg !31
  %43 = bitcast i16 %42 to half, !dbg !31
  %44 = fpext half %43 to float, !dbg !32
  %45 = fadd float %28, %32, !dbg !33
  %46 = fadd float %45, %36, !dbg !34
  %47 = fmul float %46, %40, !dbg !35
  %48 = fmul float %47, %44, !dbg !36
  %49 = fadd float %21, %48, !dbg !37
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 4, !dbg !16
  %50 = icmp samesign ult i64 %indvars.iv7, 4092, !dbg !16
  br i1 %50, label %.split.us, label %.split3.us, !dbg !16

.split:                                           ; preds = %10, %.split
  %indvars.iv = phi i64 [ %indvars.iv.next, %.split ], [ 0, %10 ]
  %51 = or disjoint i64 %indvars.iv, %20, !dbg !17
  %52 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %52
  %53 = sext i32 %.reass to i64, !dbg !18
  %54 = getelementptr half, ptr addrspace(1) %1, i64 %53, !dbg !18
  %55 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %54, i1 false) #2, !dbg !19
  %56 = getelementptr half, ptr addrspace(1) %2, i64 %53, !dbg !21
  %57 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %56, i1 false) #2, !dbg !22
  %58 = getelementptr half, ptr addrspace(1) %3, i64 %53, !dbg !24
  %59 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %58, i1 false) #2, !dbg !25
  %60 = getelementptr half, ptr addrspace(1) %4, i64 %51, !dbg !27
  %61 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %60, i1 true) #2, !dbg !28
  %62 = getelementptr half, ptr addrspace(1) %5, i64 %53, !dbg !30
  %63 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %62, i1 false) #2, !dbg !31
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !16
  %64 = icmp samesign ult i64 %indvars.iv, 4092, !dbg !16
  br i1 %64, label %.split, label %.split3.us, !dbg !16

.split3.us:                                       ; preds = %.split, %.split.us
  %.us-phi = phi float [ %49, %.split.us ], [ 0.000000e+00, %.split ], !dbg !38
  %65 = bitcast float %.us-phi to i32, !dbg !38
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 2, i32 31), !dbg !38
  %67 = bitcast i32 %66 to float, !dbg !38
  %68 = fadd float %.us-phi, %67, !dbg !42
  %69 = bitcast float %68 to i32, !dbg !38
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 1, i32 31), !dbg !38
  %71 = bitcast i32 %70 to float, !dbg !38
  %72 = fadd float %68, %71, !dbg !42
  %73 = sext i32 %16 to i64, !dbg !44
  %74 = getelementptr float, ptr addrspace(1) %6, i64 %73, !dbg !44
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %.fr) #2, !dbg !45
  %76 = bitcast i32 %75 to float, !dbg !45
  %77 = fmul float %72, 5.000000e-01, !dbg !46
  %78 = fmul float %76, %76, !dbg !47
  %79 = fmul float %78, %76, !dbg !48
  %80 = fmul float %77, %79, !dbg !49
  %81 = fmul float %80, 0x3F30000000000000, !dbg !50
  %82 = and i32 %13, 240
  %83 = icmp eq i32 %82, 0
  %84 = and i1 %83, %.fr
  %85 = insertelement <2 x float> poison, float %76, i64 0, !dbg !51
  %86 = insertelement <2 x float> %85, float %81, i64 1, !dbg !51
  br label %87, !dbg !52

87:                                               ; preds = %.split3.us, %87
  %indvars.iv9 = phi i64 [ 0, %.split3.us ], [ %indvars.iv.next10, %87 ]
  %88 = or disjoint i64 %indvars.iv9, %20, !dbg !53
  %89 = trunc nuw nsw i64 %indvars.iv9 to i32
  %.reass5 = or i32 %invariant.op, %89
  %90 = sext i32 %.reass5 to i64, !dbg !54
  %91 = getelementptr half, ptr addrspace(1) %0, i64 %90, !dbg !54
  %92 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %91, i1 %.fr) #2, !dbg !55
  %93 = bitcast i16 %92 to half, !dbg !55
  %94 = fpext half %93 to float, !dbg !56
  %95 = getelementptr half, ptr addrspace(1) %1, i64 %90, !dbg !57
  %96 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %95, i1 %.fr) #2, !dbg !58
  %97 = bitcast i16 %96 to half, !dbg !58
  %98 = fpext half %97 to float, !dbg !59
  %99 = getelementptr half, ptr addrspace(1) %2, i64 %90, !dbg !60
  %100 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %99, i1 %.fr) #2, !dbg !61
  %101 = bitcast i16 %100 to half, !dbg !61
  %102 = fpext half %101 to float, !dbg !62
  %103 = getelementptr half, ptr addrspace(1) %3, i64 %90, !dbg !63
  %104 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %103, i1 %.fr) #2, !dbg !64
  %105 = bitcast i16 %104 to half, !dbg !64
  %106 = fpext half %105 to float, !dbg !65
  %107 = getelementptr half, ptr addrspace(1) %4, i64 %88, !dbg !66
  %108 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %107, i1 true) #2, !dbg !67
  %109 = getelementptr half, ptr addrspace(1) %5, i64 %90, !dbg !68
  %110 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %109, i1 %.fr) #2, !dbg !69
  %111 = fadd float %98, %102, !dbg !70
  %112 = fadd float %111, %106, !dbg !71
  %113 = insertelement <2 x i16> poison, i16 %108, i64 0, !dbg !67
  %114 = insertelement <2 x i16> %113, i16 %110, i64 1, !dbg !67
  %115 = bitcast <2 x i16> %114 to <2 x half>, !dbg !67
  %116 = fpext <2 x half> %115 to <2 x float>, !dbg !72
  %117 = insertelement <2 x float> <float poison, float 2.000000e+00>, float %112, i64 0, !dbg !73
  %118 = fmul <2 x float> %117, %116, !dbg !73
  %119 = fmul <2 x float> %118, %86, !dbg !51
  %shift = shufflevector <2 x float> %119, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !74
  %120 = fsub <2 x float> %119, %shift, !dbg !74
  %121 = extractelement <2 x float> %120, i64 0, !dbg !74
  %122 = fadd float %121, %94, !dbg !75
  %123 = fptrunc float %122 to half, !dbg !76
  %124 = bitcast half %123 to i16, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %124, ptr addrspace(1) %91, i1 %84) #2, !dbg !76
  %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 4, !dbg !52
  %125 = icmp samesign ult i64 %indvars.iv9, 4092, !dbg !52
  br i1 %125, label %87, label %126, !dbg !52

126:                                              ; preds = %87
  ret void, !dbg !77
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjzbe2rfzbrzt5nqp4tyglmue73nyj3pprrlwzjs765y5qoh7s2f.py", directory: "./local_cache/jz")
!4 = !{ptr @triton_red_fused__to_copy_add_div_mul_pow_sum_10, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_mul_pow_sum_10", linkageName: "triton_red_fused__to_copy_add_div_mul_pow_sum_10", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 29, column: 40, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 35, column: 34, scope: !6)
!19 = !DILocation(line: 35, column: 51, scope: !6)
!20 = !DILocation(line: 35, column: 112, scope: !6)
!21 = !DILocation(line: 36, column: 34, scope: !6)
!22 = !DILocation(line: 36, column: 51, scope: !6)
!23 = !DILocation(line: 36, column: 112, scope: !6)
!24 = !DILocation(line: 37, column: 34, scope: !6)
!25 = !DILocation(line: 37, column: 51, scope: !6)
!26 = !DILocation(line: 37, column: 112, scope: !6)
!27 = !DILocation(line: 38, column: 34, scope: !6)
!28 = !DILocation(line: 38, column: 41, scope: !6)
!29 = !DILocation(line: 38, column: 94, scope: !6)
!30 = !DILocation(line: 39, column: 34, scope: !6)
!31 = !DILocation(line: 39, column: 51, scope: !6)
!32 = !DILocation(line: 39, column: 112, scope: !6)
!33 = !DILocation(line: 40, column: 22, scope: !6)
!34 = !DILocation(line: 41, column: 22, scope: !6)
!35 = !DILocation(line: 42, column: 22, scope: !6)
!36 = !DILocation(line: 45, column: 23, scope: !6)
!37 = !DILocation(line: 47, column: 25, scope: !6)
!38 = !DILocation(line: 286, column: 36, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !6, file: !40, discriminator: 0)
!40 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!41 = !DILocation(line: 49, column: 27, scope: !6)
!42 = !DILocation(line: 256, column: 15, scope: !43, inlinedAt: !41)
!43 = distinct !DILexicalBlockFile(scope: !39, file: !40, discriminator: 0)
!44 = !DILocation(line: 50, column: 31, scope: !6)
!45 = !DILocation(line: 50, column: 36, scope: !6)
!46 = !DILocation(line: 69, column: 24, scope: !6)
!47 = !DILocation(line: 70, column: 24, scope: !6)
!48 = !DILocation(line: 71, column: 24, scope: !6)
!49 = !DILocation(line: 72, column: 24, scope: !6)
!50 = !DILocation(line: 74, column: 24, scope: !6)
!51 = !DILocation(line: 67, column: 24, scope: !6)
!52 = !DILocation(line: 51, column: 40, scope: !6)
!53 = !DILocation(line: 52, column: 31, scope: !6)
!54 = !DILocation(line: 57, column: 39, scope: !6)
!55 = !DILocation(line: 57, column: 56, scope: !6)
!56 = !DILocation(line: 57, column: 118, scope: !6)
!57 = !DILocation(line: 58, column: 35, scope: !6)
!58 = !DILocation(line: 58, column: 52, scope: !6)
!59 = !DILocation(line: 58, column: 114, scope: !6)
!60 = !DILocation(line: 59, column: 35, scope: !6)
!61 = !DILocation(line: 59, column: 52, scope: !6)
!62 = !DILocation(line: 59, column: 114, scope: !6)
!63 = !DILocation(line: 60, column: 35, scope: !6)
!64 = !DILocation(line: 60, column: 52, scope: !6)
!65 = !DILocation(line: 60, column: 114, scope: !6)
!66 = !DILocation(line: 61, column: 35, scope: !6)
!67 = !DILocation(line: 61, column: 42, scope: !6)
!68 = !DILocation(line: 62, column: 35, scope: !6)
!69 = !DILocation(line: 62, column: 52, scope: !6)
!70 = !DILocation(line: 63, column: 24, scope: !6)
!71 = !DILocation(line: 64, column: 24, scope: !6)
!72 = !DILocation(line: 61, column: 95, scope: !6)
!73 = !DILocation(line: 65, column: 24, scope: !6)
!74 = !DILocation(line: 79, column: 24, scope: !6)
!75 = !DILocation(line: 81, column: 24, scope: !6)
!76 = !DILocation(line: 82, column: 56, scope: !6)
!77 = !DILocation(line: 51, column: 4, scope: !6)
