; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_red_fused__to_copy_add_div_mul_pow_sum_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = shl i32 %10, 2, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = lshr i32 %12, 3, !dbg !11
  %14 = and i32 %13, 3, !dbg !11
  %15 = or disjoint i32 %14, %11, !dbg !12
  %16 = icmp slt i32 %15, %6, !dbg !13
  %.fr = freeze i1 %16
  %17 = and i32 %12, 7, !dbg !14
  %18 = shl i32 %15, 12, !dbg !15
  %invariant.op = or disjoint i32 %17, %18, !dbg !16
  %19 = zext nneg i32 %17 to i64, !dbg !16
  br i1 %.fr, label %.split.us, label %.split

.split.us:                                        ; preds = %9, %.split.us
  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %.split.us ], [ 0, %9 ]
  %20 = phi float [ %43, %.split.us ], [ 0.000000e+00, %9 ]
  %21 = or disjoint i64 %indvars.iv7, %19, !dbg !17
  %22 = trunc nuw nsw i64 %indvars.iv7 to i32
  %.reass.us = or i32 %invariant.op, %22
  %23 = sext i32 %.reass.us to i64, !dbg !18
  %24 = getelementptr half, ptr addrspace(1) %1, i64 %23, !dbg !18
  %25 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %24, i1 true) #2, !dbg !19
  %26 = bitcast i16 %25 to half, !dbg !19
  %27 = fpext half %26 to float, !dbg !20
  %28 = getelementptr half, ptr addrspace(1) %2, i64 %23, !dbg !21
  %29 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %28, i1 true) #2, !dbg !22
  %30 = bitcast i16 %29 to half, !dbg !22
  %31 = fpext half %30 to float, !dbg !23
  %32 = getelementptr half, ptr addrspace(1) %3, i64 %21, !dbg !24
  %33 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %32, i1 true) #2, !dbg !25
  %34 = bitcast i16 %33 to half, !dbg !25
  %35 = fpext half %34 to float, !dbg !26
  %36 = getelementptr half, ptr addrspace(1) %4, i64 %23, !dbg !27
  %37 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %36, i1 true) #2, !dbg !28
  %38 = bitcast i16 %37 to half, !dbg !28
  %39 = fpext half %38 to float, !dbg !29
  %40 = fadd float %27, %31, !dbg !30
  %41 = fmul float %40, %35, !dbg !31
  %42 = fmul float %41, %39, !dbg !32
  %43 = fadd float %20, %42, !dbg !33
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 8, !dbg !16
  %44 = icmp samesign ult i64 %indvars.iv7, 4088, !dbg !16
  br i1 %44, label %.split.us, label %.split3.us, !dbg !16

.split:                                           ; preds = %9, %.split
  %indvars.iv = phi i64 [ %indvars.iv.next, %.split ], [ 0, %9 ]
  %45 = or disjoint i64 %indvars.iv, %19, !dbg !17
  %46 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %46
  %47 = sext i32 %.reass to i64, !dbg !18
  %48 = getelementptr half, ptr addrspace(1) %1, i64 %47, !dbg !18
  %49 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %48, i1 false) #2, !dbg !19
  %50 = getelementptr half, ptr addrspace(1) %2, i64 %47, !dbg !21
  %51 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %50, i1 false) #2, !dbg !22
  %52 = getelementptr half, ptr addrspace(1) %3, i64 %45, !dbg !24
  %53 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %52, i1 true) #2, !dbg !25
  %54 = getelementptr half, ptr addrspace(1) %4, i64 %47, !dbg !27
  %55 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %54, i1 false) #2, !dbg !28
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !16
  %56 = icmp samesign ult i64 %indvars.iv, 4088, !dbg !16
  br i1 %56, label %.split, label %.split3.us, !dbg !16

.split3.us:                                       ; preds = %.split, %.split.us
  %.us-phi = phi float [ %43, %.split.us ], [ 0.000000e+00, %.split ], !dbg !34
  %57 = bitcast float %.us-phi to i32, !dbg !34
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 4, i32 31), !dbg !34
  %59 = bitcast i32 %58 to float, !dbg !34
  %60 = fadd float %.us-phi, %59, !dbg !38
  %61 = bitcast float %60 to i32, !dbg !34
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 2, i32 31), !dbg !34
  %63 = bitcast i32 %62 to float, !dbg !34
  %64 = fadd float %60, %63, !dbg !38
  %65 = bitcast float %64 to i32, !dbg !34
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 1, i32 31), !dbg !34
  %67 = bitcast i32 %66 to float, !dbg !34
  %68 = fadd float %64, %67, !dbg !38
  %69 = sext i32 %15 to i64, !dbg !40
  %70 = getelementptr float, ptr addrspace(1) %5, i64 %69, !dbg !40
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %.fr) #2, !dbg !41
  %72 = bitcast i32 %71 to float, !dbg !41
  %73 = fmul float %68, 5.000000e-01, !dbg !42
  %74 = fmul float %72, %72, !dbg !43
  %75 = fmul float %74, %72, !dbg !44
  %76 = fmul float %73, %75, !dbg !45
  %77 = fmul float %76, 0x3F30000000000000, !dbg !46
  %78 = and i32 %12, 32
  %79 = icmp eq i32 %78, 0
  %80 = and i1 %79, %.fr
  %81 = insertelement <2 x float> poison, float %72, i64 0, !dbg !47
  %82 = insertelement <2 x float> %81, float %77, i64 1, !dbg !47
  br label %83, !dbg !48

83:                                               ; preds = %.split3.us, %83
  %indvars.iv9 = phi i64 [ 0, %.split3.us ], [ %indvars.iv.next10, %83 ]
  %84 = or disjoint i64 %indvars.iv9, %19, !dbg !49
  %85 = trunc nuw nsw i64 %indvars.iv9 to i32
  %.reass5 = or i32 %invariant.op, %85
  %86 = sext i32 %.reass5 to i64, !dbg !50
  %87 = getelementptr half, ptr addrspace(1) %0, i64 %86, !dbg !50
  %88 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %87, i1 %.fr) #2, !dbg !51
  %89 = bitcast i16 %88 to half, !dbg !51
  %90 = fpext half %89 to float, !dbg !52
  %91 = getelementptr half, ptr addrspace(1) %1, i64 %86, !dbg !53
  %92 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %91, i1 %.fr) #2, !dbg !54
  %93 = bitcast i16 %92 to half, !dbg !54
  %94 = fpext half %93 to float, !dbg !55
  %95 = getelementptr half, ptr addrspace(1) %2, i64 %86, !dbg !56
  %96 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %95, i1 %.fr) #2, !dbg !57
  %97 = bitcast i16 %96 to half, !dbg !57
  %98 = fpext half %97 to float, !dbg !58
  %99 = getelementptr half, ptr addrspace(1) %3, i64 %84, !dbg !59
  %100 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %99, i1 true) #2, !dbg !60
  %101 = getelementptr half, ptr addrspace(1) %4, i64 %86, !dbg !61
  %102 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %101, i1 %.fr) #2, !dbg !62
  %103 = fadd float %94, %98, !dbg !63
  %104 = insertelement <2 x i16> poison, i16 %100, i64 0, !dbg !60
  %105 = insertelement <2 x i16> %104, i16 %102, i64 1, !dbg !60
  %106 = bitcast <2 x i16> %105 to <2 x half>, !dbg !60
  %107 = fpext <2 x half> %106 to <2 x float>, !dbg !64
  %108 = insertelement <2 x float> <float poison, float 2.000000e+00>, float %103, i64 0, !dbg !65
  %109 = fmul <2 x float> %108, %107, !dbg !65
  %110 = fmul <2 x float> %109, %82, !dbg !47
  %shift = shufflevector <2 x float> %110, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !66
  %111 = fsub <2 x float> %110, %shift, !dbg !66
  %112 = extractelement <2 x float> %111, i64 0, !dbg !66
  %113 = fadd float %112, %90, !dbg !67
  %114 = fptrunc float %113 to half, !dbg !68
  %115 = bitcast half %114 to i16, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %115, ptr addrspace(1) %87, i1 %80) #2, !dbg !68
  %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 8, !dbg !48
  %116 = icmp samesign ult i64 %indvars.iv9, 4088, !dbg !48
  br i1 %116, label %83, label %117, !dbg !48

117:                                              ; preds = %83
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwurpsdpwva3f5frc5tvzo3fyhfiwqgisf52i24mru6cupi2tm3v.py", directory: "./local_cache/wu")
!4 = !{ptr @triton_red_fused__to_copy_add_div_mul_pow_sum_4, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_mul_pow_sum_4", linkageName: "triton_red_fused__to_copy_add_div_mul_pow_sum_4", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 29, column: 40, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 35, column: 34, scope: !6)
!19 = !DILocation(line: 35, column: 51, scope: !6)
!20 = !DILocation(line: 35, column: 112, scope: !6)
!21 = !DILocation(line: 36, column: 34, scope: !6)
!22 = !DILocation(line: 36, column: 51, scope: !6)
!23 = !DILocation(line: 36, column: 112, scope: !6)
!24 = !DILocation(line: 37, column: 34, scope: !6)
!25 = !DILocation(line: 37, column: 41, scope: !6)
!26 = !DILocation(line: 37, column: 94, scope: !6)
!27 = !DILocation(line: 38, column: 34, scope: !6)
!28 = !DILocation(line: 38, column: 51, scope: !6)
!29 = !DILocation(line: 38, column: 112, scope: !6)
!30 = !DILocation(line: 39, column: 22, scope: !6)
!31 = !DILocation(line: 40, column: 22, scope: !6)
!32 = !DILocation(line: 43, column: 22, scope: !6)
!33 = !DILocation(line: 45, column: 25, scope: !6)
!34 = !DILocation(line: 286, column: 36, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !6, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!37 = !DILocation(line: 47, column: 27, scope: !6)
!38 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !37)
!39 = distinct !DILexicalBlockFile(scope: !35, file: !36, discriminator: 0)
!40 = !DILocation(line: 48, column: 31, scope: !6)
!41 = !DILocation(line: 48, column: 36, scope: !6)
!42 = !DILocation(line: 65, column: 24, scope: !6)
!43 = !DILocation(line: 66, column: 24, scope: !6)
!44 = !DILocation(line: 67, column: 24, scope: !6)
!45 = !DILocation(line: 68, column: 24, scope: !6)
!46 = !DILocation(line: 70, column: 24, scope: !6)
!47 = !DILocation(line: 63, column: 24, scope: !6)
!48 = !DILocation(line: 49, column: 40, scope: !6)
!49 = !DILocation(line: 50, column: 31, scope: !6)
!50 = !DILocation(line: 55, column: 39, scope: !6)
!51 = !DILocation(line: 55, column: 56, scope: !6)
!52 = !DILocation(line: 55, column: 118, scope: !6)
!53 = !DILocation(line: 56, column: 35, scope: !6)
!54 = !DILocation(line: 56, column: 52, scope: !6)
!55 = !DILocation(line: 56, column: 114, scope: !6)
!56 = !DILocation(line: 57, column: 35, scope: !6)
!57 = !DILocation(line: 57, column: 52, scope: !6)
!58 = !DILocation(line: 57, column: 114, scope: !6)
!59 = !DILocation(line: 58, column: 35, scope: !6)
!60 = !DILocation(line: 58, column: 42, scope: !6)
!61 = !DILocation(line: 59, column: 35, scope: !6)
!62 = !DILocation(line: 59, column: 52, scope: !6)
!63 = !DILocation(line: 60, column: 24, scope: !6)
!64 = !DILocation(line: 58, column: 95, scope: !6)
!65 = !DILocation(line: 61, column: 24, scope: !6)
!66 = !DILocation(line: 75, column: 24, scope: !6)
!67 = !DILocation(line: 77, column: 24, scope: !6)
!68 = !DILocation(line: 78, column: 56, scope: !6)
!69 = !DILocation(line: 49, column: 4, scope: !6)
