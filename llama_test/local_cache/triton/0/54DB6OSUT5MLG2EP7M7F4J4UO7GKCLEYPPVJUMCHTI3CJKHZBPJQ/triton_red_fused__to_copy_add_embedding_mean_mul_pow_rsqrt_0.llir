; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [73 x i8] c"./local_cache/us/cusn5r4ftncl7gqsiixg3hw3ojcfuvaqdhezlxblwecnlckjkjne.py\00"
@assertMessage_0 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp4 < 128256\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !10 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %11 = shl i32 %10, 1, !dbg !12
  %12 = or disjoint i32 %11, 1, !dbg !13
  %13 = icmp slt i32 %11, %6, !dbg !14
  %14 = icmp slt i32 %12, %6, !dbg !14
  %15 = sext i32 %11 to i64, !dbg !15
  %16 = getelementptr i64, ptr addrspace(1) %1, i64 %15, !dbg !15
  %17 = sext i32 %12 to i64, !dbg !15
  %18 = getelementptr i64, ptr addrspace(1) %1, i64 %17, !dbg !15
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %13) #6, !dbg !16
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %13) #6, !dbg !16
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %13) #6, !dbg !16
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %13) #6, !dbg !16
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %13) #6, !dbg !16
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %13) #6, !dbg !16
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %13) #6, !dbg !16
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %13) #6, !dbg !16
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %14) #6, !dbg !16
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %14) #6, !dbg !16
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %14) #6, !dbg !16
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %14) #6, !dbg !16
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %14) #6, !dbg !16
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %14) #6, !dbg !16
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %14) #6, !dbg !16
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %14) #6, !dbg !16
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %13) #6, !dbg !16
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %14) #6, !dbg !16
  %37 = insertelement <2 x i64> poison, i64 %36, i64 0, !dbg !17
  %38 = insertelement <2 x i64> %37, i64 %35, i64 1, !dbg !17
  %39 = add <2 x i64> %38, splat (i64 128256), !dbg !17
  %40 = icmp slt <2 x i64> %38, zeroinitializer, !dbg !18
  %41 = select <2 x i1> %40, <2 x i64> %39, <2 x i64> %38, !dbg !19
  %42 = icmp ugt <2 x i64> %41, splat (i64 128255), !dbg !20
  %43 = extractelement <2 x i1> %42, i64 1, !dbg !21
  %.not1 = and i1 %13, %43, !dbg !21
  %44 = extractelement <2 x i1> %42, i64 0, !dbg !22
  %.not2 = and i1 %14, %44, !dbg !22
  %45 = or i1 %.not1, %.not2, !dbg !22
  br i1 %45, label %46, label %47, !dbg !22

46:                                               ; preds = %9
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !22
  unreachable, !dbg !22

47:                                               ; preds = %9
  %48 = icmp slt i64 %34, 0, !dbg !18
  %49 = icmp slt i64 %26, 0, !dbg !18
  %50 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !23
  %51 = shl i32 %50, 3, !dbg !24
  %52 = and i32 %51, 4088, !dbg !24
  %53 = lshr i32 %50, 5, !dbg !24
  %54 = and i32 %50, 31, !dbg !23
  %55 = and i32 %50, 1, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %56 = shl i64 %26, 12, !dbg !25
  %57 = add i64 %56, 525336576, !dbg !25
  %58 = select i1 %49, i64 %57, i64 %56, !dbg !25
  %59 = shl i64 %34, 12, !dbg !25
  %60 = add i64 %59, 525336576, !dbg !25
  %61 = select i1 %48, i64 %60, i64 %59, !dbg !25
  %62 = zext nneg i32 %52 to i64, !dbg !26
  %63 = getelementptr half, ptr addrspace(1) %2, i64 %58, !dbg !27
  %64 = getelementptr half, ptr addrspace(1) %63, i64 %62, !dbg !27
  %65 = getelementptr half, ptr addrspace(1) %2, i64 %61, !dbg !27
  %66 = getelementptr half, ptr addrspace(1) %65, i64 %62, !dbg !27
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %64, i1 %13) #6, !dbg !28
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !28
  %69 = bitcast i32 %68 to <2 x half>, !dbg !28
  %70 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !28
  %71 = bitcast i32 %70 to <2 x half>, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !28
  %73 = bitcast i32 %72 to <2 x half>, !dbg !28
  %74 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !28
  %75 = bitcast i32 %74 to <2 x half>, !dbg !28
  %76 = extractelement <2 x half> %69, i64 0, !dbg !28
  %77 = extractelement <2 x half> %69, i64 1, !dbg !28
  %78 = extractelement <2 x half> %71, i64 0, !dbg !28
  %79 = extractelement <2 x half> %71, i64 1, !dbg !28
  %80 = extractelement <2 x half> %73, i64 0, !dbg !28
  %81 = extractelement <2 x half> %73, i64 1, !dbg !28
  %82 = extractelement <2 x half> %75, i64 0, !dbg !28
  %83 = extractelement <2 x half> %75, i64 1, !dbg !28
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %66, i1 %14) #6, !dbg !28
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !28
  %86 = bitcast i32 %85 to <2 x half>, !dbg !28
  %87 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !28
  %88 = bitcast i32 %87 to <2 x half>, !dbg !28
  %89 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !28
  %90 = bitcast i32 %89 to <2 x half>, !dbg !28
  %91 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !28
  %92 = bitcast i32 %91 to <2 x half>, !dbg !28
  %93 = extractelement <2 x half> %86, i64 0, !dbg !28
  %94 = extractelement <2 x half> %86, i64 1, !dbg !28
  %95 = extractelement <2 x half> %88, i64 0, !dbg !28
  %96 = extractelement <2 x half> %88, i64 1, !dbg !28
  %97 = extractelement <2 x half> %90, i64 0, !dbg !28
  %98 = extractelement <2 x half> %90, i64 1, !dbg !28
  %99 = extractelement <2 x half> %92, i64 0, !dbg !28
  %100 = extractelement <2 x half> %92, i64 1, !dbg !28
  %101 = fpext half %76 to float, !dbg !29
  %102 = fpext half %77 to float, !dbg !29
  %103 = fpext half %78 to float, !dbg !29
  %104 = fpext half %79 to float, !dbg !29
  %105 = fpext half %80 to float, !dbg !29
  %106 = fpext half %81 to float, !dbg !29
  %107 = fpext half %82 to float, !dbg !29
  %108 = fpext half %83 to float, !dbg !29
  %109 = fpext half %93 to float, !dbg !29
  %110 = fpext half %94 to float, !dbg !29
  %111 = fpext half %95 to float, !dbg !29
  %112 = fpext half %96 to float, !dbg !29
  %113 = fpext half %97 to float, !dbg !29
  %114 = fpext half %98 to float, !dbg !29
  %115 = fpext half %99 to float, !dbg !29
  %116 = fpext half %100 to float, !dbg !29
  %117 = fmul float %101, %101, !dbg !30
  %118 = fmul float %102, %102, !dbg !30
  %119 = fmul float %103, %103, !dbg !30
  %120 = fmul float %104, %104, !dbg !30
  %121 = fmul float %105, %105, !dbg !30
  %122 = fmul float %106, %106, !dbg !30
  %123 = fmul float %107, %107, !dbg !30
  %124 = fmul float %108, %108, !dbg !30
  %125 = fmul float %109, %109, !dbg !30
  %126 = fmul float %110, %110, !dbg !30
  %127 = fmul float %111, %111, !dbg !30
  %128 = fmul float %112, %112, !dbg !30
  %129 = fmul float %113, %113, !dbg !30
  %130 = fmul float %114, %114, !dbg !30
  %131 = fmul float %115, %115, !dbg !30
  %132 = fmul float %116, %116, !dbg !30
  %133 = shl i32 %10, 13, !dbg !31
  %134 = shl i32 %12, 12, !dbg !31
  %135 = or disjoint i32 %52, %133, !dbg !32
  %136 = or disjoint i32 %134, %52, !dbg !32
  %137 = sext i32 %135 to i64, !dbg !33
  %138 = getelementptr half, ptr addrspace(1) %4, i64 %137, !dbg !33
  %139 = sext i32 %136 to i64, !dbg !33
  %140 = getelementptr half, ptr addrspace(1) %4, i64 %139, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %68, i32 %70, i32 %72, i32 %74, ptr addrspace(1) %138, i1 %13) #6, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %85, i32 %87, i32 %89, i32 %91, ptr addrspace(1) %140, i1 %14) #6, !dbg !34
  %141 = fadd float %117, %118, !dbg !35
  %142 = fadd float %119, %141, !dbg !35
  %143 = fadd float %120, %142, !dbg !35
  %144 = fadd float %121, %143, !dbg !35
  %145 = fadd float %122, %144, !dbg !35
  %146 = fadd float %123, %145, !dbg !35
  %147 = fadd float %124, %146, !dbg !35
  %148 = select i1 %13, float %147, float 0.000000e+00, !dbg !35
  %149 = fadd float %125, %126, !dbg !35
  %150 = fadd float %127, %149, !dbg !35
  %151 = fadd float %128, %150, !dbg !35
  %152 = fadd float %129, %151, !dbg !35
  %153 = fadd float %130, %152, !dbg !35
  %154 = fadd float %131, %153, !dbg !35
  %155 = fadd float %132, %154, !dbg !35
  %156 = select i1 %14, float %155, float 0.000000e+00, !dbg !35
  %157 = bitcast float %148 to i32, !dbg !40
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 16, i32 31), !dbg !40
  %159 = bitcast i32 %158 to float, !dbg !40
  %160 = fadd float %148, %159, !dbg !35
  %161 = bitcast float %160 to i32, !dbg !40
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 8, i32 31), !dbg !40
  %163 = bitcast i32 %162 to float, !dbg !40
  %164 = fadd float %160, %163, !dbg !35
  %165 = bitcast float %164 to i32, !dbg !40
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 4, i32 31), !dbg !40
  %167 = bitcast i32 %166 to float, !dbg !40
  %168 = fadd float %164, %167, !dbg !35
  %169 = bitcast float %168 to i32, !dbg !40
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 2, i32 31), !dbg !40
  %171 = bitcast i32 %170 to float, !dbg !40
  %172 = fadd float %168, %171, !dbg !35
  %173 = bitcast float %172 to i32, !dbg !40
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 1, i32 31), !dbg !40
  %175 = bitcast i32 %174 to float, !dbg !40
  %176 = fadd float %172, %175, !dbg !35
  %177 = bitcast float %156 to i32, !dbg !40
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 16, i32 31), !dbg !40
  %179 = bitcast i32 %178 to float, !dbg !40
  %180 = fadd float %156, %179, !dbg !35
  %181 = bitcast float %180 to i32, !dbg !40
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 8, i32 31), !dbg !40
  %183 = bitcast i32 %182 to float, !dbg !40
  %184 = fadd float %180, %183, !dbg !35
  %185 = bitcast float %184 to i32, !dbg !40
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 4, i32 31), !dbg !40
  %187 = bitcast i32 %186 to float, !dbg !40
  %188 = fadd float %184, %187, !dbg !35
  %189 = bitcast float %188 to i32, !dbg !40
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 2, i32 31), !dbg !40
  %191 = bitcast i32 %190 to float, !dbg !40
  %192 = fadd float %188, %191, !dbg !35
  %193 = bitcast float %192 to i32, !dbg !40
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 1, i32 31), !dbg !40
  %195 = bitcast i32 %194 to float, !dbg !40
  %196 = fadd float %192, %195, !dbg !35
  %197 = and i32 %53, 15, !dbg !40
  %198 = icmp eq i32 %54, 0, !dbg !40
  %199 = getelementptr float, ptr addrspace(3) @global_smem, i32 %197, !dbg !40
  %200 = bitcast float %176 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %199, <1 x i32> %200, i1 %198) #6, !dbg !40
  %201 = or disjoint i32 %197, 16, !dbg !40
  %202 = getelementptr float, ptr addrspace(3) @global_smem, i32 %201, !dbg !40
  %203 = bitcast float %196 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %203, i1 %198) #6, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %204 = icmp slt i32 %50, 32, !dbg !40
  %205 = getelementptr float, ptr addrspace(3) @global_smem, i32 %50, !dbg !40
  %206 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %205, i1 %204) #6, !dbg !40
  %207 = bitcast i32 %206 to float, !dbg !40
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 8, i32 31), !dbg !40
  %209 = bitcast i32 %208 to float, !dbg !40
  %210 = fadd float %207, %209, !dbg !35
  %211 = bitcast float %210 to i32, !dbg !40
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 4, i32 31), !dbg !40
  %213 = bitcast i32 %212 to float, !dbg !40
  %214 = fadd float %210, %213, !dbg !35
  %215 = bitcast float %214 to i32, !dbg !40
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 2, i32 31), !dbg !40
  %217 = bitcast i32 %216 to float, !dbg !40
  %218 = fadd float %214, %217, !dbg !35
  %219 = bitcast float %218 to i32, !dbg !40
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 1, i32 31), !dbg !40
  %221 = bitcast i32 %220 to float, !dbg !40
  %222 = fadd float %218, %221, !dbg !35
  %223 = and i32 %50, 15, !dbg !40
  %224 = icmp eq i32 %223, 0, !dbg !40
  %225 = and i1 %204, %224, !dbg !40
  %226 = bitcast float %222 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %226, i1 %225) #6, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %227 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !40
  %228 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %229 = bitcast float %227 to i32, !dbg !41
  %230 = bitcast float %228 to i32, !dbg !41
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %229, i32 %230, i1 true) #6, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %231 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %55, !dbg !41
  %232 = load float, ptr addrspace(3) %231, align 4, !dbg !41
  %233 = tail call float @llvm.nvvm.div.full(float %232, float 4.096000e+03), !dbg !42
  %234 = tail call float @llvm.nvvm.div.full(float %227, float 4.096000e+03), !dbg !42
  %235 = tail call float @llvm.nvvm.div.full(float %228, float 4.096000e+03), !dbg !42
  %236 = fadd float %233, 0x3EE4F8B580000000, !dbg !43
  %237 = fadd float %234, 0x3EE4F8B580000000, !dbg !43
  %238 = fadd float %235, 0x3EE4F8B580000000, !dbg !43
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %.not.i = icmp eq i32 %239, 0, !dbg !41
  br i1 %.not.i, label %242, label %240, !dbg !41

240:                                              ; preds = %47
  %241 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %236), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

242:                                              ; preds = %47
  %243 = tail call float @llvm.nvvm.rsqrt.approx.f(float %236), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %240, %242
  %.0.i = phi float [ %241, %240 ], [ %243, %242 ], !dbg !41
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %247 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %248 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %251 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %.not.i24 = icmp eq i32 %251, 0, !dbg !41
  br i1 %.not.i24, label %254, label %252, !dbg !41

252:                                              ; preds = %__nv_rsqrtf.exit
  %253 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %237), !dbg !41
  br label %__nv_rsqrtf.exit26, !dbg !41

254:                                              ; preds = %__nv_rsqrtf.exit
  %255 = tail call float @llvm.nvvm.rsqrt.approx.f(float %237), !dbg !41
  br label %__nv_rsqrtf.exit26, !dbg !41

__nv_rsqrtf.exit26:                               ; preds = %252, %254
  %.0.i25 = phi float [ %253, %252 ], [ %255, %254 ], !dbg !41
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %260 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %263 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %.not.i48 = icmp eq i32 %263, 0, !dbg !41
  br i1 %.not.i48, label %266, label %264, !dbg !41

264:                                              ; preds = %__nv_rsqrtf.exit26
  %265 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %238), !dbg !41
  br label %__nv_rsqrtf.exit50, !dbg !41

266:                                              ; preds = %__nv_rsqrtf.exit26
  %267 = tail call float @llvm.nvvm.rsqrt.approx.f(float %238), !dbg !41
  br label %__nv_rsqrtf.exit50, !dbg !41

__nv_rsqrtf.exit50:                               ; preds = %264, %266
  %.0.i49 = phi float [ %265, %264 ], [ %267, %266 ], !dbg !41
  %268 = or disjoint i32 %11, %55, !dbg !13
  %269 = icmp slt i32 %268, %6, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %270 = sext i32 %268 to i64, !dbg !45
  %271 = getelementptr float, ptr addrspace(1) %0, i64 %270, !dbg !45
  %272 = and i32 %50, 510, !dbg !46
  %273 = icmp eq i32 %272, 0, !dbg !46
  %274 = bitcast float %.0.i to i32, !dbg !46
  %275 = and i1 %273, %269, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %274, ptr addrspace(1) %271, i1 %275) #6, !dbg !46
  %276 = getelementptr half, ptr addrspace(1) %3, i64 %62, !dbg !47
  %277 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %276, i1 true) #6, !dbg !48
  %278 = extractvalue { i32, i32, i32, i32 } %277, 0, !dbg !48
  %279 = bitcast i32 %278 to <2 x half>, !dbg !48
  %280 = extractvalue { i32, i32, i32, i32 } %277, 1, !dbg !48
  %281 = bitcast i32 %280 to <2 x half>, !dbg !48
  %282 = extractvalue { i32, i32, i32, i32 } %277, 2, !dbg !48
  %283 = bitcast i32 %282 to <2 x half>, !dbg !48
  %284 = extractvalue { i32, i32, i32, i32 } %277, 3, !dbg !48
  %285 = bitcast i32 %284 to <2 x half>, !dbg !48
  %286 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %138, i1 %13) #6, !dbg !49
  %287 = extractvalue { i32, i32, i32, i32 } %286, 0, !dbg !49
  %288 = bitcast i32 %287 to <2 x half>, !dbg !49
  %289 = extractvalue { i32, i32, i32, i32 } %286, 1, !dbg !49
  %290 = bitcast i32 %289 to <2 x half>, !dbg !49
  %291 = extractvalue { i32, i32, i32, i32 } %286, 2, !dbg !49
  %292 = bitcast i32 %291 to <2 x half>, !dbg !49
  %293 = extractvalue { i32, i32, i32, i32 } %286, 3, !dbg !49
  %294 = bitcast i32 %293 to <2 x half>, !dbg !49
  %295 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %140, i1 %14) #6, !dbg !49
  %296 = extractvalue { i32, i32, i32, i32 } %295, 0, !dbg !49
  %297 = bitcast i32 %296 to <2 x half>, !dbg !49
  %298 = extractvalue { i32, i32, i32, i32 } %295, 1, !dbg !49
  %299 = bitcast i32 %298 to <2 x half>, !dbg !49
  %300 = extractvalue { i32, i32, i32, i32 } %295, 2, !dbg !49
  %301 = bitcast i32 %300 to <2 x half>, !dbg !49
  %302 = extractvalue { i32, i32, i32, i32 } %295, 3, !dbg !49
  %303 = bitcast i32 %302 to <2 x half>, !dbg !49
  %304 = getelementptr half, ptr addrspace(1) %5, i64 %137, !dbg !50
  %305 = getelementptr half, ptr addrspace(1) %5, i64 %139, !dbg !50
  %306 = fpext <2 x half> %279 to <2 x float>, !dbg !51
  %307 = fpext <2 x half> %288 to <2 x float>, !dbg !52
  %308 = insertelement <2 x float> poison, float %.0.i25, i64 0, !dbg !53
  %309 = shufflevector <2 x float> %308, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %310 = fmul <2 x float> %309, %307, !dbg !53
  %311 = fmul <2 x float> %310, %306, !dbg !54
  %312 = fptrunc <2 x float> %311 to <2 x half>, !dbg !55
  %313 = fpext <2 x half> %281 to <2 x float>, !dbg !51
  %314 = fpext <2 x half> %290 to <2 x float>, !dbg !52
  %315 = fmul <2 x float> %309, %314, !dbg !53
  %316 = fmul <2 x float> %315, %313, !dbg !54
  %317 = fptrunc <2 x float> %316 to <2 x half>, !dbg !55
  %318 = fpext <2 x half> %283 to <2 x float>, !dbg !51
  %319 = fpext <2 x half> %292 to <2 x float>, !dbg !52
  %320 = fmul <2 x float> %309, %319, !dbg !53
  %321 = fmul <2 x float> %320, %318, !dbg !54
  %322 = fptrunc <2 x float> %321 to <2 x half>, !dbg !55
  %323 = fpext <2 x half> %285 to <2 x float>, !dbg !51
  %324 = fpext <2 x half> %294 to <2 x float>, !dbg !52
  %325 = fmul <2 x float> %309, %324, !dbg !53
  %326 = fmul <2 x float> %325, %323, !dbg !54
  %327 = fptrunc <2 x float> %326 to <2 x half>, !dbg !55
  %328 = fpext <2 x half> %297 to <2 x float>, !dbg !52
  %329 = insertelement <2 x float> poison, float %.0.i49, i64 0, !dbg !53
  %330 = shufflevector <2 x float> %329, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %331 = fmul <2 x float> %330, %328, !dbg !53
  %332 = fmul <2 x float> %331, %306, !dbg !54
  %333 = fptrunc <2 x float> %332 to <2 x half>, !dbg !55
  %334 = fpext <2 x half> %299 to <2 x float>, !dbg !52
  %335 = fmul <2 x float> %330, %334, !dbg !53
  %336 = fmul <2 x float> %335, %313, !dbg !54
  %337 = fptrunc <2 x float> %336 to <2 x half>, !dbg !55
  %338 = fpext <2 x half> %301 to <2 x float>, !dbg !52
  %339 = fmul <2 x float> %330, %338, !dbg !53
  %340 = fmul <2 x float> %339, %318, !dbg !54
  %341 = fptrunc <2 x float> %340 to <2 x half>, !dbg !55
  %342 = fpext <2 x half> %303 to <2 x float>, !dbg !52
  %343 = fmul <2 x float> %330, %342, !dbg !53
  %344 = fmul <2 x float> %343, %323, !dbg !54
  %345 = fptrunc <2 x float> %344 to <2 x half>, !dbg !55
  %346 = bitcast <2 x half> %312 to i32, !dbg !55
  %347 = bitcast <2 x half> %317 to i32, !dbg !55
  %348 = bitcast <2 x half> %322 to i32, !dbg !55
  %349 = bitcast <2 x half> %327 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %346, i32 %347, i32 %348, i32 %349, ptr addrspace(1) %304, i1 %13) #6, !dbg !55
  %350 = bitcast <2 x half> %333 to i32, !dbg !55
  %351 = bitcast <2 x half> %337 to i32, !dbg !55
  %352 = bitcast <2 x half> %341 to i32, !dbg !55
  %353 = bitcast <2 x half> %345 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %350, i32 %351, i32 %352, i32 %353, ptr addrspace(1) %305, i1 %14) #6, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cusn5r4ftncl7gqsiixg3hw3ojcfuvaqdhezlxblwecnlckjkjne.py", directory: "./local_cache/us")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 22, column: 28, scope: !10)
!12 = !DILocation(line: 22, column: 33, scope: !10)
!13 = !DILocation(line: 23, column: 23, scope: !10)
!14 = !DILocation(line: 24, column: 21, scope: !10)
!15 = !DILocation(line: 28, column: 30, scope: !10)
!16 = !DILocation(line: 28, column: 35, scope: !10)
!17 = !DILocation(line: 37, column: 22, scope: !10)
!18 = !DILocation(line: 38, column: 22, scope: !10)
!19 = !DILocation(line: 39, column: 36, scope: !10)
!20 = !DILocation(line: 40, column: 41, scope: !10)
!21 = !DILocation(line: 40, column: 59, scope: !10)
!22 = !DILocation(line: 40, column: 69, scope: !10)
!23 = !DILocation(line: 23, column: 44, scope: !10)
!24 = !DILocation(line: 25, column: 37, scope: !10)
!25 = !DILocation(line: 41, column: 46, scope: !10)
!26 = !DILocation(line: 41, column: 41, scope: !10)
!27 = !DILocation(line: 41, column: 34, scope: !10)
!28 = !DILocation(line: 41, column: 53, scope: !10)
!29 = !DILocation(line: 41, column: 115, scope: !10)
!30 = !DILocation(line: 43, column: 22, scope: !10)
!31 = !DILocation(line: 47, column: 41, scope: !10)
!32 = !DILocation(line: 47, column: 36, scope: !10)
!33 = !DILocation(line: 47, column: 29, scope: !10)
!34 = !DILocation(line: 47, column: 52, scope: !10)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !39)
!36 = distinct !DILexicalBlockFile(scope: !38, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!38 = distinct !DILexicalBlockFile(scope: !10, file: !37, discriminator: 0)
!39 = !DILocation(line: 48, column: 27, scope: !10)
!40 = !DILocation(line: 286, column: 36, scope: !38, inlinedAt: !39)
!41 = !DILocation(line: 53, column: 28, scope: !10)
!42 = !DILocation(line: 50, column: 21, scope: !10)
!43 = !DILocation(line: 52, column: 20, scope: !10)
!44 = !DILocation(line: 54, column: 4, scope: !10)
!45 = !DILocation(line: 55, column: 28, scope: !10)
!46 = !DILocation(line: 55, column: 40, scope: !10)
!47 = !DILocation(line: 62, column: 35, scope: !10)
!48 = !DILocation(line: 62, column: 42, scope: !10)
!49 = !DILocation(line: 63, column: 53, scope: !10)
!50 = !DILocation(line: 68, column: 29, scope: !10)
!51 = !DILocation(line: 62, column: 95, scope: !10)
!52 = !DILocation(line: 63, column: 115, scope: !10)
!53 = !DILocation(line: 65, column: 24, scope: !10)
!54 = !DILocation(line: 67, column: 24, scope: !10)
!55 = !DILocation(line: 68, column: 53, scope: !10)
!56 = !DILocation(line: 56, column: 4, scope: !10)
