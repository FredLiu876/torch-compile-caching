; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = icmp slt i32 %10, %6, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = and i32 %12, 31, !dbg !11
  %14 = lshr i32 %12, 5, !dbg !11
  %15 = shl i32 %12, 2, !dbg !11
  %16 = and i32 %15, 4092, !dbg !11
  %17 = shl i32 %10, 12, !dbg !12
  %18 = or disjoint i32 %16, %17, !dbg !13
  %19 = sext i32 %18 to i64, !dbg !14
  %20 = getelementptr half, ptr addrspace(1) %2, i64 %19, !dbg !14
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %20, i1 %11) #5, !dbg !15
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !15
  %23 = bitcast i32 %22 to <2 x half>, !dbg !15
  %24 = extractvalue { i32, i32 } %21, 1, !dbg !15
  %25 = bitcast i32 %24 to <2 x half>, !dbg !15
  %26 = getelementptr half, ptr addrspace(1) %3, i64 %19, !dbg !16
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %26, i1 %11) #5, !dbg !17
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !17
  %29 = bitcast i32 %28 to <2 x half>, !dbg !17
  %30 = extractvalue { i32, i32 } %27, 1, !dbg !17
  %31 = bitcast i32 %30 to <2 x half>, !dbg !17
  %32 = getelementptr half, ptr addrspace(1) %0, i64 %19, !dbg !18
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %32, i1 %11) #5, !dbg !19
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !19
  %35 = bitcast i32 %34 to <2 x half>, !dbg !19
  %36 = extractvalue { i32, i32 } %33, 1, !dbg !19
  %37 = bitcast i32 %36 to <2 x half>, !dbg !19
  %38 = fpext <2 x half> %23 to <2 x float>, !dbg !20
  %39 = fpext <2 x half> %29 to <2 x float>, !dbg !21
  %40 = fpext <2 x half> %35 to <2 x float>, !dbg !22
  %41 = fadd <2 x float> %38, %39, !dbg !23
  %42 = fadd <2 x float> %41, %40, !dbg !24
  %43 = fmul <2 x float> %42, %42, !dbg !25
  %44 = fmul <2 x float> %42, %42, !dbg !25
  %45 = fptrunc <2 x float> %42 to <2 x half>, !dbg !26
  %46 = fpext <2 x half> %25 to <2 x float>, !dbg !20
  %47 = fpext <2 x half> %31 to <2 x float>, !dbg !21
  %48 = fpext <2 x half> %37 to <2 x float>, !dbg !22
  %49 = fadd <2 x float> %46, %47, !dbg !23
  %50 = fadd <2 x float> %49, %48, !dbg !24
  %51 = fmul <2 x float> %50, %50, !dbg !25
  %52 = fmul <2 x float> %50, %50, !dbg !25
  %53 = fptrunc <2 x float> %50 to <2 x half>, !dbg !26
  %54 = bitcast <2 x half> %45 to i32, !dbg !26
  %55 = bitcast <2 x half> %53 to i32, !dbg !26
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %54, i32 %55, ptr addrspace(1) %32, i1 %11) #5, !dbg !26
  %shift = shufflevector <2 x float> %44, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %56 = fadd <2 x float> %43, %shift, !dbg !27
  %57 = fadd <2 x float> %51, %56, !dbg !27
  %shift13 = shufflevector <2 x float> %52, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %58 = fadd <2 x float> %shift13, %57, !dbg !27
  %59 = extractelement <2 x float> %58, i64 0, !dbg !27
  %60 = select i1 %11, float %59, float 0.000000e+00, !dbg !27
  %61 = bitcast float %60 to i32, !dbg !32
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 16, i32 31), !dbg !32
  %63 = bitcast i32 %62 to float, !dbg !32
  %64 = fadd float %60, %63, !dbg !27
  %65 = bitcast float %64 to i32, !dbg !32
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 8, i32 31), !dbg !32
  %67 = bitcast i32 %66 to float, !dbg !32
  %68 = fadd float %64, %67, !dbg !27
  %69 = bitcast float %68 to i32, !dbg !32
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 4, i32 31), !dbg !32
  %71 = bitcast i32 %70 to float, !dbg !32
  %72 = fadd float %68, %71, !dbg !27
  %73 = bitcast float %72 to i32, !dbg !32
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 2, i32 31), !dbg !32
  %75 = bitcast i32 %74 to float, !dbg !32
  %76 = fadd float %72, %75, !dbg !27
  %77 = bitcast float %76 to i32, !dbg !32
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 1, i32 31), !dbg !32
  %79 = bitcast i32 %78 to float, !dbg !32
  %80 = fadd float %76, %79, !dbg !27
  %81 = and i32 %14, 31, !dbg !32
  %82 = icmp eq i32 %13, 0, !dbg !32
  %83 = getelementptr float, ptr addrspace(3) @global_smem, i32 %81, !dbg !32
  %84 = bitcast float %80 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 %82) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %85 = icmp slt i32 %12, 32, !dbg !32
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !32
  %87 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %86, i1 %85) #5, !dbg !32
  %88 = bitcast i32 %87 to float, !dbg !32
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 16, i32 31), !dbg !32
  %90 = bitcast i32 %89 to float, !dbg !32
  %91 = fadd float %88, %90, !dbg !27
  %92 = bitcast float %91 to i32, !dbg !32
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 8, i32 31), !dbg !32
  %94 = bitcast i32 %93 to float, !dbg !32
  %95 = fadd float %91, %94, !dbg !27
  %96 = bitcast float %95 to i32, !dbg !32
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 4, i32 31), !dbg !32
  %98 = bitcast i32 %97 to float, !dbg !32
  %99 = fadd float %95, %98, !dbg !27
  %100 = bitcast float %99 to i32, !dbg !32
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 2, i32 31), !dbg !32
  %102 = bitcast i32 %101 to float, !dbg !32
  %103 = fadd float %99, %102, !dbg !27
  %104 = bitcast float %103 to i32, !dbg !32
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 1, i32 31), !dbg !32
  %106 = bitcast i32 %105 to float, !dbg !32
  %107 = fadd float %103, %106, !dbg !27
  %108 = and i1 %85, %82, !dbg !32
  %109 = bitcast float %107 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %109, i1 %108) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %110 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !32
  %111 = tail call float @llvm.nvvm.div.full(float %110, float 4.096000e+03), !dbg !33
  %112 = fadd float %111, 0x3EE4F8B580000000, !dbg !34
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i = icmp eq i32 %113, 0, !dbg !35
  br i1 %.not.i, label %116, label %114, !dbg !35

114:                                              ; preds = %9
  %115 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %112), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

116:                                              ; preds = %9
  %117 = tail call float @llvm.nvvm.rsqrt.approx.f(float %112), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

__nv_rsqrtf.exit:                                 ; preds = %114, %116
  %.0.i = phi float [ %115, %114 ], [ %117, %116 ], !dbg !35
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i10 = icmp eq i32 %121, 0, !dbg !35
  br i1 %.not.i10, label %124, label %122, !dbg !35

122:                                              ; preds = %__nv_rsqrtf.exit
  %123 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %112), !dbg !35
  br label %__nv_rsqrtf.exit12, !dbg !35

124:                                              ; preds = %__nv_rsqrtf.exit
  %125 = tail call float @llvm.nvvm.rsqrt.approx.f(float %112), !dbg !35
  br label %__nv_rsqrtf.exit12, !dbg !35

__nv_rsqrtf.exit12:                               ; preds = %122, %124
  %.0.i11 = phi float [ %123, %122 ], [ %125, %124 ], !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %126 = sext i32 %10 to i64, !dbg !37
  %127 = getelementptr float, ptr addrspace(1) %1, i64 %126, !dbg !37
  %128 = and i32 %12, 1023, !dbg !38
  %129 = icmp eq i32 %128, 0, !dbg !38
  %130 = bitcast float %.0.i to i32, !dbg !38
  %131 = and i1 %129, %11, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %130, ptr addrspace(1) %127, i1 %131) #5, !dbg !38
  %132 = zext nneg i32 %16 to i64, !dbg !39
  %133 = getelementptr half, ptr addrspace(1) %4, i64 %132, !dbg !39
  %134 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %133, i1 true) #5, !dbg !40
  %135 = extractvalue { i32, i32 } %134, 0, !dbg !40
  %136 = bitcast i32 %135 to <2 x half>, !dbg !40
  %137 = extractvalue { i32, i32 } %134, 1, !dbg !40
  %138 = bitcast i32 %137 to <2 x half>, !dbg !40
  %139 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %32, i1 %11) #5, !dbg !41
  %140 = extractvalue { i32, i32 } %139, 0, !dbg !41
  %141 = bitcast i32 %140 to <2 x half>, !dbg !41
  %142 = extractvalue { i32, i32 } %139, 1, !dbg !41
  %143 = bitcast i32 %142 to <2 x half>, !dbg !41
  %144 = getelementptr half, ptr addrspace(1) %5, i64 %19, !dbg !42
  %145 = fpext <2 x half> %136 to <2 x float>, !dbg !43
  %146 = fpext <2 x half> %141 to <2 x float>, !dbg !44
  %147 = insertelement <2 x float> poison, float %.0.i11, i64 0, !dbg !45
  %148 = shufflevector <2 x float> %147, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !45
  %149 = fmul <2 x float> %148, %146, !dbg !45
  %150 = fmul <2 x float> %149, %145, !dbg !46
  %151 = fptrunc <2 x float> %150 to <2 x half>, !dbg !47
  %152 = fpext <2 x half> %138 to <2 x float>, !dbg !43
  %153 = fpext <2 x half> %143 to <2 x float>, !dbg !44
  %154 = fmul <2 x float> %148, %153, !dbg !45
  %155 = fmul <2 x float> %154, %152, !dbg !46
  %156 = fptrunc <2 x float> %155 to <2 x half>, !dbg !47
  %157 = bitcast <2 x half> %151 to i32, !dbg !47
  %158 = bitcast <2 x half> %156 to i32, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %157, i32 %158, ptr addrspace(1) %144, i1 %11) #5, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cirveghol7wjrq7zwkkgu3sphruzjhq4ru5zcvmudgaexdo5niag.py", directory: "./local_cache/ir")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 21, scope: !6)
!11 = !DILocation(line: 25, column: 37, scope: !6)
!12 = !DILocation(line: 35, column: 46, scope: !6)
!13 = !DILocation(line: 35, column: 41, scope: !6)
!14 = !DILocation(line: 35, column: 34, scope: !6)
!15 = !DILocation(line: 35, column: 51, scope: !6)
!16 = !DILocation(line: 36, column: 34, scope: !6)
!17 = !DILocation(line: 36, column: 51, scope: !6)
!18 = !DILocation(line: 37, column: 38, scope: !6)
!19 = !DILocation(line: 37, column: 55, scope: !6)
!20 = !DILocation(line: 35, column: 113, scope: !6)
!21 = !DILocation(line: 36, column: 113, scope: !6)
!22 = !DILocation(line: 37, column: 117, scope: !6)
!23 = !DILocation(line: 38, column: 22, scope: !6)
!24 = !DILocation(line: 39, column: 22, scope: !6)
!25 = !DILocation(line: 41, column: 22, scope: !6)
!26 = !DILocation(line: 45, column: 55, scope: !6)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!30 = distinct !DILexicalBlockFile(scope: !6, file: !29, discriminator: 0)
!31 = !DILocation(line: 46, column: 25, scope: !6)
!32 = !DILocation(line: 286, column: 36, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 48, column: 20, scope: !6)
!34 = !DILocation(line: 50, column: 20, scope: !6)
!35 = !DILocation(line: 51, column: 28, scope: !6)
!36 = !DILocation(line: 52, column: 4, scope: !6)
!37 = !DILocation(line: 53, column: 28, scope: !6)
!38 = !DILocation(line: 53, column: 40, scope: !6)
!39 = !DILocation(line: 60, column: 35, scope: !6)
!40 = !DILocation(line: 60, column: 42, scope: !6)
!41 = !DILocation(line: 61, column: 56, scope: !6)
!42 = !DILocation(line: 66, column: 29, scope: !6)
!43 = !DILocation(line: 60, column: 95, scope: !6)
!44 = !DILocation(line: 61, column: 118, scope: !6)
!45 = !DILocation(line: 63, column: 24, scope: !6)
!46 = !DILocation(line: 65, column: 24, scope: !6)
!47 = !DILocation(line: 66, column: 53, scope: !6)
!48 = !DILocation(line: 54, column: 4, scope: !6)
