; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 2, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %.lobit2 = lshr i32 %11, 7, !dbg !11
  %12 = and i32 %.lobit2, 3, !dbg !11
  %13 = and i32 %11, 31, !dbg !11
  %14 = or disjoint i32 %12, %10, !dbg !12
  %15 = icmp slt i32 %14, %5, !dbg !13
  %16 = shl i32 %11, 2, !dbg !14
  %17 = and i32 %16, 508, !dbg !14
  %18 = shl i32 %14, 12, !dbg !15
  %19 = or disjoint i32 %18, %17
  br label %20, !dbg !16

20:                                               ; preds = %8, %20
  %21 = phi float [ 0.000000e+00, %8 ], [ %49, %20 ]
  %22 = phi float [ 0.000000e+00, %8 ], [ %50, %20 ]
  %23 = phi float [ 0.000000e+00, %8 ], [ %61, %20 ]
  %24 = phi float [ 0.000000e+00, %8 ], [ %62, %20 ]
  %25 = phi i32 [ 0, %8 ], [ %66, %20 ]
  %26 = or i32 %19, %25, !dbg !17
  %27 = sext i32 %26 to i64, !dbg !18
  %28 = getelementptr half, ptr addrspace(1) %2, i64 %27, !dbg !18
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %28, i1 %15) #5, !dbg !19
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !19
  %31 = bitcast i32 %30 to <2 x half>, !dbg !19
  %32 = extractvalue { i32, i32 } %29, 1, !dbg !19
  %33 = bitcast i32 %32 to <2 x half>, !dbg !19
  %34 = getelementptr half, ptr addrspace(1) %0, i64 %27, !dbg !20
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %34, i1 %15) #5, !dbg !21
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !21
  %37 = bitcast i32 %36 to <2 x half>, !dbg !21
  %38 = extractvalue { i32, i32 } %35, 1, !dbg !21
  %39 = bitcast i32 %38 to <2 x half>, !dbg !21
  %40 = fpext <2 x half> %31 to <2 x float>, !dbg !22
  %41 = fpext <2 x half> %37 to <2 x float>, !dbg !23
  %42 = fadd <2 x float> %40, %41, !dbg !24
  %43 = fmul <2 x float> %42, %42, !dbg !25
  %44 = extractelement <2 x float> %43, i64 0, !dbg !25
  %45 = fmul <2 x float> %42, %42, !dbg !25
  %46 = extractelement <2 x float> %45, i64 1, !dbg !25
  %47 = fadd float %21, %44, !dbg !26
  %48 = fadd float %22, %46, !dbg !26
  %49 = select i1 %15, float %47, float %21, !dbg !27
  %50 = select i1 %15, float %48, float %22, !dbg !27
  %51 = fptrunc <2 x float> %42 to <2 x half>, !dbg !28
  %52 = fpext <2 x half> %33 to <2 x float>, !dbg !22
  %53 = fpext <2 x half> %39 to <2 x float>, !dbg !23
  %54 = fadd <2 x float> %52, %53, !dbg !24
  %55 = fmul <2 x float> %54, %54, !dbg !25
  %56 = extractelement <2 x float> %55, i64 0, !dbg !25
  %57 = fmul <2 x float> %54, %54, !dbg !25
  %58 = extractelement <2 x float> %57, i64 1, !dbg !25
  %59 = fadd float %23, %56, !dbg !26
  %60 = fadd float %24, %58, !dbg !26
  %61 = select i1 %15, float %59, float %23, !dbg !27
  %62 = select i1 %15, float %60, float %24, !dbg !27
  %63 = fptrunc <2 x float> %54 to <2 x half>, !dbg !28
  %64 = bitcast <2 x half> %51 to i32, !dbg !28
  %65 = bitcast <2 x half> %63 to i32, !dbg !28
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %64, i32 %65, ptr addrspace(1) %34, i1 %15) #5, !dbg !28
  %66 = add nuw nsw i32 %25, 512, !dbg !16
  %67 = icmp samesign ult i32 %25, 3584, !dbg !16
  br i1 %67, label %20, label %68, !dbg !16

68:                                               ; preds = %20
  %69 = lshr i32 %11, 5, !dbg !11
  %70 = and i32 %11, 3, !dbg !11
  %71 = or disjoint i32 %10, %70, !dbg !12
  %72 = icmp slt i32 %71, %5, !dbg !13
  %73 = and i32 %11, 511, !dbg !14
  %74 = fadd float %49, %50, !dbg !29
  %75 = fadd float %61, %74, !dbg !29
  %76 = fadd float %62, %75, !dbg !29
  %77 = bitcast float %76 to i32, !dbg !34
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 16, i32 31), !dbg !34
  %79 = bitcast i32 %78 to float, !dbg !34
  %80 = fadd float %76, %79, !dbg !29
  %81 = bitcast float %80 to i32, !dbg !34
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 8, i32 31), !dbg !34
  %83 = bitcast i32 %82 to float, !dbg !34
  %84 = fadd float %80, %83, !dbg !29
  %85 = bitcast float %84 to i32, !dbg !34
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 4, i32 31), !dbg !34
  %87 = bitcast i32 %86 to float, !dbg !34
  %88 = fadd float %84, %87, !dbg !29
  %89 = bitcast float %88 to i32, !dbg !34
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 2, i32 31), !dbg !34
  %91 = bitcast i32 %90 to float, !dbg !34
  %92 = fadd float %88, %91, !dbg !29
  %93 = bitcast float %92 to i32, !dbg !34
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 1, i32 31), !dbg !34
  %95 = bitcast i32 %94 to float, !dbg !34
  %96 = fadd float %92, %95, !dbg !29
  %97 = and i32 %69, 3, !dbg !34
  %98 = icmp eq i32 %13, 0, !dbg !34
  %99 = shl nuw nsw i32 %12, 2, !dbg !34
  %100 = or disjoint i32 %99, %97, !dbg !34
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i32 %100, !dbg !34
  %102 = bitcast float %96 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 %98) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %103 = icmp slt i32 %11, 16, !dbg !34
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !34
  %105 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %104, i1 %103) #5, !dbg !34
  %106 = bitcast i32 %105 to float, !dbg !34
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 2, i32 31), !dbg !34
  %108 = bitcast i32 %107 to float, !dbg !34
  %109 = fadd float %106, %108, !dbg !29
  %110 = bitcast float %109 to i32, !dbg !34
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 1, i32 31), !dbg !34
  %112 = bitcast i32 %111 to float, !dbg !34
  %113 = fadd float %109, %112, !dbg !29
  %114 = icmp eq i32 %70, 0, !dbg !34
  %115 = and i1 %103, %114, !dbg !34
  %116 = bitcast float %113 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %116, i1 %115) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i32 %99, !dbg !34
  %118 = load float, ptr addrspace(3) %117, align 16, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %119 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %12, !dbg !35
  %120 = bitcast float %118 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 true) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %121 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %70, !dbg !35
  %122 = load float, ptr addrspace(3) %121, align 4, !dbg !35
  %123 = tail call float @llvm.nvvm.div.full(float %122, float 4.096000e+03), !dbg !36
  %124 = tail call float @llvm.nvvm.div.full(float %118, float 4.096000e+03), !dbg !36
  %125 = fadd float %123, 0x3EE4F8B580000000, !dbg !37
  %126 = fadd float %124, 0x3EE4F8B580000000, !dbg !37
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i = icmp eq i32 %127, 0, !dbg !35
  br i1 %.not.i, label %130, label %128, !dbg !35

128:                                              ; preds = %68
  %129 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %125), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

130:                                              ; preds = %68
  %131 = tail call float @llvm.nvvm.rsqrt.approx.f(float %125), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

__nv_rsqrtf.exit:                                 ; preds = %128, %130
  %.0.i = phi float [ %129, %128 ], [ %131, %130 ], !dbg !35
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i16 = icmp eq i32 %135, 0, !dbg !35
  br i1 %.not.i16, label %138, label %136, !dbg !35

136:                                              ; preds = %__nv_rsqrtf.exit
  %137 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %126), !dbg !35
  br label %__nv_rsqrtf.exit18, !dbg !35

138:                                              ; preds = %__nv_rsqrtf.exit
  %139 = tail call float @llvm.nvvm.rsqrt.approx.f(float %126), !dbg !35
  br label %__nv_rsqrtf.exit18, !dbg !35

__nv_rsqrtf.exit18:                               ; preds = %136, %138
  %.0.i17 = phi float [ %137, %136 ], [ %139, %138 ], !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %140 = sext i32 %71 to i64, !dbg !39
  %141 = getelementptr float, ptr addrspace(1) %1, i64 %140, !dbg !39
  %142 = and i32 %11, 508, !dbg !40
  %143 = icmp eq i32 %142, 0, !dbg !40
  %144 = bitcast float %.0.i to i32, !dbg !40
  %145 = and i1 %143, %72, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %144, ptr addrspace(1) %141, i1 %145) #5, !dbg !40
  %146 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %73
  %147 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %17
  %148 = zext nneg i32 %73 to i64, !dbg !41
  %149 = getelementptr inbounds nuw i8, ptr addrspace(3) %147, i32 8
  %150 = insertelement <2 x float> poison, float %.0.i17, i64 0, !dbg !42
  %151 = shufflevector <2 x float> %150, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !42
  br label %152, !dbg !41

152:                                              ; preds = %__nv_rsqrtf.exit18, %152
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit18 ], [ %indvars.iv.next, %152 ]
  %153 = or disjoint i64 %indvars.iv, %148, !dbg !43
  %154 = getelementptr half, ptr addrspace(1) %3, i64 %153, !dbg !44
  %155 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %154, i1 true) #5, !dbg !45
  %156 = bitcast i16 %155 to half, !dbg !45
  %157 = fpext half %156 to float, !dbg !46
  %158 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !47
  %159 = or i32 %19, %158, !dbg !47
  %160 = sext i32 %159 to i64, !dbg !48
  %161 = getelementptr half, ptr addrspace(1) %0, i64 %160, !dbg !48
  %162 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %161, i1 %15) #5, !dbg !49
  %163 = extractvalue { i32, i32 } %162, 0, !dbg !49
  %164 = bitcast i32 %163 to <2 x half>, !dbg !49
  %165 = extractvalue { i32, i32 } %162, 1, !dbg !49
  %166 = bitcast i32 %165 to <2 x half>, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %167 = bitcast float %157 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %167, i1 true) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %168 = getelementptr half, ptr addrspace(1) %4, i64 %160, !dbg !51
  %169 = fpext <2 x half> %164 to <2 x float>, !dbg !52
  %170 = fmul <2 x float> %151, %169, !dbg !42
  %171 = load <2 x float>, ptr addrspace(3) %147, align 16, !dbg !50
  %172 = fmul <2 x float> %171, %170, !dbg !50
  %173 = fptrunc <2 x float> %172 to <2 x half>, !dbg !53
  %174 = fpext <2 x half> %166 to <2 x float>, !dbg !52
  %175 = fmul <2 x float> %151, %174, !dbg !42
  %176 = load <2 x float>, ptr addrspace(3) %149, align 8, !dbg !50
  %177 = fmul <2 x float> %176, %175, !dbg !50
  %178 = fptrunc <2 x float> %177 to <2 x half>, !dbg !53
  %179 = bitcast <2 x half> %173 to i32, !dbg !53
  %180 = bitcast <2 x half> %178 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %179, i32 %180, ptr addrspace(1) %168, i1 %15) #5, !dbg !53
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !41
  %181 = icmp samesign ult i64 %indvars.iv, 3584, !dbg !41
  br i1 %181, label %152, label %182, !dbg !41

182:                                              ; preds = %152
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccpmvf6lgmnpforavvbrvwi4t5zoiosfy62jj2u37b4g5lsm5yib.py", directory: "./local_cache/cp")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 29, column: 40, scope: !6)
!17 = !DILocation(line: 35, column: 41, scope: !6)
!18 = !DILocation(line: 35, column: 34, scope: !6)
!19 = !DILocation(line: 35, column: 51, scope: !6)
!20 = !DILocation(line: 36, column: 38, scope: !6)
!21 = !DILocation(line: 36, column: 55, scope: !6)
!22 = !DILocation(line: 35, column: 113, scope: !6)
!23 = !DILocation(line: 36, column: 117, scope: !6)
!24 = !DILocation(line: 37, column: 22, scope: !6)
!25 = !DILocation(line: 39, column: 22, scope: !6)
!26 = !DILocation(line: 41, column: 23, scope: !6)
!27 = !DILocation(line: 42, column: 48, scope: !6)
!28 = !DILocation(line: 43, column: 55, scope: !6)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !33)
!30 = distinct !DILexicalBlockFile(scope: !32, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!32 = distinct !DILexicalBlockFile(scope: !6, file: !31, discriminator: 0)
!33 = !DILocation(line: 44, column: 25, scope: !6)
!34 = !DILocation(line: 286, column: 36, scope: !32, inlinedAt: !33)
!35 = !DILocation(line: 49, column: 28, scope: !6)
!36 = !DILocation(line: 46, column: 19, scope: !6)
!37 = !DILocation(line: 48, column: 19, scope: !6)
!38 = !DILocation(line: 50, column: 4, scope: !6)
!39 = !DILocation(line: 51, column: 28, scope: !6)
!40 = !DILocation(line: 51, column: 40, scope: !6)
!41 = !DILocation(line: 52, column: 40, scope: !6)
!42 = !DILocation(line: 61, column: 24, scope: !6)
!43 = !DILocation(line: 53, column: 31, scope: !6)
!44 = !DILocation(line: 58, column: 35, scope: !6)
!45 = !DILocation(line: 58, column: 42, scope: !6)
!46 = !DILocation(line: 58, column: 95, scope: !6)
!47 = !DILocation(line: 59, column: 46, scope: !6)
!48 = !DILocation(line: 59, column: 39, scope: !6)
!49 = !DILocation(line: 59, column: 56, scope: !6)
!50 = !DILocation(line: 63, column: 24, scope: !6)
!51 = !DILocation(line: 64, column: 29, scope: !6)
!52 = !DILocation(line: 59, column: 118, scope: !6)
!53 = !DILocation(line: 64, column: 53, scope: !6)
!54 = !DILocation(line: 52, column: 4, scope: !6)
