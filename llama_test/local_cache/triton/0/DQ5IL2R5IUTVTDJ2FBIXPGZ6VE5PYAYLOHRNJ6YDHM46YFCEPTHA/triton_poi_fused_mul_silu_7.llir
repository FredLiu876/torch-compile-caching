; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_poi_fused_mul_silu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr !dbg !6 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %7 = shl i32 %6, 10, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = shl i32 %8, 3, !dbg !11
  %10 = and i32 %9, 1016, !dbg !11
  %11 = or disjoint i32 %10, %7, !dbg !12
  %12 = icmp slt i32 %11, %3, !dbg !13
  %13 = sext i32 %11 to i64, !dbg !14
  %14 = getelementptr half, ptr addrspace(1) %0, i64 %13, !dbg !14
  %15 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %14, i1 %12) #2, !dbg !15
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0, !dbg !15
  %17 = bitcast i32 %16 to <2 x half>, !dbg !15
  %18 = extractvalue { i32, i32, i32, i32 } %15, 1, !dbg !15
  %19 = bitcast i32 %18 to <2 x half>, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %15, 2, !dbg !15
  %21 = bitcast i32 %20 to <2 x half>, !dbg !15
  %22 = extractvalue { i32, i32, i32, i32 } %15, 3, !dbg !15
  %23 = bitcast i32 %22 to <2 x half>, !dbg !15
  %24 = getelementptr half, ptr addrspace(1) %1, i64 %13, !dbg !16
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 %12) #2, !dbg !17
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !17
  %27 = bitcast i32 %26 to <2 x half>, !dbg !17
  %28 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !17
  %29 = bitcast i32 %28 to <2 x half>, !dbg !17
  %30 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !17
  %31 = bitcast i32 %30 to <2 x half>, !dbg !17
  %32 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !17
  %33 = bitcast i32 %32 to <2 x half>, !dbg !17
  %34 = getelementptr half, ptr addrspace(1) %2, i64 %13, !dbg !18
  %35 = fpext <2 x half> %17 to <2 x float>, !dbg !19
  %36 = fpext <2 x half> %27 to <2 x float>, !dbg !20
  %37 = extractelement <2 x float> %35, i64 0, !dbg !21
  %38 = fsub float 0.000000e+00, %37, !dbg !21
  %39 = extractelement <2 x float> %35, i64 1, !dbg !21
  %40 = fsub float 0.000000e+00, %39, !dbg !21
  %41 = fmul float %38, 0x3FF7154760000000, !dbg !25
  %42 = tail call float @llvm.nvvm.ex2.approx.f(float %41), !dbg !25
  %43 = fmul float %40, 0x3FF7154760000000, !dbg !25
  %44 = tail call float @llvm.nvvm.ex2.approx.f(float %43), !dbg !25
  %45 = fadd float %42, 1.000000e+00, !dbg !26
  %46 = fadd float %44, 1.000000e+00, !dbg !26
  %47 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %45), !dbg !27
  %48 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %46), !dbg !27
  %49 = insertelement <2 x float> poison, float %47, i64 0, !dbg !28
  %50 = insertelement <2 x float> %49, float %48, i64 1, !dbg !28
  %51 = fmul <2 x float> %50, %35, !dbg !28
  %52 = fmul <2 x float> %51, %36, !dbg !29
  %53 = fptrunc <2 x float> %52 to <2 x half>, !dbg !30
  %54 = fpext <2 x half> %19 to <2 x float>, !dbg !19
  %55 = fpext <2 x half> %29 to <2 x float>, !dbg !20
  %56 = extractelement <2 x float> %54, i64 0, !dbg !21
  %57 = fsub float 0.000000e+00, %56, !dbg !21
  %58 = extractelement <2 x float> %54, i64 1, !dbg !21
  %59 = fsub float 0.000000e+00, %58, !dbg !21
  %60 = fmul float %57, 0x3FF7154760000000, !dbg !25
  %61 = tail call float @llvm.nvvm.ex2.approx.f(float %60), !dbg !25
  %62 = fmul float %59, 0x3FF7154760000000, !dbg !25
  %63 = tail call float @llvm.nvvm.ex2.approx.f(float %62), !dbg !25
  %64 = fadd float %61, 1.000000e+00, !dbg !26
  %65 = fadd float %63, 1.000000e+00, !dbg !26
  %66 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %64), !dbg !27
  %67 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %65), !dbg !27
  %68 = insertelement <2 x float> poison, float %66, i64 0, !dbg !28
  %69 = insertelement <2 x float> %68, float %67, i64 1, !dbg !28
  %70 = fmul <2 x float> %69, %54, !dbg !28
  %71 = fmul <2 x float> %70, %55, !dbg !29
  %72 = fptrunc <2 x float> %71 to <2 x half>, !dbg !30
  %73 = fpext <2 x half> %21 to <2 x float>, !dbg !19
  %74 = fpext <2 x half> %31 to <2 x float>, !dbg !20
  %75 = extractelement <2 x float> %73, i64 0, !dbg !21
  %76 = fsub float 0.000000e+00, %75, !dbg !21
  %77 = extractelement <2 x float> %73, i64 1, !dbg !21
  %78 = fsub float 0.000000e+00, %77, !dbg !21
  %79 = fmul float %76, 0x3FF7154760000000, !dbg !25
  %80 = tail call float @llvm.nvvm.ex2.approx.f(float %79), !dbg !25
  %81 = fmul float %78, 0x3FF7154760000000, !dbg !25
  %82 = tail call float @llvm.nvvm.ex2.approx.f(float %81), !dbg !25
  %83 = fadd float %80, 1.000000e+00, !dbg !26
  %84 = fadd float %82, 1.000000e+00, !dbg !26
  %85 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %83), !dbg !27
  %86 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %84), !dbg !27
  %87 = insertelement <2 x float> poison, float %85, i64 0, !dbg !28
  %88 = insertelement <2 x float> %87, float %86, i64 1, !dbg !28
  %89 = fmul <2 x float> %88, %73, !dbg !28
  %90 = fmul <2 x float> %89, %74, !dbg !29
  %91 = fptrunc <2 x float> %90 to <2 x half>, !dbg !30
  %92 = fpext <2 x half> %23 to <2 x float>, !dbg !19
  %93 = fpext <2 x half> %33 to <2 x float>, !dbg !20
  %94 = extractelement <2 x float> %92, i64 0, !dbg !21
  %95 = fsub float 0.000000e+00, %94, !dbg !21
  %96 = extractelement <2 x float> %92, i64 1, !dbg !21
  %97 = fsub float 0.000000e+00, %96, !dbg !21
  %98 = fmul float %95, 0x3FF7154760000000, !dbg !25
  %99 = tail call float @llvm.nvvm.ex2.approx.f(float %98), !dbg !25
  %100 = fmul float %97, 0x3FF7154760000000, !dbg !25
  %101 = tail call float @llvm.nvvm.ex2.approx.f(float %100), !dbg !25
  %102 = fadd float %99, 1.000000e+00, !dbg !26
  %103 = fadd float %101, 1.000000e+00, !dbg !26
  %104 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %102), !dbg !27
  %105 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %103), !dbg !27
  %106 = insertelement <2 x float> poison, float %104, i64 0, !dbg !28
  %107 = insertelement <2 x float> %106, float %105, i64 1, !dbg !28
  %108 = fmul <2 x float> %107, %92, !dbg !28
  %109 = fmul <2 x float> %108, %93, !dbg !29
  %110 = fptrunc <2 x float> %109 to <2 x half>, !dbg !30
  %111 = bitcast <2 x half> %53 to i32, !dbg !30
  %112 = bitcast <2 x half> %72 to i32, !dbg !30
  %113 = bitcast <2 x half> %91 to i32, !dbg !30
  %114 = bitcast <2 x half> %110 to i32, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %111, i32 %112, i32 %113, i32 %114, ptr addrspace(1) %34, i1 %12) #2, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czlnnli5wdnzsq3xf3gaijpvc6mijjwympjjhftw2jsmqxb4oqpa.py", directory: "./local_cache/zl")
!4 = !{ptr @triton_poi_fused_mul_silu_7, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused_mul_silu_7", linkageName: "triton_poi_fused_mul_silu_7", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 19, column: 28, scope: !6)
!10 = !DILocation(line: 19, column: 33, scope: !6)
!11 = !DILocation(line: 20, column: 36, scope: !6)
!12 = !DILocation(line: 20, column: 23, scope: !6)
!13 = !DILocation(line: 21, column: 21, scope: !6)
!14 = !DILocation(line: 23, column: 30, scope: !6)
!15 = !DILocation(line: 23, column: 35, scope: !6)
!16 = !DILocation(line: 24, column: 30, scope: !6)
!17 = !DILocation(line: 24, column: 35, scope: !6)
!18 = !DILocation(line: 30, column: 25, scope: !6)
!19 = !DILocation(line: 23, column: 45, scope: !6)
!20 = !DILocation(line: 24, column: 45, scope: !6)
!21 = !DILocation(line: 47, column: 30, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !6, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!24 = !DILocation(line: 26, column: 22, scope: !6)
!25 = !DILocation(line: 47, column: 29, scope: !22, inlinedAt: !24)
!26 = !DILocation(line: 47, column: 20, scope: !22, inlinedAt: !24)
!27 = !DILocation(line: 47, column: 16, scope: !22, inlinedAt: !24)
!28 = !DILocation(line: 27, column: 18, scope: !6)
!29 = !DILocation(line: 29, column: 18, scope: !6)
!30 = !DILocation(line: 30, column: 36, scope: !6)
!31 = !DILocation(line: 30, column: 4, scope: !6)
