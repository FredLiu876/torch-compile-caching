; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = shl i32 %10, 1, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = lshr i32 %12, 5, !dbg !11
  %14 = and i32 %12, 512, !dbg !11
  %.lobit = lshr exact i32 %14, 9, !dbg !11
  %15 = and i32 %12, 31, !dbg !11
  %16 = and i32 %12, 1, !dbg !11
  %17 = or disjoint i32 %.lobit, %11, !dbg !12
  %18 = icmp slt i32 %17, %6, !dbg !13
  %19 = shl i32 %12, 3, !dbg !14
  %20 = and i32 %19, 4088, !dbg !14
  %21 = shl i32 %17, 12, !dbg !15
  %22 = or disjoint i32 %21, %20, !dbg !16
  %23 = sext i32 %22 to i64, !dbg !17
  %24 = getelementptr half, ptr addrspace(1) %2, i64 %23, !dbg !17
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %24, i1 %18) #5, !dbg !18
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !18
  %27 = bitcast i32 %26 to <2 x half>, !dbg !18
  %28 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !18
  %29 = bitcast i32 %28 to <2 x half>, !dbg !18
  %30 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !18
  %31 = bitcast i32 %30 to <2 x half>, !dbg !18
  %32 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !18
  %33 = bitcast i32 %32 to <2 x half>, !dbg !18
  %34 = getelementptr half, ptr addrspace(1) %3, i64 %23, !dbg !19
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %34, i1 %18) #5, !dbg !20
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !20
  %37 = bitcast i32 %36 to <2 x half>, !dbg !20
  %38 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !20
  %39 = bitcast i32 %38 to <2 x half>, !dbg !20
  %40 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !20
  %41 = bitcast i32 %40 to <2 x half>, !dbg !20
  %42 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !20
  %43 = bitcast i32 %42 to <2 x half>, !dbg !20
  %44 = getelementptr half, ptr addrspace(1) %0, i64 %23, !dbg !21
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %44, i1 %18) #5, !dbg !22
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !22
  %47 = bitcast i32 %46 to <2 x half>, !dbg !22
  %48 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !22
  %49 = bitcast i32 %48 to <2 x half>, !dbg !22
  %50 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !22
  %51 = bitcast i32 %50 to <2 x half>, !dbg !22
  %52 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !22
  %53 = bitcast i32 %52 to <2 x half>, !dbg !22
  %54 = fpext <2 x half> %27 to <2 x float>, !dbg !23
  %55 = fpext <2 x half> %37 to <2 x float>, !dbg !24
  %56 = fpext <2 x half> %47 to <2 x float>, !dbg !25
  %57 = fadd <2 x float> %54, %55, !dbg !26
  %58 = fadd <2 x float> %57, %56, !dbg !27
  %59 = fmul <2 x float> %58, %58, !dbg !28
  %60 = fmul <2 x float> %58, %58, !dbg !28
  %61 = fptrunc <2 x float> %58 to <2 x half>, !dbg !29
  %62 = fpext <2 x half> %29 to <2 x float>, !dbg !23
  %63 = fpext <2 x half> %39 to <2 x float>, !dbg !24
  %64 = fpext <2 x half> %49 to <2 x float>, !dbg !25
  %65 = fadd <2 x float> %62, %63, !dbg !26
  %66 = fadd <2 x float> %65, %64, !dbg !27
  %67 = fmul <2 x float> %66, %66, !dbg !28
  %68 = fmul <2 x float> %66, %66, !dbg !28
  %69 = fptrunc <2 x float> %66 to <2 x half>, !dbg !29
  %70 = fpext <2 x half> %31 to <2 x float>, !dbg !23
  %71 = fpext <2 x half> %41 to <2 x float>, !dbg !24
  %72 = fpext <2 x half> %51 to <2 x float>, !dbg !25
  %73 = fadd <2 x float> %70, %71, !dbg !26
  %74 = fadd <2 x float> %73, %72, !dbg !27
  %75 = fmul <2 x float> %74, %74, !dbg !28
  %76 = fmul <2 x float> %74, %74, !dbg !28
  %77 = fptrunc <2 x float> %74 to <2 x half>, !dbg !29
  %78 = fpext <2 x half> %33 to <2 x float>, !dbg !23
  %79 = fpext <2 x half> %43 to <2 x float>, !dbg !24
  %80 = fpext <2 x half> %53 to <2 x float>, !dbg !25
  %81 = fadd <2 x float> %78, %79, !dbg !26
  %82 = fadd <2 x float> %81, %80, !dbg !27
  %83 = fmul <2 x float> %82, %82, !dbg !28
  %84 = fmul <2 x float> %82, %82, !dbg !28
  %85 = fptrunc <2 x float> %82 to <2 x half>, !dbg !29
  %86 = bitcast <2 x half> %61 to i32, !dbg !29
  %87 = bitcast <2 x half> %69 to i32, !dbg !29
  %88 = bitcast <2 x half> %77 to i32, !dbg !29
  %89 = bitcast <2 x half> %85 to i32, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %86, i32 %87, i32 %88, i32 %89, ptr addrspace(1) %44, i1 %18) #5, !dbg !29
  %shift = shufflevector <2 x float> %60, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %90 = fadd <2 x float> %59, %shift, !dbg !30
  %91 = fadd <2 x float> %67, %90, !dbg !30
  %shift33 = shufflevector <2 x float> %68, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %92 = fadd <2 x float> %shift33, %91, !dbg !30
  %93 = fadd <2 x float> %75, %92, !dbg !30
  %shift34 = shufflevector <2 x float> %76, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %94 = fadd <2 x float> %shift34, %93, !dbg !30
  %95 = fadd <2 x float> %83, %94, !dbg !30
  %shift35 = shufflevector <2 x float> %84, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %96 = fadd <2 x float> %shift35, %95, !dbg !30
  %97 = extractelement <2 x float> %96, i64 0, !dbg !30
  %98 = select i1 %18, float %97, float 0.000000e+00, !dbg !30
  %99 = bitcast float %98 to i32, !dbg !35
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 16, i32 31), !dbg !35
  %101 = bitcast i32 %100 to float, !dbg !35
  %102 = fadd float %98, %101, !dbg !30
  %103 = bitcast float %102 to i32, !dbg !35
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 8, i32 31), !dbg !35
  %105 = bitcast i32 %104 to float, !dbg !35
  %106 = fadd float %102, %105, !dbg !30
  %107 = bitcast float %106 to i32, !dbg !35
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 4, i32 31), !dbg !35
  %109 = bitcast i32 %108 to float, !dbg !35
  %110 = fadd float %106, %109, !dbg !30
  %111 = bitcast float %110 to i32, !dbg !35
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 2, i32 31), !dbg !35
  %113 = bitcast i32 %112 to float, !dbg !35
  %114 = fadd float %110, %113, !dbg !30
  %115 = bitcast float %114 to i32, !dbg !35
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 1, i32 31), !dbg !35
  %117 = bitcast i32 %116 to float, !dbg !35
  %118 = fadd float %114, %117, !dbg !30
  %119 = and i32 %13, 15, !dbg !35
  %120 = icmp eq i32 %15, 0, !dbg !35
  %121 = lshr exact i32 %14, 5, !dbg !35
  %122 = or disjoint i32 %121, %119, !dbg !35
  %123 = getelementptr float, ptr addrspace(3) @global_smem, i32 %122, !dbg !35
  %124 = bitcast float %118 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %124, i1 %120) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %125 = icmp slt i32 %12, 32, !dbg !35
  %126 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !35
  %127 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %126, i1 %125) #5, !dbg !35
  %128 = bitcast i32 %127 to float, !dbg !35
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 8, i32 31), !dbg !35
  %130 = bitcast i32 %129 to float, !dbg !35
  %131 = fadd float %128, %130, !dbg !30
  %132 = bitcast float %131 to i32, !dbg !35
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 4, i32 31), !dbg !35
  %134 = bitcast i32 %133 to float, !dbg !35
  %135 = fadd float %131, %134, !dbg !30
  %136 = bitcast float %135 to i32, !dbg !35
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 2, i32 31), !dbg !35
  %138 = bitcast i32 %137 to float, !dbg !35
  %139 = fadd float %135, %138, !dbg !30
  %140 = bitcast float %139 to i32, !dbg !35
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 1, i32 31), !dbg !35
  %142 = bitcast i32 %141 to float, !dbg !35
  %143 = fadd float %139, %142, !dbg !30
  %144 = and i32 %12, 15, !dbg !35
  %145 = icmp eq i32 %144, 0, !dbg !35
  %146 = and i1 %125, %145, !dbg !35
  %147 = bitcast float %143 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %147, i1 %146) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %148 = getelementptr float, ptr addrspace(3) @global_smem, i32 %121, !dbg !35
  %149 = load float, ptr addrspace(3) %148, align 16, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %150 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !36
  %151 = bitcast float %149 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 true) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %152 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %16, !dbg !36
  %153 = load float, ptr addrspace(3) %152, align 4, !dbg !36
  %154 = tail call float @llvm.nvvm.div.full(float %153, float 4.096000e+03), !dbg !37
  %155 = tail call float @llvm.nvvm.div.full(float %149, float 4.096000e+03), !dbg !37
  %156 = fadd float %154, 0x3EE4F8B580000000, !dbg !38
  %157 = fadd float %155, 0x3EE4F8B580000000, !dbg !38
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i = icmp eq i32 %158, 0, !dbg !36
  br i1 %.not.i, label %161, label %159, !dbg !36

159:                                              ; preds = %9
  %160 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %156), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

161:                                              ; preds = %9
  %162 = tail call float @llvm.nvvm.rsqrt.approx.f(float %156), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

__nv_rsqrtf.exit:                                 ; preds = %159, %161
  %.0.i = phi float [ %160, %159 ], [ %162, %161 ], !dbg !36
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i30 = icmp eq i32 %170, 0, !dbg !36
  br i1 %.not.i30, label %173, label %171, !dbg !36

171:                                              ; preds = %__nv_rsqrtf.exit
  %172 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %157), !dbg !36
  br label %__nv_rsqrtf.exit32, !dbg !36

173:                                              ; preds = %__nv_rsqrtf.exit
  %174 = tail call float @llvm.nvvm.rsqrt.approx.f(float %157), !dbg !36
  br label %__nv_rsqrtf.exit32, !dbg !36

__nv_rsqrtf.exit32:                               ; preds = %171, %173
  %.0.i31 = phi float [ %172, %171 ], [ %174, %173 ], !dbg !36
  %175 = shl i32 %12, 2, !dbg !14
  %176 = and i32 %175, 4092, !dbg !14
  %177 = or disjoint i32 %11, %16, !dbg !12
  %178 = icmp slt i32 %177, %6, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %179 = sext i32 %177 to i64, !dbg !40
  %180 = getelementptr float, ptr addrspace(1) %1, i64 %179, !dbg !40
  %181 = and i32 %12, 1022, !dbg !41
  %182 = icmp eq i32 %181, 0, !dbg !41
  %183 = bitcast float %.0.i to i32, !dbg !41
  %184 = and i1 %182, %178, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %183, ptr addrspace(1) %180, i1 %184) #5, !dbg !41
  %185 = zext nneg i32 %176 to i64, !dbg !42
  %186 = getelementptr half, ptr addrspace(1) %4, i64 %185, !dbg !42
  %187 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %186, i1 true) #5, !dbg !43
  %188 = extractvalue { i32, i32 } %187, 0, !dbg !43
  %189 = bitcast i32 %188 to <2 x half>, !dbg !43
  %190 = extractvalue { i32, i32 } %187, 1, !dbg !43
  %191 = bitcast i32 %190 to <2 x half>, !dbg !43
  %192 = extractelement <2 x half> %189, i64 0, !dbg !43
  %193 = extractelement <2 x half> %189, i64 1, !dbg !43
  %194 = extractelement <2 x half> %191, i64 0, !dbg !43
  %195 = extractelement <2 x half> %191, i64 1, !dbg !43
  %196 = fpext half %192 to float, !dbg !44
  %197 = fpext half %193 to float, !dbg !44
  %198 = fpext half %194 to float, !dbg !44
  %199 = fpext half %195 to float, !dbg !44
  %200 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %44, i1 %18) #5, !dbg !45
  %201 = extractvalue { i32, i32, i32, i32 } %200, 0, !dbg !45
  %202 = bitcast i32 %201 to <2 x half>, !dbg !45
  %203 = extractvalue { i32, i32, i32, i32 } %200, 1, !dbg !45
  %204 = bitcast i32 %203 to <2 x half>, !dbg !45
  %205 = extractvalue { i32, i32, i32, i32 } %200, 2, !dbg !45
  %206 = bitcast i32 %205 to <2 x half>, !dbg !45
  %207 = extractvalue { i32, i32, i32, i32 } %200, 3, !dbg !45
  %208 = bitcast i32 %207 to <2 x half>, !dbg !45
  %209 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %176, !dbg !46
  %210 = bitcast float %196 to i32, !dbg !46
  %211 = bitcast float %197 to i32, !dbg !46
  %212 = bitcast float %198 to i32, !dbg !46
  %213 = bitcast float %199 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %209, i32 %210, i32 %211, i32 %212, i32 %213, i1 true) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %214 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %20, !dbg !46
  %215 = getelementptr inbounds nuw i8, ptr addrspace(3) %214, i32 8, !dbg !46
  %216 = or disjoint i32 %20, 4, !dbg !46
  %217 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %216, !dbg !46
  %218 = getelementptr inbounds nuw i8, ptr addrspace(3) %217, i32 8, !dbg !46
  %219 = getelementptr half, ptr addrspace(1) %5, i64 %23, !dbg !47
  %220 = fpext <2 x half> %202 to <2 x float>, !dbg !48
  %221 = insertelement <2 x float> poison, float %.0.i31, i64 0, !dbg !49
  %222 = shufflevector <2 x float> %221, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %223 = fmul <2 x float> %222, %220, !dbg !49
  %224 = load <2 x float>, ptr addrspace(3) %214, align 16, !dbg !46
  %225 = fmul <2 x float> %224, %223, !dbg !46
  %226 = fptrunc <2 x float> %225 to <2 x half>, !dbg !50
  %227 = fpext <2 x half> %204 to <2 x float>, !dbg !48
  %228 = fmul <2 x float> %222, %227, !dbg !49
  %229 = load <2 x float>, ptr addrspace(3) %215, align 8, !dbg !46
  %230 = fmul <2 x float> %229, %228, !dbg !46
  %231 = fptrunc <2 x float> %230 to <2 x half>, !dbg !50
  %232 = fpext <2 x half> %206 to <2 x float>, !dbg !48
  %233 = fmul <2 x float> %222, %232, !dbg !49
  %234 = load <2 x float>, ptr addrspace(3) %217, align 16, !dbg !46
  %235 = fmul <2 x float> %234, %233, !dbg !46
  %236 = fptrunc <2 x float> %235 to <2 x half>, !dbg !50
  %237 = fpext <2 x half> %208 to <2 x float>, !dbg !48
  %238 = fmul <2 x float> %222, %237, !dbg !49
  %239 = load <2 x float>, ptr addrspace(3) %218, align 8, !dbg !46
  %240 = fmul <2 x float> %239, %238, !dbg !46
  %241 = fptrunc <2 x float> %240 to <2 x half>, !dbg !50
  %242 = bitcast <2 x half> %226 to i32, !dbg !50
  %243 = bitcast <2 x half> %231 to i32, !dbg !50
  %244 = bitcast <2 x half> %236 to i32, !dbg !50
  %245 = bitcast <2 x half> %241 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %242, i32 %243, i32 %244, i32 %245, ptr addrspace(1) %219, i1 %18) #5, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cirveghol7wjrq7zwkkgu3sphruzjhq4ru5zcvmudgaexdo5niag.py", directory: "./local_cache/ir")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 35, column: 41, scope: !6)
!17 = !DILocation(line: 35, column: 34, scope: !6)
!18 = !DILocation(line: 35, column: 51, scope: !6)
!19 = !DILocation(line: 36, column: 34, scope: !6)
!20 = !DILocation(line: 36, column: 51, scope: !6)
!21 = !DILocation(line: 37, column: 38, scope: !6)
!22 = !DILocation(line: 37, column: 55, scope: !6)
!23 = !DILocation(line: 35, column: 113, scope: !6)
!24 = !DILocation(line: 36, column: 113, scope: !6)
!25 = !DILocation(line: 37, column: 117, scope: !6)
!26 = !DILocation(line: 38, column: 22, scope: !6)
!27 = !DILocation(line: 39, column: 22, scope: !6)
!28 = !DILocation(line: 41, column: 22, scope: !6)
!29 = !DILocation(line: 45, column: 55, scope: !6)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !34)
!31 = distinct !DILexicalBlockFile(scope: !33, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!33 = distinct !DILexicalBlockFile(scope: !6, file: !32, discriminator: 0)
!34 = !DILocation(line: 46, column: 25, scope: !6)
!35 = !DILocation(line: 286, column: 36, scope: !33, inlinedAt: !34)
!36 = !DILocation(line: 51, column: 28, scope: !6)
!37 = !DILocation(line: 48, column: 20, scope: !6)
!38 = !DILocation(line: 50, column: 20, scope: !6)
!39 = !DILocation(line: 52, column: 4, scope: !6)
!40 = !DILocation(line: 53, column: 28, scope: !6)
!41 = !DILocation(line: 53, column: 40, scope: !6)
!42 = !DILocation(line: 60, column: 35, scope: !6)
!43 = !DILocation(line: 60, column: 42, scope: !6)
!44 = !DILocation(line: 60, column: 95, scope: !6)
!45 = !DILocation(line: 61, column: 56, scope: !6)
!46 = !DILocation(line: 65, column: 24, scope: !6)
!47 = !DILocation(line: 66, column: 29, scope: !6)
!48 = !DILocation(line: 61, column: 118, scope: !6)
!49 = !DILocation(line: 63, column: 24, scope: !6)
!50 = !DILocation(line: 66, column: 53, scope: !6)
!51 = !DILocation(line: 54, column: 4, scope: !6)
