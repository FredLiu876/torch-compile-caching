; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = icmp slt i32 %9, %5, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 31, !dbg !11
  %13 = lshr i32 %11, 5, !dbg !11
  %14 = shl i32 %11, 2, !dbg !11
  %15 = and i32 %14, 4092, !dbg !11
  %16 = shl i32 %9, 12, !dbg !12
  %17 = or disjoint i32 %15, %16, !dbg !13
  %18 = sext i32 %17 to i64, !dbg !14
  %19 = getelementptr half, ptr addrspace(1) %1, i64 %18, !dbg !14
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %19, i1 %10) #5, !dbg !15
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !15
  %22 = bitcast i32 %21 to <2 x half>, !dbg !15
  %23 = extractvalue { i32, i32 } %20, 1, !dbg !15
  %24 = bitcast i32 %23 to <2 x half>, !dbg !15
  %25 = getelementptr half, ptr addrspace(1) %2, i64 %18, !dbg !16
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %25, i1 %10) #5, !dbg !17
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !17
  %28 = bitcast i32 %27 to <2 x half>, !dbg !17
  %29 = extractvalue { i32, i32 } %26, 1, !dbg !17
  %30 = bitcast i32 %29 to <2 x half>, !dbg !17
  %31 = fpext <2 x half> %22 to <2 x float>, !dbg !18
  %32 = fpext <2 x half> %28 to <2 x float>, !dbg !19
  %33 = fadd <2 x float> %31, %32, !dbg !20
  %34 = fmul <2 x float> %33, %33, !dbg !21
  %35 = fpext <2 x half> %24 to <2 x float>, !dbg !18
  %36 = fpext <2 x half> %30 to <2 x float>, !dbg !19
  %37 = fadd <2 x float> %35, %36, !dbg !20
  %38 = fmul <2 x float> %37, %37, !dbg !21
  %shift = shufflevector <2 x float> %34, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !22
  %39 = fadd <2 x float> %34, %shift, !dbg !22
  %40 = fadd <2 x float> %38, %39, !dbg !22
  %shift13 = shufflevector <2 x float> %38, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !22
  %41 = fadd <2 x float> %shift13, %40, !dbg !22
  %42 = extractelement <2 x float> %41, i64 0, !dbg !22
  %43 = select i1 %10, float %42, float 0.000000e+00, !dbg !22
  %44 = bitcast float %43 to i32, !dbg !27
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 16, i32 31), !dbg !27
  %46 = bitcast i32 %45 to float, !dbg !27
  %47 = fadd float %43, %46, !dbg !22
  %48 = bitcast float %47 to i32, !dbg !27
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 8, i32 31), !dbg !27
  %50 = bitcast i32 %49 to float, !dbg !27
  %51 = fadd float %47, %50, !dbg !22
  %52 = bitcast float %51 to i32, !dbg !27
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 4, i32 31), !dbg !27
  %54 = bitcast i32 %53 to float, !dbg !27
  %55 = fadd float %51, %54, !dbg !22
  %56 = bitcast float %55 to i32, !dbg !27
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 2, i32 31), !dbg !27
  %58 = bitcast i32 %57 to float, !dbg !27
  %59 = fadd float %55, %58, !dbg !22
  %60 = bitcast float %59 to i32, !dbg !27
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 1, i32 31), !dbg !27
  %62 = bitcast i32 %61 to float, !dbg !27
  %63 = fadd float %59, %62, !dbg !22
  %64 = and i32 %13, 31, !dbg !27
  %65 = icmp eq i32 %12, 0, !dbg !27
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i32 %64, !dbg !27
  %67 = bitcast float %63 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 %65) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %68 = icmp slt i32 %11, 32, !dbg !27
  %69 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !27
  %70 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %69, i1 %68) #5, !dbg !27
  %71 = bitcast i32 %70 to float, !dbg !27
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 16, i32 31), !dbg !27
  %73 = bitcast i32 %72 to float, !dbg !27
  %74 = fadd float %71, %73, !dbg !22
  %75 = bitcast float %74 to i32, !dbg !27
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 8, i32 31), !dbg !27
  %77 = bitcast i32 %76 to float, !dbg !27
  %78 = fadd float %74, %77, !dbg !22
  %79 = bitcast float %78 to i32, !dbg !27
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 4, i32 31), !dbg !27
  %81 = bitcast i32 %80 to float, !dbg !27
  %82 = fadd float %78, %81, !dbg !22
  %83 = bitcast float %82 to i32, !dbg !27
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 2, i32 31), !dbg !27
  %85 = bitcast i32 %84 to float, !dbg !27
  %86 = fadd float %82, %85, !dbg !22
  %87 = bitcast float %86 to i32, !dbg !27
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 1, i32 31), !dbg !27
  %89 = bitcast i32 %88 to float, !dbg !27
  %90 = fadd float %86, %89, !dbg !22
  %91 = and i1 %68, %65, !dbg !27
  %92 = bitcast float %90 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %92, i1 %91) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %93 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !27
  %94 = tail call float @llvm.nvvm.div.full(float %93, float 4.096000e+03), !dbg !28
  %95 = fadd float %94, 0x3EE4F8B580000000, !dbg !29
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %.not.i = icmp eq i32 %96, 0, !dbg !30
  br i1 %.not.i, label %99, label %97, !dbg !30

97:                                               ; preds = %8
  %98 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %95), !dbg !30
  br label %__nv_rsqrtf.exit, !dbg !30

99:                                               ; preds = %8
  %100 = tail call float @llvm.nvvm.rsqrt.approx.f(float %95), !dbg !30
  br label %__nv_rsqrtf.exit, !dbg !30

__nv_rsqrtf.exit:                                 ; preds = %97, %99
  %.0.i = phi float [ %98, %97 ], [ %100, %99 ], !dbg !30
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %.not.i10 = icmp eq i32 %104, 0, !dbg !30
  br i1 %.not.i10, label %107, label %105, !dbg !30

105:                                              ; preds = %__nv_rsqrtf.exit
  %106 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %95), !dbg !30
  br label %__nv_rsqrtf.exit12, !dbg !30

107:                                              ; preds = %__nv_rsqrtf.exit
  %108 = tail call float @llvm.nvvm.rsqrt.approx.f(float %95), !dbg !30
  br label %__nv_rsqrtf.exit12, !dbg !30

__nv_rsqrtf.exit12:                               ; preds = %105, %107
  %.0.i11 = phi float [ %106, %105 ], [ %108, %107 ], !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %109 = sext i32 %9 to i64, !dbg !32
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !32
  %111 = and i32 %11, 1023, !dbg !33
  %112 = icmp eq i32 %111, 0, !dbg !33
  %113 = bitcast float %.0.i to i32, !dbg !33
  %114 = and i1 %112, %10, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %113, ptr addrspace(1) %110, i1 %114) #5, !dbg !33
  %115 = zext nneg i32 %15 to i64, !dbg !34
  %116 = getelementptr half, ptr addrspace(1) %3, i64 %115, !dbg !34
  %117 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %116, i1 true) #5, !dbg !35
  %118 = extractvalue { i32, i32 } %117, 0, !dbg !35
  %119 = bitcast i32 %118 to <2 x half>, !dbg !35
  %120 = extractvalue { i32, i32 } %117, 1, !dbg !35
  %121 = bitcast i32 %120 to <2 x half>, !dbg !35
  %122 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %19, i1 %10) #5, !dbg !36
  %123 = extractvalue { i32, i32 } %122, 0, !dbg !36
  %124 = bitcast i32 %123 to <2 x half>, !dbg !36
  %125 = extractvalue { i32, i32 } %122, 1, !dbg !36
  %126 = bitcast i32 %125 to <2 x half>, !dbg !36
  %127 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %25, i1 %10) #5, !dbg !37
  %128 = extractvalue { i32, i32 } %127, 0, !dbg !37
  %129 = bitcast i32 %128 to <2 x half>, !dbg !37
  %130 = extractvalue { i32, i32 } %127, 1, !dbg !37
  %131 = bitcast i32 %130 to <2 x half>, !dbg !37
  %132 = getelementptr half, ptr addrspace(1) %4, i64 %18, !dbg !38
  %133 = fpext <2 x half> %119 to <2 x float>, !dbg !39
  %134 = fpext <2 x half> %124 to <2 x float>, !dbg !40
  %135 = fpext <2 x half> %129 to <2 x float>, !dbg !41
  %136 = fadd <2 x float> %134, %135, !dbg !42
  %137 = insertelement <2 x float> poison, float %.0.i11, i64 0, !dbg !43
  %138 = shufflevector <2 x float> %137, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !43
  %139 = fmul <2 x float> %138, %136, !dbg !43
  %140 = fmul <2 x float> %139, %133, !dbg !44
  %141 = fptrunc <2 x float> %140 to <2 x half>, !dbg !45
  %142 = fpext <2 x half> %121 to <2 x float>, !dbg !39
  %143 = fpext <2 x half> %126 to <2 x float>, !dbg !40
  %144 = fpext <2 x half> %131 to <2 x float>, !dbg !41
  %145 = fadd <2 x float> %143, %144, !dbg !42
  %146 = fmul <2 x float> %138, %145, !dbg !43
  %147 = fmul <2 x float> %146, %142, !dbg !44
  %148 = fptrunc <2 x float> %147 to <2 x half>, !dbg !45
  %149 = bitcast <2 x half> %141 to i32, !dbg !45
  %150 = bitcast <2 x half> %148 to i32, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %149, i32 %150, ptr addrspace(1) %132, i1 %10) #5, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxbiz6a53yuzne7tuzqghtuipdavwtl2jp3relur3ksonmtcg44q.py", directory: "./local_cache/xb")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 21, scope: !6)
!11 = !DILocation(line: 25, column: 37, scope: !6)
!12 = !DILocation(line: 35, column: 46, scope: !6)
!13 = !DILocation(line: 35, column: 41, scope: !6)
!14 = !DILocation(line: 35, column: 34, scope: !6)
!15 = !DILocation(line: 35, column: 51, scope: !6)
!16 = !DILocation(line: 36, column: 34, scope: !6)
!17 = !DILocation(line: 36, column: 51, scope: !6)
!18 = !DILocation(line: 35, column: 112, scope: !6)
!19 = !DILocation(line: 36, column: 112, scope: !6)
!20 = !DILocation(line: 37, column: 22, scope: !6)
!21 = !DILocation(line: 39, column: 22, scope: !6)
!22 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !26)
!23 = distinct !DILexicalBlockFile(scope: !25, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!25 = distinct !DILexicalBlockFile(scope: !6, file: !24, discriminator: 0)
!26 = !DILocation(line: 43, column: 25, scope: !6)
!27 = !DILocation(line: 286, column: 36, scope: !25, inlinedAt: !26)
!28 = !DILocation(line: 45, column: 19, scope: !6)
!29 = !DILocation(line: 47, column: 19, scope: !6)
!30 = !DILocation(line: 48, column: 28, scope: !6)
!31 = !DILocation(line: 49, column: 4, scope: !6)
!32 = !DILocation(line: 50, column: 28, scope: !6)
!33 = !DILocation(line: 50, column: 40, scope: !6)
!34 = !DILocation(line: 57, column: 35, scope: !6)
!35 = !DILocation(line: 57, column: 42, scope: !6)
!36 = !DILocation(line: 58, column: 52, scope: !6)
!37 = !DILocation(line: 59, column: 52, scope: !6)
!38 = !DILocation(line: 65, column: 29, scope: !6)
!39 = !DILocation(line: 57, column: 95, scope: !6)
!40 = !DILocation(line: 58, column: 114, scope: !6)
!41 = !DILocation(line: 59, column: 114, scope: !6)
!42 = !DILocation(line: 60, column: 24, scope: !6)
!43 = !DILocation(line: 62, column: 24, scope: !6)
!44 = !DILocation(line: 64, column: 24, scope: !6)
!45 = !DILocation(line: 65, column: 53, scope: !6)
!46 = !DILocation(line: 51, column: 4, scope: !6)
