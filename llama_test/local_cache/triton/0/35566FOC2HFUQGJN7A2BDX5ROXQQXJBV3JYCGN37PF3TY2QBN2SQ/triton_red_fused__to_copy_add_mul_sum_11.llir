; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_mul_sum_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = shl i32 %10, 3, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = shl i32 %12, 1, !dbg !11
  %14 = and i32 %13, 6, !dbg !11
  %15 = or disjoint i32 %14, %11, !dbg !12
  %16 = lshr i32 %12, 2, !dbg !13
  %17 = and i32 %16, 15, !dbg !13
  %18 = icmp sgt i32 %7, 0, !dbg !14
  br i1 %18, label %.lr.ph, label %._crit_edge, !dbg !14

.lr.ph:                                           ; preds = %9, %.lr.ph
  %19 = phi float [ %70, %.lr.ph ], [ 0.000000e+00, %9 ]
  %20 = phi float [ %71, %.lr.ph ], [ 0.000000e+00, %9 ]
  %21 = phi i32 [ %72, %.lr.ph ], [ 0, %9 ]
  %22 = or disjoint i32 %21, %17, !dbg !15
  %23 = icmp slt i32 %22, %7, !dbg !16
  %24 = shl i32 %22, 12, !dbg !17
  %25 = add i32 %15, %24, !dbg !18
  %26 = sext i32 %25 to i64, !dbg !19
  %27 = getelementptr half, ptr addrspace(1) %0, i64 %26, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %27, i1 %23) #3, !dbg !20
  %29 = bitcast i32 %28 to <2 x half>, !dbg !20
  %30 = extractelement <2 x half> %29, i64 0, !dbg !20
  %31 = extractelement <2 x half> %29, i64 1, !dbg !20
  %32 = fpext half %30 to float, !dbg !21
  %33 = fpext half %31 to float, !dbg !21
  %34 = getelementptr half, ptr addrspace(1) %1, i64 %26, !dbg !22
  %35 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %34, i1 %23) #3, !dbg !23
  %36 = bitcast i32 %35 to <2 x half>, !dbg !23
  %37 = extractelement <2 x half> %36, i64 0, !dbg !23
  %38 = extractelement <2 x half> %36, i64 1, !dbg !23
  %39 = fpext half %37 to float, !dbg !24
  %40 = fpext half %38 to float, !dbg !24
  %41 = getelementptr half, ptr addrspace(1) %2, i64 %26, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %41, i1 %23) #3, !dbg !26
  %43 = bitcast i32 %42 to <2 x half>, !dbg !26
  %44 = extractelement <2 x half> %43, i64 0, !dbg !26
  %45 = extractelement <2 x half> %43, i64 1, !dbg !26
  %46 = fpext half %44 to float, !dbg !27
  %47 = fpext half %45 to float, !dbg !27
  %48 = getelementptr half, ptr addrspace(1) %3, i64 %26, !dbg !28
  %49 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %48, i1 %23) #3, !dbg !29
  %50 = bitcast i32 %49 to <2 x half>, !dbg !29
  %51 = extractelement <2 x half> %50, i64 0, !dbg !29
  %52 = extractelement <2 x half> %50, i64 1, !dbg !29
  %53 = fpext half %51 to float, !dbg !30
  %54 = fpext half %52 to float, !dbg !30
  %55 = sext i32 %22 to i64, !dbg !31
  %56 = getelementptr float, ptr addrspace(1) %4, i64 %55, !dbg !31
  %57 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %56, i1 %23) #3, !dbg !32
  %58 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %56, i1 %23) #3, !dbg !32
  %59 = bitcast i32 %58 to float, !dbg !32
  %60 = fadd float %32, %39, !dbg !33
  %61 = fadd float %33, %40, !dbg !33
  %62 = fadd float %60, %46, !dbg !34
  %63 = fadd float %61, %47, !dbg !34
  %64 = fmul float %53, %59, !dbg !35
  %65 = fmul float %54, %59, !dbg !35
  %66 = fmul float %62, %64, !dbg !36
  %67 = fmul float %63, %65, !dbg !36
  %68 = fadd float %19, %66, !dbg !37
  %69 = fadd float %20, %67, !dbg !37
  %70 = select i1 %23, float %68, float %19, !dbg !38
  %71 = select i1 %23, float %69, float %20, !dbg !38
  %72 = add i32 %21, 16, !dbg !14
  %73 = icmp slt i32 %72, %7, !dbg !14
  br i1 %73, label %.lr.ph, label %._crit_edge, !dbg !14

._crit_edge:                                      ; preds = %.lr.ph, %9
  %74 = phi float [ 0.000000e+00, %9 ], [ %70, %.lr.ph ]
  %75 = phi float [ 0.000000e+00, %9 ], [ %71, %.lr.ph ]
  %76 = lshr i32 %12, 5, !dbg !13
  %77 = and i32 %12, 28, !dbg !11
  %78 = and i32 %12, 7, !dbg !11
  %79 = or disjoint i32 %11, %78, !dbg !12
  %80 = bitcast float %74 to i32, !dbg !39
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 16, i32 31), !dbg !39
  %82 = bitcast i32 %81 to float, !dbg !39
  %83 = fadd float %74, %82, !dbg !43
  %84 = bitcast float %83 to i32, !dbg !39
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 8, i32 31), !dbg !39
  %86 = bitcast i32 %85 to float, !dbg !39
  %87 = fadd float %83, %86, !dbg !43
  %88 = bitcast float %87 to i32, !dbg !39
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 4, i32 31), !dbg !39
  %90 = bitcast i32 %89 to float, !dbg !39
  %91 = fadd float %87, %90, !dbg !43
  %92 = bitcast float %75 to i32, !dbg !39
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 16, i32 31), !dbg !39
  %94 = bitcast i32 %93 to float, !dbg !39
  %95 = fadd float %75, %94, !dbg !43
  %96 = bitcast float %95 to i32, !dbg !39
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 8, i32 31), !dbg !39
  %98 = bitcast i32 %97 to float, !dbg !39
  %99 = fadd float %95, %98, !dbg !43
  %100 = bitcast float %99 to i32, !dbg !39
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 4, i32 31), !dbg !39
  %102 = bitcast i32 %101 to float, !dbg !39
  %103 = fadd float %99, %102, !dbg !43
  %104 = and i32 %76, 1, !dbg !39
  %105 = icmp eq i32 %77, 0, !dbg !39
  %106 = shl nuw nsw i32 %14, 1, !dbg !39
  %107 = or disjoint i32 %106, %104, !dbg !39
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %107, !dbg !39
  %109 = bitcast float %91 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 %105) #3, !dbg !39
  %110 = or disjoint i32 %106, 2, !dbg !39
  %111 = or disjoint i32 %110, %104, !dbg !39
  %112 = getelementptr float, ptr addrspace(3) @global_smem, i32 %111, !dbg !39
  %113 = bitcast float %103 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 %105) #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %114 = icmp slt i32 %12, 16, !dbg !39
  %115 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !39
  %116 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %115, i1 %114) #3, !dbg !39
  %117 = bitcast i32 %116 to float, !dbg !39
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 1, i32 31), !dbg !39
  %119 = bitcast i32 %118 to float, !dbg !39
  %120 = fadd float %117, %119, !dbg !43
  %121 = and i32 %12, 1, !dbg !39
  %122 = icmp eq i32 %121, 0, !dbg !39
  %123 = and i1 %114, %122, !dbg !39
  %124 = bitcast float %120 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %124, i1 %123) #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %125 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !39
  %126 = load i32, ptr addrspace(3) %125, align 16, !dbg !39
  %127 = getelementptr float, ptr addrspace(3) @global_smem, i32 %110, !dbg !39
  %128 = load i32, ptr addrspace(3) %127, align 8, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %129 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %14, !dbg !45
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %129, i32 %126, i32 %128, i1 true) #3, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %130 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %78, !dbg !45
  %131 = load float, ptr addrspace(3) %130, align 4, !dbg !45
  %132 = sext i32 %79 to i64, !dbg !46
  %133 = getelementptr half, ptr addrspace(1) %5, i64 %132, !dbg !46
  %134 = fptrunc float %131 to half, !dbg !45
  %135 = and i32 %12, 56, !dbg !45
  %136 = icmp eq i32 %135, 0, !dbg !45
  %137 = bitcast half %134 to i16, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %137, ptr addrspace(1) %133, i1 %136) #3, !dbg !45
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cska3fwz53boidgxgnhdyzwobijaqtfl73qndyo6jscov76o2orn.py", directory: "./local_cache/sk")
!4 = !{ptr @triton_red_fused__to_copy_add_mul_sum_11, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mul_sum_11", linkageName: "triton_red_fused__to_copy_add_mul_sum_11", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 37, scope: !6)
!14 = !DILocation(line: 29, column: 40, scope: !6)
!15 = !DILocation(line: 30, column: 31, scope: !6)
!16 = !DILocation(line: 31, column: 29, scope: !6)
!17 = !DILocation(line: 35, column: 44, scope: !6)
!18 = !DILocation(line: 35, column: 39, scope: !6)
!19 = !DILocation(line: 35, column: 34, scope: !6)
!20 = !DILocation(line: 35, column: 51, scope: !6)
!21 = !DILocation(line: 35, column: 105, scope: !6)
!22 = !DILocation(line: 36, column: 34, scope: !6)
!23 = !DILocation(line: 36, column: 51, scope: !6)
!24 = !DILocation(line: 36, column: 105, scope: !6)
!25 = !DILocation(line: 37, column: 34, scope: !6)
!26 = !DILocation(line: 37, column: 51, scope: !6)
!27 = !DILocation(line: 37, column: 105, scope: !6)
!28 = !DILocation(line: 38, column: 34, scope: !6)
!29 = !DILocation(line: 38, column: 51, scope: !6)
!30 = !DILocation(line: 38, column: 105, scope: !6)
!31 = !DILocation(line: 39, column: 34, scope: !6)
!32 = !DILocation(line: 39, column: 41, scope: !6)
!33 = !DILocation(line: 40, column: 22, scope: !6)
!34 = !DILocation(line: 41, column: 22, scope: !6)
!35 = !DILocation(line: 43, column: 22, scope: !6)
!36 = !DILocation(line: 45, column: 23, scope: !6)
!37 = !DILocation(line: 47, column: 25, scope: !6)
!38 = !DILocation(line: 48, column: 42, scope: !6)
!39 = !DILocation(line: 286, column: 36, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !6, file: !41, discriminator: 0)
!41 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!42 = !DILocation(line: 49, column: 27, scope: !6)
!43 = !DILocation(line: 256, column: 15, scope: !44, inlinedAt: !42)
!44 = distinct !DILexicalBlockFile(scope: !40, file: !41, discriminator: 0)
!45 = !DILocation(line: 50, column: 37, scope: !6)
!46 = !DILocation(line: 50, column: 25, scope: !6)
!47 = !DILocation(line: 50, column: 4, scope: !6)
