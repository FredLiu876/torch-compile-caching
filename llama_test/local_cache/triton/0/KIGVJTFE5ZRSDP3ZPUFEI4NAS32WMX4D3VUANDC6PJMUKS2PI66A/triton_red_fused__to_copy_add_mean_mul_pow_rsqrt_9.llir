; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 1, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 256, !dbg !11
  %.lobit = lshr exact i32 %12, 8, !dbg !11
  %13 = and i32 %11, 31, !dbg !11
  %14 = or disjoint i32 %.lobit, %10, !dbg !12
  %15 = icmp slt i32 %14, %5, !dbg !13
  %16 = shl i32 %11, 3, !dbg !14
  %17 = and i32 %16, 2040, !dbg !14
  %18 = shl i32 %14, 12, !dbg !15
  %19 = or disjoint i32 %18, %17
  %20 = sext i32 %19 to i64, !dbg !16
  %21 = getelementptr half, ptr addrspace(1) %2, i64 %20, !dbg !16
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %21, i1 %15) #5, !dbg !17
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !17
  %24 = bitcast i32 %23 to <2 x half>, !dbg !17
  %25 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !17
  %26 = bitcast i32 %25 to <2 x half>, !dbg !17
  %27 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !17
  %28 = bitcast i32 %27 to <2 x half>, !dbg !17
  %29 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !17
  %30 = bitcast i32 %29 to <2 x half>, !dbg !17
  %31 = getelementptr half, ptr addrspace(1) %0, i64 %20, !dbg !18
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %31, i1 %15) #5, !dbg !19
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !19
  %34 = bitcast i32 %33 to <2 x half>, !dbg !19
  %35 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !19
  %36 = bitcast i32 %35 to <2 x half>, !dbg !19
  %37 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !19
  %38 = bitcast i32 %37 to <2 x half>, !dbg !19
  %39 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !19
  %40 = bitcast i32 %39 to <2 x half>, !dbg !19
  %41 = fpext <2 x half> %24 to <2 x float>, !dbg !20
  %42 = fpext <2 x half> %34 to <2 x float>, !dbg !21
  %43 = fadd <2 x float> %41, %42, !dbg !22
  %44 = fmul <2 x float> %43, %43, !dbg !23
  %45 = fmul <2 x float> %43, %43, !dbg !23
  %46 = fptrunc <2 x float> %43 to <2 x half>, !dbg !24
  %47 = fpext <2 x half> %26 to <2 x float>, !dbg !20
  %48 = fpext <2 x half> %36 to <2 x float>, !dbg !21
  %49 = fadd <2 x float> %47, %48, !dbg !22
  %50 = fptrunc <2 x float> %49 to <2 x half>, !dbg !24
  %51 = fpext <2 x half> %28 to <2 x float>, !dbg !20
  %52 = fpext <2 x half> %38 to <2 x float>, !dbg !21
  %53 = fadd <2 x float> %51, %52, !dbg !22
  %54 = fptrunc <2 x float> %53 to <2 x half>, !dbg !24
  %55 = fpext <2 x half> %30 to <2 x float>, !dbg !20
  %56 = fpext <2 x half> %40 to <2 x float>, !dbg !21
  %57 = fadd <2 x float> %55, %56, !dbg !22
  %58 = fptrunc <2 x float> %57 to <2 x half>, !dbg !24
  %59 = bitcast <2 x half> %46 to i32, !dbg !24
  %60 = bitcast <2 x half> %50 to i32, !dbg !24
  %61 = bitcast <2 x half> %54 to i32, !dbg !24
  %62 = bitcast <2 x half> %58 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %59, i32 %60, i32 %61, i32 %62, ptr addrspace(1) %31, i1 %15) #5, !dbg !24
  %63 = or disjoint i32 %19, 2048, !dbg !25
  %64 = sext i32 %63 to i64, !dbg !16
  %65 = getelementptr half, ptr addrspace(1) %2, i64 %64, !dbg !16
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %65, i1 %15) #5, !dbg !17
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !17
  %68 = bitcast i32 %67 to <2 x half>, !dbg !17
  %69 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !17
  %70 = bitcast i32 %69 to <2 x half>, !dbg !17
  %71 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !17
  %72 = bitcast i32 %71 to <2 x half>, !dbg !17
  %73 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !17
  %74 = bitcast i32 %73 to <2 x half>, !dbg !17
  %75 = getelementptr half, ptr addrspace(1) %0, i64 %64, !dbg !18
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %75, i1 %15) #5, !dbg !19
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !19
  %78 = bitcast i32 %77 to <2 x half>, !dbg !19
  %79 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !19
  %80 = bitcast i32 %79 to <2 x half>, !dbg !19
  %81 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !19
  %82 = bitcast i32 %81 to <2 x half>, !dbg !19
  %83 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !19
  %84 = bitcast i32 %83 to <2 x half>, !dbg !19
  %85 = fpext <2 x half> %68 to <2 x float>, !dbg !20
  %86 = fpext <2 x half> %78 to <2 x float>, !dbg !21
  %87 = fadd <2 x float> %85, %86, !dbg !22
  %88 = fmul <2 x float> %87, %87, !dbg !23
  %89 = fmul <2 x float> %87, %87, !dbg !23
  %90 = fadd <2 x float> %44, %88, !dbg !26
  %91 = fadd <2 x float> %45, %89, !dbg !26
  %92 = fptrunc <2 x float> %87 to <2 x half>, !dbg !24
  %93 = fpext <2 x half> %70 to <2 x float>, !dbg !20
  %94 = fpext <2 x half> %80 to <2 x float>, !dbg !21
  %95 = fadd <2 x float> %93, %94, !dbg !22
  %96 = fmul <2 x float> %49, %49, !dbg !23
  %97 = fmul <2 x float> %95, %95, !dbg !23
  %98 = fadd <2 x float> %96, %97, !dbg !26
  %99 = fptrunc <2 x float> %95 to <2 x half>, !dbg !24
  %100 = fpext <2 x half> %72 to <2 x float>, !dbg !20
  %101 = fpext <2 x half> %82 to <2 x float>, !dbg !21
  %102 = fadd <2 x float> %100, %101, !dbg !22
  %103 = fmul <2 x float> %53, %53, !dbg !23
  %104 = fmul <2 x float> %102, %102, !dbg !23
  %105 = fadd <2 x float> %103, %104, !dbg !26
  %106 = fptrunc <2 x float> %102 to <2 x half>, !dbg !24
  %107 = fpext <2 x half> %74 to <2 x float>, !dbg !20
  %108 = fpext <2 x half> %84 to <2 x float>, !dbg !21
  %109 = fadd <2 x float> %107, %108, !dbg !22
  %110 = fmul <2 x float> %57, %57, !dbg !23
  %111 = fmul <2 x float> %109, %109, !dbg !23
  %112 = fadd <2 x float> %110, %111, !dbg !26
  %113 = fptrunc <2 x float> %109 to <2 x half>, !dbg !24
  %114 = bitcast <2 x half> %92 to i32, !dbg !24
  %115 = bitcast <2 x half> %99 to i32, !dbg !24
  %116 = bitcast <2 x half> %106 to i32, !dbg !24
  %117 = bitcast <2 x half> %113 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %114, i32 %115, i32 %116, i32 %117, ptr addrspace(1) %75, i1 %15) #5, !dbg !24
  %118 = lshr i32 %11, 5, !dbg !11
  %119 = and i32 %11, 1, !dbg !11
  %shift = shufflevector <2 x float> %91, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %120 = fadd <2 x float> %90, %shift, !dbg !27
  %121 = fadd <2 x float> %98, %120, !dbg !27
  %shift41 = shufflevector <2 x float> %98, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %122 = fadd <2 x float> %shift41, %121, !dbg !27
  %123 = fadd <2 x float> %105, %122, !dbg !27
  %shift42 = shufflevector <2 x float> %105, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %124 = fadd <2 x float> %shift42, %123, !dbg !27
  %125 = fadd <2 x float> %112, %124, !dbg !27
  %shift43 = shufflevector <2 x float> %112, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %126 = fadd <2 x float> %shift43, %125, !dbg !27
  %127 = extractelement <2 x float> %126, i64 0, !dbg !27
  %128 = select i1 %15, float %127, float 0.000000e+00, !dbg !27
  %129 = bitcast float %128 to i32, !dbg !32
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 16, i32 31), !dbg !32
  %131 = bitcast i32 %130 to float, !dbg !32
  %132 = fadd float %128, %131, !dbg !27
  %133 = bitcast float %132 to i32, !dbg !32
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 8, i32 31), !dbg !32
  %135 = bitcast i32 %134 to float, !dbg !32
  %136 = fadd float %132, %135, !dbg !27
  %137 = bitcast float %136 to i32, !dbg !32
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 4, i32 31), !dbg !32
  %139 = bitcast i32 %138 to float, !dbg !32
  %140 = fadd float %136, %139, !dbg !27
  %141 = bitcast float %140 to i32, !dbg !32
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 2, i32 31), !dbg !32
  %143 = bitcast i32 %142 to float, !dbg !32
  %144 = fadd float %140, %143, !dbg !27
  %145 = bitcast float %144 to i32, !dbg !32
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 1, i32 31), !dbg !32
  %147 = bitcast i32 %146 to float, !dbg !32
  %148 = fadd float %144, %147, !dbg !27
  %149 = and i32 %118, 7, !dbg !32
  %150 = icmp eq i32 %13, 0, !dbg !32
  %151 = lshr exact i32 %12, 5, !dbg !32
  %152 = or disjoint i32 %151, %149, !dbg !32
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i32 %152, !dbg !32
  %154 = bitcast float %148 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 %150) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %155 = icmp slt i32 %11, 16, !dbg !32
  %156 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !32
  %157 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %156, i1 %155) #5, !dbg !32
  %158 = bitcast i32 %157 to float, !dbg !32
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 4, i32 31), !dbg !32
  %160 = bitcast i32 %159 to float, !dbg !32
  %161 = fadd float %158, %160, !dbg !27
  %162 = bitcast float %161 to i32, !dbg !32
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 2, i32 31), !dbg !32
  %164 = bitcast i32 %163 to float, !dbg !32
  %165 = fadd float %161, %164, !dbg !27
  %166 = bitcast float %165 to i32, !dbg !32
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 1, i32 31), !dbg !32
  %168 = bitcast i32 %167 to float, !dbg !32
  %169 = fadd float %165, %168, !dbg !27
  %170 = and i32 %11, 7, !dbg !32
  %171 = icmp eq i32 %170, 0, !dbg !32
  %172 = and i1 %155, %171, !dbg !32
  %173 = bitcast float %169 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %173, i1 %172) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %174 = getelementptr float, ptr addrspace(3) @global_smem, i32 %151, !dbg !32
  %175 = load float, ptr addrspace(3) %174, align 16, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %176 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !33
  %177 = bitcast float %175 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %177, i1 true) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %178 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %119, !dbg !33
  %179 = load float, ptr addrspace(3) %178, align 4, !dbg !33
  %180 = tail call float @llvm.nvvm.div.full(float %179, float 4.096000e+03), !dbg !34
  %181 = tail call float @llvm.nvvm.div.full(float %175, float 4.096000e+03), !dbg !34
  %182 = fadd float %180, 0x3EE4F8B580000000, !dbg !35
  %183 = fadd float %181, 0x3EE4F8B580000000, !dbg !35
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not.i = icmp eq i32 %184, 0, !dbg !33
  br i1 %.not.i, label %187, label %185, !dbg !33

185:                                              ; preds = %8
  %186 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %182), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

187:                                              ; preds = %8
  %188 = tail call float @llvm.nvvm.rsqrt.approx.f(float %182), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

__nv_rsqrtf.exit:                                 ; preds = %185, %187
  %.0.i = phi float [ %186, %185 ], [ %188, %187 ], !dbg !33
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not.i31 = icmp eq i32 %196, 0, !dbg !33
  br i1 %.not.i31, label %199, label %197, !dbg !33

197:                                              ; preds = %__nv_rsqrtf.exit
  %198 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %183), !dbg !33
  br label %__nv_rsqrtf.exit33, !dbg !33

199:                                              ; preds = %__nv_rsqrtf.exit
  %200 = tail call float @llvm.nvvm.rsqrt.approx.f(float %183), !dbg !33
  br label %__nv_rsqrtf.exit33, !dbg !33

__nv_rsqrtf.exit33:                               ; preds = %197, %199
  %.0.i32 = phi float [ %198, %197 ], [ %200, %199 ], !dbg !33
  %201 = shl i32 %11, 2, !dbg !14
  %202 = and i32 %201, 2044, !dbg !14
  %203 = or disjoint i32 %10, %119, !dbg !12
  %204 = icmp slt i32 %203, %5, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %205 = sext i32 %203 to i64, !dbg !37
  %206 = getelementptr float, ptr addrspace(1) %1, i64 %205, !dbg !37
  %207 = and i32 %11, 510, !dbg !38
  %208 = icmp eq i32 %207, 0, !dbg !38
  %209 = bitcast float %.0.i to i32, !dbg !38
  %210 = and i1 %208, %204, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %209, ptr addrspace(1) %206, i1 %210) #5, !dbg !38
  %211 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %202
  %212 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %17
  %213 = or disjoint i32 %17, 4
  %214 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %213
  %215 = zext nneg i32 %202 to i64, !dbg !39
  %216 = getelementptr half, ptr addrspace(1) %3, i64 %215, !dbg !40
  %217 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %216, i1 true) #5, !dbg !41
  %218 = extractvalue { i32, i32 } %217, 0, !dbg !41
  %219 = bitcast i32 %218 to <2 x half>, !dbg !41
  %220 = extractvalue { i32, i32 } %217, 1, !dbg !41
  %221 = bitcast i32 %220 to <2 x half>, !dbg !41
  %222 = extractelement <2 x half> %219, i64 0, !dbg !41
  %223 = extractelement <2 x half> %219, i64 1, !dbg !41
  %224 = extractelement <2 x half> %221, i64 0, !dbg !41
  %225 = extractelement <2 x half> %221, i64 1, !dbg !41
  %226 = fpext half %222 to float, !dbg !42
  %227 = fpext half %223 to float, !dbg !42
  %228 = fpext half %224 to float, !dbg !42
  %229 = fpext half %225 to float, !dbg !42
  %230 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %31, i1 %15) #5, !dbg !43
  %231 = extractvalue { i32, i32, i32, i32 } %230, 0, !dbg !43
  %232 = bitcast i32 %231 to <2 x half>, !dbg !43
  %233 = extractvalue { i32, i32, i32, i32 } %230, 1, !dbg !43
  %234 = bitcast i32 %233 to <2 x half>, !dbg !43
  %235 = extractvalue { i32, i32, i32, i32 } %230, 2, !dbg !43
  %236 = bitcast i32 %235 to <2 x half>, !dbg !43
  %237 = extractvalue { i32, i32, i32, i32 } %230, 3, !dbg !43
  %238 = bitcast i32 %237 to <2 x half>, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %239 = bitcast float %226 to i32, !dbg !44
  %240 = bitcast float %227 to i32, !dbg !44
  %241 = bitcast float %228 to i32, !dbg !44
  %242 = bitcast float %229 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %211, i32 %239, i32 %240, i32 %241, i32 %242, i1 true) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %243 = getelementptr inbounds nuw i8, ptr addrspace(3) %212, i32 8, !dbg !44
  %244 = getelementptr inbounds nuw i8, ptr addrspace(3) %214, i32 8, !dbg !44
  %245 = getelementptr half, ptr addrspace(1) %4, i64 %20, !dbg !45
  %246 = fpext <2 x half> %232 to <2 x float>, !dbg !46
  %247 = insertelement <2 x float> poison, float %.0.i32, i64 0, !dbg !47
  %248 = shufflevector <2 x float> %247, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !47
  %249 = fmul <2 x float> %248, %246, !dbg !47
  %250 = load <2 x float>, ptr addrspace(3) %212, align 16, !dbg !44
  %251 = fmul <2 x float> %250, %249, !dbg !44
  %252 = fptrunc <2 x float> %251 to <2 x half>, !dbg !48
  %253 = fpext <2 x half> %234 to <2 x float>, !dbg !46
  %254 = fmul <2 x float> %248, %253, !dbg !47
  %255 = load <2 x float>, ptr addrspace(3) %243, align 8, !dbg !44
  %256 = fmul <2 x float> %255, %254, !dbg !44
  %257 = fptrunc <2 x float> %256 to <2 x half>, !dbg !48
  %258 = fpext <2 x half> %236 to <2 x float>, !dbg !46
  %259 = fmul <2 x float> %248, %258, !dbg !47
  %260 = load <2 x float>, ptr addrspace(3) %214, align 16, !dbg !44
  %261 = fmul <2 x float> %259, %260, !dbg !44
  %262 = fptrunc <2 x float> %261 to <2 x half>, !dbg !48
  %263 = fpext <2 x half> %238 to <2 x float>, !dbg !46
  %264 = fmul <2 x float> %248, %263, !dbg !47
  %265 = load <2 x float>, ptr addrspace(3) %244, align 8, !dbg !44
  %266 = fmul <2 x float> %264, %265, !dbg !44
  %267 = fptrunc <2 x float> %266 to <2 x half>, !dbg !48
  %268 = bitcast <2 x half> %252 to i32, !dbg !48
  %269 = bitcast <2 x half> %257 to i32, !dbg !48
  %270 = bitcast <2 x half> %262 to i32, !dbg !48
  %271 = bitcast <2 x half> %267 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %268, i32 %269, i32 %270, i32 %271, ptr addrspace(1) %245, i1 %15) #5, !dbg !48
  %272 = or disjoint i64 %215, 2048, !dbg !49
  %273 = getelementptr half, ptr addrspace(1) %3, i64 %272, !dbg !40
  %274 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %273, i1 true) #5, !dbg !41
  %275 = extractvalue { i32, i32 } %274, 0, !dbg !41
  %276 = bitcast i32 %275 to <2 x half>, !dbg !41
  %277 = extractvalue { i32, i32 } %274, 1, !dbg !41
  %278 = bitcast i32 %277 to <2 x half>, !dbg !41
  %279 = extractelement <2 x half> %276, i64 0, !dbg !41
  %280 = extractelement <2 x half> %276, i64 1, !dbg !41
  %281 = extractelement <2 x half> %278, i64 0, !dbg !41
  %282 = extractelement <2 x half> %278, i64 1, !dbg !41
  %283 = fpext half %279 to float, !dbg !42
  %284 = fpext half %280 to float, !dbg !42
  %285 = fpext half %281 to float, !dbg !42
  %286 = fpext half %282 to float, !dbg !42
  %287 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %75, i1 %15) #5, !dbg !43
  %288 = extractvalue { i32, i32, i32, i32 } %287, 0, !dbg !43
  %289 = bitcast i32 %288 to <2 x half>, !dbg !43
  %290 = extractvalue { i32, i32, i32, i32 } %287, 1, !dbg !43
  %291 = bitcast i32 %290 to <2 x half>, !dbg !43
  %292 = extractvalue { i32, i32, i32, i32 } %287, 2, !dbg !43
  %293 = bitcast i32 %292 to <2 x half>, !dbg !43
  %294 = extractvalue { i32, i32, i32, i32 } %287, 3, !dbg !43
  %295 = bitcast i32 %294 to <2 x half>, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %296 = bitcast float %283 to i32, !dbg !44
  %297 = bitcast float %284 to i32, !dbg !44
  %298 = bitcast float %285 to i32, !dbg !44
  %299 = bitcast float %286 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %211, i32 %296, i32 %297, i32 %298, i32 %299, i1 true) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %300 = getelementptr half, ptr addrspace(1) %4, i64 %64, !dbg !45
  %301 = fpext <2 x half> %289 to <2 x float>, !dbg !46
  %302 = fmul <2 x float> %248, %301, !dbg !47
  %303 = load <2 x float>, ptr addrspace(3) %212, align 16, !dbg !44
  %304 = fmul <2 x float> %303, %302, !dbg !44
  %305 = fptrunc <2 x float> %304 to <2 x half>, !dbg !48
  %306 = fpext <2 x half> %291 to <2 x float>, !dbg !46
  %307 = fmul <2 x float> %248, %306, !dbg !47
  %308 = load <2 x float>, ptr addrspace(3) %243, align 8, !dbg !44
  %309 = fmul <2 x float> %308, %307, !dbg !44
  %310 = fptrunc <2 x float> %309 to <2 x half>, !dbg !48
  %311 = fpext <2 x half> %293 to <2 x float>, !dbg !46
  %312 = fmul <2 x float> %248, %311, !dbg !47
  %313 = load <2 x float>, ptr addrspace(3) %214, align 16, !dbg !44
  %314 = fmul <2 x float> %312, %313, !dbg !44
  %315 = fptrunc <2 x float> %314 to <2 x half>, !dbg !48
  %316 = fpext <2 x half> %295 to <2 x float>, !dbg !46
  %317 = fmul <2 x float> %248, %316, !dbg !47
  %318 = load <2 x float>, ptr addrspace(3) %244, align 8, !dbg !44
  %319 = fmul <2 x float> %317, %318, !dbg !44
  %320 = fptrunc <2 x float> %319 to <2 x half>, !dbg !48
  %321 = bitcast <2 x half> %305 to i32, !dbg !48
  %322 = bitcast <2 x half> %310 to i32, !dbg !48
  %323 = bitcast <2 x half> %315 to i32, !dbg !48
  %324 = bitcast <2 x half> %320 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %321, i32 %322, i32 %323, i32 %324, ptr addrspace(1) %300, i1 %15) #5, !dbg !48
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccpmvf6lgmnpforavvbrvwi4t5zoiosfy62jj2u37b4g5lsm5yib.py", directory: "./local_cache/cp")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 35, column: 34, scope: !6)
!17 = !DILocation(line: 35, column: 51, scope: !6)
!18 = !DILocation(line: 36, column: 38, scope: !6)
!19 = !DILocation(line: 36, column: 55, scope: !6)
!20 = !DILocation(line: 35, column: 113, scope: !6)
!21 = !DILocation(line: 36, column: 117, scope: !6)
!22 = !DILocation(line: 37, column: 22, scope: !6)
!23 = !DILocation(line: 39, column: 22, scope: !6)
!24 = !DILocation(line: 43, column: 55, scope: !6)
!25 = !DILocation(line: 35, column: 41, scope: !6)
!26 = !DILocation(line: 41, column: 23, scope: !6)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!30 = distinct !DILexicalBlockFile(scope: !6, file: !29, discriminator: 0)
!31 = !DILocation(line: 44, column: 25, scope: !6)
!32 = !DILocation(line: 286, column: 36, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 49, column: 28, scope: !6)
!34 = !DILocation(line: 46, column: 19, scope: !6)
!35 = !DILocation(line: 48, column: 19, scope: !6)
!36 = !DILocation(line: 50, column: 4, scope: !6)
!37 = !DILocation(line: 51, column: 28, scope: !6)
!38 = !DILocation(line: 51, column: 40, scope: !6)
!39 = !DILocation(line: 52, column: 40, scope: !6)
!40 = !DILocation(line: 58, column: 35, scope: !6)
!41 = !DILocation(line: 58, column: 42, scope: !6)
!42 = !DILocation(line: 58, column: 95, scope: !6)
!43 = !DILocation(line: 59, column: 56, scope: !6)
!44 = !DILocation(line: 63, column: 24, scope: !6)
!45 = !DILocation(line: 64, column: 29, scope: !6)
!46 = !DILocation(line: 59, column: 118, scope: !6)
!47 = !DILocation(line: 61, column: 24, scope: !6)
!48 = !DILocation(line: 64, column: 53, scope: !6)
!49 = !DILocation(line: 53, column: 31, scope: !6)
!50 = !DILocation(line: 52, column: 4, scope: !6)
