; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 1, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 256, !dbg !11
  %.lobit = lshr exact i32 %12, 8, !dbg !11
  %13 = and i32 %11, 31, !dbg !11
  %14 = or disjoint i32 %.lobit, %10, !dbg !12
  %15 = icmp slt i32 %14, %5, !dbg !13
  %16 = shl i32 %11, 3, !dbg !14
  %17 = and i32 %16, 2040, !dbg !14
  %18 = shl i32 %14, 12, !dbg !15
  %19 = or disjoint i32 %18, %17
  %20 = sext i32 %19 to i64, !dbg !16
  %21 = getelementptr half, ptr addrspace(1) %1, i64 %20, !dbg !16
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %21, i1 %15) #5, !dbg !17
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !17
  %24 = bitcast i32 %23 to <2 x half>, !dbg !17
  %25 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !17
  %26 = bitcast i32 %25 to <2 x half>, !dbg !17
  %27 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !17
  %28 = bitcast i32 %27 to <2 x half>, !dbg !17
  %29 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !17
  %30 = bitcast i32 %29 to <2 x half>, !dbg !17
  %31 = extractelement <2 x half> %24, i64 0, !dbg !17
  %32 = extractelement <2 x half> %24, i64 1, !dbg !17
  %33 = fpext half %31 to float, !dbg !18
  %34 = fpext half %32 to float, !dbg !18
  %35 = getelementptr half, ptr addrspace(1) %2, i64 %20, !dbg !19
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %35, i1 %15) #5, !dbg !20
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !20
  %38 = bitcast i32 %37 to <2 x half>, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !20
  %40 = bitcast i32 %39 to <2 x half>, !dbg !20
  %41 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !20
  %42 = bitcast i32 %41 to <2 x half>, !dbg !20
  %43 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !20
  %44 = bitcast i32 %43 to <2 x half>, !dbg !20
  %45 = extractelement <2 x half> %38, i64 0, !dbg !20
  %46 = extractelement <2 x half> %38, i64 1, !dbg !20
  %47 = fpext half %45 to float, !dbg !21
  %48 = fpext half %46 to float, !dbg !21
  %49 = fadd float %33, %47, !dbg !22
  %50 = fadd float %34, %48, !dbg !22
  %51 = fmul float %49, %49, !dbg !23
  %52 = fmul float %50, %50, !dbg !23
  %53 = or disjoint i32 %19, 2048, !dbg !24
  %54 = sext i32 %53 to i64, !dbg !16
  %55 = getelementptr half, ptr addrspace(1) %1, i64 %54, !dbg !16
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %55, i1 %15) #5, !dbg !17
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !17
  %58 = bitcast i32 %57 to <2 x half>, !dbg !17
  %59 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !17
  %60 = bitcast i32 %59 to <2 x half>, !dbg !17
  %61 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !17
  %62 = bitcast i32 %61 to <2 x half>, !dbg !17
  %63 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !17
  %64 = bitcast i32 %63 to <2 x half>, !dbg !17
  %65 = extractelement <2 x half> %58, i64 0, !dbg !17
  %66 = extractelement <2 x half> %58, i64 1, !dbg !17
  %67 = fpext half %65 to float, !dbg !18
  %68 = fpext half %66 to float, !dbg !18
  %69 = getelementptr half, ptr addrspace(1) %2, i64 %54, !dbg !19
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %69, i1 %15) #5, !dbg !20
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !20
  %72 = bitcast i32 %71 to <2 x half>, !dbg !20
  %73 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !20
  %74 = bitcast i32 %73 to <2 x half>, !dbg !20
  %75 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !20
  %76 = bitcast i32 %75 to <2 x half>, !dbg !20
  %77 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !20
  %78 = bitcast i32 %77 to <2 x half>, !dbg !20
  %79 = extractelement <2 x half> %72, i64 0, !dbg !20
  %80 = extractelement <2 x half> %72, i64 1, !dbg !20
  %81 = fpext half %79 to float, !dbg !21
  %82 = fpext half %80 to float, !dbg !21
  %83 = fadd float %67, %81, !dbg !22
  %84 = fadd float %68, %82, !dbg !22
  %85 = fmul float %83, %83, !dbg !23
  %86 = fmul float %84, %84, !dbg !23
  %87 = fadd float %51, %85, !dbg !25
  %88 = fadd float %52, %86, !dbg !25
  %89 = fpext <2 x half> %26 to <2 x float>, !dbg !18
  %90 = fpext <2 x half> %40 to <2 x float>, !dbg !21
  %91 = fadd <2 x float> %89, %90, !dbg !22
  %92 = fmul <2 x float> %91, %91, !dbg !23
  %93 = fpext <2 x half> %60 to <2 x float>, !dbg !18
  %94 = fpext <2 x half> %74 to <2 x float>, !dbg !21
  %95 = fadd <2 x float> %93, %94, !dbg !22
  %96 = fmul <2 x float> %95, %95, !dbg !23
  %97 = fadd <2 x float> %92, %96, !dbg !25
  %98 = fpext <2 x half> %28 to <2 x float>, !dbg !18
  %99 = fpext <2 x half> %42 to <2 x float>, !dbg !21
  %100 = fadd <2 x float> %98, %99, !dbg !22
  %101 = fmul <2 x float> %100, %100, !dbg !23
  %102 = fpext <2 x half> %62 to <2 x float>, !dbg !18
  %103 = fpext <2 x half> %76 to <2 x float>, !dbg !21
  %104 = fadd <2 x float> %102, %103, !dbg !22
  %105 = fmul <2 x float> %104, %104, !dbg !23
  %106 = fadd <2 x float> %101, %105, !dbg !25
  %107 = fpext <2 x half> %30 to <2 x float>, !dbg !18
  %108 = fpext <2 x half> %44 to <2 x float>, !dbg !21
  %109 = fadd <2 x float> %107, %108, !dbg !22
  %110 = fmul <2 x float> %109, %109, !dbg !23
  %111 = fpext <2 x half> %64 to <2 x float>, !dbg !18
  %112 = fpext <2 x half> %78 to <2 x float>, !dbg !21
  %113 = fadd <2 x float> %111, %112, !dbg !22
  %114 = fmul <2 x float> %113, %113, !dbg !23
  %115 = fadd <2 x float> %110, %114, !dbg !25
  %116 = lshr i32 %11, 5, !dbg !11
  %117 = and i32 %11, 1, !dbg !11
  %118 = or disjoint i32 %10, %117, !dbg !12
  %119 = icmp slt i32 %118, %5, !dbg !13
  %120 = fadd float %87, %88, !dbg !26
  %121 = extractelement <2 x float> %97, i64 0, !dbg !26
  %122 = fadd float %121, %120, !dbg !26
  %123 = extractelement <2 x float> %97, i64 1, !dbg !26
  %124 = fadd float %123, %122, !dbg !26
  %125 = extractelement <2 x float> %106, i64 0, !dbg !26
  %126 = fadd float %125, %124, !dbg !26
  %127 = extractelement <2 x float> %106, i64 1, !dbg !26
  %128 = fadd float %127, %126, !dbg !26
  %129 = extractelement <2 x float> %115, i64 0, !dbg !26
  %130 = fadd float %129, %128, !dbg !26
  %131 = extractelement <2 x float> %115, i64 1, !dbg !26
  %132 = fadd float %131, %130, !dbg !26
  %133 = select i1 %15, float %132, float 0.000000e+00, !dbg !26
  %134 = bitcast float %133 to i32, !dbg !31
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 16, i32 31), !dbg !31
  %136 = bitcast i32 %135 to float, !dbg !31
  %137 = fadd float %133, %136, !dbg !26
  %138 = bitcast float %137 to i32, !dbg !31
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 8, i32 31), !dbg !31
  %140 = bitcast i32 %139 to float, !dbg !31
  %141 = fadd float %137, %140, !dbg !26
  %142 = bitcast float %141 to i32, !dbg !31
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 4, i32 31), !dbg !31
  %144 = bitcast i32 %143 to float, !dbg !31
  %145 = fadd float %141, %144, !dbg !26
  %146 = bitcast float %145 to i32, !dbg !31
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 2, i32 31), !dbg !31
  %148 = bitcast i32 %147 to float, !dbg !31
  %149 = fadd float %145, %148, !dbg !26
  %150 = bitcast float %149 to i32, !dbg !31
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 1, i32 31), !dbg !31
  %152 = bitcast i32 %151 to float, !dbg !31
  %153 = fadd float %149, %152, !dbg !26
  %154 = and i32 %116, 7, !dbg !31
  %155 = icmp eq i32 %13, 0, !dbg !31
  %156 = lshr exact i32 %12, 5, !dbg !31
  %157 = or disjoint i32 %156, %154, !dbg !31
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i32 %157, !dbg !31
  %159 = bitcast float %153 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 %155) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %160 = icmp slt i32 %11, 16, !dbg !31
  %161 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !31
  %162 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %161, i1 %160) #5, !dbg !31
  %163 = bitcast i32 %162 to float, !dbg !31
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 4, i32 31), !dbg !31
  %165 = bitcast i32 %164 to float, !dbg !31
  %166 = fadd float %163, %165, !dbg !26
  %167 = bitcast float %166 to i32, !dbg !31
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 2, i32 31), !dbg !31
  %169 = bitcast i32 %168 to float, !dbg !31
  %170 = fadd float %166, %169, !dbg !26
  %171 = bitcast float %170 to i32, !dbg !31
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 1, i32 31), !dbg !31
  %173 = bitcast i32 %172 to float, !dbg !31
  %174 = fadd float %170, %173, !dbg !26
  %175 = and i32 %11, 7, !dbg !31
  %176 = icmp eq i32 %175, 0, !dbg !31
  %177 = and i1 %160, %176, !dbg !31
  %178 = bitcast float %174 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %178, i1 %177) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %179 = getelementptr float, ptr addrspace(3) @global_smem, i32 %156, !dbg !31
  %180 = load float, ptr addrspace(3) %179, align 16, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %181 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !32
  %182 = bitcast float %180 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %182, i1 true) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %183 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %117, !dbg !32
  %184 = load float, ptr addrspace(3) %183, align 4, !dbg !32
  %185 = tail call float @llvm.nvvm.div.full(float %184, float 4.096000e+03), !dbg !33
  %186 = tail call float @llvm.nvvm.div.full(float %180, float 4.096000e+03), !dbg !33
  %187 = fadd float %185, 0x3EE4F8B580000000, !dbg !34
  %188 = fadd float %186, 0x3EE4F8B580000000, !dbg !34
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i = icmp eq i32 %189, 0, !dbg !32
  br i1 %.not.i, label %192, label %190, !dbg !32

190:                                              ; preds = %8
  %191 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %187), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

192:                                              ; preds = %8
  %193 = tail call float @llvm.nvvm.rsqrt.approx.f(float %187), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

__nv_rsqrtf.exit:                                 ; preds = %190, %192
  %.0.i = phi float [ %191, %190 ], [ %193, %192 ], !dbg !32
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i31 = icmp eq i32 %201, 0, !dbg !32
  br i1 %.not.i31, label %204, label %202, !dbg !32

202:                                              ; preds = %__nv_rsqrtf.exit
  %203 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %188), !dbg !32
  br label %__nv_rsqrtf.exit33, !dbg !32

204:                                              ; preds = %__nv_rsqrtf.exit
  %205 = tail call float @llvm.nvvm.rsqrt.approx.f(float %188), !dbg !32
  br label %__nv_rsqrtf.exit33, !dbg !32

__nv_rsqrtf.exit33:                               ; preds = %202, %204
  %.0.i32 = phi float [ %203, %202 ], [ %205, %204 ], !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %206 = sext i32 %118 to i64, !dbg !36
  %207 = getelementptr float, ptr addrspace(1) %0, i64 %206, !dbg !36
  %208 = and i32 %11, 510, !dbg !37
  %209 = icmp eq i32 %208, 0, !dbg !37
  %210 = bitcast float %.0.i to i32, !dbg !37
  %211 = and i1 %209, %119, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %210, ptr addrspace(1) %207, i1 %211) #5, !dbg !37
  %212 = insertelement <2 x float> poison, float %.0.i32, i64 0, !dbg !38
  %213 = shufflevector <2 x float> %212, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !38
  %214 = or disjoint i32 %17, 4
  %215 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %214
  %216 = getelementptr inbounds nuw i8, ptr addrspace(3) %215, i32 8
  %217 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %17
  %218 = getelementptr inbounds nuw i8, ptr addrspace(3) %217, i32 8
  %219 = shl i32 %11, 2, !dbg !14
  %220 = and i32 %219, 2044, !dbg !14
  %221 = zext nneg i32 %220 to i64, !dbg !39
  %222 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %220
  %223 = getelementptr half, ptr addrspace(1) %3, i64 %221, !dbg !40
  %224 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %223, i1 true) #5, !dbg !41
  %225 = extractvalue { i32, i32 } %224, 0, !dbg !41
  %226 = bitcast i32 %225 to <2 x half>, !dbg !41
  %227 = extractvalue { i32, i32 } %224, 1, !dbg !41
  %228 = bitcast i32 %227 to <2 x half>, !dbg !41
  %229 = extractelement <2 x half> %226, i64 0, !dbg !41
  %230 = extractelement <2 x half> %226, i64 1, !dbg !41
  %231 = extractelement <2 x half> %228, i64 0, !dbg !41
  %232 = extractelement <2 x half> %228, i64 1, !dbg !41
  %233 = fpext half %229 to float, !dbg !42
  %234 = fpext half %230 to float, !dbg !42
  %235 = fpext half %231 to float, !dbg !42
  %236 = fpext half %232 to float, !dbg !42
  %237 = sext i32 %19 to i64, !dbg !43
  %238 = getelementptr half, ptr addrspace(1) %1, i64 %237, !dbg !43
  %239 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %238, i1 %15) #5, !dbg !44
  %240 = extractvalue { i32, i32, i32, i32 } %239, 0, !dbg !44
  %241 = bitcast i32 %240 to <2 x half>, !dbg !44
  %242 = extractvalue { i32, i32, i32, i32 } %239, 1, !dbg !44
  %243 = bitcast i32 %242 to <2 x half>, !dbg !44
  %244 = extractvalue { i32, i32, i32, i32 } %239, 2, !dbg !44
  %245 = bitcast i32 %244 to <2 x half>, !dbg !44
  %246 = extractvalue { i32, i32, i32, i32 } %239, 3, !dbg !44
  %247 = bitcast i32 %246 to <2 x half>, !dbg !44
  %248 = getelementptr half, ptr addrspace(1) %2, i64 %237, !dbg !45
  %249 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %248, i1 %15) #5, !dbg !46
  %250 = extractvalue { i32, i32, i32, i32 } %249, 0, !dbg !46
  %251 = bitcast i32 %250 to <2 x half>, !dbg !46
  %252 = extractvalue { i32, i32, i32, i32 } %249, 1, !dbg !46
  %253 = bitcast i32 %252 to <2 x half>, !dbg !46
  %254 = extractvalue { i32, i32, i32, i32 } %249, 2, !dbg !46
  %255 = bitcast i32 %254 to <2 x half>, !dbg !46
  %256 = extractvalue { i32, i32, i32, i32 } %249, 3, !dbg !46
  %257 = bitcast i32 %256 to <2 x half>, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %258 = bitcast float %233 to i32, !dbg !47
  %259 = bitcast float %234 to i32, !dbg !47
  %260 = bitcast float %235 to i32, !dbg !47
  %261 = bitcast float %236 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %222, i32 %258, i32 %259, i32 %260, i32 %261, i1 true) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %262 = getelementptr half, ptr addrspace(1) %4, i64 %237, !dbg !48
  %263 = fpext <2 x half> %241 to <2 x float>, !dbg !49
  %264 = fpext <2 x half> %251 to <2 x float>, !dbg !50
  %265 = fadd <2 x float> %263, %264, !dbg !51
  %266 = fmul <2 x float> %213, %265, !dbg !38
  %267 = load <2 x float>, ptr addrspace(3) %217, align 16, !dbg !47
  %268 = fmul <2 x float> %267, %266, !dbg !47
  %269 = fptrunc <2 x float> %268 to <2 x half>, !dbg !52
  %270 = fpext <2 x half> %243 to <2 x float>, !dbg !49
  %271 = fpext <2 x half> %253 to <2 x float>, !dbg !50
  %272 = fadd <2 x float> %270, %271, !dbg !51
  %273 = fmul <2 x float> %213, %272, !dbg !38
  %274 = load <2 x float>, ptr addrspace(3) %218, align 8, !dbg !47
  %275 = fmul <2 x float> %274, %273, !dbg !47
  %276 = fptrunc <2 x float> %275 to <2 x half>, !dbg !52
  %277 = fpext <2 x half> %245 to <2 x float>, !dbg !49
  %278 = fpext <2 x half> %255 to <2 x float>, !dbg !50
  %279 = fadd <2 x float> %277, %278, !dbg !51
  %280 = fmul <2 x float> %213, %279, !dbg !38
  %281 = load <2 x float>, ptr addrspace(3) %215, align 16, !dbg !47
  %282 = fmul <2 x float> %281, %280, !dbg !47
  %283 = fptrunc <2 x float> %282 to <2 x half>, !dbg !52
  %284 = fpext <2 x half> %247 to <2 x float>, !dbg !49
  %285 = fpext <2 x half> %257 to <2 x float>, !dbg !50
  %286 = fadd <2 x float> %284, %285, !dbg !51
  %287 = fmul <2 x float> %213, %286, !dbg !38
  %288 = load <2 x float>, ptr addrspace(3) %216, align 8, !dbg !47
  %289 = fmul <2 x float> %288, %287, !dbg !47
  %290 = fptrunc <2 x float> %289 to <2 x half>, !dbg !52
  %291 = bitcast <2 x half> %269 to i32, !dbg !52
  %292 = bitcast <2 x half> %276 to i32, !dbg !52
  %293 = bitcast <2 x half> %283 to i32, !dbg !52
  %294 = bitcast <2 x half> %290 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %291, i32 %292, i32 %293, i32 %294, ptr addrspace(1) %262, i1 %15) #5, !dbg !52
  %295 = or disjoint i64 %221, 2048, !dbg !53
  %296 = getelementptr half, ptr addrspace(1) %3, i64 %295, !dbg !40
  %297 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %296, i1 true) #5, !dbg !41
  %298 = extractvalue { i32, i32 } %297, 0, !dbg !41
  %299 = bitcast i32 %298 to <2 x half>, !dbg !41
  %300 = extractvalue { i32, i32 } %297, 1, !dbg !41
  %301 = bitcast i32 %300 to <2 x half>, !dbg !41
  %302 = extractelement <2 x half> %299, i64 0, !dbg !41
  %303 = extractelement <2 x half> %299, i64 1, !dbg !41
  %304 = extractelement <2 x half> %301, i64 0, !dbg !41
  %305 = extractelement <2 x half> %301, i64 1, !dbg !41
  %306 = fpext half %302 to float, !dbg !42
  %307 = fpext half %303 to float, !dbg !42
  %308 = fpext half %304 to float, !dbg !42
  %309 = fpext half %305 to float, !dbg !42
  %310 = or disjoint i32 %19, 2048, !dbg !54
  %311 = sext i32 %310 to i64, !dbg !43
  %312 = getelementptr half, ptr addrspace(1) %1, i64 %311, !dbg !43
  %313 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %312, i1 %15) #5, !dbg !44
  %314 = extractvalue { i32, i32, i32, i32 } %313, 0, !dbg !44
  %315 = bitcast i32 %314 to <2 x half>, !dbg !44
  %316 = extractvalue { i32, i32, i32, i32 } %313, 1, !dbg !44
  %317 = bitcast i32 %316 to <2 x half>, !dbg !44
  %318 = extractvalue { i32, i32, i32, i32 } %313, 2, !dbg !44
  %319 = bitcast i32 %318 to <2 x half>, !dbg !44
  %320 = extractvalue { i32, i32, i32, i32 } %313, 3, !dbg !44
  %321 = bitcast i32 %320 to <2 x half>, !dbg !44
  %322 = getelementptr half, ptr addrspace(1) %2, i64 %311, !dbg !45
  %323 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %322, i1 %15) #5, !dbg !46
  %324 = extractvalue { i32, i32, i32, i32 } %323, 0, !dbg !46
  %325 = bitcast i32 %324 to <2 x half>, !dbg !46
  %326 = extractvalue { i32, i32, i32, i32 } %323, 1, !dbg !46
  %327 = bitcast i32 %326 to <2 x half>, !dbg !46
  %328 = extractvalue { i32, i32, i32, i32 } %323, 2, !dbg !46
  %329 = bitcast i32 %328 to <2 x half>, !dbg !46
  %330 = extractvalue { i32, i32, i32, i32 } %323, 3, !dbg !46
  %331 = bitcast i32 %330 to <2 x half>, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %332 = bitcast float %306 to i32, !dbg !47
  %333 = bitcast float %307 to i32, !dbg !47
  %334 = bitcast float %308 to i32, !dbg !47
  %335 = bitcast float %309 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %222, i32 %332, i32 %333, i32 %334, i32 %335, i1 true) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %336 = getelementptr half, ptr addrspace(1) %4, i64 %311, !dbg !48
  %337 = fpext <2 x half> %315 to <2 x float>, !dbg !49
  %338 = fpext <2 x half> %325 to <2 x float>, !dbg !50
  %339 = fadd <2 x float> %337, %338, !dbg !51
  %340 = fmul <2 x float> %213, %339, !dbg !38
  %341 = load <2 x float>, ptr addrspace(3) %217, align 16, !dbg !47
  %342 = fmul <2 x float> %341, %340, !dbg !47
  %343 = fptrunc <2 x float> %342 to <2 x half>, !dbg !52
  %344 = fpext <2 x half> %317 to <2 x float>, !dbg !49
  %345 = fpext <2 x half> %327 to <2 x float>, !dbg !50
  %346 = fadd <2 x float> %344, %345, !dbg !51
  %347 = fmul <2 x float> %213, %346, !dbg !38
  %348 = load <2 x float>, ptr addrspace(3) %218, align 8, !dbg !47
  %349 = fmul <2 x float> %348, %347, !dbg !47
  %350 = fptrunc <2 x float> %349 to <2 x half>, !dbg !52
  %351 = fpext <2 x half> %319 to <2 x float>, !dbg !49
  %352 = fpext <2 x half> %329 to <2 x float>, !dbg !50
  %353 = fadd <2 x float> %351, %352, !dbg !51
  %354 = fmul <2 x float> %213, %353, !dbg !38
  %355 = load <2 x float>, ptr addrspace(3) %215, align 16, !dbg !47
  %356 = fmul <2 x float> %355, %354, !dbg !47
  %357 = fptrunc <2 x float> %356 to <2 x half>, !dbg !52
  %358 = fpext <2 x half> %321 to <2 x float>, !dbg !49
  %359 = fpext <2 x half> %331 to <2 x float>, !dbg !50
  %360 = fadd <2 x float> %358, %359, !dbg !51
  %361 = fmul <2 x float> %213, %360, !dbg !38
  %362 = load <2 x float>, ptr addrspace(3) %216, align 8, !dbg !47
  %363 = fmul <2 x float> %362, %361, !dbg !47
  %364 = fptrunc <2 x float> %363 to <2 x half>, !dbg !52
  %365 = bitcast <2 x half> %343 to i32, !dbg !52
  %366 = bitcast <2 x half> %350 to i32, !dbg !52
  %367 = bitcast <2 x half> %357 to i32, !dbg !52
  %368 = bitcast <2 x half> %364 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %365, i32 %366, i32 %367, i32 %368, ptr addrspace(1) %336, i1 %15) #5, !dbg !52
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxbiz6a53yuzne7tuzqghtuipdavwtl2jp3relur3ksonmtcg44q.py", directory: "./local_cache/xb")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 35, column: 34, scope: !6)
!17 = !DILocation(line: 35, column: 51, scope: !6)
!18 = !DILocation(line: 35, column: 112, scope: !6)
!19 = !DILocation(line: 36, column: 34, scope: !6)
!20 = !DILocation(line: 36, column: 51, scope: !6)
!21 = !DILocation(line: 36, column: 112, scope: !6)
!22 = !DILocation(line: 37, column: 22, scope: !6)
!23 = !DILocation(line: 39, column: 22, scope: !6)
!24 = !DILocation(line: 35, column: 41, scope: !6)
!25 = !DILocation(line: 41, column: 23, scope: !6)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !30)
!27 = distinct !DILexicalBlockFile(scope: !29, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!29 = distinct !DILexicalBlockFile(scope: !6, file: !28, discriminator: 0)
!30 = !DILocation(line: 43, column: 25, scope: !6)
!31 = !DILocation(line: 286, column: 36, scope: !29, inlinedAt: !30)
!32 = !DILocation(line: 48, column: 28, scope: !6)
!33 = !DILocation(line: 45, column: 19, scope: !6)
!34 = !DILocation(line: 47, column: 19, scope: !6)
!35 = !DILocation(line: 49, column: 4, scope: !6)
!36 = !DILocation(line: 50, column: 28, scope: !6)
!37 = !DILocation(line: 50, column: 40, scope: !6)
!38 = !DILocation(line: 62, column: 24, scope: !6)
!39 = !DILocation(line: 51, column: 40, scope: !6)
!40 = !DILocation(line: 57, column: 35, scope: !6)
!41 = !DILocation(line: 57, column: 42, scope: !6)
!42 = !DILocation(line: 57, column: 95, scope: !6)
!43 = !DILocation(line: 58, column: 35, scope: !6)
!44 = !DILocation(line: 58, column: 52, scope: !6)
!45 = !DILocation(line: 59, column: 35, scope: !6)
!46 = !DILocation(line: 59, column: 52, scope: !6)
!47 = !DILocation(line: 64, column: 24, scope: !6)
!48 = !DILocation(line: 65, column: 29, scope: !6)
!49 = !DILocation(line: 58, column: 114, scope: !6)
!50 = !DILocation(line: 59, column: 114, scope: !6)
!51 = !DILocation(line: 60, column: 24, scope: !6)
!52 = !DILocation(line: 65, column: 53, scope: !6)
!53 = !DILocation(line: 52, column: 31, scope: !6)
!54 = !DILocation(line: 58, column: 42, scope: !6)
!55 = !DILocation(line: 51, column: 4, scope: !6)
