; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_mul_sum_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11, i32 %12, ptr addrspace(1) readnone captures(none) %13) local_unnamed_addr !dbg !6 {
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %16 = shl i32 %15, 6, !dbg !10
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %18 = shl i32 %17, 2, !dbg !11
  %19 = and i32 %18, 60, !dbg !11
  %20 = or disjoint i32 %19, %16, !dbg !12
  %21 = lshr i32 %17, 4, !dbg !13
  %22 = and i32 %21, 15, !dbg !13
  %23 = icmp sgt i32 %12, 0, !dbg !14
  br i1 %23, label %.lr.ph, label %._crit_edge, !dbg !14

.lr.ph:                                           ; preds = %14, %.lr.ph
  %24 = phi i32 [ %119, %.lr.ph ], [ 0, %14 ]
  %25 = phi <8 x float> [ %118, %.lr.ph ], [ zeroinitializer, %14 ]
  %26 = or disjoint i32 %24, %22, !dbg !15
  %27 = icmp slt i32 %26, %12, !dbg !16
  %28 = shl i32 %26, 12, !dbg !17
  %29 = add i32 %20, %28, !dbg !18
  %30 = sext i32 %29 to i64, !dbg !19
  %31 = getelementptr half, ptr addrspace(1) %0, i64 %30, !dbg !19
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %31, i1 %27) #3, !dbg !20
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !20
  %34 = bitcast i32 %33 to <2 x half>, !dbg !20
  %35 = extractvalue { i32, i32 } %32, 1, !dbg !20
  %36 = bitcast i32 %35 to <2 x half>, !dbg !20
  %37 = getelementptr half, ptr addrspace(1) %1, i64 %30, !dbg !21
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %37, i1 %27) #3, !dbg !22
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !22
  %40 = bitcast i32 %39 to <2 x half>, !dbg !22
  %41 = extractvalue { i32, i32 } %38, 1, !dbg !22
  %42 = bitcast i32 %41 to <2 x half>, !dbg !22
  %43 = getelementptr half, ptr addrspace(1) %2, i64 %30, !dbg !23
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %43, i1 %27) #3, !dbg !24
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !24
  %46 = bitcast i32 %45 to <2 x half>, !dbg !24
  %47 = extractvalue { i32, i32 } %44, 1, !dbg !24
  %48 = bitcast i32 %47 to <2 x half>, !dbg !24
  %49 = getelementptr half, ptr addrspace(1) %3, i64 %30, !dbg !25
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %49, i1 %27) #3, !dbg !26
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !26
  %52 = bitcast i32 %51 to <2 x half>, !dbg !26
  %53 = extractvalue { i32, i32 } %50, 1, !dbg !26
  %54 = bitcast i32 %53 to <2 x half>, !dbg !26
  %55 = sext i32 %26 to i64, !dbg !27
  %56 = getelementptr float, ptr addrspace(1) %4, i64 %55, !dbg !27
  %57 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %56, i1 %27) #3, !dbg !28
  %58 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %56, i1 %27) #3, !dbg !28
  %59 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %56, i1 %27) #3, !dbg !28
  %60 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %56, i1 %27) #3, !dbg !28
  %61 = getelementptr half, ptr addrspace(1) %5, i64 %30, !dbg !29
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %61, i1 %27) #3, !dbg !30
  %63 = extractvalue { i32, i32 } %62, 0, !dbg !30
  %64 = bitcast i32 %63 to <2 x half>, !dbg !30
  %65 = extractvalue { i32, i32 } %62, 1, !dbg !30
  %66 = bitcast i32 %65 to <2 x half>, !dbg !30
  %67 = getelementptr half, ptr addrspace(1) %6, i64 %30, !dbg !31
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %67, i1 %27) #3, !dbg !32
  %69 = extractvalue { i32, i32 } %68, 0, !dbg !32
  %70 = bitcast i32 %69 to <2 x half>, !dbg !32
  %71 = extractvalue { i32, i32 } %68, 1, !dbg !32
  %72 = bitcast i32 %71 to <2 x half>, !dbg !32
  %73 = getelementptr half, ptr addrspace(1) %7, i64 %30, !dbg !33
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %73, i1 %27) #3, !dbg !34
  %75 = extractvalue { i32, i32 } %74, 0, !dbg !34
  %76 = bitcast i32 %75 to <2 x half>, !dbg !34
  %77 = extractvalue { i32, i32 } %74, 1, !dbg !34
  %78 = bitcast i32 %77 to <2 x half>, !dbg !34
  %79 = getelementptr float, ptr addrspace(1) %8, i64 %55, !dbg !35
  %80 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %79, i1 %27) #3, !dbg !36
  %81 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %79, i1 %27) #3, !dbg !36
  %82 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %79, i1 %27) #3, !dbg !36
  %83 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %79, i1 %27) #3, !dbg !36
  %84 = shufflevector <2 x half> %34, <2 x half> %36, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !37
  %85 = fpext <4 x half> %84 to <4 x float>, !dbg !37
  %86 = shufflevector <2 x half> %46, <2 x half> %48, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !38
  %87 = fpext <4 x half> %86 to <4 x float>, !dbg !38
  %88 = shufflevector <2 x half> %52, <2 x half> %54, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !39
  %89 = fpext <4 x half> %88 to <4 x float>, !dbg !39
  %90 = shufflevector <2 x half> %64, <2 x half> %66, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !40
  %91 = fpext <4 x half> %90 to <4 x float>, !dbg !40
  %92 = shufflevector <2 x half> %70, <2 x half> %72, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !41
  %93 = fpext <4 x half> %92 to <4 x float>, !dbg !41
  %94 = shufflevector <2 x half> %40, <2 x half> %42, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %95 = shufflevector <2 x half> %76, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %96 = shufflevector <8 x half> %94, <8 x half> %95, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !42
  %97 = shufflevector <2 x half> %76, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %98 = shufflevector <8 x half> %96, <8 x half> %97, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !42
  %99 = shufflevector <2 x half> %78, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %100 = shufflevector <8 x half> %98, <8 x half> %99, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !42
  %101 = shufflevector <2 x half> %78, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %102 = shufflevector <8 x half> %100, <8 x half> %101, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !42
  %103 = fpext <8 x half> %102 to <8 x float>, !dbg !42
  %104 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !28
  %105 = insertelement <2 x i32> %104, i32 %83, i64 1, !dbg !28
  %106 = bitcast <2 x i32> %105 to <2 x float>, !dbg !28
  %107 = shufflevector <2 x float> %106, <2 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !28
  %108 = fadd <4 x float> %87, %89, !dbg !43
  %109 = fadd <4 x float> %91, %93, !dbg !44
  %110 = shufflevector <4 x float> %85, <4 x float> %109, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !45
  %111 = fadd <8 x float> %110, %103, !dbg !45
  %112 = shufflevector <4 x float> %108, <4 x float> %87, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !46
  %113 = fmul <8 x float> %112, %107, !dbg !46
  %114 = fmul <8 x float> %111, %113, !dbg !47
  %115 = fadd <8 x float> %25, %114, !dbg !48
  %116 = insertelement <8 x i1> poison, i1 %27, i64 0, !dbg !49
  %117 = shufflevector <8 x i1> %116, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !49
  %118 = select <8 x i1> %117, <8 x float> %115, <8 x float> %25, !dbg !49
  %119 = add i32 %24, 16, !dbg !14
  %120 = icmp slt i32 %119, %12, !dbg !14
  br i1 %120, label %.lr.ph, label %._crit_edge, !dbg !14

._crit_edge:                                      ; preds = %.lr.ph, %14
  %121 = phi <8 x float> [ zeroinitializer, %14 ], [ %118, %.lr.ph ]
  %122 = lshr i32 %17, 5, !dbg !11
  %123 = and i32 %17, 63, !dbg !11
  %124 = or disjoint i32 %16, %123, !dbg !12
  %125 = and i32 %17, 16, !dbg !11
  %126 = extractelement <8 x float> %121, i64 0, !dbg !50
  %127 = bitcast float %126 to i32, !dbg !50
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 16, i32 31), !dbg !50
  %129 = bitcast i32 %128 to float, !dbg !50
  %130 = fadd float %126, %129, !dbg !54
  %131 = extractelement <8 x float> %121, i64 1, !dbg !50
  %132 = bitcast float %131 to i32, !dbg !50
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 16, i32 31), !dbg !50
  %134 = bitcast i32 %133 to float, !dbg !50
  %135 = fadd float %131, %134, !dbg !54
  %136 = extractelement <8 x float> %121, i64 2, !dbg !50
  %137 = bitcast float %136 to i32, !dbg !50
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 16, i32 31), !dbg !50
  %139 = bitcast i32 %138 to float, !dbg !50
  %140 = fadd float %136, %139, !dbg !54
  %141 = extractelement <8 x float> %121, i64 3, !dbg !50
  %142 = bitcast float %141 to i32, !dbg !50
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 16, i32 31), !dbg !50
  %144 = bitcast i32 %143 to float, !dbg !50
  %145 = fadd float %141, %144, !dbg !54
  %146 = and i32 %122, 7, !dbg !50
  %147 = icmp eq i32 %125, 0, !dbg !50
  %148 = shl nuw nsw i32 %19, 3, !dbg !50
  %149 = or disjoint i32 %148, %146, !dbg !50
  %150 = getelementptr float, ptr addrspace(3) @global_smem, i32 %149, !dbg !50
  %151 = bitcast float %130 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 %147) #3, !dbg !50
  %152 = or disjoint i32 %148, 8, !dbg !50
  %153 = or disjoint i32 %152, %146, !dbg !50
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %153, !dbg !50
  %155 = bitcast float %135 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %155, i1 %147) #3, !dbg !50
  %156 = or disjoint i32 %148, 16, !dbg !50
  %157 = or disjoint i32 %156, %146, !dbg !50
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i32 %157, !dbg !50
  %159 = bitcast float %140 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 %147) #3, !dbg !50
  %160 = or disjoint i32 %148, 24, !dbg !50
  %161 = or disjoint i32 %160, %146, !dbg !50
  %162 = getelementptr float, ptr addrspace(3) @global_smem, i32 %161, !dbg !50
  %163 = bitcast float %145 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %163, i1 %147) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %164 = icmp slt i32 %17, 512, !dbg !50
  %165 = getelementptr float, ptr addrspace(3) @global_smem, i32 %17, !dbg !50
  %166 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %165, i1 %164) #3, !dbg !50
  %167 = bitcast i32 %166 to float, !dbg !50
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 4, i32 31), !dbg !50
  %169 = bitcast i32 %168 to float, !dbg !50
  %170 = fadd float %167, %169, !dbg !54
  %171 = bitcast float %170 to i32, !dbg !50
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 2, i32 31), !dbg !50
  %173 = bitcast i32 %172 to float, !dbg !50
  %174 = fadd float %170, %173, !dbg !54
  %175 = bitcast float %174 to i32, !dbg !50
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 1, i32 31), !dbg !50
  %177 = bitcast i32 %176 to float, !dbg !50
  %178 = fadd float %174, %177, !dbg !54
  %179 = and i32 %17, 7, !dbg !50
  %180 = icmp eq i32 %179, 0, !dbg !50
  %181 = and i1 %164, %180, !dbg !50
  %182 = bitcast float %178 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, <1 x i32> %182, i1 %181) #3, !dbg !50
  %183 = getelementptr i8, ptr addrspace(3) %165, i32 1024, !dbg !50
  %184 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %183, i1 %164) #3, !dbg !50
  %185 = bitcast i32 %184 to float, !dbg !50
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 4, i32 31), !dbg !50
  %187 = bitcast i32 %186 to float, !dbg !50
  %188 = fadd float %185, %187, !dbg !54
  %189 = bitcast float %188 to i32, !dbg !50
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 2, i32 31), !dbg !50
  %191 = bitcast i32 %190 to float, !dbg !50
  %192 = fadd float %188, %191, !dbg !54
  %193 = bitcast float %192 to i32, !dbg !50
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 1, i32 31), !dbg !50
  %195 = bitcast i32 %194 to float, !dbg !50
  %196 = fadd float %192, %195, !dbg !54
  %197 = bitcast float %196 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %183, <1 x i32> %197, i1 %181) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %198 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !50
  %199 = load i32, ptr addrspace(3) %198, align 16, !dbg !50
  %200 = getelementptr float, ptr addrspace(3) @global_smem, i32 %152, !dbg !50
  %201 = load i32, ptr addrspace(3) %200, align 16, !dbg !50
  %202 = getelementptr float, ptr addrspace(3) @global_smem, i32 %156, !dbg !50
  %203 = load i32, ptr addrspace(3) %202, align 16, !dbg !50
  %204 = getelementptr float, ptr addrspace(3) @global_smem, i32 %160, !dbg !50
  %205 = load i32, ptr addrspace(3) %204, align 16, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %206 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %19, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %206, i32 %199, i32 %201, i32 %203, i32 %205, i1 true) #3, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %207 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %123, !dbg !56
  %208 = load float, ptr addrspace(3) %207, align 4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %209 = extractelement <8 x float> %121, i64 4, !dbg !57
  %210 = bitcast float %209 to i32, !dbg !57
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 16, i32 31), !dbg !57
  %212 = bitcast i32 %211 to float, !dbg !57
  %213 = fadd float %209, %212, !dbg !59
  %214 = extractelement <8 x float> %121, i64 5, !dbg !57
  %215 = bitcast float %214 to i32, !dbg !57
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 16, i32 31), !dbg !57
  %217 = bitcast i32 %216 to float, !dbg !57
  %218 = fadd float %214, %217, !dbg !59
  %219 = extractelement <8 x float> %121, i64 6, !dbg !57
  %220 = bitcast float %219 to i32, !dbg !57
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 16, i32 31), !dbg !57
  %222 = bitcast i32 %221 to float, !dbg !57
  %223 = fadd float %219, %222, !dbg !59
  %224 = extractelement <8 x float> %121, i64 7, !dbg !57
  %225 = bitcast float %224 to i32, !dbg !57
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 16, i32 31), !dbg !57
  %227 = bitcast i32 %226 to float, !dbg !57
  %228 = fadd float %224, %227, !dbg !59
  %229 = bitcast float %213 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %229, i1 %147) #3, !dbg !57
  %230 = bitcast float %218 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %230, i1 %147) #3, !dbg !57
  %231 = bitcast float %223 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %231, i1 %147) #3, !dbg !57
  %232 = bitcast float %228 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %232, i1 %147) #3, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %233 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %165, i1 %164) #3, !dbg !57
  %234 = bitcast i32 %233 to float, !dbg !57
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 4, i32 31), !dbg !57
  %236 = bitcast i32 %235 to float, !dbg !57
  %237 = fadd float %234, %236, !dbg !59
  %238 = bitcast float %237 to i32, !dbg !57
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 2, i32 31), !dbg !57
  %240 = bitcast i32 %239 to float, !dbg !57
  %241 = fadd float %237, %240, !dbg !59
  %242 = bitcast float %241 to i32, !dbg !57
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 1, i32 31), !dbg !57
  %244 = bitcast i32 %243 to float, !dbg !57
  %245 = fadd float %241, %244, !dbg !59
  %246 = bitcast float %245 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, <1 x i32> %246, i1 %181) #3, !dbg !57
  %247 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %183, i1 %164) #3, !dbg !57
  %248 = bitcast i32 %247 to float, !dbg !57
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 4, i32 31), !dbg !57
  %250 = bitcast i32 %249 to float, !dbg !57
  %251 = fadd float %248, %250, !dbg !59
  %252 = bitcast float %251 to i32, !dbg !57
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 2, i32 31), !dbg !57
  %254 = bitcast i32 %253 to float, !dbg !57
  %255 = fadd float %251, %254, !dbg !59
  %256 = bitcast float %255 to i32, !dbg !57
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 1, i32 31), !dbg !57
  %258 = bitcast i32 %257 to float, !dbg !57
  %259 = fadd float %255, %258, !dbg !59
  %260 = bitcast float %259 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %183, <1 x i32> %260, i1 %181) #3, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %261 = load i32, ptr addrspace(3) %198, align 16, !dbg !57
  %262 = load i32, ptr addrspace(3) %200, align 16, !dbg !57
  %263 = load i32, ptr addrspace(3) %202, align 16, !dbg !57
  %264 = load i32, ptr addrspace(3) %204, align 16, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %206, i32 %261, i32 %262, i32 %263, i32 %264, i1 true) #3, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %265 = load float, ptr addrspace(3) %207, align 4, !dbg !60
  %266 = sext i32 %124 to i64, !dbg !61
  %267 = getelementptr half, ptr addrspace(1) %9, i64 %266, !dbg !61
  %268 = fptrunc float %208 to half, !dbg !56
  %269 = and i32 %17, 192, !dbg !56
  %270 = icmp eq i32 %269, 0, !dbg !56
  %271 = bitcast half %268 to i16, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %271, ptr addrspace(1) %267, i1 %270) #3, !dbg !56
  %272 = getelementptr half, ptr addrspace(1) %10, i64 %266, !dbg !62
  %273 = fptrunc float %265 to half, !dbg !60
  %274 = bitcast half %273 to i16, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %274, ptr addrspace(1) %272, i1 %270) #3, !dbg !60
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cleebz4qsuv6x3uay77iffht6w22pvdm2rpphczmwg6tlnbdvmxa.py", directory: "./local_cache/le")
!4 = !{ptr @triton_red_fused__to_copy_add_mul_sum_14, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mul_sum_14", linkageName: "triton_red_fused__to_copy_add_mul_sum_14", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 37, scope: !6)
!14 = !DILocation(line: 30, column: 40, scope: !6)
!15 = !DILocation(line: 31, column: 31, scope: !6)
!16 = !DILocation(line: 32, column: 29, scope: !6)
!17 = !DILocation(line: 36, column: 44, scope: !6)
!18 = !DILocation(line: 36, column: 39, scope: !6)
!19 = !DILocation(line: 36, column: 34, scope: !6)
!20 = !DILocation(line: 36, column: 51, scope: !6)
!21 = !DILocation(line: 37, column: 34, scope: !6)
!22 = !DILocation(line: 37, column: 51, scope: !6)
!23 = !DILocation(line: 38, column: 34, scope: !6)
!24 = !DILocation(line: 38, column: 51, scope: !6)
!25 = !DILocation(line: 39, column: 34, scope: !6)
!26 = !DILocation(line: 39, column: 51, scope: !6)
!27 = !DILocation(line: 40, column: 34, scope: !6)
!28 = !DILocation(line: 40, column: 41, scope: !6)
!29 = !DILocation(line: 41, column: 35, scope: !6)
!30 = !DILocation(line: 41, column: 52, scope: !6)
!31 = !DILocation(line: 42, column: 35, scope: !6)
!32 = !DILocation(line: 42, column: 52, scope: !6)
!33 = !DILocation(line: 43, column: 35, scope: !6)
!34 = !DILocation(line: 43, column: 52, scope: !6)
!35 = !DILocation(line: 44, column: 35, scope: !6)
!36 = !DILocation(line: 44, column: 42, scope: !6)
!37 = !DILocation(line: 36, column: 105, scope: !6)
!38 = !DILocation(line: 38, column: 105, scope: !6)
!39 = !DILocation(line: 39, column: 105, scope: !6)
!40 = !DILocation(line: 41, column: 106, scope: !6)
!41 = !DILocation(line: 42, column: 106, scope: !6)
!42 = !DILocation(line: 37, column: 105, scope: !6)
!43 = !DILocation(line: 46, column: 22, scope: !6)
!44 = !DILocation(line: 54, column: 24, scope: !6)
!45 = !DILocation(line: 45, column: 22, scope: !6)
!46 = !DILocation(line: 48, column: 22, scope: !6)
!47 = !DILocation(line: 50, column: 23, scope: !6)
!48 = !DILocation(line: 52, column: 25, scope: !6)
!49 = !DILocation(line: 53, column: 42, scope: !6)
!50 = !DILocation(line: 286, column: 36, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !6, file: !52, discriminator: 0)
!52 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!53 = !DILocation(line: 63, column: 27, scope: !6)
!54 = !DILocation(line: 256, column: 15, scope: !55, inlinedAt: !53)
!55 = distinct !DILexicalBlockFile(scope: !51, file: !52, discriminator: 0)
!56 = !DILocation(line: 65, column: 37, scope: !6)
!57 = !DILocation(line: 286, column: 36, scope: !51, inlinedAt: !58)
!58 = !DILocation(line: 64, column: 27, scope: !6)
!59 = !DILocation(line: 256, column: 15, scope: !55, inlinedAt: !58)
!60 = !DILocation(line: 66, column: 37, scope: !6)
!61 = !DILocation(line: 65, column: 25, scope: !6)
!62 = !DILocation(line: 66, column: 25, scope: !6)
!63 = !DILocation(line: 66, column: 4, scope: !6)
