; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = icmp slt i32 %10, %6, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = and i32 %12, 31, !dbg !11
  %14 = shl i32 %12, 1, !dbg !11
  %15 = and i32 %14, 2046, !dbg !11
  %16 = shl i32 %10, 12, !dbg !12
  %17 = or disjoint i32 %15, %16
  %18 = sext i32 %17 to i64, !dbg !13
  %19 = getelementptr half, ptr addrspace(1) %2, i64 %18, !dbg !13
  %20 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %19, i1 %11) #5, !dbg !14
  %21 = bitcast i32 %20 to <2 x half>, !dbg !14
  %22 = getelementptr half, ptr addrspace(1) %3, i64 %18, !dbg !15
  %23 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %22, i1 %11) #5, !dbg !16
  %24 = bitcast i32 %23 to <2 x half>, !dbg !16
  %25 = getelementptr half, ptr addrspace(1) %0, i64 %18, !dbg !17
  %26 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %25, i1 %11) #5, !dbg !18
  %27 = bitcast i32 %26 to <2 x half>, !dbg !18
  %28 = fpext <2 x half> %21 to <2 x float>, !dbg !19
  %29 = fpext <2 x half> %24 to <2 x float>, !dbg !20
  %30 = fpext <2 x half> %27 to <2 x float>, !dbg !21
  %31 = fadd <2 x float> %28, %29, !dbg !22
  %32 = fadd <2 x float> %31, %30, !dbg !23
  %33 = fptrunc <2 x float> %32 to <2 x half>, !dbg !24
  %34 = bitcast <2 x half> %33 to i32, !dbg !24
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %34, ptr addrspace(1) %25, i1 %11) #5, !dbg !24
  %35 = or disjoint i32 %17, 2048, !dbg !25
  %36 = sext i32 %35 to i64, !dbg !13
  %37 = getelementptr half, ptr addrspace(1) %2, i64 %36, !dbg !13
  %38 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %37, i1 %11) #5, !dbg !14
  %39 = bitcast i32 %38 to <2 x half>, !dbg !14
  %40 = getelementptr half, ptr addrspace(1) %3, i64 %36, !dbg !15
  %41 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %40, i1 %11) #5, !dbg !16
  %42 = bitcast i32 %41 to <2 x half>, !dbg !16
  %43 = getelementptr half, ptr addrspace(1) %0, i64 %36, !dbg !17
  %44 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %43, i1 %11) #5, !dbg !18
  %45 = bitcast i32 %44 to <2 x half>, !dbg !18
  %46 = fpext <2 x half> %39 to <2 x float>, !dbg !19
  %47 = fpext <2 x half> %42 to <2 x float>, !dbg !20
  %48 = fpext <2 x half> %45 to <2 x float>, !dbg !21
  %49 = fadd <2 x float> %46, %47, !dbg !22
  %50 = fadd <2 x float> %49, %48, !dbg !23
  %51 = fmul <2 x float> %32, %32, !dbg !26
  %52 = fmul <2 x float> %50, %50, !dbg !26
  %53 = fadd <2 x float> %51, %52, !dbg !27
  %54 = fptrunc <2 x float> %50 to <2 x half>, !dbg !24
  %55 = bitcast <2 x half> %54 to i32, !dbg !24
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %55, ptr addrspace(1) %43, i1 %11) #5, !dbg !24
  %56 = lshr i32 %12, 5, !dbg !11
  %shift = shufflevector <2 x float> %53, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !28
  %57 = fadd <2 x float> %53, %shift, !dbg !28
  %58 = extractelement <2 x float> %57, i64 0, !dbg !28
  %59 = select i1 %11, float %58, float 0.000000e+00, !dbg !28
  %60 = bitcast float %59 to i32, !dbg !33
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 16, i32 31), !dbg !33
  %62 = bitcast i32 %61 to float, !dbg !33
  %63 = fadd float %59, %62, !dbg !28
  %64 = bitcast float %63 to i32, !dbg !33
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 8, i32 31), !dbg !33
  %66 = bitcast i32 %65 to float, !dbg !33
  %67 = fadd float %63, %66, !dbg !28
  %68 = bitcast float %67 to i32, !dbg !33
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 4, i32 31), !dbg !33
  %70 = bitcast i32 %69 to float, !dbg !33
  %71 = fadd float %67, %70, !dbg !28
  %72 = bitcast float %71 to i32, !dbg !33
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 2, i32 31), !dbg !33
  %74 = bitcast i32 %73 to float, !dbg !33
  %75 = fadd float %71, %74, !dbg !28
  %76 = bitcast float %75 to i32, !dbg !33
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 1, i32 31), !dbg !33
  %78 = bitcast i32 %77 to float, !dbg !33
  %79 = fadd float %75, %78, !dbg !28
  %80 = and i32 %56, 31, !dbg !33
  %81 = icmp eq i32 %13, 0, !dbg !33
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i32 %80, !dbg !33
  %83 = bitcast float %79 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 %81) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %84 = icmp slt i32 %12, 32, !dbg !33
  %85 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !33
  %86 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %85, i1 %84) #5, !dbg !33
  %87 = bitcast i32 %86 to float, !dbg !33
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 16, i32 31), !dbg !33
  %89 = bitcast i32 %88 to float, !dbg !33
  %90 = fadd float %87, %89, !dbg !28
  %91 = bitcast float %90 to i32, !dbg !33
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 8, i32 31), !dbg !33
  %93 = bitcast i32 %92 to float, !dbg !33
  %94 = fadd float %90, %93, !dbg !28
  %95 = bitcast float %94 to i32, !dbg !33
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 4, i32 31), !dbg !33
  %97 = bitcast i32 %96 to float, !dbg !33
  %98 = fadd float %94, %97, !dbg !28
  %99 = bitcast float %98 to i32, !dbg !33
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 2, i32 31), !dbg !33
  %101 = bitcast i32 %100 to float, !dbg !33
  %102 = fadd float %98, %101, !dbg !28
  %103 = bitcast float %102 to i32, !dbg !33
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 1, i32 31), !dbg !33
  %105 = bitcast i32 %104 to float, !dbg !33
  %106 = fadd float %102, %105, !dbg !28
  %107 = and i1 %84, %81, !dbg !33
  %108 = bitcast float %106 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %108, i1 %107) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %109 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !33
  %110 = tail call float @llvm.nvvm.div.full(float %109, float 4.096000e+03), !dbg !34
  %111 = fadd float %110, 0x3EE4F8B580000000, !dbg !35
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i = icmp eq i32 %112, 0, !dbg !36
  br i1 %.not.i, label %115, label %113, !dbg !36

113:                                              ; preds = %9
  %114 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %111), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

115:                                              ; preds = %9
  %116 = tail call float @llvm.nvvm.rsqrt.approx.f(float %111), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

__nv_rsqrtf.exit:                                 ; preds = %113, %115
  %.0.i = phi float [ %114, %113 ], [ %116, %115 ], !dbg !36
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i5 = icmp eq i32 %118, 0, !dbg !36
  br i1 %.not.i5, label %121, label %119, !dbg !36

119:                                              ; preds = %__nv_rsqrtf.exit
  %120 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %111), !dbg !36
  br label %__nv_rsqrtf.exit7, !dbg !36

121:                                              ; preds = %__nv_rsqrtf.exit
  %122 = tail call float @llvm.nvvm.rsqrt.approx.f(float %111), !dbg !36
  br label %__nv_rsqrtf.exit7, !dbg !36

__nv_rsqrtf.exit7:                                ; preds = %119, %121
  %.0.i6 = phi float [ %120, %119 ], [ %122, %121 ], !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %123 = sext i32 %10 to i64, !dbg !38
  %124 = getelementptr float, ptr addrspace(1) %1, i64 %123, !dbg !38
  %125 = and i32 %12, 1023, !dbg !39
  %126 = icmp eq i32 %125, 0, !dbg !39
  %127 = bitcast float %.0.i to i32, !dbg !39
  %128 = and i1 %126, %11, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %127, ptr addrspace(1) %124, i1 %128) #5, !dbg !39
  %129 = zext nneg i32 %15 to i64, !dbg !40
  %130 = getelementptr half, ptr addrspace(1) %4, i64 %129, !dbg !41
  %131 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %130, i1 true) #5, !dbg !42
  %132 = bitcast i32 %131 to <2 x half>, !dbg !42
  %133 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %25, i1 %11) #5, !dbg !43
  %134 = bitcast i32 %133 to <2 x half>, !dbg !43
  %135 = getelementptr half, ptr addrspace(1) %5, i64 %18, !dbg !44
  %136 = fpext <2 x half> %132 to <2 x float>, !dbg !45
  %137 = fpext <2 x half> %134 to <2 x float>, !dbg !46
  %138 = insertelement <2 x float> poison, float %.0.i6, i64 0, !dbg !47
  %139 = shufflevector <2 x float> %138, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !47
  %140 = fmul <2 x float> %139, %137, !dbg !47
  %141 = fmul <2 x float> %140, %136, !dbg !48
  %142 = fptrunc <2 x float> %141 to <2 x half>, !dbg !49
  %143 = bitcast <2 x half> %142 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %143, ptr addrspace(1) %135, i1 %11) #5, !dbg !49
  %144 = or disjoint i64 %129, 2048, !dbg !50
  %145 = getelementptr half, ptr addrspace(1) %4, i64 %144, !dbg !41
  %146 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %145, i1 true) #5, !dbg !42
  %147 = bitcast i32 %146 to <2 x half>, !dbg !42
  %148 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %43, i1 %11) #5, !dbg !43
  %149 = bitcast i32 %148 to <2 x half>, !dbg !43
  %150 = getelementptr half, ptr addrspace(1) %5, i64 %36, !dbg !44
  %151 = fpext <2 x half> %147 to <2 x float>, !dbg !45
  %152 = fpext <2 x half> %149 to <2 x float>, !dbg !46
  %153 = fmul <2 x float> %139, %152, !dbg !47
  %154 = fmul <2 x float> %153, %151, !dbg !48
  %155 = fptrunc <2 x float> %154 to <2 x half>, !dbg !49
  %156 = bitcast <2 x half> %155 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %156, ptr addrspace(1) %150, i1 %11) #5, !dbg !49
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cirveghol7wjrq7zwkkgu3sphruzjhq4ru5zcvmudgaexdo5niag.py", directory: "./local_cache/ir")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 21, scope: !6)
!11 = !DILocation(line: 25, column: 37, scope: !6)
!12 = !DILocation(line: 35, column: 46, scope: !6)
!13 = !DILocation(line: 35, column: 34, scope: !6)
!14 = !DILocation(line: 35, column: 51, scope: !6)
!15 = !DILocation(line: 36, column: 34, scope: !6)
!16 = !DILocation(line: 36, column: 51, scope: !6)
!17 = !DILocation(line: 37, column: 38, scope: !6)
!18 = !DILocation(line: 37, column: 55, scope: !6)
!19 = !DILocation(line: 35, column: 113, scope: !6)
!20 = !DILocation(line: 36, column: 113, scope: !6)
!21 = !DILocation(line: 37, column: 117, scope: !6)
!22 = !DILocation(line: 38, column: 22, scope: !6)
!23 = !DILocation(line: 39, column: 22, scope: !6)
!24 = !DILocation(line: 45, column: 55, scope: !6)
!25 = !DILocation(line: 35, column: 41, scope: !6)
!26 = !DILocation(line: 41, column: 22, scope: !6)
!27 = !DILocation(line: 43, column: 23, scope: !6)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !32)
!29 = distinct !DILexicalBlockFile(scope: !31, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!31 = distinct !DILexicalBlockFile(scope: !6, file: !30, discriminator: 0)
!32 = !DILocation(line: 46, column: 25, scope: !6)
!33 = !DILocation(line: 286, column: 36, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 48, column: 20, scope: !6)
!35 = !DILocation(line: 50, column: 20, scope: !6)
!36 = !DILocation(line: 51, column: 28, scope: !6)
!37 = !DILocation(line: 52, column: 4, scope: !6)
!38 = !DILocation(line: 53, column: 28, scope: !6)
!39 = !DILocation(line: 53, column: 40, scope: !6)
!40 = !DILocation(line: 54, column: 40, scope: !6)
!41 = !DILocation(line: 60, column: 35, scope: !6)
!42 = !DILocation(line: 60, column: 42, scope: !6)
!43 = !DILocation(line: 61, column: 56, scope: !6)
!44 = !DILocation(line: 66, column: 29, scope: !6)
!45 = !DILocation(line: 60, column: 95, scope: !6)
!46 = !DILocation(line: 61, column: 118, scope: !6)
!47 = !DILocation(line: 63, column: 24, scope: !6)
!48 = !DILocation(line: 65, column: 24, scope: !6)
!49 = !DILocation(line: 66, column: 53, scope: !6)
!50 = !DILocation(line: 55, column: 31, scope: !6)
!51 = !DILocation(line: 54, column: 4, scope: !6)
