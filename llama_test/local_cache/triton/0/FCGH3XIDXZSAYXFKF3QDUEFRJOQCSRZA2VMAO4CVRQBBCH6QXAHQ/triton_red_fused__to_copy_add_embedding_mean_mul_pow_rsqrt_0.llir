; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [73 x i8] c"./local_cache/us/cusn5r4ftncl7gqsiixg3hw3ojcfuvaqdhezlxblwecnlckjkjne.py\00"
@assertMessage_0 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp4 < 128256\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !10 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %11 = shl i32 %10, 2, !dbg !12
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %13 = lshr i32 %12, 2, !dbg !13
  %14 = and i32 %13, 3, !dbg !13
  %15 = and i32 %12, 3, !dbg !13
  %16 = or disjoint i32 %14, %11, !dbg !14
  %17 = or disjoint i32 %11, %15, !dbg !14
  %18 = icmp slt i32 %16, %6, !dbg !15
  %19 = icmp slt i32 %17, %6, !dbg !15
  %20 = sext i32 %16 to i64, !dbg !16
  %21 = getelementptr i64, ptr addrspace(1) %1, i64 %20, !dbg !16
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %21, i1 %18) #6, !dbg !17
  %23 = add i64 %22, 128256, !dbg !18
  %24 = icmp slt i64 %22, 0, !dbg !19
  %25 = select i1 %24, i64 %23, i64 %22, !dbg !20
  %26 = icmp ugt i64 %25, 128255, !dbg !21
  %.not2 = and i1 %18, %26, !dbg !22
  %27 = shl i32 %16, 12, !dbg !23
  %invariant.op = or disjoint i32 %15, %27, !dbg !24
  %28 = and i32 %12, 240
  %29 = icmp eq i32 %28, 0
  %30 = and i1 %29, %18
  br i1 %.not2, label %46, label %.split.preheader, !dbg !25

.split.preheader:                                 ; preds = %9
  %31 = zext nneg i32 %15 to i64, !dbg !24
  %.idx = shl i64 %25, 13
  %32 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx
  br label %.split, !dbg !24

.split:                                           ; preds = %.split.preheader, %.split
  %indvars.iv = phi i64 [ 0, %.split.preheader ], [ %indvars.iv.next, %.split ]
  %33 = phi float [ 0.000000e+00, %.split.preheader ], [ %41, %.split ]
  %34 = or disjoint i64 %indvars.iv, %31, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %35 = getelementptr half, ptr addrspace(1) %32, i64 %34, !dbg !27
  %36 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %35, i1 %18) #6, !dbg !28
  %37 = bitcast i16 %36 to half, !dbg !28
  %38 = fpext half %37 to float, !dbg !29
  %39 = fmul float %38, %38, !dbg !30
  %40 = fadd float %33, %39, !dbg !31
  %41 = select i1 %18, float %40, float %33, !dbg !32
  %42 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %42
  %43 = sext i32 %.reass to i64, !dbg !33
  %44 = getelementptr half, ptr addrspace(1) %4, i64 %43, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %36, ptr addrspace(1) %44, i1 %30) #6, !dbg !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !24
  %45 = icmp samesign ult i64 %indvars.iv, 4092, !dbg !24
  br i1 %45, label %.split, label %47, !dbg !24

46:                                               ; preds = %9
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !25
  unreachable, !dbg !25

47:                                               ; preds = %.split
  %48 = bitcast float %41 to i32, !dbg !35
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 2, i32 31), !dbg !35
  %50 = bitcast i32 %49 to float, !dbg !35
  %51 = fadd float %41, %50, !dbg !39
  %52 = bitcast float %51 to i32, !dbg !35
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 1, i32 31), !dbg !35
  %54 = bitcast i32 %53 to float, !dbg !35
  %55 = fadd float %51, %54, !dbg !39
  %56 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %14, !dbg !41
  %57 = bitcast float %55 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %57, i1 true) #6, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %58 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %15, !dbg !41
  %59 = load float, ptr addrspace(3) %58, align 4, !dbg !41
  %60 = tail call float @llvm.nvvm.div.full(float %59, float 4.096000e+03), !dbg !42
  %61 = tail call float @llvm.nvvm.div.full(float %55, float 4.096000e+03), !dbg !42
  %62 = fadd float %60, 0x3EE4F8B580000000, !dbg !43
  %63 = fadd float %61, 0x3EE4F8B580000000, !dbg !43
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !44
  %.not.i = icmp eq i32 %64, 0, !dbg !44
  br i1 %.not.i, label %67, label %65, !dbg !44

65:                                               ; preds = %47
  %66 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %62), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

67:                                               ; preds = %47
  %68 = tail call float @llvm.nvvm.rsqrt.approx.f(float %62), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

__nv_rsqrtf.exit:                                 ; preds = %65, %67
  %.0.i = phi float [ %66, %65 ], [ %68, %67 ], !dbg !44
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !44
  %.not.i3 = icmp eq i32 %69, 0, !dbg !44
  br i1 %.not.i3, label %72, label %70, !dbg !44

70:                                               ; preds = %__nv_rsqrtf.exit
  %71 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %63), !dbg !44
  br label %__nv_rsqrtf.exit5, !dbg !44

72:                                               ; preds = %__nv_rsqrtf.exit
  %73 = tail call float @llvm.nvvm.rsqrt.approx.f(float %63), !dbg !44
  br label %__nv_rsqrtf.exit5, !dbg !44

__nv_rsqrtf.exit5:                                ; preds = %70, %72
  %.0.i4 = phi float [ %71, %70 ], [ %73, %72 ], !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %74 = sext i32 %17 to i64, !dbg !46
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !46
  %76 = and i32 %12, 252, !dbg !47
  %77 = icmp eq i32 %76, 0, !dbg !47
  %78 = bitcast float %.0.i to i32, !dbg !47
  %79 = and i1 %77, %19, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %78, ptr addrspace(1) %75, i1 %79) #6, !dbg !47
  br label %80, !dbg !48

80:                                               ; preds = %__nv_rsqrtf.exit5, %80
  %indvars.iv9 = phi i64 [ 0, %__nv_rsqrtf.exit5 ], [ %indvars.iv.next10, %80 ]
  %81 = or disjoint i64 %indvars.iv9, %31, !dbg !49
  %82 = getelementptr half, ptr addrspace(1) %3, i64 %81, !dbg !50
  %83 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %82, i1 true) #6, !dbg !51
  %84 = bitcast i16 %83 to half, !dbg !51
  %85 = fpext half %84 to float, !dbg !52
  %86 = trunc nuw nsw i64 %indvars.iv9 to i32
  %.reass8 = or i32 %invariant.op, %86
  %87 = sext i32 %.reass8 to i64, !dbg !53
  %88 = getelementptr half, ptr addrspace(1) %4, i64 %87, !dbg !53
  %89 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %88, i1 %18) #6, !dbg !54
  %90 = bitcast i16 %89 to half, !dbg !54
  %91 = fpext half %90 to float, !dbg !55
  %92 = fmul float %.0.i4, %91, !dbg !56
  %93 = fmul float %92, %85, !dbg !57
  %94 = getelementptr half, ptr addrspace(1) %5, i64 %87, !dbg !58
  %95 = fptrunc float %93 to half, !dbg !59
  %96 = bitcast half %95 to i16, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %96, ptr addrspace(1) %94, i1 %30) #6, !dbg !59
  %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 4, !dbg !48
  %97 = icmp samesign ult i64 %indvars.iv9, 4092, !dbg !48
  br i1 %97, label %80, label %98, !dbg !48

98:                                               ; preds = %80
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cusn5r4ftncl7gqsiixg3hw3ojcfuvaqdhezlxblwecnlckjkjne.py", directory: "./local_cache/us")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 22, column: 28, scope: !10)
!12 = !DILocation(line: 22, column: 33, scope: !10)
!13 = !DILocation(line: 23, column: 44, scope: !10)
!14 = !DILocation(line: 23, column: 23, scope: !10)
!15 = !DILocation(line: 24, column: 21, scope: !10)
!16 = !DILocation(line: 28, column: 30, scope: !10)
!17 = !DILocation(line: 28, column: 35, scope: !10)
!18 = !DILocation(line: 37, column: 22, scope: !10)
!19 = !DILocation(line: 38, column: 22, scope: !10)
!20 = !DILocation(line: 39, column: 36, scope: !10)
!21 = !DILocation(line: 40, column: 41, scope: !10)
!22 = !DILocation(line: 41, column: 46, scope: !10)
!23 = !DILocation(line: 47, column: 41, scope: !10)
!24 = !DILocation(line: 30, column: 40, scope: !10)
!25 = !DILocation(line: 40, column: 69, scope: !10)
!26 = !DILocation(line: 31, column: 31, scope: !10)
!27 = !DILocation(line: 41, column: 34, scope: !10)
!28 = !DILocation(line: 41, column: 53, scope: !10)
!29 = !DILocation(line: 41, column: 115, scope: !10)
!30 = !DILocation(line: 43, column: 22, scope: !10)
!31 = !DILocation(line: 45, column: 25, scope: !10)
!32 = !DILocation(line: 46, column: 50, scope: !10)
!33 = !DILocation(line: 47, column: 29, scope: !10)
!34 = !DILocation(line: 47, column: 52, scope: !10)
!35 = !DILocation(line: 286, column: 36, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !10, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!38 = !DILocation(line: 48, column: 27, scope: !10)
!39 = !DILocation(line: 256, column: 15, scope: !40, inlinedAt: !38)
!40 = distinct !DILexicalBlockFile(scope: !36, file: !37, discriminator: 0)
!41 = !DILocation(line: 48, column: 30, scope: !10)
!42 = !DILocation(line: 50, column: 21, scope: !10)
!43 = !DILocation(line: 52, column: 20, scope: !10)
!44 = !DILocation(line: 53, column: 28, scope: !10)
!45 = !DILocation(line: 54, column: 4, scope: !10)
!46 = !DILocation(line: 55, column: 28, scope: !10)
!47 = !DILocation(line: 55, column: 40, scope: !10)
!48 = !DILocation(line: 56, column: 40, scope: !10)
!49 = !DILocation(line: 57, column: 31, scope: !10)
!50 = !DILocation(line: 62, column: 35, scope: !10)
!51 = !DILocation(line: 62, column: 42, scope: !10)
!52 = !DILocation(line: 62, column: 95, scope: !10)
!53 = !DILocation(line: 63, column: 36, scope: !10)
!54 = !DILocation(line: 63, column: 53, scope: !10)
!55 = !DILocation(line: 63, column: 115, scope: !10)
!56 = !DILocation(line: 65, column: 24, scope: !10)
!57 = !DILocation(line: 67, column: 24, scope: !10)
!58 = !DILocation(line: 68, column: 29, scope: !10)
!59 = !DILocation(line: 68, column: 53, scope: !10)
!60 = !DILocation(line: 56, column: 4, scope: !10)
