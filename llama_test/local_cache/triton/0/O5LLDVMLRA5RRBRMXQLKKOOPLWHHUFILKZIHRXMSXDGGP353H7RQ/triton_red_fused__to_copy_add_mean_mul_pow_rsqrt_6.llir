; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 4, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = lshr i32 %11, 4, !dbg !11
  %13 = and i32 %12, 15, !dbg !11
  %14 = or disjoint i32 %13, %10, !dbg !12
  %15 = icmp slt i32 %14, %5, !dbg !13
  %16 = shl i32 %11, 2, !dbg !14
  %17 = and i32 %16, 60, !dbg !14
  %18 = shl i32 %14, 12, !dbg !15
  %19 = or disjoint i32 %18, %17
  br label %20, !dbg !16

20:                                               ; preds = %8, %20
  %21 = phi float [ 0.000000e+00, %8 ], [ %68, %20 ]
  %22 = phi float [ 0.000000e+00, %8 ], [ %69, %20 ]
  %23 = phi float [ 0.000000e+00, %8 ], [ %70, %20 ]
  %24 = phi float [ 0.000000e+00, %8 ], [ %71, %20 ]
  %25 = phi i32 [ 0, %8 ], [ %72, %20 ]
  %26 = or i32 %19, %25, !dbg !17
  %27 = sext i32 %26 to i64, !dbg !18
  %28 = getelementptr half, ptr addrspace(1) %1, i64 %27, !dbg !18
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %28, i1 %15) #5, !dbg !19
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !19
  %31 = bitcast i32 %30 to <2 x half>, !dbg !19
  %32 = extractvalue { i32, i32 } %29, 1, !dbg !19
  %33 = bitcast i32 %32 to <2 x half>, !dbg !19
  %34 = extractelement <2 x half> %31, i64 0, !dbg !19
  %35 = extractelement <2 x half> %31, i64 1, !dbg !19
  %36 = extractelement <2 x half> %33, i64 0, !dbg !19
  %37 = extractelement <2 x half> %33, i64 1, !dbg !19
  %38 = fpext half %34 to float, !dbg !20
  %39 = fpext half %35 to float, !dbg !20
  %40 = fpext half %36 to float, !dbg !20
  %41 = fpext half %37 to float, !dbg !20
  %42 = getelementptr half, ptr addrspace(1) %2, i64 %27, !dbg !21
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %42, i1 %15) #5, !dbg !22
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !22
  %45 = bitcast i32 %44 to <2 x half>, !dbg !22
  %46 = extractvalue { i32, i32 } %43, 1, !dbg !22
  %47 = bitcast i32 %46 to <2 x half>, !dbg !22
  %48 = extractelement <2 x half> %45, i64 0, !dbg !22
  %49 = extractelement <2 x half> %45, i64 1, !dbg !22
  %50 = extractelement <2 x half> %47, i64 0, !dbg !22
  %51 = extractelement <2 x half> %47, i64 1, !dbg !22
  %52 = fpext half %48 to float, !dbg !23
  %53 = fpext half %49 to float, !dbg !23
  %54 = fpext half %50 to float, !dbg !23
  %55 = fpext half %51 to float, !dbg !23
  %56 = fadd float %38, %52, !dbg !24
  %57 = fadd float %39, %53, !dbg !24
  %58 = fadd float %40, %54, !dbg !24
  %59 = fadd float %41, %55, !dbg !24
  %60 = fmul float %56, %56, !dbg !25
  %61 = fmul float %57, %57, !dbg !25
  %62 = fmul float %58, %58, !dbg !25
  %63 = fmul float %59, %59, !dbg !25
  %64 = fadd float %21, %60, !dbg !26
  %65 = fadd float %22, %61, !dbg !26
  %66 = fadd float %23, %62, !dbg !26
  %67 = fadd float %24, %63, !dbg !26
  %68 = select i1 %15, float %64, float %21, !dbg !27
  %69 = select i1 %15, float %65, float %22, !dbg !27
  %70 = select i1 %15, float %66, float %23, !dbg !27
  %71 = select i1 %15, float %67, float %24, !dbg !27
  %72 = add nuw nsw i32 %25, 64, !dbg !16
  %73 = icmp samesign ult i32 %25, 4032, !dbg !16
  br i1 %73, label %20, label %74, !dbg !16

74:                                               ; preds = %20
  %75 = and i32 %11, 15, !dbg !11
  %76 = or disjoint i32 %10, %75, !dbg !12
  %77 = icmp slt i32 %76, %5, !dbg !13
  %78 = fadd float %68, %69, !dbg !28
  %79 = fadd float %70, %78, !dbg !28
  %80 = fadd float %71, %79, !dbg !28
  %81 = bitcast float %80 to i32, !dbg !33
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 8, i32 31), !dbg !33
  %83 = bitcast i32 %82 to float, !dbg !33
  %84 = fadd float %80, %83, !dbg !28
  %85 = bitcast float %84 to i32, !dbg !33
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 4, i32 31), !dbg !33
  %87 = bitcast i32 %86 to float, !dbg !33
  %88 = fadd float %84, %87, !dbg !28
  %89 = bitcast float %88 to i32, !dbg !33
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 2, i32 31), !dbg !33
  %91 = bitcast i32 %90 to float, !dbg !33
  %92 = fadd float %88, %91, !dbg !28
  %93 = bitcast float %92 to i32, !dbg !33
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 1, i32 31), !dbg !33
  %95 = bitcast i32 %94 to float, !dbg !33
  %96 = fadd float %92, %95, !dbg !28
  %97 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %13, !dbg !34
  %98 = bitcast float %96 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %99 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %75, !dbg !34
  %100 = load float, ptr addrspace(3) %99, align 4, !dbg !34
  %101 = tail call float @llvm.nvvm.div.full(float %100, float 4.096000e+03), !dbg !35
  %102 = tail call float @llvm.nvvm.div.full(float %96, float 4.096000e+03), !dbg !35
  %103 = fadd float %101, 0x3EE4F8B580000000, !dbg !36
  %104 = fadd float %102, 0x3EE4F8B580000000, !dbg !36
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %.not.i = icmp eq i32 %105, 0, !dbg !34
  br i1 %.not.i, label %108, label %106, !dbg !34

106:                                              ; preds = %74
  %107 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %103), !dbg !34
  br label %__nv_rsqrtf.exit, !dbg !34

108:                                              ; preds = %74
  %109 = tail call float @llvm.nvvm.rsqrt.approx.f(float %103), !dbg !34
  br label %__nv_rsqrtf.exit, !dbg !34

__nv_rsqrtf.exit:                                 ; preds = %106, %108
  %.0.i = phi float [ %107, %106 ], [ %109, %108 ], !dbg !34
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %.not.i12 = icmp eq i32 %113, 0, !dbg !34
  br i1 %.not.i12, label %116, label %114, !dbg !34

114:                                              ; preds = %__nv_rsqrtf.exit
  %115 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %104), !dbg !34
  br label %__nv_rsqrtf.exit14, !dbg !34

116:                                              ; preds = %__nv_rsqrtf.exit
  %117 = tail call float @llvm.nvvm.rsqrt.approx.f(float %104), !dbg !34
  br label %__nv_rsqrtf.exit14, !dbg !34

__nv_rsqrtf.exit14:                               ; preds = %114, %116
  %.0.i13 = phi float [ %115, %114 ], [ %117, %116 ], !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %118 = sext i32 %76 to i64, !dbg !38
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !38
  %120 = and i32 %11, 240, !dbg !39
  %121 = icmp eq i32 %120, 0, !dbg !39
  %122 = bitcast float %.0.i to i32, !dbg !39
  %123 = and i1 %121, %77, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %122, ptr addrspace(1) %119, i1 %123) #5, !dbg !39
  %124 = zext nneg i32 %17 to i64, !dbg !40
  %125 = insertelement <2 x float> poison, float %.0.i13, i64 0, !dbg !41
  %126 = shufflevector <2 x float> %125, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !41
  br label %127, !dbg !40

127:                                              ; preds = %__nv_rsqrtf.exit14, %127
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit14 ], [ %indvars.iv.next, %127 ]
  %128 = or disjoint i64 %indvars.iv, %124, !dbg !42
  %129 = getelementptr half, ptr addrspace(1) %3, i64 %128, !dbg !43
  %130 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %129, i1 true) #5, !dbg !44
  %131 = extractvalue { i32, i32 } %130, 0, !dbg !44
  %132 = bitcast i32 %131 to <2 x half>, !dbg !44
  %133 = extractvalue { i32, i32 } %130, 1, !dbg !44
  %134 = bitcast i32 %133 to <2 x half>, !dbg !44
  %135 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %19, %135
  %136 = sext i32 %.reass to i64, !dbg !45
  %137 = getelementptr half, ptr addrspace(1) %1, i64 %136, !dbg !45
  %138 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %137, i1 %15) #5, !dbg !46
  %139 = extractvalue { i32, i32 } %138, 0, !dbg !46
  %140 = bitcast i32 %139 to <2 x half>, !dbg !46
  %141 = extractvalue { i32, i32 } %138, 1, !dbg !46
  %142 = bitcast i32 %141 to <2 x half>, !dbg !46
  %143 = getelementptr half, ptr addrspace(1) %2, i64 %136, !dbg !47
  %144 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %143, i1 %15) #5, !dbg !48
  %145 = extractvalue { i32, i32 } %144, 0, !dbg !48
  %146 = bitcast i32 %145 to <2 x half>, !dbg !48
  %147 = extractvalue { i32, i32 } %144, 1, !dbg !48
  %148 = bitcast i32 %147 to <2 x half>, !dbg !48
  %149 = getelementptr half, ptr addrspace(1) %4, i64 %136, !dbg !49
  %150 = fpext <2 x half> %132 to <2 x float>, !dbg !50
  %151 = fpext <2 x half> %140 to <2 x float>, !dbg !51
  %152 = fpext <2 x half> %146 to <2 x float>, !dbg !52
  %153 = fadd <2 x float> %151, %152, !dbg !53
  %154 = fmul <2 x float> %126, %153, !dbg !41
  %155 = fmul <2 x float> %154, %150, !dbg !54
  %156 = fptrunc <2 x float> %155 to <2 x half>, !dbg !55
  %157 = fpext <2 x half> %134 to <2 x float>, !dbg !50
  %158 = fpext <2 x half> %142 to <2 x float>, !dbg !51
  %159 = fpext <2 x half> %148 to <2 x float>, !dbg !52
  %160 = fadd <2 x float> %158, %159, !dbg !53
  %161 = fmul <2 x float> %126, %160, !dbg !41
  %162 = fmul <2 x float> %161, %157, !dbg !54
  %163 = fptrunc <2 x float> %162 to <2 x half>, !dbg !55
  %164 = bitcast <2 x half> %156 to i32, !dbg !55
  %165 = bitcast <2 x half> %163 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %164, i32 %165, ptr addrspace(1) %149, i1 %15) #5, !dbg !55
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !40
  %166 = icmp samesign ult i64 %indvars.iv, 4032, !dbg !40
  br i1 %166, label %127, label %167, !dbg !40

167:                                              ; preds = %127
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5khdvdmkophlyqmatpbonjtmvckgp6kh4tu2ucyewdkyzkjokji.py", directory: "./local_cache/5k")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 29, column: 40, scope: !6)
!17 = !DILocation(line: 35, column: 41, scope: !6)
!18 = !DILocation(line: 35, column: 34, scope: !6)
!19 = !DILocation(line: 35, column: 51, scope: !6)
!20 = !DILocation(line: 35, column: 112, scope: !6)
!21 = !DILocation(line: 36, column: 34, scope: !6)
!22 = !DILocation(line: 36, column: 51, scope: !6)
!23 = !DILocation(line: 36, column: 112, scope: !6)
!24 = !DILocation(line: 37, column: 22, scope: !6)
!25 = !DILocation(line: 39, column: 22, scope: !6)
!26 = !DILocation(line: 41, column: 23, scope: !6)
!27 = !DILocation(line: 42, column: 48, scope: !6)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !32)
!29 = distinct !DILexicalBlockFile(scope: !31, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!31 = distinct !DILexicalBlockFile(scope: !6, file: !30, discriminator: 0)
!32 = !DILocation(line: 43, column: 25, scope: !6)
!33 = !DILocation(line: 286, column: 36, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 48, column: 28, scope: !6)
!35 = !DILocation(line: 45, column: 19, scope: !6)
!36 = !DILocation(line: 47, column: 19, scope: !6)
!37 = !DILocation(line: 49, column: 4, scope: !6)
!38 = !DILocation(line: 50, column: 28, scope: !6)
!39 = !DILocation(line: 50, column: 40, scope: !6)
!40 = !DILocation(line: 51, column: 40, scope: !6)
!41 = !DILocation(line: 62, column: 24, scope: !6)
!42 = !DILocation(line: 52, column: 31, scope: !6)
!43 = !DILocation(line: 57, column: 35, scope: !6)
!44 = !DILocation(line: 57, column: 42, scope: !6)
!45 = !DILocation(line: 58, column: 35, scope: !6)
!46 = !DILocation(line: 58, column: 52, scope: !6)
!47 = !DILocation(line: 59, column: 35, scope: !6)
!48 = !DILocation(line: 59, column: 52, scope: !6)
!49 = !DILocation(line: 65, column: 29, scope: !6)
!50 = !DILocation(line: 57, column: 95, scope: !6)
!51 = !DILocation(line: 58, column: 114, scope: !6)
!52 = !DILocation(line: 59, column: 114, scope: !6)
!53 = !DILocation(line: 60, column: 24, scope: !6)
!54 = !DILocation(line: 64, column: 24, scope: !6)
!55 = !DILocation(line: 65, column: 53, scope: !6)
!56 = !DILocation(line: 51, column: 4, scope: !6)
