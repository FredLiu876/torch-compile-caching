; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_div_mul_pow_sum_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = icmp slt i32 %11, %7, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %14 = and i32 %13, 31, !dbg !11
  %15 = shl i32 %13, 2, !dbg !11
  %16 = and i32 %15, 2044, !dbg !11
  %17 = shl i32 %11, 12, !dbg !12
  %invariant.op = or disjoint i32 %16, %17, !dbg !13
  %18 = zext nneg i32 %16 to i64, !dbg !13
  %19 = sext i32 %invariant.op to i64, !dbg !14
  %20 = getelementptr half, ptr addrspace(1) %1, i64 %19, !dbg !14
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %20, i1 %12) #3, !dbg !15
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !15
  %23 = bitcast i32 %22 to <2 x half>, !dbg !15
  %24 = extractvalue { i32, i32 } %21, 1, !dbg !15
  %25 = bitcast i32 %24 to <2 x half>, !dbg !15
  %26 = getelementptr half, ptr addrspace(1) %2, i64 %19, !dbg !16
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %26, i1 %12) #3, !dbg !17
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !17
  %29 = bitcast i32 %28 to <2 x half>, !dbg !17
  %30 = extractvalue { i32, i32 } %27, 1, !dbg !17
  %31 = bitcast i32 %30 to <2 x half>, !dbg !17
  %32 = getelementptr half, ptr addrspace(1) %3, i64 %19, !dbg !18
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %32, i1 %12) #3, !dbg !19
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !19
  %35 = bitcast i32 %34 to <2 x half>, !dbg !19
  %36 = extractvalue { i32, i32 } %33, 1, !dbg !19
  %37 = bitcast i32 %36 to <2 x half>, !dbg !19
  %38 = getelementptr half, ptr addrspace(1) %4, i64 %18, !dbg !20
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %38, i1 true) #3, !dbg !21
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !21
  %41 = bitcast i32 %40 to <2 x half>, !dbg !21
  %42 = extractvalue { i32, i32 } %39, 1, !dbg !21
  %43 = bitcast i32 %42 to <2 x half>, !dbg !21
  %44 = getelementptr half, ptr addrspace(1) %5, i64 %19, !dbg !22
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %44, i1 %12) #3, !dbg !23
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !23
  %47 = bitcast i32 %46 to <2 x half>, !dbg !23
  %48 = extractvalue { i32, i32 } %45, 1, !dbg !23
  %49 = bitcast i32 %48 to <2 x half>, !dbg !23
  %50 = or disjoint i64 %18, 2048, !dbg !24
  %.reass.1 = or disjoint i32 %invariant.op, 2048
  %51 = sext i32 %.reass.1 to i64, !dbg !14
  %52 = getelementptr half, ptr addrspace(1) %1, i64 %51, !dbg !14
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %52, i1 %12) #3, !dbg !15
  %54 = extractvalue { i32, i32 } %53, 0, !dbg !15
  %55 = bitcast i32 %54 to <2 x half>, !dbg !15
  %56 = extractvalue { i32, i32 } %53, 1, !dbg !15
  %57 = bitcast i32 %56 to <2 x half>, !dbg !15
  %58 = getelementptr half, ptr addrspace(1) %2, i64 %51, !dbg !16
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %58, i1 %12) #3, !dbg !17
  %60 = extractvalue { i32, i32 } %59, 0, !dbg !17
  %61 = bitcast i32 %60 to <2 x half>, !dbg !17
  %62 = extractvalue { i32, i32 } %59, 1, !dbg !17
  %63 = bitcast i32 %62 to <2 x half>, !dbg !17
  %64 = getelementptr half, ptr addrspace(1) %3, i64 %51, !dbg !18
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %64, i1 %12) #3, !dbg !19
  %66 = extractvalue { i32, i32 } %65, 0, !dbg !19
  %67 = bitcast i32 %66 to <2 x half>, !dbg !19
  %68 = extractvalue { i32, i32 } %65, 1, !dbg !19
  %69 = bitcast i32 %68 to <2 x half>, !dbg !19
  %70 = getelementptr half, ptr addrspace(1) %4, i64 %50, !dbg !20
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %70, i1 true) #3, !dbg !21
  %72 = extractvalue { i32, i32 } %71, 0, !dbg !21
  %73 = bitcast i32 %72 to <2 x half>, !dbg !21
  %74 = extractvalue { i32, i32 } %71, 1, !dbg !21
  %75 = bitcast i32 %74 to <2 x half>, !dbg !21
  %76 = getelementptr half, ptr addrspace(1) %5, i64 %51, !dbg !22
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %76, i1 %12) #3, !dbg !23
  %78 = extractvalue { i32, i32 } %77, 0, !dbg !23
  %79 = bitcast i32 %78 to <2 x half>, !dbg !23
  %80 = extractvalue { i32, i32 } %77, 1, !dbg !23
  %81 = bitcast i32 %80 to <2 x half>, !dbg !23
  %82 = fpext <2 x half> %23 to <2 x float>, !dbg !25
  %83 = fpext <2 x half> %29 to <2 x float>, !dbg !26
  %84 = fpext <2 x half> %35 to <2 x float>, !dbg !27
  %85 = fpext <2 x half> %41 to <2 x float>, !dbg !28
  %86 = fpext <2 x half> %47 to <2 x float>, !dbg !29
  %87 = fadd <2 x float> %82, %83, !dbg !30
  %88 = fadd <2 x float> %87, %84, !dbg !31
  %89 = fmul <2 x float> %88, %85, !dbg !32
  %90 = fmul <2 x float> %89, %86, !dbg !33
  %91 = fadd <2 x float> %90, zeroinitializer, !dbg !34
  %92 = fpext <2 x half> %55 to <2 x float>, !dbg !25
  %93 = fpext <2 x half> %61 to <2 x float>, !dbg !26
  %94 = fpext <2 x half> %67 to <2 x float>, !dbg !27
  %95 = fpext <2 x half> %73 to <2 x float>, !dbg !28
  %96 = fpext <2 x half> %79 to <2 x float>, !dbg !29
  %97 = fadd <2 x float> %92, %93, !dbg !30
  %98 = fadd <2 x float> %97, %94, !dbg !31
  %99 = fmul <2 x float> %98, %95, !dbg !32
  %100 = fmul <2 x float> %99, %96, !dbg !33
  %101 = fadd <2 x float> %91, %100, !dbg !34
  %102 = fpext <2 x half> %25 to <2 x float>, !dbg !25
  %103 = fpext <2 x half> %31 to <2 x float>, !dbg !26
  %104 = fpext <2 x half> %37 to <2 x float>, !dbg !27
  %105 = fpext <2 x half> %43 to <2 x float>, !dbg !28
  %106 = fpext <2 x half> %49 to <2 x float>, !dbg !29
  %107 = fadd <2 x float> %102, %103, !dbg !30
  %108 = fadd <2 x float> %107, %104, !dbg !31
  %109 = fmul <2 x float> %108, %105, !dbg !32
  %110 = fmul <2 x float> %109, %106, !dbg !33
  %111 = fadd <2 x float> %110, zeroinitializer, !dbg !34
  %112 = fpext <2 x half> %57 to <2 x float>, !dbg !25
  %113 = fpext <2 x half> %63 to <2 x float>, !dbg !26
  %114 = fpext <2 x half> %69 to <2 x float>, !dbg !27
  %115 = fpext <2 x half> %75 to <2 x float>, !dbg !28
  %116 = fpext <2 x half> %81 to <2 x float>, !dbg !29
  %117 = fadd <2 x float> %112, %113, !dbg !30
  %118 = fadd <2 x float> %117, %114, !dbg !31
  %119 = fmul <2 x float> %118, %115, !dbg !32
  %120 = fmul <2 x float> %119, %116, !dbg !33
  %121 = fadd <2 x float> %111, %120, !dbg !34
  %122 = lshr i32 %13, 5, !dbg !11
  %shift = shufflevector <2 x float> %101, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !35
  %123 = fadd <2 x float> %101, %shift, !dbg !35
  %124 = fadd <2 x float> %121, %123, !dbg !35
  %shift7 = shufflevector <2 x float> %121, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !35
  %125 = fadd <2 x float> %shift7, %124, !dbg !35
  %126 = extractelement <2 x float> %125, i64 0, !dbg !35
  %127 = select i1 %12, float %126, float 0.000000e+00, !dbg !35
  %128 = bitcast float %127 to i32, !dbg !40
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 16, i32 31), !dbg !40
  %130 = bitcast i32 %129 to float, !dbg !40
  %131 = fadd float %127, %130, !dbg !35
  %132 = bitcast float %131 to i32, !dbg !40
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 8, i32 31), !dbg !40
  %134 = bitcast i32 %133 to float, !dbg !40
  %135 = fadd float %131, %134, !dbg !35
  %136 = bitcast float %135 to i32, !dbg !40
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 4, i32 31), !dbg !40
  %138 = bitcast i32 %137 to float, !dbg !40
  %139 = fadd float %135, %138, !dbg !35
  %140 = bitcast float %139 to i32, !dbg !40
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 2, i32 31), !dbg !40
  %142 = bitcast i32 %141 to float, !dbg !40
  %143 = fadd float %139, %142, !dbg !35
  %144 = bitcast float %143 to i32, !dbg !40
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 1, i32 31), !dbg !40
  %146 = bitcast i32 %145 to float, !dbg !40
  %147 = fadd float %143, %146, !dbg !35
  %148 = and i32 %122, 15, !dbg !40
  %149 = icmp eq i32 %14, 0, !dbg !40
  %150 = zext nneg i32 %148 to i64, !dbg !40
  %151 = getelementptr float, ptr addrspace(3) @global_smem, i64 %150, !dbg !40
  %152 = bitcast float %147 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 %149) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %153 = icmp slt i32 %13, 16, !dbg !40
  %154 = sext i32 %13 to i64, !dbg !40
  %155 = getelementptr float, ptr addrspace(3) @global_smem, i64 %154, !dbg !40
  %156 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %155, i1 %153) #3, !dbg !40
  %157 = bitcast i32 %156 to float, !dbg !40
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 8, i32 31), !dbg !40
  %159 = bitcast i32 %158 to float, !dbg !40
  %160 = fadd float %157, %159, !dbg !35
  %161 = bitcast float %160 to i32, !dbg !40
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 4, i32 31), !dbg !40
  %163 = bitcast i32 %162 to float, !dbg !40
  %164 = fadd float %160, %163, !dbg !35
  %165 = bitcast float %164 to i32, !dbg !40
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 2, i32 31), !dbg !40
  %167 = bitcast i32 %166 to float, !dbg !40
  %168 = fadd float %164, %167, !dbg !35
  %169 = bitcast float %168 to i32, !dbg !40
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 1, i32 31), !dbg !40
  %171 = bitcast i32 %170 to float, !dbg !40
  %172 = fadd float %168, %171, !dbg !35
  %173 = and i32 %13, 15, !dbg !40
  %174 = icmp eq i32 %173, 0, !dbg !40
  %175 = and i1 %153, %174, !dbg !40
  %176 = bitcast float %172 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %176, i1 %175) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %177 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !40
  %178 = sext i32 %11 to i64, !dbg !41
  %179 = getelementptr float, ptr addrspace(1) %6, i64 %178, !dbg !41
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 %12) #3, !dbg !42
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 %12) #3, !dbg !42
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 %12) #3, !dbg !42
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 %12) #3, !dbg !42
  %184 = bitcast i32 %183 to float, !dbg !42
  %185 = fmul float %177, -5.000000e-01, !dbg !43
  %186 = fmul float %184, %184, !dbg !44
  %187 = fmul float %186, %184, !dbg !45
  %188 = fmul float %185, %187, !dbg !46
  %189 = fmul float %188, 0x3F30000000000000, !dbg !47
  %190 = getelementptr half, ptr addrspace(1) %0, i64 %19, !dbg !48
  %191 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %190, i1 %12) #3, !dbg !49
  %192 = extractvalue { i32, i32 } %191, 0, !dbg !49
  %193 = bitcast i32 %192 to <2 x half>, !dbg !49
  %194 = extractvalue { i32, i32 } %191, 1, !dbg !49
  %195 = bitcast i32 %194 to <2 x half>, !dbg !49
  %196 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %20, i1 %12) #3, !dbg !50
  %197 = extractvalue { i32, i32 } %196, 0, !dbg !50
  %198 = bitcast i32 %197 to <2 x half>, !dbg !50
  %199 = extractvalue { i32, i32 } %196, 1, !dbg !50
  %200 = bitcast i32 %199 to <2 x half>, !dbg !50
  %201 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %26, i1 %12) #3, !dbg !51
  %202 = extractvalue { i32, i32 } %201, 0, !dbg !51
  %203 = bitcast i32 %202 to <2 x half>, !dbg !51
  %204 = extractvalue { i32, i32 } %201, 1, !dbg !51
  %205 = bitcast i32 %204 to <2 x half>, !dbg !51
  %206 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %32, i1 %12) #3, !dbg !52
  %207 = extractvalue { i32, i32 } %206, 0, !dbg !52
  %208 = bitcast i32 %207 to <2 x half>, !dbg !52
  %209 = extractvalue { i32, i32 } %206, 1, !dbg !52
  %210 = bitcast i32 %209 to <2 x half>, !dbg !52
  %211 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %38, i1 true) #3, !dbg !53
  %212 = extractvalue { i32, i32 } %211, 0, !dbg !53
  %213 = bitcast i32 %212 to <2 x half>, !dbg !53
  %214 = extractvalue { i32, i32 } %211, 1, !dbg !53
  %215 = bitcast i32 %214 to <2 x half>, !dbg !53
  %216 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %44, i1 %12) #3, !dbg !54
  %217 = extractvalue { i32, i32 } %216, 0, !dbg !54
  %218 = bitcast i32 %217 to <2 x half>, !dbg !54
  %219 = extractvalue { i32, i32 } %216, 1, !dbg !54
  %220 = bitcast i32 %219 to <2 x half>, !dbg !54
  %221 = fpext <2 x half> %193 to <2 x float>, !dbg !55
  %222 = fpext <2 x half> %198 to <2 x float>, !dbg !56
  %223 = fpext <2 x half> %203 to <2 x float>, !dbg !57
  %224 = fpext <2 x half> %208 to <2 x float>, !dbg !58
  %225 = fpext <2 x half> %213 to <2 x float>, !dbg !59
  %226 = fpext <2 x half> %218 to <2 x float>, !dbg !60
  %227 = fadd <2 x float> %222, %223, !dbg !61
  %228 = fadd <2 x float> %227, %224, !dbg !62
  %229 = fmul <2 x float> %228, %225, !dbg !63
  %230 = insertelement <2 x float> poison, float %184, i64 0, !dbg !64
  %231 = shufflevector <2 x float> %230, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !64
  %232 = fmul <2 x float> %229, %231, !dbg !64
  %233 = fmul <2 x float> %226, splat (float 2.000000e+00), !dbg !65
  %234 = insertelement <2 x float> poison, float %189, i64 0, !dbg !66
  %235 = shufflevector <2 x float> %234, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !66
  %236 = fmul <2 x float> %235, %233, !dbg !66
  %237 = fadd <2 x float> %232, %236, !dbg !67
  %238 = fadd <2 x float> %237, %221, !dbg !68
  %239 = fptrunc <2 x float> %238 to <2 x half>, !dbg !69
  %240 = fpext <2 x half> %195 to <2 x float>, !dbg !55
  %241 = fpext <2 x half> %200 to <2 x float>, !dbg !56
  %242 = fpext <2 x half> %205 to <2 x float>, !dbg !57
  %243 = fpext <2 x half> %210 to <2 x float>, !dbg !58
  %244 = fpext <2 x half> %215 to <2 x float>, !dbg !59
  %245 = fpext <2 x half> %220 to <2 x float>, !dbg !60
  %246 = fadd <2 x float> %241, %242, !dbg !61
  %247 = fadd <2 x float> %246, %243, !dbg !62
  %248 = fmul <2 x float> %247, %244, !dbg !63
  %249 = fmul <2 x float> %248, %231, !dbg !64
  %250 = fmul <2 x float> %245, splat (float 2.000000e+00), !dbg !65
  %251 = fmul <2 x float> %235, %250, !dbg !66
  %252 = fadd <2 x float> %249, %251, !dbg !67
  %253 = fadd <2 x float> %252, %240, !dbg !68
  %254 = fptrunc <2 x float> %253 to <2 x half>, !dbg !69
  %255 = bitcast <2 x half> %239 to i32, !dbg !69
  %256 = bitcast <2 x half> %254 to i32, !dbg !69
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %255, i32 %256, ptr addrspace(1) %190, i1 %12) #3, !dbg !69
  %257 = getelementptr half, ptr addrspace(1) %0, i64 %51, !dbg !48
  %258 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %257, i1 %12) #3, !dbg !49
  %259 = extractvalue { i32, i32 } %258, 0, !dbg !49
  %260 = bitcast i32 %259 to <2 x half>, !dbg !49
  %261 = extractvalue { i32, i32 } %258, 1, !dbg !49
  %262 = bitcast i32 %261 to <2 x half>, !dbg !49
  %263 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %52, i1 %12) #3, !dbg !50
  %264 = extractvalue { i32, i32 } %263, 0, !dbg !50
  %265 = bitcast i32 %264 to <2 x half>, !dbg !50
  %266 = extractvalue { i32, i32 } %263, 1, !dbg !50
  %267 = bitcast i32 %266 to <2 x half>, !dbg !50
  %268 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %58, i1 %12) #3, !dbg !51
  %269 = extractvalue { i32, i32 } %268, 0, !dbg !51
  %270 = bitcast i32 %269 to <2 x half>, !dbg !51
  %271 = extractvalue { i32, i32 } %268, 1, !dbg !51
  %272 = bitcast i32 %271 to <2 x half>, !dbg !51
  %273 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %64, i1 %12) #3, !dbg !52
  %274 = extractvalue { i32, i32 } %273, 0, !dbg !52
  %275 = bitcast i32 %274 to <2 x half>, !dbg !52
  %276 = extractvalue { i32, i32 } %273, 1, !dbg !52
  %277 = bitcast i32 %276 to <2 x half>, !dbg !52
  %278 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %70, i1 true) #3, !dbg !53
  %279 = extractvalue { i32, i32 } %278, 0, !dbg !53
  %280 = bitcast i32 %279 to <2 x half>, !dbg !53
  %281 = extractvalue { i32, i32 } %278, 1, !dbg !53
  %282 = bitcast i32 %281 to <2 x half>, !dbg !53
  %283 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %76, i1 %12) #3, !dbg !54
  %284 = extractvalue { i32, i32 } %283, 0, !dbg !54
  %285 = bitcast i32 %284 to <2 x half>, !dbg !54
  %286 = extractvalue { i32, i32 } %283, 1, !dbg !54
  %287 = bitcast i32 %286 to <2 x half>, !dbg !54
  %288 = fpext <2 x half> %260 to <2 x float>, !dbg !55
  %289 = fpext <2 x half> %265 to <2 x float>, !dbg !56
  %290 = fpext <2 x half> %270 to <2 x float>, !dbg !57
  %291 = fpext <2 x half> %275 to <2 x float>, !dbg !58
  %292 = fpext <2 x half> %280 to <2 x float>, !dbg !59
  %293 = fpext <2 x half> %285 to <2 x float>, !dbg !60
  %294 = fadd <2 x float> %289, %290, !dbg !61
  %295 = fadd <2 x float> %294, %291, !dbg !62
  %296 = fmul <2 x float> %295, %292, !dbg !63
  %297 = fmul <2 x float> %296, %231, !dbg !64
  %298 = fmul <2 x float> %293, splat (float 2.000000e+00), !dbg !65
  %299 = fmul <2 x float> %235, %298, !dbg !66
  %300 = fadd <2 x float> %297, %299, !dbg !67
  %301 = fadd <2 x float> %300, %288, !dbg !68
  %302 = fptrunc <2 x float> %301 to <2 x half>, !dbg !69
  %303 = fpext <2 x half> %262 to <2 x float>, !dbg !55
  %304 = fpext <2 x half> %267 to <2 x float>, !dbg !56
  %305 = fpext <2 x half> %272 to <2 x float>, !dbg !57
  %306 = fpext <2 x half> %277 to <2 x float>, !dbg !58
  %307 = fpext <2 x half> %282 to <2 x float>, !dbg !59
  %308 = fpext <2 x half> %287 to <2 x float>, !dbg !60
  %309 = fadd <2 x float> %304, %305, !dbg !61
  %310 = fadd <2 x float> %309, %306, !dbg !62
  %311 = fmul <2 x float> %310, %307, !dbg !63
  %312 = fmul <2 x float> %311, %231, !dbg !64
  %313 = fmul <2 x float> %308, splat (float 2.000000e+00), !dbg !65
  %314 = fmul <2 x float> %235, %313, !dbg !66
  %315 = fadd <2 x float> %312, %314, !dbg !67
  %316 = fadd <2 x float> %315, %303, !dbg !68
  %317 = fptrunc <2 x float> %316 to <2 x half>, !dbg !69
  %318 = bitcast <2 x half> %302 to i32, !dbg !69
  %319 = bitcast <2 x half> %317 to i32, !dbg !69
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %318, i32 %319, ptr addrspace(1) %257, i1 %12) #3, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjzbe2rfzbrzt5nqp4tyglmue73nyj3pprrlwzjs765y5qoh7s2f.py", directory: "./local_cache/jz")
!4 = !{ptr @triton_red_fused__to_copy_add_div_mul_pow_sum_10, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_mul_pow_sum_10", linkageName: "triton_red_fused__to_copy_add_div_mul_pow_sum_10", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 21, scope: !6)
!11 = !DILocation(line: 25, column: 37, scope: !6)
!12 = !DILocation(line: 35, column: 46, scope: !6)
!13 = !DILocation(line: 29, column: 40, scope: !6)
!14 = !DILocation(line: 35, column: 34, scope: !6)
!15 = !DILocation(line: 35, column: 51, scope: !6)
!16 = !DILocation(line: 36, column: 34, scope: !6)
!17 = !DILocation(line: 36, column: 51, scope: !6)
!18 = !DILocation(line: 37, column: 34, scope: !6)
!19 = !DILocation(line: 37, column: 51, scope: !6)
!20 = !DILocation(line: 38, column: 34, scope: !6)
!21 = !DILocation(line: 38, column: 41, scope: !6)
!22 = !DILocation(line: 39, column: 34, scope: !6)
!23 = !DILocation(line: 39, column: 51, scope: !6)
!24 = !DILocation(line: 30, column: 31, scope: !6)
!25 = !DILocation(line: 35, column: 112, scope: !6)
!26 = !DILocation(line: 36, column: 112, scope: !6)
!27 = !DILocation(line: 37, column: 112, scope: !6)
!28 = !DILocation(line: 38, column: 94, scope: !6)
!29 = !DILocation(line: 39, column: 112, scope: !6)
!30 = !DILocation(line: 40, column: 22, scope: !6)
!31 = !DILocation(line: 41, column: 22, scope: !6)
!32 = !DILocation(line: 42, column: 22, scope: !6)
!33 = !DILocation(line: 45, column: 23, scope: !6)
!34 = !DILocation(line: 47, column: 25, scope: !6)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !39)
!36 = distinct !DILexicalBlockFile(scope: !38, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!38 = distinct !DILexicalBlockFile(scope: !6, file: !37, discriminator: 0)
!39 = !DILocation(line: 49, column: 27, scope: !6)
!40 = !DILocation(line: 286, column: 36, scope: !38, inlinedAt: !39)
!41 = !DILocation(line: 50, column: 31, scope: !6)
!42 = !DILocation(line: 50, column: 36, scope: !6)
!43 = !DILocation(line: 69, column: 24, scope: !6)
!44 = !DILocation(line: 70, column: 24, scope: !6)
!45 = !DILocation(line: 71, column: 24, scope: !6)
!46 = !DILocation(line: 72, column: 24, scope: !6)
!47 = !DILocation(line: 74, column: 24, scope: !6)
!48 = !DILocation(line: 57, column: 39, scope: !6)
!49 = !DILocation(line: 57, column: 56, scope: !6)
!50 = !DILocation(line: 58, column: 52, scope: !6)
!51 = !DILocation(line: 59, column: 52, scope: !6)
!52 = !DILocation(line: 60, column: 52, scope: !6)
!53 = !DILocation(line: 61, column: 42, scope: !6)
!54 = !DILocation(line: 62, column: 52, scope: !6)
!55 = !DILocation(line: 57, column: 118, scope: !6)
!56 = !DILocation(line: 58, column: 114, scope: !6)
!57 = !DILocation(line: 59, column: 114, scope: !6)
!58 = !DILocation(line: 60, column: 114, scope: !6)
!59 = !DILocation(line: 61, column: 95, scope: !6)
!60 = !DILocation(line: 62, column: 114, scope: !6)
!61 = !DILocation(line: 63, column: 24, scope: !6)
!62 = !DILocation(line: 64, column: 24, scope: !6)
!63 = !DILocation(line: 65, column: 24, scope: !6)
!64 = !DILocation(line: 67, column: 24, scope: !6)
!65 = !DILocation(line: 77, column: 24, scope: !6)
!66 = !DILocation(line: 78, column: 24, scope: !6)
!67 = !DILocation(line: 79, column: 24, scope: !6)
!68 = !DILocation(line: 81, column: 24, scope: !6)
!69 = !DILocation(line: 82, column: 56, scope: !6)
!70 = !DILocation(line: 51, column: 4, scope: !6)
