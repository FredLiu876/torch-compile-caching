; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = icmp slt i32 %10, %6, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = and i32 %12, 31, !dbg !11
  %14 = shl i32 %12, 2, !dbg !11
  %15 = and i32 %14, 2044, !dbg !11
  %16 = shl i32 %10, 12, !dbg !12
  %17 = or disjoint i32 %15, %16
  %18 = sext i32 %17 to i64, !dbg !13
  %19 = getelementptr half, ptr addrspace(1) %2, i64 %18, !dbg !13
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %19, i1 %11) #5, !dbg !14
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !14
  %22 = bitcast i32 %21 to <2 x half>, !dbg !14
  %23 = extractvalue { i32, i32 } %20, 1, !dbg !14
  %24 = bitcast i32 %23 to <2 x half>, !dbg !14
  %25 = getelementptr half, ptr addrspace(1) %3, i64 %18, !dbg !15
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %25, i1 %11) #5, !dbg !16
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !16
  %28 = bitcast i32 %27 to <2 x half>, !dbg !16
  %29 = extractvalue { i32, i32 } %26, 1, !dbg !16
  %30 = bitcast i32 %29 to <2 x half>, !dbg !16
  %31 = getelementptr half, ptr addrspace(1) %0, i64 %18, !dbg !17
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %31, i1 %11) #5, !dbg !18
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !18
  %34 = bitcast i32 %33 to <2 x half>, !dbg !18
  %35 = extractvalue { i32, i32 } %32, 1, !dbg !18
  %36 = bitcast i32 %35 to <2 x half>, !dbg !18
  %37 = fpext <2 x half> %22 to <2 x float>, !dbg !19
  %38 = fpext <2 x half> %28 to <2 x float>, !dbg !20
  %39 = fpext <2 x half> %34 to <2 x float>, !dbg !21
  %40 = fadd <2 x float> %37, %38, !dbg !22
  %41 = fadd <2 x float> %40, %39, !dbg !23
  %42 = fptrunc <2 x float> %41 to <2 x half>, !dbg !24
  %43 = fpext <2 x half> %24 to <2 x float>, !dbg !19
  %44 = fpext <2 x half> %30 to <2 x float>, !dbg !20
  %45 = fpext <2 x half> %36 to <2 x float>, !dbg !21
  %46 = fadd <2 x float> %43, %44, !dbg !22
  %47 = fadd <2 x float> %46, %45, !dbg !23
  %48 = fptrunc <2 x float> %47 to <2 x half>, !dbg !24
  %49 = bitcast <2 x half> %42 to i32, !dbg !24
  %50 = bitcast <2 x half> %48 to i32, !dbg !24
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %49, i32 %50, ptr addrspace(1) %31, i1 %11) #5, !dbg !24
  %51 = or disjoint i32 %17, 2048, !dbg !25
  %52 = sext i32 %51 to i64, !dbg !13
  %53 = getelementptr half, ptr addrspace(1) %2, i64 %52, !dbg !13
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %53, i1 %11) #5, !dbg !14
  %55 = extractvalue { i32, i32 } %54, 0, !dbg !14
  %56 = bitcast i32 %55 to <2 x half>, !dbg !14
  %57 = extractvalue { i32, i32 } %54, 1, !dbg !14
  %58 = bitcast i32 %57 to <2 x half>, !dbg !14
  %59 = getelementptr half, ptr addrspace(1) %3, i64 %52, !dbg !15
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %59, i1 %11) #5, !dbg !16
  %61 = extractvalue { i32, i32 } %60, 0, !dbg !16
  %62 = bitcast i32 %61 to <2 x half>, !dbg !16
  %63 = extractvalue { i32, i32 } %60, 1, !dbg !16
  %64 = bitcast i32 %63 to <2 x half>, !dbg !16
  %65 = getelementptr half, ptr addrspace(1) %0, i64 %52, !dbg !17
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %65, i1 %11) #5, !dbg !18
  %67 = extractvalue { i32, i32 } %66, 0, !dbg !18
  %68 = bitcast i32 %67 to <2 x half>, !dbg !18
  %69 = extractvalue { i32, i32 } %66, 1, !dbg !18
  %70 = bitcast i32 %69 to <2 x half>, !dbg !18
  %71 = fpext <2 x half> %56 to <2 x float>, !dbg !19
  %72 = fpext <2 x half> %62 to <2 x float>, !dbg !20
  %73 = fpext <2 x half> %68 to <2 x float>, !dbg !21
  %74 = fadd <2 x float> %71, %72, !dbg !22
  %75 = fadd <2 x float> %74, %73, !dbg !23
  %76 = fmul <2 x float> %41, %41, !dbg !26
  %77 = fmul <2 x float> %75, %75, !dbg !26
  %78 = fadd <2 x float> %76, %77, !dbg !27
  %79 = fptrunc <2 x float> %75 to <2 x half>, !dbg !24
  %80 = fpext <2 x half> %58 to <2 x float>, !dbg !19
  %81 = fpext <2 x half> %64 to <2 x float>, !dbg !20
  %82 = fpext <2 x half> %70 to <2 x float>, !dbg !21
  %83 = fadd <2 x float> %80, %81, !dbg !22
  %84 = fadd <2 x float> %83, %82, !dbg !23
  %85 = fmul <2 x float> %47, %47, !dbg !26
  %86 = fmul <2 x float> %84, %84, !dbg !26
  %87 = fadd <2 x float> %85, %86, !dbg !27
  %88 = fptrunc <2 x float> %84 to <2 x half>, !dbg !24
  %89 = bitcast <2 x half> %79 to i32, !dbg !24
  %90 = bitcast <2 x half> %88 to i32, !dbg !24
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %89, i32 %90, ptr addrspace(1) %65, i1 %11) #5, !dbg !24
  %91 = lshr i32 %12, 5, !dbg !11
  %shift = shufflevector <2 x float> %78, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !28
  %92 = fadd <2 x float> %78, %shift, !dbg !28
  %93 = fadd <2 x float> %87, %92, !dbg !28
  %shift17 = shufflevector <2 x float> %87, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !28
  %94 = fadd <2 x float> %shift17, %93, !dbg !28
  %95 = extractelement <2 x float> %94, i64 0, !dbg !28
  %96 = select i1 %11, float %95, float 0.000000e+00, !dbg !28
  %97 = bitcast float %96 to i32, !dbg !33
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 16, i32 31), !dbg !33
  %99 = bitcast i32 %98 to float, !dbg !33
  %100 = fadd float %96, %99, !dbg !28
  %101 = bitcast float %100 to i32, !dbg !33
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 8, i32 31), !dbg !33
  %103 = bitcast i32 %102 to float, !dbg !33
  %104 = fadd float %100, %103, !dbg !28
  %105 = bitcast float %104 to i32, !dbg !33
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 4, i32 31), !dbg !33
  %107 = bitcast i32 %106 to float, !dbg !33
  %108 = fadd float %104, %107, !dbg !28
  %109 = bitcast float %108 to i32, !dbg !33
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 2, i32 31), !dbg !33
  %111 = bitcast i32 %110 to float, !dbg !33
  %112 = fadd float %108, %111, !dbg !28
  %113 = bitcast float %112 to i32, !dbg !33
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 1, i32 31), !dbg !33
  %115 = bitcast i32 %114 to float, !dbg !33
  %116 = fadd float %112, %115, !dbg !28
  %117 = and i32 %91, 15, !dbg !33
  %118 = icmp eq i32 %13, 0, !dbg !33
  %119 = zext nneg i32 %117 to i64, !dbg !33
  %120 = getelementptr float, ptr addrspace(3) @global_smem, i64 %119, !dbg !33
  %121 = bitcast float %116 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 %118) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %122 = icmp slt i32 %12, 16, !dbg !33
  %123 = sext i32 %12 to i64, !dbg !33
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i64 %123, !dbg !33
  %125 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %124, i1 %122) #5, !dbg !33
  %126 = bitcast i32 %125 to float, !dbg !33
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 8, i32 31), !dbg !33
  %128 = bitcast i32 %127 to float, !dbg !33
  %129 = fadd float %126, %128, !dbg !28
  %130 = bitcast float %129 to i32, !dbg !33
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 4, i32 31), !dbg !33
  %132 = bitcast i32 %131 to float, !dbg !33
  %133 = fadd float %129, %132, !dbg !28
  %134 = bitcast float %133 to i32, !dbg !33
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 2, i32 31), !dbg !33
  %136 = bitcast i32 %135 to float, !dbg !33
  %137 = fadd float %133, %136, !dbg !28
  %138 = bitcast float %137 to i32, !dbg !33
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 1, i32 31), !dbg !33
  %140 = bitcast i32 %139 to float, !dbg !33
  %141 = fadd float %137, %140, !dbg !28
  %142 = and i32 %12, 15, !dbg !33
  %143 = icmp eq i32 %142, 0, !dbg !33
  %144 = and i1 %122, %143, !dbg !33
  %145 = bitcast float %141 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %145, i1 %144) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %146 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !33
  %147 = tail call float @llvm.nvvm.div.full(float %146, float 4.096000e+03), !dbg !34
  %148 = fadd float %147, 0x3EE4F8B580000000, !dbg !35
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i = icmp eq i32 %149, 0, !dbg !36
  br i1 %.not.i, label %152, label %150, !dbg !36

150:                                              ; preds = %9
  %151 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %148), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

152:                                              ; preds = %9
  %153 = tail call float @llvm.nvvm.rsqrt.approx.f(float %148), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

__nv_rsqrtf.exit:                                 ; preds = %150, %152
  %.0.i = phi float [ %151, %150 ], [ %153, %152 ], !dbg !36
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i11 = icmp eq i32 %157, 0, !dbg !36
  br i1 %.not.i11, label %160, label %158, !dbg !36

158:                                              ; preds = %__nv_rsqrtf.exit
  %159 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %148), !dbg !36
  br label %__nv_rsqrtf.exit13, !dbg !36

160:                                              ; preds = %__nv_rsqrtf.exit
  %161 = tail call float @llvm.nvvm.rsqrt.approx.f(float %148), !dbg !36
  br label %__nv_rsqrtf.exit13, !dbg !36

__nv_rsqrtf.exit13:                               ; preds = %158, %160
  %.0.i12 = phi float [ %159, %158 ], [ %161, %160 ], !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %162 = sext i32 %10 to i64, !dbg !38
  %163 = getelementptr float, ptr addrspace(1) %1, i64 %162, !dbg !38
  %164 = and i32 %12, 511, !dbg !39
  %165 = icmp eq i32 %164, 0, !dbg !39
  %166 = bitcast float %.0.i to i32, !dbg !39
  %167 = and i1 %165, %11, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %166, ptr addrspace(1) %163, i1 %167) #5, !dbg !39
  %168 = zext nneg i32 %15 to i64, !dbg !40
  %169 = getelementptr half, ptr addrspace(1) %4, i64 %168, !dbg !41
  %170 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %169, i1 true) #5, !dbg !42
  %171 = extractvalue { i32, i32 } %170, 0, !dbg !42
  %172 = bitcast i32 %171 to <2 x half>, !dbg !42
  %173 = extractvalue { i32, i32 } %170, 1, !dbg !42
  %174 = bitcast i32 %173 to <2 x half>, !dbg !42
  %175 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %31, i1 %11) #5, !dbg !43
  %176 = extractvalue { i32, i32 } %175, 0, !dbg !43
  %177 = bitcast i32 %176 to <2 x half>, !dbg !43
  %178 = extractvalue { i32, i32 } %175, 1, !dbg !43
  %179 = bitcast i32 %178 to <2 x half>, !dbg !43
  %180 = getelementptr half, ptr addrspace(1) %5, i64 %18, !dbg !44
  %181 = fpext <2 x half> %172 to <2 x float>, !dbg !45
  %182 = fpext <2 x half> %177 to <2 x float>, !dbg !46
  %183 = insertelement <2 x float> poison, float %.0.i12, i64 0, !dbg !47
  %184 = shufflevector <2 x float> %183, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !47
  %185 = fmul <2 x float> %184, %182, !dbg !47
  %186 = fmul <2 x float> %185, %181, !dbg !48
  %187 = fptrunc <2 x float> %186 to <2 x half>, !dbg !49
  %188 = fpext <2 x half> %174 to <2 x float>, !dbg !45
  %189 = fpext <2 x half> %179 to <2 x float>, !dbg !46
  %190 = fmul <2 x float> %184, %189, !dbg !47
  %191 = fmul <2 x float> %190, %188, !dbg !48
  %192 = fptrunc <2 x float> %191 to <2 x half>, !dbg !49
  %193 = bitcast <2 x half> %187 to i32, !dbg !49
  %194 = bitcast <2 x half> %192 to i32, !dbg !49
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %193, i32 %194, ptr addrspace(1) %180, i1 %11) #5, !dbg !49
  %195 = or disjoint i64 %168, 2048, !dbg !50
  %196 = getelementptr half, ptr addrspace(1) %4, i64 %195, !dbg !41
  %197 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %196, i1 true) #5, !dbg !42
  %198 = extractvalue { i32, i32 } %197, 0, !dbg !42
  %199 = bitcast i32 %198 to <2 x half>, !dbg !42
  %200 = extractvalue { i32, i32 } %197, 1, !dbg !42
  %201 = bitcast i32 %200 to <2 x half>, !dbg !42
  %202 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %65, i1 %11) #5, !dbg !43
  %203 = extractvalue { i32, i32 } %202, 0, !dbg !43
  %204 = bitcast i32 %203 to <2 x half>, !dbg !43
  %205 = extractvalue { i32, i32 } %202, 1, !dbg !43
  %206 = bitcast i32 %205 to <2 x half>, !dbg !43
  %207 = getelementptr half, ptr addrspace(1) %5, i64 %52, !dbg !44
  %208 = fpext <2 x half> %199 to <2 x float>, !dbg !45
  %209 = fpext <2 x half> %204 to <2 x float>, !dbg !46
  %210 = fmul <2 x float> %184, %209, !dbg !47
  %211 = fmul <2 x float> %210, %208, !dbg !48
  %212 = fptrunc <2 x float> %211 to <2 x half>, !dbg !49
  %213 = fpext <2 x half> %201 to <2 x float>, !dbg !45
  %214 = fpext <2 x half> %206 to <2 x float>, !dbg !46
  %215 = fmul <2 x float> %184, %214, !dbg !47
  %216 = fmul <2 x float> %215, %213, !dbg !48
  %217 = fptrunc <2 x float> %216 to <2 x half>, !dbg !49
  %218 = bitcast <2 x half> %212 to i32, !dbg !49
  %219 = bitcast <2 x half> %217 to i32, !dbg !49
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %218, i32 %219, ptr addrspace(1) %207, i1 %11) #5, !dbg !49
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cirveghol7wjrq7zwkkgu3sphruzjhq4ru5zcvmudgaexdo5niag.py", directory: "./local_cache/ir")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 21, scope: !6)
!11 = !DILocation(line: 25, column: 37, scope: !6)
!12 = !DILocation(line: 35, column: 46, scope: !6)
!13 = !DILocation(line: 35, column: 34, scope: !6)
!14 = !DILocation(line: 35, column: 51, scope: !6)
!15 = !DILocation(line: 36, column: 34, scope: !6)
!16 = !DILocation(line: 36, column: 51, scope: !6)
!17 = !DILocation(line: 37, column: 38, scope: !6)
!18 = !DILocation(line: 37, column: 55, scope: !6)
!19 = !DILocation(line: 35, column: 113, scope: !6)
!20 = !DILocation(line: 36, column: 113, scope: !6)
!21 = !DILocation(line: 37, column: 117, scope: !6)
!22 = !DILocation(line: 38, column: 22, scope: !6)
!23 = !DILocation(line: 39, column: 22, scope: !6)
!24 = !DILocation(line: 45, column: 55, scope: !6)
!25 = !DILocation(line: 35, column: 41, scope: !6)
!26 = !DILocation(line: 41, column: 22, scope: !6)
!27 = !DILocation(line: 43, column: 23, scope: !6)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !32)
!29 = distinct !DILexicalBlockFile(scope: !31, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!31 = distinct !DILexicalBlockFile(scope: !6, file: !30, discriminator: 0)
!32 = !DILocation(line: 46, column: 25, scope: !6)
!33 = !DILocation(line: 286, column: 36, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 48, column: 20, scope: !6)
!35 = !DILocation(line: 50, column: 20, scope: !6)
!36 = !DILocation(line: 51, column: 28, scope: !6)
!37 = !DILocation(line: 52, column: 4, scope: !6)
!38 = !DILocation(line: 53, column: 28, scope: !6)
!39 = !DILocation(line: 53, column: 40, scope: !6)
!40 = !DILocation(line: 54, column: 40, scope: !6)
!41 = !DILocation(line: 60, column: 35, scope: !6)
!42 = !DILocation(line: 60, column: 42, scope: !6)
!43 = !DILocation(line: 61, column: 56, scope: !6)
!44 = !DILocation(line: 66, column: 29, scope: !6)
!45 = !DILocation(line: 60, column: 95, scope: !6)
!46 = !DILocation(line: 61, column: 118, scope: !6)
!47 = !DILocation(line: 63, column: 24, scope: !6)
!48 = !DILocation(line: 65, column: 24, scope: !6)
!49 = !DILocation(line: 66, column: 53, scope: !6)
!50 = !DILocation(line: 55, column: 31, scope: !6)
!51 = !DILocation(line: 54, column: 4, scope: !6)
