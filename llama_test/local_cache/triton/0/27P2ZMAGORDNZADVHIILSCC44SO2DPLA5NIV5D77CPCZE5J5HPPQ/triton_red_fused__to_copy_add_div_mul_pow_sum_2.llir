; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_red_fused__to_copy_add_div_mul_pow_sum_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 4, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = lshr i32 %10, 2, !dbg !11
  %12 = and i32 %11, 15, !dbg !11
  %13 = or disjoint i32 %12, %9, !dbg !12
  %14 = icmp slt i32 %13, %4, !dbg !13
  %.fr = freeze i1 %14
  %15 = shl i32 %10, 1, !dbg !14
  %16 = and i32 %15, 6, !dbg !14
  %17 = shl i32 %13, 12, !dbg !15
  %invariant.op = or disjoint i32 %16, %17, !dbg !16
  %18 = zext nneg i32 %16 to i64, !dbg !16
  br i1 %.fr, label %.split.us, label %.split

.split.us:                                        ; preds = %7, %.split.us
  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %.split.us ], [ 0, %7 ]
  %19 = phi float [ %49, %.split.us ], [ 0.000000e+00, %7 ]
  %20 = phi float [ %50, %.split.us ], [ 0.000000e+00, %7 ]
  %21 = or disjoint i64 %indvars.iv7, %18, !dbg !17
  %22 = trunc nuw nsw i64 %indvars.iv7 to i32
  %.reass.us = or i32 %invariant.op, %22
  %23 = sext i32 %.reass.us to i64, !dbg !18
  %24 = getelementptr half, ptr addrspace(1) %0, i64 %23, !dbg !18
  %25 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %24, i1 true) #2, !dbg !19
  %26 = bitcast i32 %25 to <2 x half>, !dbg !19
  %27 = extractelement <2 x half> %26, i64 0, !dbg !19
  %28 = extractelement <2 x half> %26, i64 1, !dbg !19
  %29 = fpext half %27 to float, !dbg !20
  %30 = fpext half %28 to float, !dbg !20
  %31 = getelementptr half, ptr addrspace(1) %1, i64 %21, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %31, i1 true) #2, !dbg !22
  %33 = bitcast i32 %32 to <2 x half>, !dbg !22
  %34 = extractelement <2 x half> %33, i64 0, !dbg !22
  %35 = extractelement <2 x half> %33, i64 1, !dbg !22
  %36 = fpext half %34 to float, !dbg !23
  %37 = fpext half %35 to float, !dbg !23
  %38 = getelementptr half, ptr addrspace(1) %2, i64 %23, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %38, i1 true) #2, !dbg !25
  %40 = bitcast i32 %39 to <2 x half>, !dbg !25
  %41 = extractelement <2 x half> %40, i64 0, !dbg !25
  %42 = extractelement <2 x half> %40, i64 1, !dbg !25
  %43 = fpext half %41 to float, !dbg !26
  %44 = fpext half %42 to float, !dbg !26
  %45 = fmul float %29, %36, !dbg !27
  %46 = fmul float %30, %37, !dbg !27
  %47 = fmul float %45, %43, !dbg !28
  %48 = fmul float %46, %44, !dbg !28
  %49 = fadd float %19, %47, !dbg !29
  %50 = fadd float %20, %48, !dbg !29
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 8, !dbg !16
  %51 = icmp samesign ult i64 %indvars.iv7, 4088, !dbg !16
  br i1 %51, label %.split.us, label %.split3.us.loopexit, !dbg !16

.split:                                           ; preds = %7, %.split
  %indvars.iv = phi i64 [ %indvars.iv.next, %.split ], [ 0, %7 ]
  %52 = or disjoint i64 %indvars.iv, %18, !dbg !17
  %53 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %53
  %54 = sext i32 %.reass to i64, !dbg !18
  %55 = getelementptr half, ptr addrspace(1) %0, i64 %54, !dbg !18
  %56 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %55, i1 false) #2, !dbg !19
  %57 = getelementptr half, ptr addrspace(1) %1, i64 %52, !dbg !21
  %58 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %57, i1 true) #2, !dbg !22
  %59 = getelementptr half, ptr addrspace(1) %2, i64 %54, !dbg !24
  %60 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %59, i1 false) #2, !dbg !25
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !16
  %61 = icmp samesign ult i64 %indvars.iv, 4088, !dbg !16
  br i1 %61, label %.split, label %.split3.us, !dbg !16

.split3.us.loopexit:                              ; preds = %.split.us
  %62 = fadd float %49, %50, !dbg !30
  br label %.split3.us, !dbg !30

.split3.us:                                       ; preds = %.split, %.split3.us.loopexit
  %63 = phi float [ %62, %.split3.us.loopexit ], [ 0.000000e+00, %.split ], !dbg !30
  %64 = bitcast float %63 to i32, !dbg !35
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 2, i32 31), !dbg !35
  %66 = bitcast i32 %65 to float, !dbg !35
  %67 = fadd float %63, %66, !dbg !30
  %68 = bitcast float %67 to i32, !dbg !35
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 1, i32 31), !dbg !35
  %70 = bitcast i32 %69 to float, !dbg !35
  %71 = fadd float %67, %70, !dbg !30
  %72 = sext i32 %13 to i64, !dbg !36
  %73 = getelementptr float, ptr addrspace(1) %3, i64 %72, !dbg !36
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %.fr) #2, !dbg !37
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %.fr) #2, !dbg !37
  %76 = bitcast i32 %75 to float, !dbg !37
  %77 = fmul float %71, -5.000000e-01, !dbg !38
  %78 = fmul float %76, %76, !dbg !39
  %79 = fmul float %78, %76, !dbg !40
  %80 = fmul float %77, %79, !dbg !41
  %81 = fmul float %80, 0x3F30000000000000, !dbg !42
  %82 = insertelement <2 x float> poison, float %76, i64 0, !dbg !43
  %83 = shufflevector <2 x float> %82, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !43
  %84 = insertelement <2 x float> poison, float %81, i64 0, !dbg !44
  %85 = shufflevector <2 x float> %84, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !44
  br label %86, !dbg !45

86:                                               ; preds = %.split3.us, %86
  %indvars.iv9 = phi i64 [ 0, %.split3.us ], [ %indvars.iv.next10, %86 ]
  %87 = or disjoint i64 %indvars.iv9, %18, !dbg !46
  %88 = trunc nuw nsw i64 %indvars.iv9 to i32
  %.reass5 = or i32 %invariant.op, %88
  %89 = sext i32 %.reass5 to i64, !dbg !47
  %90 = getelementptr half, ptr addrspace(1) %0, i64 %89, !dbg !47
  %91 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %90, i1 %.fr) #2, !dbg !48
  %92 = bitcast i32 %91 to <2 x half>, !dbg !48
  %93 = getelementptr half, ptr addrspace(1) %1, i64 %87, !dbg !49
  %94 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %93, i1 true) #2, !dbg !50
  %95 = bitcast i32 %94 to <2 x half>, !dbg !50
  %96 = getelementptr half, ptr addrspace(1) %2, i64 %89, !dbg !51
  %97 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %96, i1 %.fr) #2, !dbg !52
  %98 = bitcast i32 %97 to <2 x half>, !dbg !52
  %99 = fpext <2 x half> %92 to <2 x float>, !dbg !53
  %100 = fpext <2 x half> %95 to <2 x float>, !dbg !54
  %101 = fpext <2 x half> %98 to <2 x float>, !dbg !55
  %102 = fmul <2 x float> %99, %100, !dbg !56
  %103 = fmul <2 x float> %102, %83, !dbg !43
  %104 = fmul <2 x float> %101, splat (float 2.000000e+00), !dbg !57
  %105 = fmul <2 x float> %85, %104, !dbg !44
  %106 = fadd <2 x float> %103, %105, !dbg !58
  %107 = fptrunc <2 x float> %106 to <2 x half>, !dbg !59
  %108 = bitcast <2 x half> %107 to i32, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %108, ptr addrspace(1) %90, i1 %.fr) #2, !dbg !59
  %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 8, !dbg !45
  %109 = icmp samesign ult i64 %indvars.iv9, 4088, !dbg !45
  br i1 %109, label %86, label %110, !dbg !45

110:                                              ; preds = %86
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clge5s4bexuzcuiyyk6wdagiu6uovldxslqomkn47ipii2cfttub.py", directory: "./local_cache/lg")
!4 = !{ptr @triton_red_fused__to_copy_add_div_mul_pow_sum_2, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_mul_pow_sum_2", linkageName: "triton_red_fused__to_copy_add_div_mul_pow_sum_2", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 50, scope: !6)
!16 = !DILocation(line: 29, column: 40, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 35, column: 38, scope: !6)
!19 = !DILocation(line: 35, column: 55, scope: !6)
!20 = !DILocation(line: 35, column: 116, scope: !6)
!21 = !DILocation(line: 36, column: 34, scope: !6)
!22 = !DILocation(line: 36, column: 41, scope: !6)
!23 = !DILocation(line: 36, column: 94, scope: !6)
!24 = !DILocation(line: 37, column: 34, scope: !6)
!25 = !DILocation(line: 37, column: 51, scope: !6)
!26 = !DILocation(line: 37, column: 112, scope: !6)
!27 = !DILocation(line: 38, column: 22, scope: !6)
!28 = !DILocation(line: 41, column: 22, scope: !6)
!29 = !DILocation(line: 43, column: 23, scope: !6)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !34)
!31 = distinct !DILexicalBlockFile(scope: !33, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!33 = distinct !DILexicalBlockFile(scope: !6, file: !32, discriminator: 0)
!34 = !DILocation(line: 45, column: 25, scope: !6)
!35 = !DILocation(line: 286, column: 36, scope: !33, inlinedAt: !34)
!36 = !DILocation(line: 46, column: 31, scope: !6)
!37 = !DILocation(line: 46, column: 36, scope: !6)
!38 = !DILocation(line: 60, column: 23, scope: !6)
!39 = !DILocation(line: 61, column: 24, scope: !6)
!40 = !DILocation(line: 62, column: 24, scope: !6)
!41 = !DILocation(line: 63, column: 24, scope: !6)
!42 = !DILocation(line: 65, column: 24, scope: !6)
!43 = !DILocation(line: 58, column: 24, scope: !6)
!44 = !DILocation(line: 69, column: 24, scope: !6)
!45 = !DILocation(line: 47, column: 40, scope: !6)
!46 = !DILocation(line: 48, column: 31, scope: !6)
!47 = !DILocation(line: 53, column: 39, scope: !6)
!48 = !DILocation(line: 53, column: 56, scope: !6)
!49 = !DILocation(line: 54, column: 35, scope: !6)
!50 = !DILocation(line: 54, column: 42, scope: !6)
!51 = !DILocation(line: 55, column: 35, scope: !6)
!52 = !DILocation(line: 55, column: 52, scope: !6)
!53 = !DILocation(line: 53, column: 118, scope: !6)
!54 = !DILocation(line: 54, column: 95, scope: !6)
!55 = !DILocation(line: 55, column: 114, scope: !6)
!56 = !DILocation(line: 56, column: 24, scope: !6)
!57 = !DILocation(line: 68, column: 24, scope: !6)
!58 = !DILocation(line: 70, column: 24, scope: !6)
!59 = !DILocation(line: 72, column: 56, scope: !6)
!60 = !DILocation(line: 47, column: 4, scope: !6)
