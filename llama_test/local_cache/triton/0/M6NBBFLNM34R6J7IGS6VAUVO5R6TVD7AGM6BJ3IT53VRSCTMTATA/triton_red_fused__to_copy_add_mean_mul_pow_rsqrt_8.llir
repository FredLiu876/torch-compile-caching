; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = icmp slt i32 %10, %6, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = and i32 %12, 31, !dbg !11
  %14 = lshr i32 %12, 5, !dbg !11
  %15 = shl i32 %12, 3, !dbg !11
  %16 = and i32 %15, 4088, !dbg !11
  %17 = shl i32 %10, 12, !dbg !12
  %18 = or disjoint i32 %16, %17, !dbg !13
  %19 = sext i32 %18 to i64, !dbg !14
  %20 = getelementptr half, ptr addrspace(1) %2, i64 %19, !dbg !14
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %20, i1 %11) #5, !dbg !15
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !15
  %23 = bitcast i32 %22 to <2 x half>, !dbg !15
  %24 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !15
  %25 = bitcast i32 %24 to <2 x half>, !dbg !15
  %26 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !15
  %27 = bitcast i32 %26 to <2 x half>, !dbg !15
  %28 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !15
  %29 = bitcast i32 %28 to <2 x half>, !dbg !15
  %30 = getelementptr half, ptr addrspace(1) %3, i64 %19, !dbg !16
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %30, i1 %11) #5, !dbg !17
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !17
  %33 = bitcast i32 %32 to <2 x half>, !dbg !17
  %34 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !17
  %35 = bitcast i32 %34 to <2 x half>, !dbg !17
  %36 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !17
  %37 = bitcast i32 %36 to <2 x half>, !dbg !17
  %38 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !17
  %39 = bitcast i32 %38 to <2 x half>, !dbg !17
  %40 = getelementptr half, ptr addrspace(1) %0, i64 %19, !dbg !18
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %40, i1 %11) #5, !dbg !19
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !19
  %43 = bitcast i32 %42 to <2 x half>, !dbg !19
  %44 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !19
  %45 = bitcast i32 %44 to <2 x half>, !dbg !19
  %46 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !19
  %47 = bitcast i32 %46 to <2 x half>, !dbg !19
  %48 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !19
  %49 = bitcast i32 %48 to <2 x half>, !dbg !19
  %50 = fpext <2 x half> %23 to <2 x float>, !dbg !20
  %51 = fpext <2 x half> %33 to <2 x float>, !dbg !21
  %52 = fpext <2 x half> %43 to <2 x float>, !dbg !22
  %53 = fadd <2 x float> %50, %51, !dbg !23
  %54 = fadd <2 x float> %53, %52, !dbg !24
  %55 = fmul <2 x float> %54, %54, !dbg !25
  %56 = fmul <2 x float> %54, %54, !dbg !25
  %57 = fptrunc <2 x float> %54 to <2 x half>, !dbg !26
  %58 = fpext <2 x half> %25 to <2 x float>, !dbg !20
  %59 = fpext <2 x half> %35 to <2 x float>, !dbg !21
  %60 = fpext <2 x half> %45 to <2 x float>, !dbg !22
  %61 = fadd <2 x float> %58, %59, !dbg !23
  %62 = fadd <2 x float> %61, %60, !dbg !24
  %63 = fmul <2 x float> %62, %62, !dbg !25
  %64 = fmul <2 x float> %62, %62, !dbg !25
  %65 = fptrunc <2 x float> %62 to <2 x half>, !dbg !26
  %66 = fpext <2 x half> %27 to <2 x float>, !dbg !20
  %67 = fpext <2 x half> %37 to <2 x float>, !dbg !21
  %68 = fpext <2 x half> %47 to <2 x float>, !dbg !22
  %69 = fadd <2 x float> %66, %67, !dbg !23
  %70 = fadd <2 x float> %69, %68, !dbg !24
  %71 = fmul <2 x float> %70, %70, !dbg !25
  %72 = fmul <2 x float> %70, %70, !dbg !25
  %73 = fptrunc <2 x float> %70 to <2 x half>, !dbg !26
  %74 = fpext <2 x half> %29 to <2 x float>, !dbg !20
  %75 = fpext <2 x half> %39 to <2 x float>, !dbg !21
  %76 = fpext <2 x half> %49 to <2 x float>, !dbg !22
  %77 = fadd <2 x float> %74, %75, !dbg !23
  %78 = fadd <2 x float> %77, %76, !dbg !24
  %79 = fmul <2 x float> %78, %78, !dbg !25
  %80 = fmul <2 x float> %78, %78, !dbg !25
  %81 = fptrunc <2 x float> %78 to <2 x half>, !dbg !26
  %82 = bitcast <2 x half> %57 to i32, !dbg !26
  %83 = bitcast <2 x half> %65 to i32, !dbg !26
  %84 = bitcast <2 x half> %73 to i32, !dbg !26
  %85 = bitcast <2 x half> %81 to i32, !dbg !26
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %82, i32 %83, i32 %84, i32 %85, ptr addrspace(1) %40, i1 %11) #5, !dbg !26
  %shift = shufflevector <2 x float> %56, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %86 = fadd <2 x float> %55, %shift, !dbg !27
  %87 = fadd <2 x float> %63, %86, !dbg !27
  %shift25 = shufflevector <2 x float> %64, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %88 = fadd <2 x float> %shift25, %87, !dbg !27
  %89 = fadd <2 x float> %71, %88, !dbg !27
  %shift26 = shufflevector <2 x float> %72, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %90 = fadd <2 x float> %shift26, %89, !dbg !27
  %91 = fadd <2 x float> %79, %90, !dbg !27
  %shift27 = shufflevector <2 x float> %80, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %92 = fadd <2 x float> %shift27, %91, !dbg !27
  %93 = extractelement <2 x float> %92, i64 0, !dbg !27
  %94 = select i1 %11, float %93, float 0.000000e+00, !dbg !27
  %95 = bitcast float %94 to i32, !dbg !32
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 16, i32 31), !dbg !32
  %97 = bitcast i32 %96 to float, !dbg !32
  %98 = fadd float %94, %97, !dbg !27
  %99 = bitcast float %98 to i32, !dbg !32
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 8, i32 31), !dbg !32
  %101 = bitcast i32 %100 to float, !dbg !32
  %102 = fadd float %98, %101, !dbg !27
  %103 = bitcast float %102 to i32, !dbg !32
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 4, i32 31), !dbg !32
  %105 = bitcast i32 %104 to float, !dbg !32
  %106 = fadd float %102, %105, !dbg !27
  %107 = bitcast float %106 to i32, !dbg !32
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 2, i32 31), !dbg !32
  %109 = bitcast i32 %108 to float, !dbg !32
  %110 = fadd float %106, %109, !dbg !27
  %111 = bitcast float %110 to i32, !dbg !32
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 1, i32 31), !dbg !32
  %113 = bitcast i32 %112 to float, !dbg !32
  %114 = fadd float %110, %113, !dbg !27
  %115 = and i32 %14, 15, !dbg !32
  %116 = icmp eq i32 %13, 0, !dbg !32
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i32 %115, !dbg !32
  %118 = bitcast float %114 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 %116) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %119 = icmp slt i32 %12, 16, !dbg !32
  %120 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !32
  %121 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %120, i1 %119) #5, !dbg !32
  %122 = bitcast i32 %121 to float, !dbg !32
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 8, i32 31), !dbg !32
  %124 = bitcast i32 %123 to float, !dbg !32
  %125 = fadd float %122, %124, !dbg !27
  %126 = bitcast float %125 to i32, !dbg !32
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 4, i32 31), !dbg !32
  %128 = bitcast i32 %127 to float, !dbg !32
  %129 = fadd float %125, %128, !dbg !27
  %130 = bitcast float %129 to i32, !dbg !32
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 2, i32 31), !dbg !32
  %132 = bitcast i32 %131 to float, !dbg !32
  %133 = fadd float %129, %132, !dbg !27
  %134 = bitcast float %133 to i32, !dbg !32
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 1, i32 31), !dbg !32
  %136 = bitcast i32 %135 to float, !dbg !32
  %137 = fadd float %133, %136, !dbg !27
  %138 = and i32 %12, 15, !dbg !32
  %139 = icmp eq i32 %138, 0, !dbg !32
  %140 = and i1 %119, %139, !dbg !32
  %141 = bitcast float %137 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %141, i1 %140) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %142 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !32
  %143 = tail call float @llvm.nvvm.div.full(float %142, float 4.096000e+03), !dbg !33
  %144 = fadd float %143, 0x3EE4F8B580000000, !dbg !34
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i = icmp eq i32 %145, 0, !dbg !35
  br i1 %.not.i, label %148, label %146, !dbg !35

146:                                              ; preds = %9
  %147 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %144), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

148:                                              ; preds = %9
  %149 = tail call float @llvm.nvvm.rsqrt.approx.f(float %144), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

__nv_rsqrtf.exit:                                 ; preds = %146, %148
  %.0.i = phi float [ %147, %146 ], [ %149, %148 ], !dbg !35
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i22 = icmp eq i32 %157, 0, !dbg !35
  br i1 %.not.i22, label %160, label %158, !dbg !35

158:                                              ; preds = %__nv_rsqrtf.exit
  %159 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %144), !dbg !35
  br label %__nv_rsqrtf.exit24, !dbg !35

160:                                              ; preds = %__nv_rsqrtf.exit
  %161 = tail call float @llvm.nvvm.rsqrt.approx.f(float %144), !dbg !35
  br label %__nv_rsqrtf.exit24, !dbg !35

__nv_rsqrtf.exit24:                               ; preds = %158, %160
  %.0.i23 = phi float [ %159, %158 ], [ %161, %160 ], !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %162 = sext i32 %10 to i64, !dbg !37
  %163 = getelementptr float, ptr addrspace(1) %1, i64 %162, !dbg !37
  %164 = and i32 %12, 511, !dbg !38
  %165 = icmp eq i32 %164, 0, !dbg !38
  %166 = bitcast float %.0.i to i32, !dbg !38
  %167 = and i1 %165, %11, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %166, ptr addrspace(1) %163, i1 %167) #5, !dbg !38
  %168 = zext nneg i32 %16 to i64, !dbg !39
  %169 = getelementptr half, ptr addrspace(1) %4, i64 %168, !dbg !39
  %170 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %169, i1 true) #5, !dbg !40
  %171 = extractvalue { i32, i32, i32, i32 } %170, 0, !dbg !40
  %172 = bitcast i32 %171 to <2 x half>, !dbg !40
  %173 = extractvalue { i32, i32, i32, i32 } %170, 1, !dbg !40
  %174 = bitcast i32 %173 to <2 x half>, !dbg !40
  %175 = extractvalue { i32, i32, i32, i32 } %170, 2, !dbg !40
  %176 = bitcast i32 %175 to <2 x half>, !dbg !40
  %177 = extractvalue { i32, i32, i32, i32 } %170, 3, !dbg !40
  %178 = bitcast i32 %177 to <2 x half>, !dbg !40
  %179 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %40, i1 %11) #5, !dbg !41
  %180 = extractvalue { i32, i32, i32, i32 } %179, 0, !dbg !41
  %181 = bitcast i32 %180 to <2 x half>, !dbg !41
  %182 = extractvalue { i32, i32, i32, i32 } %179, 1, !dbg !41
  %183 = bitcast i32 %182 to <2 x half>, !dbg !41
  %184 = extractvalue { i32, i32, i32, i32 } %179, 2, !dbg !41
  %185 = bitcast i32 %184 to <2 x half>, !dbg !41
  %186 = extractvalue { i32, i32, i32, i32 } %179, 3, !dbg !41
  %187 = bitcast i32 %186 to <2 x half>, !dbg !41
  %188 = getelementptr half, ptr addrspace(1) %5, i64 %19, !dbg !42
  %189 = fpext <2 x half> %172 to <2 x float>, !dbg !43
  %190 = fpext <2 x half> %181 to <2 x float>, !dbg !44
  %191 = insertelement <2 x float> poison, float %.0.i23, i64 0, !dbg !45
  %192 = shufflevector <2 x float> %191, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !45
  %193 = fmul <2 x float> %192, %190, !dbg !45
  %194 = fmul <2 x float> %193, %189, !dbg !46
  %195 = fptrunc <2 x float> %194 to <2 x half>, !dbg !47
  %196 = fpext <2 x half> %174 to <2 x float>, !dbg !43
  %197 = fpext <2 x half> %183 to <2 x float>, !dbg !44
  %198 = fmul <2 x float> %192, %197, !dbg !45
  %199 = fmul <2 x float> %198, %196, !dbg !46
  %200 = fptrunc <2 x float> %199 to <2 x half>, !dbg !47
  %201 = fpext <2 x half> %176 to <2 x float>, !dbg !43
  %202 = fpext <2 x half> %185 to <2 x float>, !dbg !44
  %203 = fmul <2 x float> %192, %202, !dbg !45
  %204 = fmul <2 x float> %203, %201, !dbg !46
  %205 = fptrunc <2 x float> %204 to <2 x half>, !dbg !47
  %206 = fpext <2 x half> %178 to <2 x float>, !dbg !43
  %207 = fpext <2 x half> %187 to <2 x float>, !dbg !44
  %208 = fmul <2 x float> %192, %207, !dbg !45
  %209 = fmul <2 x float> %208, %206, !dbg !46
  %210 = fptrunc <2 x float> %209 to <2 x half>, !dbg !47
  %211 = bitcast <2 x half> %195 to i32, !dbg !47
  %212 = bitcast <2 x half> %200 to i32, !dbg !47
  %213 = bitcast <2 x half> %205 to i32, !dbg !47
  %214 = bitcast <2 x half> %210 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %211, i32 %212, i32 %213, i32 %214, ptr addrspace(1) %188, i1 %11) #5, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cirveghol7wjrq7zwkkgu3sphruzjhq4ru5zcvmudgaexdo5niag.py", directory: "./local_cache/ir")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 21, scope: !6)
!11 = !DILocation(line: 25, column: 37, scope: !6)
!12 = !DILocation(line: 35, column: 46, scope: !6)
!13 = !DILocation(line: 35, column: 41, scope: !6)
!14 = !DILocation(line: 35, column: 34, scope: !6)
!15 = !DILocation(line: 35, column: 51, scope: !6)
!16 = !DILocation(line: 36, column: 34, scope: !6)
!17 = !DILocation(line: 36, column: 51, scope: !6)
!18 = !DILocation(line: 37, column: 38, scope: !6)
!19 = !DILocation(line: 37, column: 55, scope: !6)
!20 = !DILocation(line: 35, column: 113, scope: !6)
!21 = !DILocation(line: 36, column: 113, scope: !6)
!22 = !DILocation(line: 37, column: 117, scope: !6)
!23 = !DILocation(line: 38, column: 22, scope: !6)
!24 = !DILocation(line: 39, column: 22, scope: !6)
!25 = !DILocation(line: 41, column: 22, scope: !6)
!26 = !DILocation(line: 45, column: 55, scope: !6)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!30 = distinct !DILexicalBlockFile(scope: !6, file: !29, discriminator: 0)
!31 = !DILocation(line: 46, column: 25, scope: !6)
!32 = !DILocation(line: 286, column: 36, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 48, column: 20, scope: !6)
!34 = !DILocation(line: 50, column: 20, scope: !6)
!35 = !DILocation(line: 51, column: 28, scope: !6)
!36 = !DILocation(line: 52, column: 4, scope: !6)
!37 = !DILocation(line: 53, column: 28, scope: !6)
!38 = !DILocation(line: 53, column: 40, scope: !6)
!39 = !DILocation(line: 60, column: 35, scope: !6)
!40 = !DILocation(line: 60, column: 42, scope: !6)
!41 = !DILocation(line: 61, column: 56, scope: !6)
!42 = !DILocation(line: 66, column: 29, scope: !6)
!43 = !DILocation(line: 60, column: 95, scope: !6)
!44 = !DILocation(line: 61, column: 118, scope: !6)
!45 = !DILocation(line: 63, column: 24, scope: !6)
!46 = !DILocation(line: 65, column: 24, scope: !6)
!47 = !DILocation(line: 66, column: 53, scope: !6)
!48 = !DILocation(line: 54, column: 4, scope: !6)
