; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_red_fused__to_copy_add_div_mul_pow_sum_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = shl i32 %10, 4, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = lshr i32 %12, 2, !dbg !11
  %14 = and i32 %13, 15, !dbg !11
  %15 = or disjoint i32 %14, %11, !dbg !12
  %16 = icmp slt i32 %15, %6, !dbg !13
  %17 = shl i32 %12, 1, !dbg !14
  %18 = and i32 %17, 6, !dbg !14
  %19 = shl i32 %15, 12, !dbg !15
  %invariant.op = or disjoint i32 %18, %19, !dbg !16
  %20 = zext nneg i32 %18 to i64, !dbg !16
  br label %21, !dbg !16

21:                                               ; preds = %9, %21
  %indvars.iv = phi i64 [ 0, %9 ], [ %indvars.iv.next, %21 ]
  %22 = phi float [ 0.000000e+00, %9 ], [ %63, %21 ]
  %23 = phi float [ 0.000000e+00, %9 ], [ %64, %21 ]
  %24 = or disjoint i64 %indvars.iv, %20, !dbg !17
  %25 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %25
  %26 = sext i32 %.reass to i64, !dbg !18
  %27 = getelementptr half, ptr addrspace(1) %1, i64 %26, !dbg !18
  %28 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %27, i1 %16) #2, !dbg !19
  %29 = bitcast i32 %28 to <2 x half>, !dbg !19
  %30 = extractelement <2 x half> %29, i64 0, !dbg !19
  %31 = extractelement <2 x half> %29, i64 1, !dbg !19
  %32 = fpext half %30 to float, !dbg !20
  %33 = fpext half %31 to float, !dbg !20
  %34 = getelementptr half, ptr addrspace(1) %2, i64 %26, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %34, i1 %16) #2, !dbg !22
  %36 = bitcast i32 %35 to <2 x half>, !dbg !22
  %37 = extractelement <2 x half> %36, i64 0, !dbg !22
  %38 = extractelement <2 x half> %36, i64 1, !dbg !22
  %39 = fpext half %37 to float, !dbg !23
  %40 = fpext half %38 to float, !dbg !23
  %41 = getelementptr half, ptr addrspace(1) %3, i64 %24, !dbg !24
  %42 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %41, i1 true) #2, !dbg !25
  %43 = bitcast i32 %42 to <2 x half>, !dbg !25
  %44 = extractelement <2 x half> %43, i64 0, !dbg !25
  %45 = extractelement <2 x half> %43, i64 1, !dbg !25
  %46 = fpext half %44 to float, !dbg !26
  %47 = fpext half %45 to float, !dbg !26
  %48 = getelementptr half, ptr addrspace(1) %4, i64 %26, !dbg !27
  %49 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %48, i1 %16) #2, !dbg !28
  %50 = bitcast i32 %49 to <2 x half>, !dbg !28
  %51 = extractelement <2 x half> %50, i64 0, !dbg !28
  %52 = extractelement <2 x half> %50, i64 1, !dbg !28
  %53 = fpext half %51 to float, !dbg !29
  %54 = fpext half %52 to float, !dbg !29
  %55 = fadd float %32, %39, !dbg !30
  %56 = fadd float %33, %40, !dbg !30
  %57 = fmul float %55, %46, !dbg !31
  %58 = fmul float %56, %47, !dbg !31
  %59 = fmul float %57, %53, !dbg !32
  %60 = fmul float %58, %54, !dbg !32
  %61 = fadd float %22, %59, !dbg !33
  %62 = fadd float %23, %60, !dbg !33
  %63 = select i1 %16, float %61, float %22, !dbg !34
  %64 = select i1 %16, float %62, float %23, !dbg !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !16
  %65 = icmp samesign ult i64 %indvars.iv, 4088, !dbg !16
  br i1 %65, label %21, label %66, !dbg !16

66:                                               ; preds = %21
  %67 = fadd float %63, %64, !dbg !35
  %68 = bitcast float %67 to i32, !dbg !40
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 2, i32 31), !dbg !40
  %70 = bitcast i32 %69 to float, !dbg !40
  %71 = fadd float %67, %70, !dbg !35
  %72 = bitcast float %71 to i32, !dbg !40
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 1, i32 31), !dbg !40
  %74 = bitcast i32 %73 to float, !dbg !40
  %75 = fadd float %71, %74, !dbg !35
  %76 = sext i32 %15 to i64, !dbg !41
  %77 = getelementptr float, ptr addrspace(1) %5, i64 %76, !dbg !41
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %16) #2, !dbg !42
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %16) #2, !dbg !42
  %80 = bitcast i32 %79 to float, !dbg !42
  %81 = fmul float %75, -5.000000e-01, !dbg !43
  %82 = fmul float %80, %80, !dbg !44
  %83 = fmul float %82, %80, !dbg !45
  %84 = fmul float %81, %83, !dbg !46
  %85 = fmul float %84, 0x3F30000000000000, !dbg !47
  %86 = insertelement <2 x float> poison, float %80, i64 0, !dbg !48
  %87 = shufflevector <2 x float> %86, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !48
  %88 = insertelement <2 x float> poison, float %85, i64 0, !dbg !49
  %89 = shufflevector <2 x float> %88, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  br label %90, !dbg !50

90:                                               ; preds = %66, %90
  %indvars.iv5 = phi i64 [ 0, %66 ], [ %indvars.iv.next6, %90 ]
  %91 = or disjoint i64 %indvars.iv5, %20, !dbg !51
  %92 = trunc nuw nsw i64 %indvars.iv5 to i32
  %.reass3 = or i32 %invariant.op, %92
  %93 = sext i32 %.reass3 to i64, !dbg !52
  %94 = getelementptr half, ptr addrspace(1) %0, i64 %93, !dbg !52
  %95 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %94, i1 %16) #2, !dbg !53
  %96 = bitcast i32 %95 to <2 x half>, !dbg !53
  %97 = getelementptr half, ptr addrspace(1) %1, i64 %93, !dbg !54
  %98 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %97, i1 %16) #2, !dbg !55
  %99 = bitcast i32 %98 to <2 x half>, !dbg !55
  %100 = getelementptr half, ptr addrspace(1) %2, i64 %93, !dbg !56
  %101 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %100, i1 %16) #2, !dbg !57
  %102 = bitcast i32 %101 to <2 x half>, !dbg !57
  %103 = getelementptr half, ptr addrspace(1) %3, i64 %91, !dbg !58
  %104 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %103, i1 true) #2, !dbg !59
  %105 = bitcast i32 %104 to <2 x half>, !dbg !59
  %106 = getelementptr half, ptr addrspace(1) %4, i64 %93, !dbg !60
  %107 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %106, i1 %16) #2, !dbg !61
  %108 = bitcast i32 %107 to <2 x half>, !dbg !61
  %109 = fpext <2 x half> %96 to <2 x float>, !dbg !62
  %110 = fpext <2 x half> %99 to <2 x float>, !dbg !63
  %111 = fpext <2 x half> %102 to <2 x float>, !dbg !64
  %112 = fpext <2 x half> %105 to <2 x float>, !dbg !65
  %113 = fpext <2 x half> %108 to <2 x float>, !dbg !66
  %114 = fadd <2 x float> %110, %111, !dbg !67
  %115 = fmul <2 x float> %114, %112, !dbg !68
  %116 = fmul <2 x float> %115, %87, !dbg !48
  %117 = fmul <2 x float> %113, splat (float 2.000000e+00), !dbg !69
  %118 = fmul <2 x float> %89, %117, !dbg !49
  %119 = fadd <2 x float> %116, %118, !dbg !70
  %120 = fadd <2 x float> %119, %109, !dbg !71
  %121 = fptrunc <2 x float> %120 to <2 x half>, !dbg !72
  %122 = bitcast <2 x half> %121 to i32, !dbg !72
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %122, ptr addrspace(1) %94, i1 %16) #2, !dbg !72
  %indvars.iv.next6 = add nuw nsw i64 %indvars.iv5, 8, !dbg !50
  %123 = icmp samesign ult i64 %indvars.iv5, 4088, !dbg !50
  br i1 %123, label %90, label %124, !dbg !50

124:                                              ; preds = %90
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyebsf3anhyuxewgys2gminc36tn6uo6fybpryty274aelqwsxrt.py", directory: "./local_cache/ye")
!4 = !{ptr @triton_red_fused__to_copy_add_div_mul_pow_sum_4, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_mul_pow_sum_4", linkageName: "triton_red_fused__to_copy_add_div_mul_pow_sum_4", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 29, column: 40, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 35, column: 34, scope: !6)
!19 = !DILocation(line: 35, column: 51, scope: !6)
!20 = !DILocation(line: 35, column: 112, scope: !6)
!21 = !DILocation(line: 36, column: 34, scope: !6)
!22 = !DILocation(line: 36, column: 51, scope: !6)
!23 = !DILocation(line: 36, column: 112, scope: !6)
!24 = !DILocation(line: 37, column: 34, scope: !6)
!25 = !DILocation(line: 37, column: 41, scope: !6)
!26 = !DILocation(line: 37, column: 94, scope: !6)
!27 = !DILocation(line: 38, column: 34, scope: !6)
!28 = !DILocation(line: 38, column: 51, scope: !6)
!29 = !DILocation(line: 38, column: 112, scope: !6)
!30 = !DILocation(line: 39, column: 22, scope: !6)
!31 = !DILocation(line: 40, column: 22, scope: !6)
!32 = !DILocation(line: 43, column: 22, scope: !6)
!33 = !DILocation(line: 45, column: 25, scope: !6)
!34 = !DILocation(line: 46, column: 50, scope: !6)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !39)
!36 = distinct !DILexicalBlockFile(scope: !38, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!38 = distinct !DILexicalBlockFile(scope: !6, file: !37, discriminator: 0)
!39 = !DILocation(line: 47, column: 27, scope: !6)
!40 = !DILocation(line: 286, column: 36, scope: !38, inlinedAt: !39)
!41 = !DILocation(line: 48, column: 31, scope: !6)
!42 = !DILocation(line: 48, column: 36, scope: !6)
!43 = !DILocation(line: 65, column: 24, scope: !6)
!44 = !DILocation(line: 66, column: 24, scope: !6)
!45 = !DILocation(line: 67, column: 24, scope: !6)
!46 = !DILocation(line: 68, column: 24, scope: !6)
!47 = !DILocation(line: 70, column: 24, scope: !6)
!48 = !DILocation(line: 63, column: 24, scope: !6)
!49 = !DILocation(line: 74, column: 24, scope: !6)
!50 = !DILocation(line: 49, column: 40, scope: !6)
!51 = !DILocation(line: 50, column: 31, scope: !6)
!52 = !DILocation(line: 55, column: 39, scope: !6)
!53 = !DILocation(line: 55, column: 56, scope: !6)
!54 = !DILocation(line: 56, column: 35, scope: !6)
!55 = !DILocation(line: 56, column: 52, scope: !6)
!56 = !DILocation(line: 57, column: 35, scope: !6)
!57 = !DILocation(line: 57, column: 52, scope: !6)
!58 = !DILocation(line: 58, column: 35, scope: !6)
!59 = !DILocation(line: 58, column: 42, scope: !6)
!60 = !DILocation(line: 59, column: 35, scope: !6)
!61 = !DILocation(line: 59, column: 52, scope: !6)
!62 = !DILocation(line: 55, column: 118, scope: !6)
!63 = !DILocation(line: 56, column: 114, scope: !6)
!64 = !DILocation(line: 57, column: 114, scope: !6)
!65 = !DILocation(line: 58, column: 95, scope: !6)
!66 = !DILocation(line: 59, column: 114, scope: !6)
!67 = !DILocation(line: 60, column: 24, scope: !6)
!68 = !DILocation(line: 61, column: 24, scope: !6)
!69 = !DILocation(line: 73, column: 24, scope: !6)
!70 = !DILocation(line: 75, column: 24, scope: !6)
!71 = !DILocation(line: 77, column: 24, scope: !6)
!72 = !DILocation(line: 78, column: 56, scope: !6)
!73 = !DILocation(line: 49, column: 4, scope: !6)
