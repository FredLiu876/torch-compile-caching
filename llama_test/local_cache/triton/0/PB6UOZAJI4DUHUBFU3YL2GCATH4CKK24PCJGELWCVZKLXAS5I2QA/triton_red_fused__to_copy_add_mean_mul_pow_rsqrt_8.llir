; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = shl i32 %10, 3, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = lshr i32 %12, 6, !dbg !11
  %14 = and i32 %13, 7, !dbg !11
  %15 = and i32 %12, 31, !dbg !11
  %16 = or disjoint i32 %14, %11, !dbg !12
  %17 = icmp slt i32 %16, %6, !dbg !13
  %18 = shl i32 %12, 3, !dbg !14
  %19 = and i32 %18, 504, !dbg !14
  %20 = shl i32 %16, 12, !dbg !15
  %21 = or disjoint i32 %20, %19
  %22 = insertelement <8 x i1> poison, i1 %17, i64 0, !dbg !16
  %23 = shufflevector <8 x i1> %22, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !16
  br label %24, !dbg !17

24:                                               ; preds = %9, %24
  %25 = phi i32 [ 0, %9 ], [ %122, %24 ]
  %26 = phi <8 x float> [ zeroinitializer, %9 ], [ %93, %24 ]
  %27 = or i32 %21, %25, !dbg !18
  %28 = sext i32 %27 to i64, !dbg !19
  %29 = getelementptr half, ptr addrspace(1) %2, i64 %28, !dbg !19
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %29, i1 %17) #5, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !20
  %32 = bitcast i32 %31 to <2 x half>, !dbg !20
  %33 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !20
  %34 = bitcast i32 %33 to <2 x half>, !dbg !20
  %35 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !20
  %36 = bitcast i32 %35 to <2 x half>, !dbg !20
  %37 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !20
  %38 = bitcast i32 %37 to <2 x half>, !dbg !20
  %39 = getelementptr half, ptr addrspace(1) %3, i64 %28, !dbg !21
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %39, i1 %17) #5, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !22
  %42 = bitcast i32 %41 to <2 x half>, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !22
  %44 = bitcast i32 %43 to <2 x half>, !dbg !22
  %45 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !22
  %46 = bitcast i32 %45 to <2 x half>, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !22
  %48 = bitcast i32 %47 to <2 x half>, !dbg !22
  %49 = getelementptr half, ptr addrspace(1) %0, i64 %28, !dbg !23
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %49, i1 %17) #5, !dbg !24
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !24
  %52 = bitcast i32 %51 to <2 x half>, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !24
  %54 = bitcast i32 %53 to <2 x half>, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !24
  %56 = bitcast i32 %55 to <2 x half>, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !24
  %58 = bitcast i32 %57 to <2 x half>, !dbg !24
  %59 = shufflevector <2 x half> %32, <2 x half> %34, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %60 = shufflevector <2 x half> %36, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %61 = shufflevector <8 x half> %59, <8 x half> %60, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !25
  %62 = shufflevector <2 x half> %36, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %63 = shufflevector <8 x half> %61, <8 x half> %62, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !25
  %64 = shufflevector <2 x half> %38, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %65 = shufflevector <8 x half> %63, <8 x half> %64, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !25
  %66 = shufflevector <2 x half> %38, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %67 = shufflevector <8 x half> %65, <8 x half> %66, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !25
  %68 = fpext <8 x half> %67 to <8 x float>, !dbg !25
  %69 = shufflevector <2 x half> %42, <2 x half> %44, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %70 = shufflevector <2 x half> %46, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %71 = shufflevector <8 x half> %69, <8 x half> %70, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !26
  %72 = shufflevector <2 x half> %46, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %73 = shufflevector <8 x half> %71, <8 x half> %72, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !26
  %74 = shufflevector <2 x half> %48, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %75 = shufflevector <8 x half> %73, <8 x half> %74, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !26
  %76 = shufflevector <2 x half> %48, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %77 = shufflevector <8 x half> %75, <8 x half> %76, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !26
  %78 = fpext <8 x half> %77 to <8 x float>, !dbg !26
  %79 = shufflevector <2 x half> %52, <2 x half> %54, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %80 = shufflevector <2 x half> %56, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %81 = shufflevector <8 x half> %79, <8 x half> %80, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !27
  %82 = shufflevector <2 x half> %56, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %83 = shufflevector <8 x half> %81, <8 x half> %82, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !27
  %84 = shufflevector <2 x half> %58, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %85 = shufflevector <8 x half> %83, <8 x half> %84, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !27
  %86 = shufflevector <2 x half> %58, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %87 = shufflevector <8 x half> %85, <8 x half> %86, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !27
  %88 = fpext <8 x half> %87 to <8 x float>, !dbg !27
  %89 = fadd <8 x float> %68, %78, !dbg !28
  %90 = fadd <8 x float> %89, %88, !dbg !29
  %91 = fmul <8 x float> %90, %90, !dbg !30
  %92 = fadd <8 x float> %26, %91, !dbg !31
  %93 = select <8 x i1> %23, <8 x float> %92, <8 x float> %26, !dbg !16
  %94 = extractelement <8 x float> %90, i64 0, !dbg !32
  %95 = fptrunc float %94 to half, !dbg !32
  %96 = extractelement <8 x float> %90, i64 1, !dbg !32
  %97 = fptrunc float %96 to half, !dbg !32
  %98 = extractelement <8 x float> %90, i64 2, !dbg !32
  %99 = fptrunc float %98 to half, !dbg !32
  %100 = extractelement <8 x float> %90, i64 3, !dbg !32
  %101 = fptrunc float %100 to half, !dbg !32
  %102 = extractelement <8 x float> %90, i64 4, !dbg !32
  %103 = fptrunc float %102 to half, !dbg !32
  %104 = extractelement <8 x float> %90, i64 5, !dbg !32
  %105 = fptrunc float %104 to half, !dbg !32
  %106 = extractelement <8 x float> %90, i64 6, !dbg !32
  %107 = fptrunc float %106 to half, !dbg !32
  %108 = extractelement <8 x float> %90, i64 7, !dbg !32
  %109 = fptrunc float %108 to half, !dbg !32
  %110 = insertelement <2 x half> poison, half %95, i64 0, !dbg !32
  %111 = insertelement <2 x half> %110, half %97, i64 1, !dbg !32
  %112 = bitcast <2 x half> %111 to i32, !dbg !32
  %113 = insertelement <2 x half> poison, half %99, i64 0, !dbg !32
  %114 = insertelement <2 x half> %113, half %101, i64 1, !dbg !32
  %115 = bitcast <2 x half> %114 to i32, !dbg !32
  %116 = insertelement <2 x half> poison, half %103, i64 0, !dbg !32
  %117 = insertelement <2 x half> %116, half %105, i64 1, !dbg !32
  %118 = bitcast <2 x half> %117 to i32, !dbg !32
  %119 = insertelement <2 x half> poison, half %107, i64 0, !dbg !32
  %120 = insertelement <2 x half> %119, half %109, i64 1, !dbg !32
  %121 = bitcast <2 x half> %120 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %112, i32 %115, i32 %118, i32 %121, ptr addrspace(1) %49, i1 %17) #5, !dbg !32
  %122 = add nuw nsw i32 %25, 512, !dbg !17
  %123 = icmp samesign ult i32 %25, 3584, !dbg !17
  br i1 %123, label %24, label %124, !dbg !17

124:                                              ; preds = %24
  %125 = lshr i32 %12, 5, !dbg !11
  %126 = and i32 %12, 7, !dbg !11
  %127 = or disjoint i32 %11, %126, !dbg !12
  %128 = icmp slt i32 %127, %6, !dbg !13
  %129 = and i32 %12, 511, !dbg !14
  %shift = shufflevector <8 x float> %93, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %130 = fadd <8 x float> %93, %shift, !dbg !33
  %shift56 = shufflevector <8 x float> %93, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %131 = fadd <8 x float> %shift56, %130, !dbg !33
  %shift57 = shufflevector <8 x float> %93, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %132 = fadd <8 x float> %shift57, %131, !dbg !33
  %shift58 = shufflevector <8 x float> %93, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %133 = fadd <8 x float> %shift58, %132, !dbg !33
  %shift59 = shufflevector <8 x float> %93, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %134 = fadd <8 x float> %shift59, %133, !dbg !33
  %shift60 = shufflevector <8 x float> %93, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %135 = fadd <8 x float> %shift60, %134, !dbg !33
  %shift61 = shufflevector <8 x float> %93, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %136 = fadd <8 x float> %shift61, %135, !dbg !33
  %137 = extractelement <8 x float> %136, i64 0, !dbg !33
  %138 = bitcast float %137 to i32, !dbg !38
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 16, i32 31), !dbg !38
  %140 = bitcast i32 %139 to float, !dbg !38
  %141 = fadd float %137, %140, !dbg !33
  %142 = bitcast float %141 to i32, !dbg !38
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 8, i32 31), !dbg !38
  %144 = bitcast i32 %143 to float, !dbg !38
  %145 = fadd float %141, %144, !dbg !33
  %146 = bitcast float %145 to i32, !dbg !38
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 4, i32 31), !dbg !38
  %148 = bitcast i32 %147 to float, !dbg !38
  %149 = fadd float %145, %148, !dbg !33
  %150 = bitcast float %149 to i32, !dbg !38
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 2, i32 31), !dbg !38
  %152 = bitcast i32 %151 to float, !dbg !38
  %153 = fadd float %149, %152, !dbg !33
  %154 = bitcast float %153 to i32, !dbg !38
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 1, i32 31), !dbg !38
  %156 = bitcast i32 %155 to float, !dbg !38
  %157 = fadd float %153, %156, !dbg !33
  %158 = and i32 %125, 1, !dbg !38
  %159 = icmp eq i32 %15, 0, !dbg !38
  %160 = shl nuw nsw i32 %14, 1, !dbg !38
  %161 = or disjoint i32 %160, %158, !dbg !38
  %162 = getelementptr float, ptr addrspace(3) @global_smem, i32 %161, !dbg !38
  %163 = bitcast float %157 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %163, i1 %159) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %164 = icmp slt i32 %12, 16, !dbg !38
  %165 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !38
  %166 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %165, i1 %164) #5, !dbg !38
  %167 = bitcast i32 %166 to float, !dbg !38
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 1, i32 31), !dbg !38
  %169 = bitcast i32 %168 to float, !dbg !38
  %170 = fadd float %167, %169, !dbg !33
  %171 = and i32 %12, 1, !dbg !38
  %172 = icmp eq i32 %171, 0, !dbg !38
  %173 = and i1 %164, %172, !dbg !38
  %174 = bitcast float %170 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, <1 x i32> %174, i1 %173) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %175 = getelementptr float, ptr addrspace(3) @global_smem, i32 %160, !dbg !38
  %176 = load float, ptr addrspace(3) %175, align 8, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %177 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %14, !dbg !39
  %178 = bitcast float %176 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %178, i1 true) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %179 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %126, !dbg !39
  %180 = load float, ptr addrspace(3) %179, align 4, !dbg !39
  %181 = tail call float @llvm.nvvm.div.full(float %180, float 4.096000e+03), !dbg !40
  %182 = tail call float @llvm.nvvm.div.full(float %176, float 4.096000e+03), !dbg !40
  %183 = fadd float %181, 0x3EE4F8B580000000, !dbg !41
  %184 = fadd float %182, 0x3EE4F8B580000000, !dbg !41
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i = icmp eq i32 %185, 0, !dbg !39
  br i1 %.not.i, label %188, label %186, !dbg !39

186:                                              ; preds = %124
  %187 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %183), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

188:                                              ; preds = %124
  %189 = tail call float @llvm.nvvm.rsqrt.approx.f(float %183), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

__nv_rsqrtf.exit:                                 ; preds = %186, %188
  %.0.i = phi float [ %187, %186 ], [ %189, %188 ], !dbg !39
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i32 = icmp eq i32 %197, 0, !dbg !39
  br i1 %.not.i32, label %200, label %198, !dbg !39

198:                                              ; preds = %__nv_rsqrtf.exit
  %199 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %184), !dbg !39
  br label %__nv_rsqrtf.exit34, !dbg !39

200:                                              ; preds = %__nv_rsqrtf.exit
  %201 = tail call float @llvm.nvvm.rsqrt.approx.f(float %184), !dbg !39
  br label %__nv_rsqrtf.exit34, !dbg !39

__nv_rsqrtf.exit34:                               ; preds = %198, %200
  %.0.i33 = phi float [ %199, %198 ], [ %201, %200 ], !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %202 = sext i32 %127 to i64, !dbg !43
  %203 = getelementptr float, ptr addrspace(1) %1, i64 %202, !dbg !43
  %204 = and i32 %12, 504, !dbg !44
  %205 = icmp eq i32 %204, 0, !dbg !44
  %206 = bitcast float %.0.i to i32, !dbg !44
  %207 = and i1 %205, %128, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %206, ptr addrspace(1) %203, i1 %207) #5, !dbg !44
  %208 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %129
  %209 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %19
  %210 = or disjoint i32 %19, 4
  %211 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %210
  %212 = zext nneg i32 %129 to i64, !dbg !45
  %213 = getelementptr inbounds nuw i8, ptr addrspace(3) %209, i32 8
  %214 = getelementptr inbounds nuw i8, ptr addrspace(3) %211, i32 8
  %215 = insertelement <2 x float> poison, float %.0.i33, i64 0, !dbg !46
  %216 = shufflevector <2 x float> %215, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !46
  br label %217, !dbg !45

217:                                              ; preds = %__nv_rsqrtf.exit34, %217
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit34 ], [ %indvars.iv.next, %217 ]
  %218 = or disjoint i64 %indvars.iv, %212, !dbg !47
  %219 = getelementptr half, ptr addrspace(1) %4, i64 %218, !dbg !48
  %220 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %219, i1 true) #5, !dbg !49
  %221 = bitcast i16 %220 to half, !dbg !49
  %222 = fpext half %221 to float, !dbg !50
  %223 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !51
  %224 = or i32 %21, %223, !dbg !51
  %225 = sext i32 %224 to i64, !dbg !52
  %226 = getelementptr half, ptr addrspace(1) %0, i64 %225, !dbg !52
  %227 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %226, i1 %17) #5, !dbg !53
  %228 = extractvalue { i32, i32, i32, i32 } %227, 0, !dbg !53
  %229 = bitcast i32 %228 to <2 x half>, !dbg !53
  %230 = extractvalue { i32, i32, i32, i32 } %227, 1, !dbg !53
  %231 = bitcast i32 %230 to <2 x half>, !dbg !53
  %232 = extractvalue { i32, i32, i32, i32 } %227, 2, !dbg !53
  %233 = bitcast i32 %232 to <2 x half>, !dbg !53
  %234 = extractvalue { i32, i32, i32, i32 } %227, 3, !dbg !53
  %235 = bitcast i32 %234 to <2 x half>, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %236 = bitcast float %222 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, <1 x i32> %236, i1 true) #5, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %237 = getelementptr half, ptr addrspace(1) %5, i64 %225, !dbg !55
  %238 = fpext <2 x half> %229 to <2 x float>, !dbg !56
  %239 = fmul <2 x float> %216, %238, !dbg !46
  %240 = load <2 x float>, ptr addrspace(3) %209, align 16, !dbg !54
  %241 = fmul <2 x float> %240, %239, !dbg !54
  %242 = fptrunc <2 x float> %241 to <2 x half>, !dbg !57
  %243 = fpext <2 x half> %231 to <2 x float>, !dbg !56
  %244 = fmul <2 x float> %216, %243, !dbg !46
  %245 = load <2 x float>, ptr addrspace(3) %213, align 8, !dbg !54
  %246 = fmul <2 x float> %245, %244, !dbg !54
  %247 = fptrunc <2 x float> %246 to <2 x half>, !dbg !57
  %248 = fpext <2 x half> %233 to <2 x float>, !dbg !56
  %249 = fmul <2 x float> %216, %248, !dbg !46
  %250 = load <2 x float>, ptr addrspace(3) %211, align 16, !dbg !54
  %251 = fmul <2 x float> %249, %250, !dbg !54
  %252 = fptrunc <2 x float> %251 to <2 x half>, !dbg !57
  %253 = fpext <2 x half> %235 to <2 x float>, !dbg !56
  %254 = fmul <2 x float> %216, %253, !dbg !46
  %255 = load <2 x float>, ptr addrspace(3) %214, align 8, !dbg !54
  %256 = fmul <2 x float> %254, %255, !dbg !54
  %257 = fptrunc <2 x float> %256 to <2 x half>, !dbg !57
  %258 = bitcast <2 x half> %242 to i32, !dbg !57
  %259 = bitcast <2 x half> %247 to i32, !dbg !57
  %260 = bitcast <2 x half> %252 to i32, !dbg !57
  %261 = bitcast <2 x half> %257 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %258, i32 %259, i32 %260, i32 %261, ptr addrspace(1) %237, i1 %17) #5, !dbg !57
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !45
  %262 = icmp samesign ult i64 %indvars.iv, 3584, !dbg !45
  br i1 %262, label %217, label %263, !dbg !45

263:                                              ; preds = %217
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cg3n6hvtx4do75kalztgulpaqncj5atzscma6f3lugjffmi36kyt.py", directory: "./local_cache/g3")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 44, column: 48, scope: !6)
!17 = !DILocation(line: 29, column: 40, scope: !6)
!18 = !DILocation(line: 35, column: 41, scope: !6)
!19 = !DILocation(line: 35, column: 34, scope: !6)
!20 = !DILocation(line: 35, column: 51, scope: !6)
!21 = !DILocation(line: 36, column: 34, scope: !6)
!22 = !DILocation(line: 36, column: 51, scope: !6)
!23 = !DILocation(line: 37, column: 38, scope: !6)
!24 = !DILocation(line: 37, column: 55, scope: !6)
!25 = !DILocation(line: 35, column: 113, scope: !6)
!26 = !DILocation(line: 36, column: 113, scope: !6)
!27 = !DILocation(line: 37, column: 117, scope: !6)
!28 = !DILocation(line: 38, column: 22, scope: !6)
!29 = !DILocation(line: 39, column: 22, scope: !6)
!30 = !DILocation(line: 41, column: 22, scope: !6)
!31 = !DILocation(line: 43, column: 23, scope: !6)
!32 = !DILocation(line: 45, column: 55, scope: !6)
!33 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !37)
!34 = distinct !DILexicalBlockFile(scope: !36, file: !35, discriminator: 0)
!35 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!36 = distinct !DILexicalBlockFile(scope: !6, file: !35, discriminator: 0)
!37 = !DILocation(line: 46, column: 25, scope: !6)
!38 = !DILocation(line: 286, column: 36, scope: !36, inlinedAt: !37)
!39 = !DILocation(line: 51, column: 28, scope: !6)
!40 = !DILocation(line: 48, column: 20, scope: !6)
!41 = !DILocation(line: 50, column: 20, scope: !6)
!42 = !DILocation(line: 52, column: 4, scope: !6)
!43 = !DILocation(line: 53, column: 28, scope: !6)
!44 = !DILocation(line: 53, column: 40, scope: !6)
!45 = !DILocation(line: 54, column: 40, scope: !6)
!46 = !DILocation(line: 63, column: 24, scope: !6)
!47 = !DILocation(line: 55, column: 31, scope: !6)
!48 = !DILocation(line: 60, column: 35, scope: !6)
!49 = !DILocation(line: 60, column: 42, scope: !6)
!50 = !DILocation(line: 60, column: 95, scope: !6)
!51 = !DILocation(line: 61, column: 46, scope: !6)
!52 = !DILocation(line: 61, column: 39, scope: !6)
!53 = !DILocation(line: 61, column: 56, scope: !6)
!54 = !DILocation(line: 65, column: 24, scope: !6)
!55 = !DILocation(line: 66, column: 29, scope: !6)
!56 = !DILocation(line: 61, column: 118, scope: !6)
!57 = !DILocation(line: 66, column: 53, scope: !6)
!58 = !DILocation(line: 54, column: 4, scope: !6)
