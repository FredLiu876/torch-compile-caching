; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_mul_sum_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11, i32 %12, ptr addrspace(1) readnone captures(none) %13) local_unnamed_addr !dbg !6 {
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %16 = shl i32 %15, 3, !dbg !10
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %18 = shl i32 %17, 1, !dbg !11
  %19 = and i32 %18, 6, !dbg !11
  %20 = or disjoint i32 %19, %16, !dbg !12
  %21 = lshr i32 %17, 2, !dbg !13
  %22 = and i32 %21, 15, !dbg !13
  %23 = icmp sgt i32 %12, 0, !dbg !14
  br i1 %23, label %.lr.ph, label %._crit_edge, !dbg !14

.lr.ph:                                           ; preds = %14, %.lr.ph
  %24 = phi i32 [ %83, %.lr.ph ], [ 0, %14 ]
  %25 = phi <4 x float> [ %82, %.lr.ph ], [ zeroinitializer, %14 ]
  %26 = or disjoint i32 %24, %22, !dbg !15
  %27 = icmp slt i32 %26, %12, !dbg !16
  %28 = shl i32 %26, 12, !dbg !17
  %29 = add i32 %20, %28, !dbg !18
  %30 = sext i32 %29 to i64, !dbg !19
  %31 = getelementptr half, ptr addrspace(1) %0, i64 %30, !dbg !19
  %32 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %31, i1 %27) #3, !dbg !20
  %33 = bitcast i32 %32 to <2 x half>, !dbg !20
  %34 = fpext <2 x half> %33 to <2 x float>, !dbg !21
  %35 = getelementptr half, ptr addrspace(1) %1, i64 %30, !dbg !22
  %36 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %35, i1 %27) #3, !dbg !23
  %37 = bitcast i32 %36 to <2 x half>, !dbg !23
  %38 = getelementptr half, ptr addrspace(1) %2, i64 %30, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %38, i1 %27) #3, !dbg !25
  %40 = bitcast i32 %39 to <2 x half>, !dbg !25
  %41 = getelementptr half, ptr addrspace(1) %3, i64 %30, !dbg !26
  %42 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %41, i1 %27) #3, !dbg !27
  %43 = bitcast i32 %42 to <2 x half>, !dbg !27
  %44 = sext i32 %26 to i64, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %4, i64 %44, !dbg !28
  %46 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %45, i1 %27) #3, !dbg !29
  %47 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %45, i1 %27) #3, !dbg !29
  %48 = getelementptr half, ptr addrspace(1) %5, i64 %30, !dbg !30
  %49 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %48, i1 %27) #3, !dbg !31
  %50 = bitcast i32 %49 to <2 x half>, !dbg !31
  %51 = getelementptr half, ptr addrspace(1) %6, i64 %30, !dbg !32
  %52 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %51, i1 %27) #3, !dbg !33
  %53 = bitcast i32 %52 to <2 x half>, !dbg !33
  %54 = getelementptr half, ptr addrspace(1) %7, i64 %30, !dbg !34
  %55 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %54, i1 %27) #3, !dbg !35
  %56 = bitcast i32 %55 to <2 x half>, !dbg !35
  %57 = getelementptr float, ptr addrspace(1) %8, i64 %44, !dbg !36
  %58 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %57, i1 %27) #3, !dbg !37
  %59 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %57, i1 %27) #3, !dbg !37
  %60 = fpext <2 x half> %50 to <2 x float>, !dbg !38
  %61 = fpext <2 x half> %53 to <2 x float>, !dbg !39
  %62 = fadd <2 x float> %60, %61, !dbg !40
  %63 = fpext <2 x half> %40 to <2 x float>, !dbg !41
  %64 = fpext <2 x half> %43 to <2 x float>, !dbg !42
  %65 = shufflevector <2 x half> %37, <2 x half> %56, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !43
  %66 = fpext <4 x half> %65 to <4 x float>, !dbg !43
  %67 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !29
  %68 = insertelement <2 x i32> %67, i32 %59, i64 1, !dbg !29
  %69 = bitcast <2 x i32> %68 to <2 x float>, !dbg !29
  %70 = shufflevector <2 x float> %69, <2 x float> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>, !dbg !29
  %71 = fadd <2 x float> %63, %64, !dbg !44
  %72 = shufflevector <2 x float> %34, <2 x float> %62, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !45
  %73 = fadd <4 x float> %72, %66, !dbg !45
  %74 = shufflevector <2 x float> %63, <2 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 0, i32 1>, !dbg !46
  %75 = shufflevector <2 x float> %71, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !46
  %76 = shufflevector <4 x float> %75, <4 x float> %74, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !46
  %77 = fmul <4 x float> %76, %70, !dbg !46
  %78 = fmul <4 x float> %73, %77, !dbg !47
  %79 = fadd <4 x float> %25, %78, !dbg !48
  %80 = insertelement <4 x i1> poison, i1 %27, i64 0, !dbg !49
  %81 = shufflevector <4 x i1> %80, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !49
  %82 = select <4 x i1> %81, <4 x float> %79, <4 x float> %25, !dbg !49
  %83 = add i32 %24, 16, !dbg !14
  %84 = icmp slt i32 %83, %12, !dbg !14
  br i1 %84, label %.lr.ph, label %._crit_edge, !dbg !14

._crit_edge:                                      ; preds = %.lr.ph, %14
  %85 = phi <4 x float> [ zeroinitializer, %14 ], [ %82, %.lr.ph ]
  %86 = lshr i32 %17, 5, !dbg !13
  %87 = and i32 %17, 28, !dbg !11
  %88 = and i32 %17, 7, !dbg !11
  %89 = or disjoint i32 %16, %88, !dbg !12
  %90 = extractelement <4 x float> %85, i64 0, !dbg !50
  %91 = bitcast float %90 to i32, !dbg !50
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 16, i32 31), !dbg !50
  %93 = bitcast i32 %92 to float, !dbg !50
  %94 = fadd float %90, %93, !dbg !54
  %95 = bitcast float %94 to i32, !dbg !50
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 8, i32 31), !dbg !50
  %97 = bitcast i32 %96 to float, !dbg !50
  %98 = fadd float %94, %97, !dbg !54
  %99 = bitcast float %98 to i32, !dbg !50
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 4, i32 31), !dbg !50
  %101 = bitcast i32 %100 to float, !dbg !50
  %102 = fadd float %98, %101, !dbg !54
  %103 = extractelement <4 x float> %85, i64 1, !dbg !50
  %104 = bitcast float %103 to i32, !dbg !50
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 16, i32 31), !dbg !50
  %106 = bitcast i32 %105 to float, !dbg !50
  %107 = fadd float %103, %106, !dbg !54
  %108 = bitcast float %107 to i32, !dbg !50
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 8, i32 31), !dbg !50
  %110 = bitcast i32 %109 to float, !dbg !50
  %111 = fadd float %107, %110, !dbg !54
  %112 = bitcast float %111 to i32, !dbg !50
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 4, i32 31), !dbg !50
  %114 = bitcast i32 %113 to float, !dbg !50
  %115 = fadd float %111, %114, !dbg !54
  %116 = and i32 %86, 1, !dbg !50
  %117 = icmp eq i32 %87, 0, !dbg !50
  %118 = shl nuw nsw i32 %19, 1, !dbg !50
  %119 = or disjoint i32 %118, %116, !dbg !50
  %120 = getelementptr float, ptr addrspace(3) @global_smem, i32 %119, !dbg !50
  %121 = bitcast float %102 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 %117) #3, !dbg !50
  %122 = or disjoint i32 %118, 2, !dbg !50
  %123 = or disjoint i32 %122, %116, !dbg !50
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i32 %123, !dbg !50
  %125 = bitcast float %115 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 %117) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %126 = icmp slt i32 %17, 16, !dbg !50
  %127 = getelementptr float, ptr addrspace(3) @global_smem, i32 %17, !dbg !50
  %128 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %127, i1 %126) #3, !dbg !50
  %129 = bitcast i32 %128 to float, !dbg !50
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 1, i32 31), !dbg !50
  %131 = bitcast i32 %130 to float, !dbg !50
  %132 = fadd float %129, %131, !dbg !54
  %133 = and i32 %17, 1, !dbg !50
  %134 = icmp eq i32 %133, 0, !dbg !50
  %135 = and i1 %126, %134, !dbg !50
  %136 = bitcast float %132 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %136, i1 %135) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %137 = getelementptr float, ptr addrspace(3) @global_smem, i32 %118, !dbg !50
  %138 = load i32, ptr addrspace(3) %137, align 16, !dbg !50
  %139 = getelementptr float, ptr addrspace(3) @global_smem, i32 %122, !dbg !50
  %140 = load i32, ptr addrspace(3) %139, align 8, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %141 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %19, !dbg !56
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %141, i32 %138, i32 %140, i1 true) #3, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %142 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %88, !dbg !56
  %143 = load float, ptr addrspace(3) %142, align 4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %144 = extractelement <4 x float> %85, i64 2, !dbg !57
  %145 = bitcast float %144 to i32, !dbg !57
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 16, i32 31), !dbg !57
  %147 = bitcast i32 %146 to float, !dbg !57
  %148 = fadd float %144, %147, !dbg !59
  %149 = bitcast float %148 to i32, !dbg !57
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 8, i32 31), !dbg !57
  %151 = bitcast i32 %150 to float, !dbg !57
  %152 = fadd float %148, %151, !dbg !59
  %153 = bitcast float %152 to i32, !dbg !57
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 4, i32 31), !dbg !57
  %155 = bitcast i32 %154 to float, !dbg !57
  %156 = fadd float %152, %155, !dbg !59
  %157 = extractelement <4 x float> %85, i64 3, !dbg !57
  %158 = bitcast float %157 to i32, !dbg !57
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 16, i32 31), !dbg !57
  %160 = bitcast i32 %159 to float, !dbg !57
  %161 = fadd float %157, %160, !dbg !59
  %162 = bitcast float %161 to i32, !dbg !57
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 8, i32 31), !dbg !57
  %164 = bitcast i32 %163 to float, !dbg !57
  %165 = fadd float %161, %164, !dbg !59
  %166 = bitcast float %165 to i32, !dbg !57
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 4, i32 31), !dbg !57
  %168 = bitcast i32 %167 to float, !dbg !57
  %169 = fadd float %165, %168, !dbg !59
  %170 = bitcast float %156 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %170, i1 %117) #3, !dbg !57
  %171 = bitcast float %169 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %171, i1 %117) #3, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %172 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %127, i1 %126) #3, !dbg !57
  %173 = bitcast i32 %172 to float, !dbg !57
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 1, i32 31), !dbg !57
  %175 = bitcast i32 %174 to float, !dbg !57
  %176 = fadd float %173, %175, !dbg !59
  %177 = bitcast float %176 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %177, i1 %135) #3, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %178 = load i32, ptr addrspace(3) %137, align 16, !dbg !57
  %179 = load i32, ptr addrspace(3) %139, align 8, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %141, i32 %178, i32 %179, i1 true) #3, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %180 = load float, ptr addrspace(3) %142, align 4, !dbg !60
  %181 = sext i32 %89 to i64, !dbg !61
  %182 = getelementptr half, ptr addrspace(1) %9, i64 %181, !dbg !61
  %183 = fptrunc float %143 to half, !dbg !56
  %184 = and i32 %17, 56, !dbg !56
  %185 = icmp eq i32 %184, 0, !dbg !56
  %186 = bitcast half %183 to i16, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %186, ptr addrspace(1) %182, i1 %185) #3, !dbg !56
  %187 = getelementptr half, ptr addrspace(1) %10, i64 %181, !dbg !62
  %188 = fptrunc float %180 to half, !dbg !60
  %189 = bitcast half %188 to i16, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %189, ptr addrspace(1) %187, i1 %185) #3, !dbg !60
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cleebz4qsuv6x3uay77iffht6w22pvdm2rpphczmwg6tlnbdvmxa.py", directory: "./local_cache/le")
!4 = !{ptr @triton_red_fused__to_copy_add_mul_sum_14, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mul_sum_14", linkageName: "triton_red_fused__to_copy_add_mul_sum_14", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 37, scope: !6)
!14 = !DILocation(line: 30, column: 40, scope: !6)
!15 = !DILocation(line: 31, column: 31, scope: !6)
!16 = !DILocation(line: 32, column: 29, scope: !6)
!17 = !DILocation(line: 36, column: 44, scope: !6)
!18 = !DILocation(line: 36, column: 39, scope: !6)
!19 = !DILocation(line: 36, column: 34, scope: !6)
!20 = !DILocation(line: 36, column: 51, scope: !6)
!21 = !DILocation(line: 36, column: 105, scope: !6)
!22 = !DILocation(line: 37, column: 34, scope: !6)
!23 = !DILocation(line: 37, column: 51, scope: !6)
!24 = !DILocation(line: 38, column: 34, scope: !6)
!25 = !DILocation(line: 38, column: 51, scope: !6)
!26 = !DILocation(line: 39, column: 34, scope: !6)
!27 = !DILocation(line: 39, column: 51, scope: !6)
!28 = !DILocation(line: 40, column: 34, scope: !6)
!29 = !DILocation(line: 40, column: 41, scope: !6)
!30 = !DILocation(line: 41, column: 35, scope: !6)
!31 = !DILocation(line: 41, column: 52, scope: !6)
!32 = !DILocation(line: 42, column: 35, scope: !6)
!33 = !DILocation(line: 42, column: 52, scope: !6)
!34 = !DILocation(line: 43, column: 35, scope: !6)
!35 = !DILocation(line: 43, column: 52, scope: !6)
!36 = !DILocation(line: 44, column: 35, scope: !6)
!37 = !DILocation(line: 44, column: 42, scope: !6)
!38 = !DILocation(line: 41, column: 106, scope: !6)
!39 = !DILocation(line: 42, column: 106, scope: !6)
!40 = !DILocation(line: 54, column: 24, scope: !6)
!41 = !DILocation(line: 38, column: 105, scope: !6)
!42 = !DILocation(line: 39, column: 105, scope: !6)
!43 = !DILocation(line: 37, column: 105, scope: !6)
!44 = !DILocation(line: 46, column: 22, scope: !6)
!45 = !DILocation(line: 45, column: 22, scope: !6)
!46 = !DILocation(line: 48, column: 22, scope: !6)
!47 = !DILocation(line: 50, column: 23, scope: !6)
!48 = !DILocation(line: 52, column: 25, scope: !6)
!49 = !DILocation(line: 53, column: 42, scope: !6)
!50 = !DILocation(line: 286, column: 36, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !6, file: !52, discriminator: 0)
!52 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!53 = !DILocation(line: 63, column: 27, scope: !6)
!54 = !DILocation(line: 256, column: 15, scope: !55, inlinedAt: !53)
!55 = distinct !DILexicalBlockFile(scope: !51, file: !52, discriminator: 0)
!56 = !DILocation(line: 65, column: 37, scope: !6)
!57 = !DILocation(line: 286, column: 36, scope: !51, inlinedAt: !58)
!58 = !DILocation(line: 64, column: 27, scope: !6)
!59 = !DILocation(line: 256, column: 15, scope: !55, inlinedAt: !58)
!60 = !DILocation(line: 66, column: 37, scope: !6)
!61 = !DILocation(line: 65, column: 25, scope: !6)
!62 = !DILocation(line: 66, column: 25, scope: !6)
!63 = !DILocation(line: 66, column: 4, scope: !6)
