; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_mul_sum_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 6, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = shl i32 %10, 2, !dbg !11
  %12 = and i32 %11, 60, !dbg !11
  %13 = or disjoint i32 %12, %9, !dbg !12
  %14 = lshr i32 %10, 4, !dbg !13
  %15 = and i32 %14, 7, !dbg !13
  %16 = icmp sgt i32 %5, 0, !dbg !14
  br i1 %16, label %.lr.ph, label %._crit_edge, !dbg !14

.lr.ph:                                           ; preds = %7, %.lr.ph
  %17 = phi float [ %74, %.lr.ph ], [ 0.000000e+00, %7 ]
  %18 = phi float [ %75, %.lr.ph ], [ 0.000000e+00, %7 ]
  %19 = phi float [ %76, %.lr.ph ], [ 0.000000e+00, %7 ]
  %20 = phi float [ %77, %.lr.ph ], [ 0.000000e+00, %7 ]
  %21 = phi i32 [ %78, %.lr.ph ], [ 0, %7 ]
  %22 = or disjoint i32 %21, %15, !dbg !15
  %23 = icmp slt i32 %22, %5, !dbg !16
  %24 = shl i32 %22, 12, !dbg !17
  %25 = add i32 %13, %24, !dbg !18
  %26 = sext i32 %25 to i64, !dbg !19
  %27 = getelementptr half, ptr addrspace(1) %0, i64 %26, !dbg !19
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %27, i1 %23) #3, !dbg !20
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !20
  %30 = bitcast i32 %29 to <2 x half>, !dbg !20
  %31 = extractvalue { i32, i32 } %28, 1, !dbg !20
  %32 = bitcast i32 %31 to <2 x half>, !dbg !20
  %33 = extractelement <2 x half> %30, i64 0, !dbg !20
  %34 = extractelement <2 x half> %30, i64 1, !dbg !20
  %35 = extractelement <2 x half> %32, i64 0, !dbg !20
  %36 = extractelement <2 x half> %32, i64 1, !dbg !20
  %37 = fpext half %33 to float, !dbg !21
  %38 = fpext half %34 to float, !dbg !21
  %39 = fpext half %35 to float, !dbg !21
  %40 = fpext half %36 to float, !dbg !21
  %41 = getelementptr half, ptr addrspace(1) %1, i64 %26, !dbg !22
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %41, i1 %23) #3, !dbg !23
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !23
  %44 = bitcast i32 %43 to <2 x half>, !dbg !23
  %45 = extractvalue { i32, i32 } %42, 1, !dbg !23
  %46 = bitcast i32 %45 to <2 x half>, !dbg !23
  %47 = extractelement <2 x half> %44, i64 0, !dbg !23
  %48 = extractelement <2 x half> %44, i64 1, !dbg !23
  %49 = extractelement <2 x half> %46, i64 0, !dbg !23
  %50 = extractelement <2 x half> %46, i64 1, !dbg !23
  %51 = fpext half %47 to float, !dbg !24
  %52 = fpext half %48 to float, !dbg !24
  %53 = fpext half %49 to float, !dbg !24
  %54 = fpext half %50 to float, !dbg !24
  %55 = sext i32 %22 to i64, !dbg !25
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !25
  %57 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %56, i1 %23) #3, !dbg !26
  %58 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %56, i1 %23) #3, !dbg !26
  %59 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %56, i1 %23) #3, !dbg !26
  %60 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %56, i1 %23) #3, !dbg !26
  %61 = bitcast i32 %60 to float, !dbg !26
  %62 = fmul float %51, %61, !dbg !27
  %63 = fmul float %52, %61, !dbg !27
  %64 = fmul float %53, %61, !dbg !27
  %65 = fmul float %54, %61, !dbg !27
  %66 = fmul float %62, %37, !dbg !28
  %67 = fmul float %63, %38, !dbg !28
  %68 = fmul float %64, %39, !dbg !28
  %69 = fmul float %65, %40, !dbg !28
  %70 = fadd float %17, %66, !dbg !29
  %71 = fadd float %18, %67, !dbg !29
  %72 = fadd float %19, %68, !dbg !29
  %73 = fadd float %20, %69, !dbg !29
  %74 = select i1 %23, float %70, float %17, !dbg !30
  %75 = select i1 %23, float %71, float %18, !dbg !30
  %76 = select i1 %23, float %72, float %19, !dbg !30
  %77 = select i1 %23, float %73, float %20, !dbg !30
  %78 = add i32 %21, 8, !dbg !14
  %79 = icmp slt i32 %78, %5, !dbg !14
  br i1 %79, label %.lr.ph, label %._crit_edge, !dbg !14

._crit_edge:                                      ; preds = %.lr.ph, %7
  %80 = phi float [ 0.000000e+00, %7 ], [ %74, %.lr.ph ]
  %81 = phi float [ 0.000000e+00, %7 ], [ %75, %.lr.ph ]
  %82 = phi float [ 0.000000e+00, %7 ], [ %76, %.lr.ph ]
  %83 = phi float [ 0.000000e+00, %7 ], [ %77, %.lr.ph ]
  %84 = and i32 %10, 64, !dbg !13
  %85 = icmp eq i32 %84, 0, !dbg !13
  %86 = lshr i32 %10, 5, !dbg !11
  %87 = and i32 %10, 63, !dbg !11
  %88 = or disjoint i32 %9, %87, !dbg !12
  %89 = and i32 %10, 16, !dbg !11
  %90 = bitcast float %80 to i32, !dbg !31
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 16, i32 31), !dbg !31
  %92 = bitcast i32 %91 to float, !dbg !31
  %93 = fadd float %80, %92, !dbg !35
  %94 = bitcast float %81 to i32, !dbg !31
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 16, i32 31), !dbg !31
  %96 = bitcast i32 %95 to float, !dbg !31
  %97 = fadd float %81, %96, !dbg !35
  %98 = bitcast float %82 to i32, !dbg !31
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 16, i32 31), !dbg !31
  %100 = bitcast i32 %99 to float, !dbg !31
  %101 = fadd float %82, %100, !dbg !35
  %102 = bitcast float %83 to i32, !dbg !31
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 16, i32 31), !dbg !31
  %104 = bitcast i32 %103 to float, !dbg !31
  %105 = fadd float %83, %104, !dbg !35
  %106 = and i32 %86, 3, !dbg !31
  %107 = icmp eq i32 %89, 0, !dbg !31
  %108 = shl nuw nsw i32 %12, 2, !dbg !31
  %109 = or disjoint i32 %108, %106, !dbg !31
  %110 = getelementptr float, ptr addrspace(3) @global_smem, i32 %109, !dbg !31
  %111 = bitcast float %93 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 %107) #3, !dbg !31
  %112 = or disjoint i32 %108, 4, !dbg !31
  %113 = or disjoint i32 %112, %106, !dbg !31
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i32 %113, !dbg !31
  %115 = bitcast float %97 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 %107) #3, !dbg !31
  %116 = or disjoint i32 %108, 8, !dbg !31
  %117 = or disjoint i32 %116, %106, !dbg !31
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i32 %117, !dbg !31
  %119 = bitcast float %101 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 %107) #3, !dbg !31
  %120 = or disjoint i32 %108, 12, !dbg !31
  %121 = or disjoint i32 %120, %106, !dbg !31
  %122 = getelementptr float, ptr addrspace(3) @global_smem, i32 %121, !dbg !31
  %123 = bitcast float %105 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 %107) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %124 = icmp slt i32 %10, 256, !dbg !31
  %125 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !31
  %126 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %125, i1 %124) #3, !dbg !31
  %127 = bitcast i32 %126 to float, !dbg !31
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 2, i32 31), !dbg !31
  %129 = bitcast i32 %128 to float, !dbg !31
  %130 = fadd float %127, %129, !dbg !35
  %131 = bitcast float %130 to i32, !dbg !31
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 1, i32 31), !dbg !31
  %133 = bitcast i32 %132 to float, !dbg !31
  %134 = fadd float %130, %133, !dbg !35
  %135 = and i32 %10, 3, !dbg !31
  %136 = icmp eq i32 %135, 0, !dbg !31
  %137 = and i1 %124, %136, !dbg !31
  %138 = bitcast float %134 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %138, i1 %137) #3, !dbg !31
  %139 = getelementptr i8, ptr addrspace(3) %125, i32 512, !dbg !31
  %140 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %139, i1 %124) #3, !dbg !31
  %141 = bitcast i32 %140 to float, !dbg !31
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 2, i32 31), !dbg !31
  %143 = bitcast i32 %142 to float, !dbg !31
  %144 = fadd float %141, %143, !dbg !35
  %145 = bitcast float %144 to i32, !dbg !31
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 1, i32 31), !dbg !31
  %147 = bitcast i32 %146 to float, !dbg !31
  %148 = fadd float %144, %147, !dbg !35
  %149 = bitcast float %148 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %149, i1 %137) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %150 = getelementptr float, ptr addrspace(3) @global_smem, i32 %108, !dbg !31
  %151 = load i32, ptr addrspace(3) %150, align 16, !dbg !31
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !31
  %153 = load i32, ptr addrspace(3) %152, align 16, !dbg !31
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %116, !dbg !31
  %155 = load i32, ptr addrspace(3) %154, align 16, !dbg !31
  %156 = getelementptr float, ptr addrspace(3) @global_smem, i32 %120, !dbg !31
  %157 = load i32, ptr addrspace(3) %156, align 16, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %158 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %12, !dbg !37
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %158, i32 %151, i32 %153, i32 %155, i32 %157, i1 true) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %159 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %87, !dbg !37
  %160 = load float, ptr addrspace(3) %159, align 4, !dbg !37
  %161 = sext i32 %88 to i64, !dbg !38
  %162 = getelementptr half, ptr addrspace(1) %3, i64 %161, !dbg !38
  %163 = fptrunc float %160 to half, !dbg !37
  %164 = bitcast half %163 to i16, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %164, ptr addrspace(1) %162, i1 %85) #3, !dbg !37
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3jfs7i2n4ghyv7a6upiokqmiavouth3wwa2rl3crrbt2daxwgbc.py", directory: "./local_cache/3j")
!4 = !{ptr @triton_red_fused__to_copy_mul_sum_1, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_mul_sum_1", linkageName: "triton_red_fused__to_copy_mul_sum_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 37, scope: !6)
!14 = !DILocation(line: 29, column: 40, scope: !6)
!15 = !DILocation(line: 30, column: 31, scope: !6)
!16 = !DILocation(line: 31, column: 29, scope: !6)
!17 = !DILocation(line: 35, column: 44, scope: !6)
!18 = !DILocation(line: 35, column: 39, scope: !6)
!19 = !DILocation(line: 35, column: 34, scope: !6)
!20 = !DILocation(line: 35, column: 51, scope: !6)
!21 = !DILocation(line: 35, column: 105, scope: !6)
!22 = !DILocation(line: 36, column: 34, scope: !6)
!23 = !DILocation(line: 36, column: 51, scope: !6)
!24 = !DILocation(line: 36, column: 105, scope: !6)
!25 = !DILocation(line: 37, column: 34, scope: !6)
!26 = !DILocation(line: 37, column: 41, scope: !6)
!27 = !DILocation(line: 39, column: 22, scope: !6)
!28 = !DILocation(line: 41, column: 22, scope: !6)
!29 = !DILocation(line: 43, column: 23, scope: !6)
!30 = !DILocation(line: 44, column: 40, scope: !6)
!31 = !DILocation(line: 286, column: 36, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !6, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!34 = !DILocation(line: 45, column: 25, scope: !6)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !34)
!36 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!37 = !DILocation(line: 46, column: 36, scope: !6)
!38 = !DILocation(line: 46, column: 25, scope: !6)
!39 = !DILocation(line: 46, column: 4, scope: !6)
