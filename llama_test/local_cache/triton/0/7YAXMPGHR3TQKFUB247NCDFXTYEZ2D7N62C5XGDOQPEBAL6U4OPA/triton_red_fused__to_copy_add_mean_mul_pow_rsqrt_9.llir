; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %.fr10 = freeze i32 %5, !dbg !10
  %10 = icmp slt i32 %9, %.fr10, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 31, !dbg !11
  %13 = lshr i32 %11, 5, !dbg !11
  %14 = shl i32 %11, 1, !dbg !11
  %15 = and i32 %14, 1022, !dbg !11
  %16 = shl i32 %9, 12, !dbg !12
  %17 = or disjoint i32 %15, %16
  %18 = sext i32 %17 to i64, !dbg !13
  %19 = getelementptr half, ptr addrspace(1) %2, i64 %18, !dbg !13
  br i1 %10, label %.split.us.preheader, label %.split.preheader

.split.preheader:                                 ; preds = %8
  %20 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %19, i1 false) #5, !dbg !14
  %21 = bitcast i32 %20 to <2 x half>, !dbg !14
  %22 = getelementptr half, ptr addrspace(1) %0, i64 %18, !dbg !15
  %23 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %22, i1 false) #5, !dbg !16
  %24 = bitcast i32 %23 to <2 x half>, !dbg !16
  %25 = fadd <2 x half> %21, %24, !dbg !17
  %26 = bitcast <2 x half> %25 to i32, !dbg !17
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %26, ptr addrspace(1) %22, i1 false) #5, !dbg !17
  %27 = or disjoint i32 %17, 1024, !dbg !18
  %28 = sext i32 %27 to i64, !dbg !13
  %29 = getelementptr half, ptr addrspace(1) %2, i64 %28, !dbg !13
  %30 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %29, i1 false) #5, !dbg !14
  %31 = bitcast i32 %30 to <2 x half>, !dbg !14
  %32 = getelementptr half, ptr addrspace(1) %0, i64 %28, !dbg !15
  %33 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %32, i1 false) #5, !dbg !16
  %34 = bitcast i32 %33 to <2 x half>, !dbg !16
  %35 = fadd <2 x half> %31, %34, !dbg !17
  %36 = bitcast <2 x half> %35 to i32, !dbg !17
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %36, ptr addrspace(1) %32, i1 false) #5, !dbg !17
  %37 = or disjoint i32 %17, 2048, !dbg !18
  %38 = sext i32 %37 to i64, !dbg !13
  %39 = getelementptr half, ptr addrspace(1) %2, i64 %38, !dbg !13
  %40 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %39, i1 false) #5, !dbg !14
  %41 = bitcast i32 %40 to <2 x half>, !dbg !14
  %42 = getelementptr half, ptr addrspace(1) %0, i64 %38, !dbg !15
  %43 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %42, i1 false) #5, !dbg !16
  %44 = bitcast i32 %43 to <2 x half>, !dbg !16
  %45 = fadd <2 x half> %41, %44, !dbg !17
  %46 = bitcast <2 x half> %45 to i32, !dbg !17
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %46, ptr addrspace(1) %42, i1 false) #5, !dbg !17
  %47 = or disjoint i32 %17, 3072, !dbg !18
  %48 = sext i32 %47 to i64, !dbg !13
  %49 = getelementptr half, ptr addrspace(1) %2, i64 %48, !dbg !13
  %50 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %49, i1 false) #5, !dbg !14
  %51 = bitcast i32 %50 to <2 x half>, !dbg !14
  %52 = getelementptr half, ptr addrspace(1) %0, i64 %48, !dbg !15
  %53 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %52, i1 false) #5, !dbg !16
  %54 = bitcast i32 %53 to <2 x half>, !dbg !16
  %55 = fadd <2 x half> %51, %54, !dbg !17
  %56 = bitcast <2 x half> %55 to i32, !dbg !17
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %56, ptr addrspace(1) %52, i1 false) #5, !dbg !17
  br label %.split9.us, !dbg !19

.split.us.preheader:                              ; preds = %8
  %57 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %19, i1 true) #5, !dbg !14
  %58 = bitcast i32 %57 to <2 x half>, !dbg !14
  %59 = getelementptr half, ptr addrspace(1) %0, i64 %18, !dbg !15
  %60 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %59, i1 true) #5, !dbg !16
  %61 = bitcast i32 %60 to <2 x half>, !dbg !16
  %62 = or disjoint i32 %17, 1024, !dbg !18
  %63 = sext i32 %62 to i64, !dbg !13
  %64 = getelementptr half, ptr addrspace(1) %2, i64 %63, !dbg !13
  %65 = getelementptr half, ptr addrspace(1) %0, i64 %63, !dbg !15
  %66 = or disjoint i32 %17, 2048, !dbg !18
  %67 = sext i32 %66 to i64, !dbg !13
  %68 = getelementptr half, ptr addrspace(1) %2, i64 %67, !dbg !13
  %69 = getelementptr half, ptr addrspace(1) %0, i64 %67, !dbg !15
  %70 = or disjoint i32 %17, 3072, !dbg !18
  %71 = sext i32 %70 to i64, !dbg !13
  %72 = getelementptr half, ptr addrspace(1) %2, i64 %71, !dbg !13
  %73 = getelementptr half, ptr addrspace(1) %0, i64 %71, !dbg !15
  %74 = fpext <2 x half> %58 to <2 x float>, !dbg !23
  %75 = fpext <2 x half> %61 to <2 x float>, !dbg !24
  %76 = fadd <2 x float> %74, %75, !dbg !25
  %77 = fmul <2 x float> %76, %76, !dbg !26
  %78 = fptrunc <2 x float> %76 to <2 x half>, !dbg !17
  %79 = bitcast <2 x half> %78 to i32, !dbg !17
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %79, ptr addrspace(1) %59, i1 true) #5, !dbg !17
  %80 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %64, i1 true) #5, !dbg !14
  %81 = bitcast i32 %80 to <2 x half>, !dbg !14
  %82 = fpext <2 x half> %81 to <2 x float>, !dbg !23
  %83 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %65, i1 true) #5, !dbg !16
  %84 = bitcast i32 %83 to <2 x half>, !dbg !16
  %85 = fpext <2 x half> %84 to <2 x float>, !dbg !24
  %86 = fadd <2 x float> %82, %85, !dbg !25
  %87 = fmul <2 x float> %86, %86, !dbg !26
  %88 = fadd <2 x float> %77, %87, !dbg !27
  %89 = fptrunc <2 x float> %86 to <2 x half>, !dbg !17
  %90 = bitcast <2 x half> %89 to i32, !dbg !17
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %90, ptr addrspace(1) %65, i1 true) #5, !dbg !17
  %91 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %68, i1 true) #5, !dbg !14
  %92 = bitcast i32 %91 to <2 x half>, !dbg !14
  %93 = fpext <2 x half> %92 to <2 x float>, !dbg !23
  %94 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %69, i1 true) #5, !dbg !16
  %95 = bitcast i32 %94 to <2 x half>, !dbg !16
  %96 = fpext <2 x half> %95 to <2 x float>, !dbg !24
  %97 = fadd <2 x float> %93, %96, !dbg !25
  %98 = fmul <2 x float> %97, %97, !dbg !26
  %99 = fadd <2 x float> %88, %98, !dbg !27
  %100 = fptrunc <2 x float> %97 to <2 x half>, !dbg !17
  %101 = bitcast <2 x half> %100 to i32, !dbg !17
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %101, ptr addrspace(1) %69, i1 true) #5, !dbg !17
  %102 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %72, i1 true) #5, !dbg !14
  %103 = bitcast i32 %102 to <2 x half>, !dbg !14
  %104 = fpext <2 x half> %103 to <2 x float>, !dbg !23
  %105 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %73, i1 true) #5, !dbg !16
  %106 = bitcast i32 %105 to <2 x half>, !dbg !16
  %107 = fpext <2 x half> %106 to <2 x float>, !dbg !24
  %108 = fadd <2 x float> %104, %107, !dbg !25
  %109 = fmul <2 x float> %108, %108, !dbg !26
  %110 = fadd <2 x float> %99, %109, !dbg !27
  %111 = fptrunc <2 x float> %108 to <2 x half>, !dbg !17
  %112 = bitcast <2 x half> %111 to i32, !dbg !17
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %112, ptr addrspace(1) %73, i1 true) #5, !dbg !17
  %shift = shufflevector <2 x float> %110, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !19
  %113 = fadd <2 x float> %110, %shift, !dbg !19
  %114 = extractelement <2 x float> %113, i64 0, !dbg !19
  br label %.split9.us, !dbg !19

.split9.us:                                       ; preds = %.split.preheader, %.split.us.preheader
  %115 = phi float [ %114, %.split.us.preheader ], [ 0.000000e+00, %.split.preheader ], !dbg !28
  %116 = bitcast float %115 to i32, !dbg !19
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 16, i32 31), !dbg !19
  %118 = bitcast i32 %117 to float, !dbg !19
  %119 = fadd float %115, %118, !dbg !28
  %120 = bitcast float %119 to i32, !dbg !19
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 8, i32 31), !dbg !19
  %122 = bitcast i32 %121 to float, !dbg !19
  %123 = fadd float %119, %122, !dbg !28
  %124 = bitcast float %123 to i32, !dbg !19
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 4, i32 31), !dbg !19
  %126 = bitcast i32 %125 to float, !dbg !19
  %127 = fadd float %123, %126, !dbg !28
  %128 = bitcast float %127 to i32, !dbg !19
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 2, i32 31), !dbg !19
  %130 = bitcast i32 %129 to float, !dbg !19
  %131 = fadd float %127, %130, !dbg !28
  %132 = bitcast float %131 to i32, !dbg !19
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 1, i32 31), !dbg !19
  %134 = bitcast i32 %133 to float, !dbg !19
  %135 = fadd float %131, %134, !dbg !28
  %136 = and i32 %13, 15, !dbg !19
  %137 = icmp eq i32 %12, 0, !dbg !19
  %138 = getelementptr float, ptr addrspace(3) @global_smem, i32 %136, !dbg !19
  %139 = bitcast float %135 to <1 x i32>, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %139, i1 %137) #5, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %140 = icmp slt i32 %11, 16, !dbg !19
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !19
  %142 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %141, i1 %140) #5, !dbg !19
  %143 = bitcast i32 %142 to float, !dbg !19
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 8, i32 31), !dbg !19
  %145 = bitcast i32 %144 to float, !dbg !19
  %146 = fadd float %143, %145, !dbg !28
  %147 = bitcast float %146 to i32, !dbg !19
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 4, i32 31), !dbg !19
  %149 = bitcast i32 %148 to float, !dbg !19
  %150 = fadd float %146, %149, !dbg !28
  %151 = bitcast float %150 to i32, !dbg !19
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 2, i32 31), !dbg !19
  %153 = bitcast i32 %152 to float, !dbg !19
  %154 = fadd float %150, %153, !dbg !28
  %155 = bitcast float %154 to i32, !dbg !19
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 1, i32 31), !dbg !19
  %157 = bitcast i32 %156 to float, !dbg !19
  %158 = fadd float %154, %157, !dbg !28
  %159 = and i32 %11, 15, !dbg !19
  %160 = icmp eq i32 %159, 0, !dbg !19
  %161 = and i1 %140, %160, !dbg !19
  %162 = bitcast float %158 to <1 x i32>, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %162, i1 %161) #5, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %163 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !19
  %164 = tail call float @llvm.nvvm.div.full(float %163, float 4.096000e+03), !dbg !30
  %165 = fadd float %164, 0x3EE4F8B580000000, !dbg !31
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i = icmp eq i32 %166, 0, !dbg !32
  br i1 %.not.i, label %169, label %167, !dbg !32

167:                                              ; preds = %.split9.us
  %168 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %165), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

169:                                              ; preds = %.split9.us
  %170 = tail call float @llvm.nvvm.rsqrt.approx.f(float %165), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

__nv_rsqrtf.exit:                                 ; preds = %167, %169
  %.0.i = phi float [ %168, %167 ], [ %170, %169 ], !dbg !32
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i5 = icmp eq i32 %172, 0, !dbg !32
  br i1 %.not.i5, label %175, label %173, !dbg !32

173:                                              ; preds = %__nv_rsqrtf.exit
  %174 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %165), !dbg !32
  br label %__nv_rsqrtf.exit7, !dbg !32

175:                                              ; preds = %__nv_rsqrtf.exit
  %176 = tail call float @llvm.nvvm.rsqrt.approx.f(float %165), !dbg !32
  br label %__nv_rsqrtf.exit7, !dbg !32

__nv_rsqrtf.exit7:                                ; preds = %173, %175
  %.0.i6 = phi float [ %174, %173 ], [ %176, %175 ], !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %177 = sext i32 %9 to i64, !dbg !34
  %178 = getelementptr float, ptr addrspace(1) %1, i64 %177, !dbg !34
  %179 = and i32 %11, 511, !dbg !35
  %180 = icmp eq i32 %179, 0, !dbg !35
  %181 = bitcast float %.0.i to i32, !dbg !35
  %182 = and i1 %180, %10, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %181, ptr addrspace(1) %178, i1 %182) #5, !dbg !35
  %183 = zext nneg i32 %15 to i64, !dbg !36
  %184 = getelementptr half, ptr addrspace(1) %3, i64 %183, !dbg !37
  %185 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %184, i1 true) #5, !dbg !38
  %186 = bitcast i32 %185 to <2 x half>, !dbg !38
  %187 = sext i32 %17 to i64, !dbg !39
  %188 = getelementptr half, ptr addrspace(1) %0, i64 %187, !dbg !39
  %189 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %188, i1 %10) #5, !dbg !40
  %190 = bitcast i32 %189 to <2 x half>, !dbg !40
  %191 = getelementptr half, ptr addrspace(1) %4, i64 %187, !dbg !41
  %192 = fpext <2 x half> %186 to <2 x float>, !dbg !42
  %193 = fpext <2 x half> %190 to <2 x float>, !dbg !43
  %194 = insertelement <2 x float> poison, float %.0.i6, i64 0, !dbg !44
  %195 = shufflevector <2 x float> %194, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !44
  %196 = fmul <2 x float> %195, %193, !dbg !44
  %197 = fmul <2 x float> %196, %192, !dbg !45
  %198 = fptrunc <2 x float> %197 to <2 x half>, !dbg !46
  %199 = bitcast <2 x half> %198 to i32, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %199, ptr addrspace(1) %191, i1 %10) #5, !dbg !46
  %200 = or disjoint i64 %183, 1024, !dbg !47
  %201 = getelementptr half, ptr addrspace(1) %3, i64 %200, !dbg !37
  %202 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %201, i1 true) #5, !dbg !38
  %203 = bitcast i32 %202 to <2 x half>, !dbg !38
  %.reass.1 = or disjoint i32 %17, 1024
  %204 = sext i32 %.reass.1 to i64, !dbg !39
  %205 = getelementptr half, ptr addrspace(1) %0, i64 %204, !dbg !39
  %206 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %205, i1 %10) #5, !dbg !40
  %207 = bitcast i32 %206 to <2 x half>, !dbg !40
  %208 = getelementptr half, ptr addrspace(1) %4, i64 %204, !dbg !41
  %209 = fpext <2 x half> %203 to <2 x float>, !dbg !42
  %210 = fpext <2 x half> %207 to <2 x float>, !dbg !43
  %211 = fmul <2 x float> %195, %210, !dbg !44
  %212 = fmul <2 x float> %211, %209, !dbg !45
  %213 = fptrunc <2 x float> %212 to <2 x half>, !dbg !46
  %214 = bitcast <2 x half> %213 to i32, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %214, ptr addrspace(1) %208, i1 %10) #5, !dbg !46
  %215 = or disjoint i64 %183, 2048, !dbg !47
  %216 = getelementptr half, ptr addrspace(1) %3, i64 %215, !dbg !37
  %217 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %216, i1 true) #5, !dbg !38
  %218 = bitcast i32 %217 to <2 x half>, !dbg !38
  %.reass.2 = or disjoint i32 %17, 2048
  %219 = sext i32 %.reass.2 to i64, !dbg !39
  %220 = getelementptr half, ptr addrspace(1) %0, i64 %219, !dbg !39
  %221 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %220, i1 %10) #5, !dbg !40
  %222 = bitcast i32 %221 to <2 x half>, !dbg !40
  %223 = getelementptr half, ptr addrspace(1) %4, i64 %219, !dbg !41
  %224 = fpext <2 x half> %218 to <2 x float>, !dbg !42
  %225 = fpext <2 x half> %222 to <2 x float>, !dbg !43
  %226 = fmul <2 x float> %195, %225, !dbg !44
  %227 = fmul <2 x float> %226, %224, !dbg !45
  %228 = fptrunc <2 x float> %227 to <2 x half>, !dbg !46
  %229 = bitcast <2 x half> %228 to i32, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %229, ptr addrspace(1) %223, i1 %10) #5, !dbg !46
  %230 = or disjoint i64 %183, 3072, !dbg !47
  %231 = getelementptr half, ptr addrspace(1) %3, i64 %230, !dbg !37
  %232 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %231, i1 true) #5, !dbg !38
  %233 = bitcast i32 %232 to <2 x half>, !dbg !38
  %.reass.3 = or disjoint i32 %17, 3072
  %234 = sext i32 %.reass.3 to i64, !dbg !39
  %235 = getelementptr half, ptr addrspace(1) %0, i64 %234, !dbg !39
  %236 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %235, i1 %10) #5, !dbg !40
  %237 = bitcast i32 %236 to <2 x half>, !dbg !40
  %238 = getelementptr half, ptr addrspace(1) %4, i64 %234, !dbg !41
  %239 = fpext <2 x half> %233 to <2 x float>, !dbg !42
  %240 = fpext <2 x half> %237 to <2 x float>, !dbg !43
  %241 = fmul <2 x float> %195, %240, !dbg !44
  %242 = fmul <2 x float> %241, %239, !dbg !45
  %243 = fptrunc <2 x float> %242 to <2 x half>, !dbg !46
  %244 = bitcast <2 x half> %243 to i32, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %244, ptr addrspace(1) %238, i1 %10) #5, !dbg !46
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccpmvf6lgmnpforavvbrvwi4t5zoiosfy62jj2u37b4g5lsm5yib.py", directory: "./local_cache/cp")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 21, scope: !6)
!11 = !DILocation(line: 25, column: 37, scope: !6)
!12 = !DILocation(line: 35, column: 46, scope: !6)
!13 = !DILocation(line: 35, column: 34, scope: !6)
!14 = !DILocation(line: 35, column: 51, scope: !6)
!15 = !DILocation(line: 36, column: 38, scope: !6)
!16 = !DILocation(line: 36, column: 55, scope: !6)
!17 = !DILocation(line: 43, column: 55, scope: !6)
!18 = !DILocation(line: 35, column: 41, scope: !6)
!19 = !DILocation(line: 286, column: 36, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !6, file: !21, discriminator: 0)
!21 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!22 = !DILocation(line: 44, column: 25, scope: !6)
!23 = !DILocation(line: 35, column: 113, scope: !6)
!24 = !DILocation(line: 36, column: 117, scope: !6)
!25 = !DILocation(line: 37, column: 22, scope: !6)
!26 = !DILocation(line: 39, column: 22, scope: !6)
!27 = !DILocation(line: 41, column: 23, scope: !6)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !22)
!29 = distinct !DILexicalBlockFile(scope: !20, file: !21, discriminator: 0)
!30 = !DILocation(line: 46, column: 19, scope: !6)
!31 = !DILocation(line: 48, column: 19, scope: !6)
!32 = !DILocation(line: 49, column: 28, scope: !6)
!33 = !DILocation(line: 50, column: 4, scope: !6)
!34 = !DILocation(line: 51, column: 28, scope: !6)
!35 = !DILocation(line: 51, column: 40, scope: !6)
!36 = !DILocation(line: 52, column: 40, scope: !6)
!37 = !DILocation(line: 58, column: 35, scope: !6)
!38 = !DILocation(line: 58, column: 42, scope: !6)
!39 = !DILocation(line: 59, column: 39, scope: !6)
!40 = !DILocation(line: 59, column: 56, scope: !6)
!41 = !DILocation(line: 64, column: 29, scope: !6)
!42 = !DILocation(line: 58, column: 95, scope: !6)
!43 = !DILocation(line: 59, column: 118, scope: !6)
!44 = !DILocation(line: 61, column: 24, scope: !6)
!45 = !DILocation(line: 63, column: 24, scope: !6)
!46 = !DILocation(line: 64, column: 53, scope: !6)
!47 = !DILocation(line: 53, column: 31, scope: !6)
!48 = !DILocation(line: 52, column: 4, scope: !6)
