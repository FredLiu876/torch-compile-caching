; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_mul_sum_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = shl i32 %10, 6, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = shl i32 %12, 2, !dbg !11
  %14 = and i32 %13, 60, !dbg !11
  %15 = or disjoint i32 %14, %11, !dbg !12
  %16 = lshr i32 %12, 4, !dbg !13
  %17 = and i32 %16, 3, !dbg !13
  %18 = icmp sgt i32 %7, 0, !dbg !14
  br i1 %18, label %.lr.ph, label %._crit_edge, !dbg !14

.lr.ph:                                           ; preds = %9, %.lr.ph
  %19 = phi i32 [ %75, %.lr.ph ], [ 0, %9 ]
  %20 = phi <4 x float> [ %74, %.lr.ph ], [ zeroinitializer, %9 ]
  %21 = or disjoint i32 %19, %17, !dbg !15
  %22 = icmp slt i32 %21, %7, !dbg !16
  %23 = shl i32 %21, 12, !dbg !17
  %24 = add i32 %15, %23, !dbg !18
  %25 = sext i32 %24 to i64, !dbg !19
  %26 = getelementptr half, ptr addrspace(1) %0, i64 %25, !dbg !19
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %26, i1 %22) #3, !dbg !20
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !20
  %29 = bitcast i32 %28 to <2 x half>, !dbg !20
  %30 = extractvalue { i32, i32 } %27, 1, !dbg !20
  %31 = bitcast i32 %30 to <2 x half>, !dbg !20
  %32 = getelementptr half, ptr addrspace(1) %1, i64 %25, !dbg !21
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %32, i1 %22) #3, !dbg !22
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !22
  %35 = bitcast i32 %34 to <2 x half>, !dbg !22
  %36 = extractvalue { i32, i32 } %33, 1, !dbg !22
  %37 = bitcast i32 %36 to <2 x half>, !dbg !22
  %38 = getelementptr half, ptr addrspace(1) %2, i64 %25, !dbg !23
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %38, i1 %22) #3, !dbg !24
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !24
  %41 = bitcast i32 %40 to <2 x half>, !dbg !24
  %42 = extractvalue { i32, i32 } %39, 1, !dbg !24
  %43 = bitcast i32 %42 to <2 x half>, !dbg !24
  %44 = getelementptr half, ptr addrspace(1) %3, i64 %25, !dbg !25
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %44, i1 %22) #3, !dbg !26
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !26
  %47 = bitcast i32 %46 to <2 x half>, !dbg !26
  %48 = extractvalue { i32, i32 } %45, 1, !dbg !26
  %49 = bitcast i32 %48 to <2 x half>, !dbg !26
  %50 = sext i32 %21 to i64, !dbg !27
  %51 = getelementptr float, ptr addrspace(1) %4, i64 %50, !dbg !27
  %52 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %51, i1 %22) #3, !dbg !28
  %53 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %51, i1 %22) #3, !dbg !28
  %54 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %51, i1 %22) #3, !dbg !28
  %55 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %51, i1 %22) #3, !dbg !28
  %56 = shufflevector <2 x half> %29, <2 x half> %31, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !29
  %57 = fpext <4 x half> %56 to <4 x float>, !dbg !29
  %58 = shufflevector <2 x half> %35, <2 x half> %37, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !30
  %59 = fpext <4 x half> %58 to <4 x float>, !dbg !30
  %60 = shufflevector <2 x half> %41, <2 x half> %43, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !31
  %61 = fpext <4 x half> %60 to <4 x float>, !dbg !31
  %62 = shufflevector <2 x half> %47, <2 x half> %49, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !32
  %63 = fpext <4 x half> %62 to <4 x float>, !dbg !32
  %64 = fadd <4 x float> %57, %59, !dbg !33
  %65 = fadd <4 x float> %64, %61, !dbg !34
  %66 = insertelement <4 x i32> poison, i32 %55, i64 0, !dbg !35
  %67 = bitcast <4 x i32> %66 to <4 x float>, !dbg !35
  %68 = shufflevector <4 x float> %67, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !35
  %69 = fmul <4 x float> %68, %63, !dbg !35
  %70 = fmul <4 x float> %65, %69, !dbg !36
  %71 = fadd <4 x float> %20, %70, !dbg !37
  %72 = insertelement <4 x i1> poison, i1 %22, i64 0, !dbg !38
  %73 = shufflevector <4 x i1> %72, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !38
  %74 = select <4 x i1> %73, <4 x float> %71, <4 x float> %20, !dbg !38
  %75 = add i32 %19, 4, !dbg !14
  %76 = icmp slt i32 %75, %7, !dbg !14
  br i1 %76, label %.lr.ph, label %._crit_edge, !dbg !14

._crit_edge:                                      ; preds = %.lr.ph, %9
  %77 = phi <4 x float> [ zeroinitializer, %9 ], [ %74, %.lr.ph ]
  %78 = and i32 %12, 63, !dbg !11
  %79 = or disjoint i32 %11, %78, !dbg !12
  %80 = lshr i32 %12, 5, !dbg !11
  %81 = and i32 %12, 16, !dbg !11
  %82 = extractelement <4 x float> %77, i64 0, !dbg !39
  %83 = bitcast float %82 to i32, !dbg !39
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 16, i32 31), !dbg !39
  %85 = bitcast i32 %84 to float, !dbg !39
  %86 = fadd float %82, %85, !dbg !43
  %87 = extractelement <4 x float> %77, i64 1, !dbg !39
  %88 = bitcast float %87 to i32, !dbg !39
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 16, i32 31), !dbg !39
  %90 = bitcast i32 %89 to float, !dbg !39
  %91 = fadd float %87, %90, !dbg !43
  %92 = extractelement <4 x float> %77, i64 2, !dbg !39
  %93 = bitcast float %92 to i32, !dbg !39
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 16, i32 31), !dbg !39
  %95 = bitcast i32 %94 to float, !dbg !39
  %96 = fadd float %92, %95, !dbg !43
  %97 = extractelement <4 x float> %77, i64 3, !dbg !39
  %98 = bitcast float %97 to i32, !dbg !39
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 16, i32 31), !dbg !39
  %100 = bitcast i32 %99 to float, !dbg !39
  %101 = fadd float %97, %100, !dbg !43
  %102 = and i32 %80, 1, !dbg !39
  %103 = icmp eq i32 %81, 0, !dbg !39
  %104 = shl nuw nsw i32 %14, 1, !dbg !39
  %105 = or disjoint i32 %104, %102, !dbg !39
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i32 %105, !dbg !39
  %107 = bitcast float %86 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %107, i1 %103) #3, !dbg !39
  %108 = or disjoint i32 %104, 2, !dbg !39
  %109 = or disjoint i32 %108, %102, !dbg !39
  %110 = getelementptr float, ptr addrspace(3) @global_smem, i32 %109, !dbg !39
  %111 = bitcast float %91 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 %103) #3, !dbg !39
  %112 = or disjoint i32 %104, 4, !dbg !39
  %113 = or disjoint i32 %112, %102, !dbg !39
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i32 %113, !dbg !39
  %115 = bitcast float %96 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 %103) #3, !dbg !39
  %116 = or disjoint i32 %104, 6, !dbg !39
  %117 = or disjoint i32 %116, %102, !dbg !39
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i32 %117, !dbg !39
  %119 = bitcast float %101 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 %103) #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %120 = icmp slt i32 %12, 128, !dbg !39
  %121 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !39
  %122 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %121, i1 %120) #3, !dbg !39
  %123 = bitcast i32 %122 to float, !dbg !39
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 1, i32 31), !dbg !39
  %125 = bitcast i32 %124 to float, !dbg !39
  %126 = fadd float %123, %125, !dbg !43
  %127 = and i32 %12, 1, !dbg !39
  %128 = icmp eq i32 %127, 0, !dbg !39
  %129 = and i1 %120, %128, !dbg !39
  %130 = bitcast float %126 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %130, i1 %129) #3, !dbg !39
  %131 = getelementptr i8, ptr addrspace(3) %121, i32 256, !dbg !39
  %132 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %131, i1 %120) #3, !dbg !39
  %133 = bitcast i32 %132 to float, !dbg !39
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 1, i32 31), !dbg !39
  %135 = bitcast i32 %134 to float, !dbg !39
  %136 = fadd float %133, %135, !dbg !43
  %137 = bitcast float %136 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %137, i1 %129) #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %138 = getelementptr float, ptr addrspace(3) @global_smem, i32 %104, !dbg !39
  %139 = load i32, ptr addrspace(3) %138, align 16, !dbg !39
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i32 %108, !dbg !39
  %141 = load i32, ptr addrspace(3) %140, align 8, !dbg !39
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !39
  %143 = load i32, ptr addrspace(3) %142, align 16, !dbg !39
  %144 = getelementptr float, ptr addrspace(3) @global_smem, i32 %116, !dbg !39
  %145 = load i32, ptr addrspace(3) %144, align 8, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %146 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %14, !dbg !45
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %146, i32 %139, i32 %141, i32 %143, i32 %145, i1 true) #3, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %147 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %78, !dbg !45
  %148 = load float, ptr addrspace(3) %147, align 4, !dbg !45
  %149 = sext i32 %79 to i64, !dbg !46
  %150 = getelementptr half, ptr addrspace(1) %5, i64 %149, !dbg !46
  %151 = fptrunc float %148 to half, !dbg !45
  %152 = bitcast half %151 to i16, !dbg !45
  tail call void asm sideeffect "st.global.b16 [ $1 + 0 ], { $0 };", "c,l"(i16 %152, ptr addrspace(1) %150) #3, !dbg !45
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cooiaknvye32serylx7xwhx2qwftzzzc42hc3guninlw4pdaroz3.py", directory: "./local_cache/oo")
!4 = !{ptr @triton_red_fused__to_copy_add_mul_sum_11, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mul_sum_11", linkageName: "triton_red_fused__to_copy_add_mul_sum_11", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 37, scope: !6)
!14 = !DILocation(line: 29, column: 40, scope: !6)
!15 = !DILocation(line: 30, column: 31, scope: !6)
!16 = !DILocation(line: 31, column: 29, scope: !6)
!17 = !DILocation(line: 35, column: 44, scope: !6)
!18 = !DILocation(line: 35, column: 39, scope: !6)
!19 = !DILocation(line: 35, column: 34, scope: !6)
!20 = !DILocation(line: 35, column: 51, scope: !6)
!21 = !DILocation(line: 36, column: 34, scope: !6)
!22 = !DILocation(line: 36, column: 51, scope: !6)
!23 = !DILocation(line: 37, column: 34, scope: !6)
!24 = !DILocation(line: 37, column: 51, scope: !6)
!25 = !DILocation(line: 38, column: 34, scope: !6)
!26 = !DILocation(line: 38, column: 51, scope: !6)
!27 = !DILocation(line: 39, column: 34, scope: !6)
!28 = !DILocation(line: 39, column: 41, scope: !6)
!29 = !DILocation(line: 35, column: 105, scope: !6)
!30 = !DILocation(line: 36, column: 105, scope: !6)
!31 = !DILocation(line: 37, column: 105, scope: !6)
!32 = !DILocation(line: 38, column: 105, scope: !6)
!33 = !DILocation(line: 40, column: 22, scope: !6)
!34 = !DILocation(line: 41, column: 22, scope: !6)
!35 = !DILocation(line: 43, column: 22, scope: !6)
!36 = !DILocation(line: 45, column: 23, scope: !6)
!37 = !DILocation(line: 47, column: 25, scope: !6)
!38 = !DILocation(line: 48, column: 42, scope: !6)
!39 = !DILocation(line: 286, column: 36, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !6, file: !41, discriminator: 0)
!41 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!42 = !DILocation(line: 49, column: 27, scope: !6)
!43 = !DILocation(line: 256, column: 15, scope: !44, inlinedAt: !42)
!44 = distinct !DILexicalBlockFile(scope: !40, file: !41, discriminator: 0)
!45 = !DILocation(line: 50, column: 37, scope: !6)
!46 = !DILocation(line: 50, column: 25, scope: !6)
!47 = !DILocation(line: 50, column: 4, scope: !6)
