; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_div_mul_pow_sum_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 3, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = lshr i32 %10, 6, !dbg !11
  %12 = and i32 %11, 7, !dbg !11
  %13 = or disjoint i32 %12, %9, !dbg !12
  %14 = icmp slt i32 %13, %4, !dbg !13
  %15 = shl i32 %10, 3, !dbg !14
  %16 = and i32 %15, 504, !dbg !14
  %17 = and i32 %10, 511, !dbg !14
  %18 = shl i32 %13, 12, !dbg !15
  %19 = or disjoint i32 %18, %16
  %20 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %17
  %21 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %16
  %22 = or disjoint i32 %16, 4
  %23 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %22
  %24 = zext nneg i32 %17 to i64, !dbg !16
  %25 = getelementptr inbounds nuw i8, ptr addrspace(3) %21, i32 8
  %26 = getelementptr inbounds nuw i8, ptr addrspace(3) %23, i32 8
  %27 = insertelement <8 x i1> poison, i1 %14, i64 0, !dbg !17
  %28 = shufflevector <8 x i1> %27, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !17
  br label %29, !dbg !16

29:                                               ; preds = %7, %29
  %indvars.iv = phi i64 [ 0, %7 ], [ %indvars.iv.next, %29 ]
  %30 = phi <8 x float> [ zeroinitializer, %7 ], [ %84, %29 ]
  %31 = or disjoint i64 %indvars.iv, %24, !dbg !18
  %32 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !19
  %33 = or i32 %19, %32, !dbg !19
  %34 = sext i32 %33 to i64, !dbg !20
  %35 = getelementptr half, ptr addrspace(1) %0, i64 %34, !dbg !20
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %35, i1 %14) #3, !dbg !21
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !21
  %38 = bitcast i32 %37 to <2 x half>, !dbg !21
  %39 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !21
  %40 = bitcast i32 %39 to <2 x half>, !dbg !21
  %41 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !21
  %42 = bitcast i32 %41 to <2 x half>, !dbg !21
  %43 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !21
  %44 = bitcast i32 %43 to <2 x half>, !dbg !21
  %45 = getelementptr half, ptr addrspace(1) %1, i64 %31, !dbg !22
  %46 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %45, i1 true) #3, !dbg !23
  %47 = bitcast i16 %46 to half, !dbg !23
  %48 = fpext half %47 to float, !dbg !24
  %49 = getelementptr half, ptr addrspace(1) %2, i64 %34, !dbg !25
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %49, i1 %14) #3, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !26
  %52 = bitcast i32 %51 to <2 x half>, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !26
  %54 = bitcast i32 %53 to <2 x half>, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !26
  %56 = bitcast i32 %55 to <2 x half>, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !26
  %58 = bitcast i32 %57 to <2 x half>, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %59 = bitcast float %48 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %20, <1 x i32> %59, i1 true) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %60 = shufflevector <2 x half> %38, <2 x half> %40, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %61 = shufflevector <2 x half> %42, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %62 = shufflevector <8 x half> %60, <8 x half> %61, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !28
  %63 = shufflevector <2 x half> %42, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %64 = shufflevector <8 x half> %62, <8 x half> %63, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !28
  %65 = shufflevector <2 x half> %44, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %66 = shufflevector <8 x half> %64, <8 x half> %65, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !28
  %67 = shufflevector <2 x half> %44, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %68 = shufflevector <8 x half> %66, <8 x half> %67, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !28
  %69 = fpext <8 x half> %68 to <8 x float>, !dbg !28
  %70 = shufflevector <2 x half> %52, <2 x half> %54, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %71 = shufflevector <2 x half> %56, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %72 = shufflevector <8 x half> %70, <8 x half> %71, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !29
  %73 = shufflevector <2 x half> %56, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %74 = shufflevector <8 x half> %72, <8 x half> %73, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !29
  %75 = shufflevector <2 x half> %58, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %76 = shufflevector <8 x half> %74, <8 x half> %75, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !29
  %77 = shufflevector <2 x half> %58, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %78 = shufflevector <8 x half> %76, <8 x half> %77, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !29
  %79 = fpext <8 x half> %78 to <8 x float>, !dbg !29
  %80 = load <8 x float>, ptr addrspace(3) %21, align 16, !dbg !27
  %81 = fmul <8 x float> %80, %69, !dbg !27
  %82 = fmul <8 x float> %81, %79, !dbg !30
  %83 = fadd <8 x float> %30, %82, !dbg !31
  %84 = select <8 x i1> %28, <8 x float> %83, <8 x float> %30, !dbg !17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !16
  %85 = icmp samesign ult i64 %indvars.iv, 3584, !dbg !16
  br i1 %85, label %29, label %86, !dbg !16

86:                                               ; preds = %29
  %87 = lshr i32 %10, 5, !dbg !11
  %88 = and i32 %10, 31, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %shift = shufflevector <8 x float> %84, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %89 = fadd <8 x float> %84, %shift, !dbg !36
  %shift47 = shufflevector <8 x float> %84, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %90 = fadd <8 x float> %shift47, %89, !dbg !36
  %shift48 = shufflevector <8 x float> %84, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %91 = fadd <8 x float> %shift48, %90, !dbg !36
  %shift49 = shufflevector <8 x float> %84, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %92 = fadd <8 x float> %shift49, %91, !dbg !36
  %shift50 = shufflevector <8 x float> %84, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %93 = fadd <8 x float> %shift50, %92, !dbg !36
  %shift51 = shufflevector <8 x float> %84, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %94 = fadd <8 x float> %shift51, %93, !dbg !36
  %shift52 = shufflevector <8 x float> %84, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %95 = fadd <8 x float> %shift52, %94, !dbg !36
  %96 = extractelement <8 x float> %95, i64 0, !dbg !36
  %97 = bitcast float %96 to i32, !dbg !32
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 16, i32 31), !dbg !32
  %99 = bitcast i32 %98 to float, !dbg !32
  %100 = fadd float %96, %99, !dbg !36
  %101 = bitcast float %100 to i32, !dbg !32
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 8, i32 31), !dbg !32
  %103 = bitcast i32 %102 to float, !dbg !32
  %104 = fadd float %100, %103, !dbg !36
  %105 = bitcast float %104 to i32, !dbg !32
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 4, i32 31), !dbg !32
  %107 = bitcast i32 %106 to float, !dbg !32
  %108 = fadd float %104, %107, !dbg !36
  %109 = bitcast float %108 to i32, !dbg !32
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 2, i32 31), !dbg !32
  %111 = bitcast i32 %110 to float, !dbg !32
  %112 = fadd float %108, %111, !dbg !36
  %113 = bitcast float %112 to i32, !dbg !32
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 1, i32 31), !dbg !32
  %115 = bitcast i32 %114 to float, !dbg !32
  %116 = fadd float %112, %115, !dbg !36
  %117 = and i32 %87, 1, !dbg !32
  %118 = icmp eq i32 %88, 0, !dbg !32
  %119 = shl nuw nsw i32 %12, 1, !dbg !32
  %120 = or disjoint i32 %119, %117, !dbg !32
  %121 = getelementptr float, ptr addrspace(3) @global_smem, i32 %120, !dbg !32
  %122 = bitcast float %116 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 %118) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %123 = icmp slt i32 %10, 16, !dbg !32
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !32
  %125 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %124, i1 %123) #3, !dbg !32
  %126 = bitcast i32 %125 to float, !dbg !32
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 1, i32 31), !dbg !32
  %128 = bitcast i32 %127 to float, !dbg !32
  %129 = fadd float %126, %128, !dbg !36
  %130 = and i32 %10, 1, !dbg !32
  %131 = icmp eq i32 %130, 0, !dbg !32
  %132 = and i1 %123, %131, !dbg !32
  %133 = bitcast float %129 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %133, i1 %132) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %134 = getelementptr float, ptr addrspace(3) @global_smem, i32 %119, !dbg !32
  %135 = load float, ptr addrspace(3) %134, align 8, !dbg !32
  %136 = sext i32 %13 to i64, !dbg !38
  %137 = getelementptr float, ptr addrspace(1) %3, i64 %136, !dbg !38
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %14) #3, !dbg !39
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %14) #3, !dbg !39
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %14) #3, !dbg !39
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %14) #3, !dbg !39
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %14) #3, !dbg !39
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %14) #3, !dbg !39
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %14) #3, !dbg !39
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %14) #3, !dbg !39
  %146 = bitcast i32 %145 to float, !dbg !39
  %147 = fmul float %135, -5.000000e-01, !dbg !40
  %148 = fmul float %146, %146, !dbg !41
  %149 = fmul float %148, %146, !dbg !42
  %150 = fmul float %147, %149, !dbg !43
  %151 = fmul float %150, 0x3F30000000000000, !dbg !44
  %152 = insertelement <2 x float> poison, float %151, i64 0, !dbg !45
  %153 = shufflevector <2 x float> %152, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !45
  %154 = insertelement <2 x float> poison, float %146, i64 0, !dbg !46
  %155 = shufflevector <2 x float> %154, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !46
  br label %156, !dbg !47

156:                                              ; preds = %86, %156
  %indvars.iv25 = phi i64 [ 0, %86 ], [ %indvars.iv.next26, %156 ]
  %157 = or disjoint i64 %indvars.iv25, %24, !dbg !48
  %158 = trunc nuw nsw i64 %indvars.iv25 to i32, !dbg !49
  %159 = or i32 %19, %158, !dbg !49
  %160 = sext i32 %159 to i64, !dbg !50
  %161 = getelementptr half, ptr addrspace(1) %0, i64 %160, !dbg !50
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %161, i1 %14) #3, !dbg !51
  %163 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !51
  %164 = bitcast i32 %163 to <2 x half>, !dbg !51
  %165 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !51
  %166 = bitcast i32 %165 to <2 x half>, !dbg !51
  %167 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !51
  %168 = bitcast i32 %167 to <2 x half>, !dbg !51
  %169 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !51
  %170 = bitcast i32 %169 to <2 x half>, !dbg !51
  %171 = getelementptr half, ptr addrspace(1) %1, i64 %157, !dbg !52
  %172 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %171, i1 true) #3, !dbg !53
  %173 = bitcast i16 %172 to half, !dbg !53
  %174 = fpext half %173 to float, !dbg !54
  %175 = getelementptr half, ptr addrspace(1) %2, i64 %160, !dbg !55
  %176 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %175, i1 %14) #3, !dbg !56
  %177 = extractvalue { i32, i32, i32, i32 } %176, 0, !dbg !56
  %178 = bitcast i32 %177 to <2 x half>, !dbg !56
  %179 = extractvalue { i32, i32, i32, i32 } %176, 1, !dbg !56
  %180 = bitcast i32 %179 to <2 x half>, !dbg !56
  %181 = extractvalue { i32, i32, i32, i32 } %176, 2, !dbg !56
  %182 = bitcast i32 %181 to <2 x half>, !dbg !56
  %183 = extractvalue { i32, i32, i32, i32 } %176, 3, !dbg !56
  %184 = bitcast i32 %183 to <2 x half>, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %185 = bitcast float %174 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %20, <1 x i32> %185, i1 true) #3, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %186 = fpext <2 x half> %164 to <2 x float>, !dbg !57
  %187 = fpext <2 x half> %178 to <2 x float>, !dbg !58
  %188 = load <2 x float>, ptr addrspace(3) %21, align 16, !dbg !46
  %189 = fmul <2 x float> %188, %186, !dbg !59
  %190 = fmul <2 x float> %189, %155, !dbg !46
  %191 = fmul <2 x float> %187, splat (float 2.000000e+00), !dbg !60
  %192 = fmul <2 x float> %153, %191, !dbg !45
  %193 = fadd <2 x float> %192, %190, !dbg !61
  %194 = fptrunc <2 x float> %193 to <2 x half>, !dbg !62
  %195 = fpext <2 x half> %166 to <2 x float>, !dbg !57
  %196 = fpext <2 x half> %180 to <2 x float>, !dbg !58
  %197 = load <2 x float>, ptr addrspace(3) %25, align 8, !dbg !46
  %198 = fmul <2 x float> %197, %195, !dbg !59
  %199 = fmul <2 x float> %198, %155, !dbg !46
  %200 = fmul <2 x float> %196, splat (float 2.000000e+00), !dbg !60
  %201 = fmul <2 x float> %153, %200, !dbg !45
  %202 = fadd <2 x float> %201, %199, !dbg !61
  %203 = fptrunc <2 x float> %202 to <2 x half>, !dbg !62
  %204 = fpext <2 x half> %168 to <2 x float>, !dbg !57
  %205 = fpext <2 x half> %182 to <2 x float>, !dbg !58
  %206 = load <2 x float>, ptr addrspace(3) %23, align 16, !dbg !46
  %207 = fmul <2 x float> %206, %204, !dbg !59
  %208 = fmul <2 x float> %207, %155, !dbg !46
  %209 = fmul <2 x float> %205, splat (float 2.000000e+00), !dbg !60
  %210 = fmul <2 x float> %153, %209, !dbg !45
  %211 = fadd <2 x float> %210, %208, !dbg !61
  %212 = fptrunc <2 x float> %211 to <2 x half>, !dbg !62
  %213 = fpext <2 x half> %170 to <2 x float>, !dbg !57
  %214 = fpext <2 x half> %184 to <2 x float>, !dbg !58
  %215 = load <2 x float>, ptr addrspace(3) %26, align 8, !dbg !46
  %216 = fmul <2 x float> %215, %213, !dbg !59
  %217 = fmul <2 x float> %216, %155, !dbg !46
  %218 = fmul <2 x float> %214, splat (float 2.000000e+00), !dbg !60
  %219 = fmul <2 x float> %153, %218, !dbg !45
  %220 = fadd <2 x float> %219, %217, !dbg !61
  %221 = fptrunc <2 x float> %220 to <2 x half>, !dbg !62
  %222 = bitcast <2 x half> %194 to i32, !dbg !62
  %223 = bitcast <2 x half> %203 to i32, !dbg !62
  %224 = bitcast <2 x half> %212 to i32, !dbg !62
  %225 = bitcast <2 x half> %221 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %222, i32 %223, i32 %224, i32 %225, ptr addrspace(1) %161, i1 %14) #3, !dbg !62
  %indvars.iv.next26 = add nuw nsw i64 %indvars.iv25, 512, !dbg !47
  %226 = icmp samesign ult i64 %indvars.iv25, 3584, !dbg !47
  br i1 %226, label %156, label %227, !dbg !47

227:                                              ; preds = %156
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clge5s4bexuzcuiyyk6wdagiu6uovldxslqomkn47ipii2cfttub.py", directory: "./local_cache/lg")
!4 = !{ptr @triton_red_fused__to_copy_add_div_mul_pow_sum_2, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_mul_pow_sum_2", linkageName: "triton_red_fused__to_copy_add_div_mul_pow_sum_2", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 50, scope: !6)
!16 = !DILocation(line: 29, column: 40, scope: !6)
!17 = !DILocation(line: 44, column: 48, scope: !6)
!18 = !DILocation(line: 30, column: 31, scope: !6)
!19 = !DILocation(line: 35, column: 45, scope: !6)
!20 = !DILocation(line: 35, column: 38, scope: !6)
!21 = !DILocation(line: 35, column: 55, scope: !6)
!22 = !DILocation(line: 36, column: 34, scope: !6)
!23 = !DILocation(line: 36, column: 41, scope: !6)
!24 = !DILocation(line: 36, column: 94, scope: !6)
!25 = !DILocation(line: 37, column: 34, scope: !6)
!26 = !DILocation(line: 37, column: 51, scope: !6)
!27 = !DILocation(line: 38, column: 22, scope: !6)
!28 = !DILocation(line: 35, column: 116, scope: !6)
!29 = !DILocation(line: 37, column: 112, scope: !6)
!30 = !DILocation(line: 41, column: 22, scope: !6)
!31 = !DILocation(line: 43, column: 23, scope: !6)
!32 = !DILocation(line: 286, column: 36, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !6, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!35 = !DILocation(line: 45, column: 25, scope: !6)
!36 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !35)
!37 = distinct !DILexicalBlockFile(scope: !33, file: !34, discriminator: 0)
!38 = !DILocation(line: 46, column: 31, scope: !6)
!39 = !DILocation(line: 46, column: 36, scope: !6)
!40 = !DILocation(line: 60, column: 23, scope: !6)
!41 = !DILocation(line: 61, column: 24, scope: !6)
!42 = !DILocation(line: 62, column: 24, scope: !6)
!43 = !DILocation(line: 63, column: 24, scope: !6)
!44 = !DILocation(line: 65, column: 24, scope: !6)
!45 = !DILocation(line: 69, column: 24, scope: !6)
!46 = !DILocation(line: 58, column: 24, scope: !6)
!47 = !DILocation(line: 47, column: 40, scope: !6)
!48 = !DILocation(line: 48, column: 31, scope: !6)
!49 = !DILocation(line: 53, column: 46, scope: !6)
!50 = !DILocation(line: 53, column: 39, scope: !6)
!51 = !DILocation(line: 53, column: 56, scope: !6)
!52 = !DILocation(line: 54, column: 35, scope: !6)
!53 = !DILocation(line: 54, column: 42, scope: !6)
!54 = !DILocation(line: 54, column: 95, scope: !6)
!55 = !DILocation(line: 55, column: 35, scope: !6)
!56 = !DILocation(line: 55, column: 52, scope: !6)
!57 = !DILocation(line: 53, column: 118, scope: !6)
!58 = !DILocation(line: 55, column: 114, scope: !6)
!59 = !DILocation(line: 56, column: 24, scope: !6)
!60 = !DILocation(line: 68, column: 24, scope: !6)
!61 = !DILocation(line: 70, column: 24, scope: !6)
!62 = !DILocation(line: 72, column: 56, scope: !6)
!63 = !DILocation(line: 47, column: 4, scope: !6)
