; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_div_mul_pow_sum_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = shl i32 %10, 3, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = lshr i32 %12, 6, !dbg !11
  %14 = and i32 %13, 7, !dbg !11
  %15 = or disjoint i32 %14, %11, !dbg !12
  %16 = icmp slt i32 %15, %6, !dbg !13
  %17 = shl i32 %12, 3, !dbg !14
  %18 = and i32 %17, 504, !dbg !14
  %19 = and i32 %12, 511, !dbg !14
  %20 = shl i32 %15, 12, !dbg !15
  %21 = or disjoint i32 %20, %18
  %22 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %19
  %23 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %18
  %24 = or disjoint i32 %18, 4
  %25 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %24
  %26 = zext nneg i32 %19 to i64, !dbg !16
  %27 = getelementptr inbounds nuw i8, ptr addrspace(3) %23, i32 8
  %28 = getelementptr inbounds nuw i8, ptr addrspace(3) %25, i32 8
  %29 = insertelement <8 x i1> poison, i1 %16, i64 0, !dbg !17
  %30 = shufflevector <8 x i1> %29, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !17
  br label %31, !dbg !16

31:                                               ; preds = %9, %31
  %indvars.iv = phi i64 [ 0, %9 ], [ %indvars.iv.next, %31 ]
  %32 = phi <8 x float> [ zeroinitializer, %9 ], [ %107, %31 ]
  %33 = or disjoint i64 %indvars.iv, %26, !dbg !18
  %34 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !19
  %35 = or i32 %21, %34, !dbg !19
  %36 = sext i32 %35 to i64, !dbg !20
  %37 = getelementptr half, ptr addrspace(1) %1, i64 %36, !dbg !20
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %37, i1 %16) #3, !dbg !21
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !21
  %40 = bitcast i32 %39 to <2 x half>, !dbg !21
  %41 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !21
  %42 = bitcast i32 %41 to <2 x half>, !dbg !21
  %43 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !21
  %44 = bitcast i32 %43 to <2 x half>, !dbg !21
  %45 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !21
  %46 = bitcast i32 %45 to <2 x half>, !dbg !21
  %47 = getelementptr half, ptr addrspace(1) %2, i64 %36, !dbg !22
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %47, i1 %16) #3, !dbg !23
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !23
  %50 = bitcast i32 %49 to <2 x half>, !dbg !23
  %51 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !23
  %52 = bitcast i32 %51 to <2 x half>, !dbg !23
  %53 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !23
  %54 = bitcast i32 %53 to <2 x half>, !dbg !23
  %55 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !23
  %56 = bitcast i32 %55 to <2 x half>, !dbg !23
  %57 = getelementptr half, ptr addrspace(1) %3, i64 %33, !dbg !24
  %58 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %57, i1 true) #3, !dbg !25
  %59 = bitcast i16 %58 to half, !dbg !25
  %60 = fpext half %59 to float, !dbg !26
  %61 = getelementptr half, ptr addrspace(1) %4, i64 %36, !dbg !27
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %61, i1 %16) #3, !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !28
  %64 = bitcast i32 %63 to <2 x half>, !dbg !28
  %65 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !28
  %66 = bitcast i32 %65 to <2 x half>, !dbg !28
  %67 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !28
  %68 = bitcast i32 %67 to <2 x half>, !dbg !28
  %69 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !28
  %70 = bitcast i32 %69 to <2 x half>, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %71 = bitcast float %60 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %22, <1 x i32> %71, i1 true) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %72 = shufflevector <2 x half> %40, <2 x half> %42, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %73 = shufflevector <2 x half> %44, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %74 = shufflevector <8 x half> %72, <8 x half> %73, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !30
  %75 = shufflevector <2 x half> %44, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %76 = shufflevector <8 x half> %74, <8 x half> %75, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !30
  %77 = shufflevector <2 x half> %46, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %78 = shufflevector <8 x half> %76, <8 x half> %77, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !30
  %79 = shufflevector <2 x half> %46, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %80 = shufflevector <8 x half> %78, <8 x half> %79, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !30
  %81 = fpext <8 x half> %80 to <8 x float>, !dbg !30
  %82 = shufflevector <2 x half> %50, <2 x half> %52, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %83 = shufflevector <2 x half> %54, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %84 = shufflevector <8 x half> %82, <8 x half> %83, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !31
  %85 = shufflevector <2 x half> %54, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %86 = shufflevector <8 x half> %84, <8 x half> %85, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !31
  %87 = shufflevector <2 x half> %56, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %88 = shufflevector <8 x half> %86, <8 x half> %87, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !31
  %89 = shufflevector <2 x half> %56, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %90 = shufflevector <8 x half> %88, <8 x half> %89, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !31
  %91 = fpext <8 x half> %90 to <8 x float>, !dbg !31
  %92 = shufflevector <2 x half> %64, <2 x half> %66, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %93 = shufflevector <2 x half> %68, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %94 = shufflevector <8 x half> %92, <8 x half> %93, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !32
  %95 = shufflevector <2 x half> %68, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %96 = shufflevector <8 x half> %94, <8 x half> %95, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !32
  %97 = shufflevector <2 x half> %70, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %98 = shufflevector <8 x half> %96, <8 x half> %97, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !32
  %99 = shufflevector <2 x half> %70, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %100 = shufflevector <8 x half> %98, <8 x half> %99, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !32
  %101 = fpext <8 x half> %100 to <8 x float>, !dbg !32
  %102 = fadd <8 x float> %81, %91, !dbg !33
  %103 = load <8 x float>, ptr addrspace(3) %23, align 16, !dbg !29
  %104 = fmul <8 x float> %102, %103, !dbg !29
  %105 = fmul <8 x float> %104, %101, !dbg !34
  %106 = fadd <8 x float> %32, %105, !dbg !35
  %107 = select <8 x i1> %30, <8 x float> %106, <8 x float> %32, !dbg !17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !16
  %108 = icmp samesign ult i64 %indvars.iv, 3584, !dbg !16
  br i1 %108, label %31, label %109, !dbg !16

109:                                              ; preds = %31
  %110 = lshr i32 %12, 5, !dbg !11
  %111 = and i32 %12, 31, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %shift = shufflevector <8 x float> %107, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !40
  %112 = fadd <8 x float> %107, %shift, !dbg !40
  %shift47 = shufflevector <8 x float> %107, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !40
  %113 = fadd <8 x float> %shift47, %112, !dbg !40
  %shift48 = shufflevector <8 x float> %107, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !40
  %114 = fadd <8 x float> %shift48, %113, !dbg !40
  %shift49 = shufflevector <8 x float> %107, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !40
  %115 = fadd <8 x float> %shift49, %114, !dbg !40
  %shift50 = shufflevector <8 x float> %107, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !40
  %116 = fadd <8 x float> %shift50, %115, !dbg !40
  %shift51 = shufflevector <8 x float> %107, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !40
  %117 = fadd <8 x float> %shift51, %116, !dbg !40
  %shift52 = shufflevector <8 x float> %107, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !40
  %118 = fadd <8 x float> %shift52, %117, !dbg !40
  %119 = extractelement <8 x float> %118, i64 0, !dbg !40
  %120 = bitcast float %119 to i32, !dbg !36
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 16, i32 31), !dbg !36
  %122 = bitcast i32 %121 to float, !dbg !36
  %123 = fadd float %119, %122, !dbg !40
  %124 = bitcast float %123 to i32, !dbg !36
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 8, i32 31), !dbg !36
  %126 = bitcast i32 %125 to float, !dbg !36
  %127 = fadd float %123, %126, !dbg !40
  %128 = bitcast float %127 to i32, !dbg !36
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 4, i32 31), !dbg !36
  %130 = bitcast i32 %129 to float, !dbg !36
  %131 = fadd float %127, %130, !dbg !40
  %132 = bitcast float %131 to i32, !dbg !36
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 2, i32 31), !dbg !36
  %134 = bitcast i32 %133 to float, !dbg !36
  %135 = fadd float %131, %134, !dbg !40
  %136 = bitcast float %135 to i32, !dbg !36
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 1, i32 31), !dbg !36
  %138 = bitcast i32 %137 to float, !dbg !36
  %139 = fadd float %135, %138, !dbg !40
  %140 = and i32 %110, 1, !dbg !36
  %141 = icmp eq i32 %111, 0, !dbg !36
  %142 = shl nuw nsw i32 %14, 1, !dbg !36
  %143 = or disjoint i32 %142, %140, !dbg !36
  %144 = getelementptr float, ptr addrspace(3) @global_smem, i32 %143, !dbg !36
  %145 = bitcast float %139 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 %141) #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %146 = icmp slt i32 %12, 16, !dbg !36
  %147 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !36
  %148 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %147, i1 %146) #3, !dbg !36
  %149 = bitcast i32 %148 to float, !dbg !36
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 1, i32 31), !dbg !36
  %151 = bitcast i32 %150 to float, !dbg !36
  %152 = fadd float %149, %151, !dbg !40
  %153 = and i32 %12, 1, !dbg !36
  %154 = icmp eq i32 %153, 0, !dbg !36
  %155 = and i1 %146, %154, !dbg !36
  %156 = bitcast float %152 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %156, i1 %155) #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %157 = getelementptr float, ptr addrspace(3) @global_smem, i32 %142, !dbg !36
  %158 = load float, ptr addrspace(3) %157, align 8, !dbg !36
  %159 = sext i32 %15 to i64, !dbg !42
  %160 = getelementptr float, ptr addrspace(1) %5, i64 %159, !dbg !42
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %16) #3, !dbg !43
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %16) #3, !dbg !43
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %16) #3, !dbg !43
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %16) #3, !dbg !43
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %16) #3, !dbg !43
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %16) #3, !dbg !43
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %16) #3, !dbg !43
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %16) #3, !dbg !43
  %169 = bitcast i32 %168 to float, !dbg !43
  %170 = fmul float %158, -5.000000e-01, !dbg !44
  %171 = fmul float %169, %169, !dbg !45
  %172 = fmul float %171, %169, !dbg !46
  %173 = fmul float %170, %172, !dbg !47
  %174 = fmul float %173, 0x3F30000000000000, !dbg !48
  %175 = insertelement <2 x float> poison, float %174, i64 0, !dbg !49
  %176 = shufflevector <2 x float> %175, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %177 = insertelement <2 x float> poison, float %169, i64 0, !dbg !50
  %178 = shufflevector <2 x float> %177, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  br label %179, !dbg !51

179:                                              ; preds = %109, %179
  %indvars.iv25 = phi i64 [ 0, %109 ], [ %indvars.iv.next26, %179 ]
  %180 = or disjoint i64 %indvars.iv25, %26, !dbg !52
  %181 = trunc nuw nsw i64 %indvars.iv25 to i32, !dbg !53
  %182 = or i32 %21, %181, !dbg !53
  %183 = sext i32 %182 to i64, !dbg !54
  %184 = getelementptr half, ptr addrspace(1) %0, i64 %183, !dbg !54
  %185 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %184, i1 %16) #3, !dbg !55
  %186 = extractvalue { i32, i32, i32, i32 } %185, 0, !dbg !55
  %187 = bitcast i32 %186 to <2 x half>, !dbg !55
  %188 = extractvalue { i32, i32, i32, i32 } %185, 1, !dbg !55
  %189 = bitcast i32 %188 to <2 x half>, !dbg !55
  %190 = extractvalue { i32, i32, i32, i32 } %185, 2, !dbg !55
  %191 = bitcast i32 %190 to <2 x half>, !dbg !55
  %192 = extractvalue { i32, i32, i32, i32 } %185, 3, !dbg !55
  %193 = bitcast i32 %192 to <2 x half>, !dbg !55
  %194 = getelementptr half, ptr addrspace(1) %1, i64 %183, !dbg !56
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %194, i1 %16) #3, !dbg !57
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !57
  %197 = bitcast i32 %196 to <2 x half>, !dbg !57
  %198 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !57
  %199 = bitcast i32 %198 to <2 x half>, !dbg !57
  %200 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !57
  %201 = bitcast i32 %200 to <2 x half>, !dbg !57
  %202 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !57
  %203 = bitcast i32 %202 to <2 x half>, !dbg !57
  %204 = getelementptr half, ptr addrspace(1) %2, i64 %183, !dbg !58
  %205 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %204, i1 %16) #3, !dbg !59
  %206 = extractvalue { i32, i32, i32, i32 } %205, 0, !dbg !59
  %207 = bitcast i32 %206 to <2 x half>, !dbg !59
  %208 = extractvalue { i32, i32, i32, i32 } %205, 1, !dbg !59
  %209 = bitcast i32 %208 to <2 x half>, !dbg !59
  %210 = extractvalue { i32, i32, i32, i32 } %205, 2, !dbg !59
  %211 = bitcast i32 %210 to <2 x half>, !dbg !59
  %212 = extractvalue { i32, i32, i32, i32 } %205, 3, !dbg !59
  %213 = bitcast i32 %212 to <2 x half>, !dbg !59
  %214 = getelementptr half, ptr addrspace(1) %3, i64 %180, !dbg !60
  %215 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %214, i1 true) #3, !dbg !61
  %216 = bitcast i16 %215 to half, !dbg !61
  %217 = fpext half %216 to float, !dbg !62
  %218 = getelementptr half, ptr addrspace(1) %4, i64 %183, !dbg !63
  %219 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %218, i1 %16) #3, !dbg !64
  %220 = extractvalue { i32, i32, i32, i32 } %219, 0, !dbg !64
  %221 = bitcast i32 %220 to <2 x half>, !dbg !64
  %222 = extractvalue { i32, i32, i32, i32 } %219, 1, !dbg !64
  %223 = bitcast i32 %222 to <2 x half>, !dbg !64
  %224 = extractvalue { i32, i32, i32, i32 } %219, 2, !dbg !64
  %225 = bitcast i32 %224 to <2 x half>, !dbg !64
  %226 = extractvalue { i32, i32, i32, i32 } %219, 3, !dbg !64
  %227 = bitcast i32 %226 to <2 x half>, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %228 = bitcast float %217 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %22, <1 x i32> %228, i1 true) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %229 = fpext <2 x half> %187 to <2 x float>, !dbg !65
  %230 = fpext <2 x half> %197 to <2 x float>, !dbg !66
  %231 = fpext <2 x half> %207 to <2 x float>, !dbg !67
  %232 = fpext <2 x half> %221 to <2 x float>, !dbg !68
  %233 = fadd <2 x float> %230, %231, !dbg !69
  %234 = load <2 x float>, ptr addrspace(3) %23, align 16, !dbg !50
  %235 = fmul <2 x float> %233, %234, !dbg !70
  %236 = fmul <2 x float> %235, %178, !dbg !50
  %237 = fmul <2 x float> %232, splat (float 2.000000e+00), !dbg !71
  %238 = fmul <2 x float> %176, %237, !dbg !49
  %239 = fadd <2 x float> %238, %236, !dbg !72
  %240 = fadd <2 x float> %239, %229, !dbg !73
  %241 = fptrunc <2 x float> %240 to <2 x half>, !dbg !74
  %242 = fpext <2 x half> %189 to <2 x float>, !dbg !65
  %243 = fpext <2 x half> %199 to <2 x float>, !dbg !66
  %244 = fpext <2 x half> %209 to <2 x float>, !dbg !67
  %245 = fpext <2 x half> %223 to <2 x float>, !dbg !68
  %246 = fadd <2 x float> %243, %244, !dbg !69
  %247 = load <2 x float>, ptr addrspace(3) %27, align 8, !dbg !50
  %248 = fmul <2 x float> %246, %247, !dbg !70
  %249 = fmul <2 x float> %248, %178, !dbg !50
  %250 = fmul <2 x float> %245, splat (float 2.000000e+00), !dbg !71
  %251 = fmul <2 x float> %176, %250, !dbg !49
  %252 = fadd <2 x float> %251, %249, !dbg !72
  %253 = fadd <2 x float> %252, %242, !dbg !73
  %254 = fptrunc <2 x float> %253 to <2 x half>, !dbg !74
  %255 = fpext <2 x half> %191 to <2 x float>, !dbg !65
  %256 = fpext <2 x half> %201 to <2 x float>, !dbg !66
  %257 = fpext <2 x half> %211 to <2 x float>, !dbg !67
  %258 = fpext <2 x half> %225 to <2 x float>, !dbg !68
  %259 = fadd <2 x float> %256, %257, !dbg !69
  %260 = load <2 x float>, ptr addrspace(3) %25, align 16, !dbg !50
  %261 = fmul <2 x float> %259, %260, !dbg !70
  %262 = fmul <2 x float> %261, %178, !dbg !50
  %263 = fmul <2 x float> %258, splat (float 2.000000e+00), !dbg !71
  %264 = fmul <2 x float> %176, %263, !dbg !49
  %265 = fadd <2 x float> %264, %262, !dbg !72
  %266 = fadd <2 x float> %265, %255, !dbg !73
  %267 = fptrunc <2 x float> %266 to <2 x half>, !dbg !74
  %268 = fpext <2 x half> %193 to <2 x float>, !dbg !65
  %269 = fpext <2 x half> %203 to <2 x float>, !dbg !66
  %270 = fpext <2 x half> %213 to <2 x float>, !dbg !67
  %271 = fpext <2 x half> %227 to <2 x float>, !dbg !68
  %272 = fadd <2 x float> %269, %270, !dbg !69
  %273 = load <2 x float>, ptr addrspace(3) %28, align 8, !dbg !50
  %274 = fmul <2 x float> %272, %273, !dbg !70
  %275 = fmul <2 x float> %274, %178, !dbg !50
  %276 = fmul <2 x float> %271, splat (float 2.000000e+00), !dbg !71
  %277 = fmul <2 x float> %176, %276, !dbg !49
  %278 = fadd <2 x float> %277, %275, !dbg !72
  %279 = fadd <2 x float> %278, %268, !dbg !73
  %280 = fptrunc <2 x float> %279 to <2 x half>, !dbg !74
  %281 = bitcast <2 x half> %241 to i32, !dbg !74
  %282 = bitcast <2 x half> %254 to i32, !dbg !74
  %283 = bitcast <2 x half> %267 to i32, !dbg !74
  %284 = bitcast <2 x half> %280 to i32, !dbg !74
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %281, i32 %282, i32 %283, i32 %284, ptr addrspace(1) %184, i1 %16) #3, !dbg !74
  %indvars.iv.next26 = add nuw nsw i64 %indvars.iv25, 512, !dbg !51
  %285 = icmp samesign ult i64 %indvars.iv25, 3584, !dbg !51
  br i1 %285, label %179, label %286, !dbg !51

286:                                              ; preds = %179
  ret void, !dbg !75
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyebsf3anhyuxewgys2gminc36tn6uo6fybpryty274aelqwsxrt.py", directory: "./local_cache/ye")
!4 = !{ptr @triton_red_fused__to_copy_add_div_mul_pow_sum_4, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_mul_pow_sum_4", linkageName: "triton_red_fused__to_copy_add_div_mul_pow_sum_4", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 29, column: 40, scope: !6)
!17 = !DILocation(line: 46, column: 50, scope: !6)
!18 = !DILocation(line: 30, column: 31, scope: !6)
!19 = !DILocation(line: 35, column: 41, scope: !6)
!20 = !DILocation(line: 35, column: 34, scope: !6)
!21 = !DILocation(line: 35, column: 51, scope: !6)
!22 = !DILocation(line: 36, column: 34, scope: !6)
!23 = !DILocation(line: 36, column: 51, scope: !6)
!24 = !DILocation(line: 37, column: 34, scope: !6)
!25 = !DILocation(line: 37, column: 41, scope: !6)
!26 = !DILocation(line: 37, column: 94, scope: !6)
!27 = !DILocation(line: 38, column: 34, scope: !6)
!28 = !DILocation(line: 38, column: 51, scope: !6)
!29 = !DILocation(line: 40, column: 22, scope: !6)
!30 = !DILocation(line: 35, column: 112, scope: !6)
!31 = !DILocation(line: 36, column: 112, scope: !6)
!32 = !DILocation(line: 38, column: 112, scope: !6)
!33 = !DILocation(line: 39, column: 22, scope: !6)
!34 = !DILocation(line: 43, column: 22, scope: !6)
!35 = !DILocation(line: 45, column: 25, scope: !6)
!36 = !DILocation(line: 286, column: 36, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !6, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!39 = !DILocation(line: 47, column: 27, scope: !6)
!40 = !DILocation(line: 256, column: 15, scope: !41, inlinedAt: !39)
!41 = distinct !DILexicalBlockFile(scope: !37, file: !38, discriminator: 0)
!42 = !DILocation(line: 48, column: 31, scope: !6)
!43 = !DILocation(line: 48, column: 36, scope: !6)
!44 = !DILocation(line: 65, column: 24, scope: !6)
!45 = !DILocation(line: 66, column: 24, scope: !6)
!46 = !DILocation(line: 67, column: 24, scope: !6)
!47 = !DILocation(line: 68, column: 24, scope: !6)
!48 = !DILocation(line: 70, column: 24, scope: !6)
!49 = !DILocation(line: 74, column: 24, scope: !6)
!50 = !DILocation(line: 63, column: 24, scope: !6)
!51 = !DILocation(line: 49, column: 40, scope: !6)
!52 = !DILocation(line: 50, column: 31, scope: !6)
!53 = !DILocation(line: 55, column: 46, scope: !6)
!54 = !DILocation(line: 55, column: 39, scope: !6)
!55 = !DILocation(line: 55, column: 56, scope: !6)
!56 = !DILocation(line: 56, column: 35, scope: !6)
!57 = !DILocation(line: 56, column: 52, scope: !6)
!58 = !DILocation(line: 57, column: 35, scope: !6)
!59 = !DILocation(line: 57, column: 52, scope: !6)
!60 = !DILocation(line: 58, column: 35, scope: !6)
!61 = !DILocation(line: 58, column: 42, scope: !6)
!62 = !DILocation(line: 58, column: 95, scope: !6)
!63 = !DILocation(line: 59, column: 35, scope: !6)
!64 = !DILocation(line: 59, column: 52, scope: !6)
!65 = !DILocation(line: 55, column: 118, scope: !6)
!66 = !DILocation(line: 56, column: 114, scope: !6)
!67 = !DILocation(line: 57, column: 114, scope: !6)
!68 = !DILocation(line: 59, column: 114, scope: !6)
!69 = !DILocation(line: 60, column: 24, scope: !6)
!70 = !DILocation(line: 61, column: 24, scope: !6)
!71 = !DILocation(line: 73, column: 24, scope: !6)
!72 = !DILocation(line: 75, column: 24, scope: !6)
!73 = !DILocation(line: 77, column: 24, scope: !6)
!74 = !DILocation(line: 78, column: 56, scope: !6)
!75 = !DILocation(line: 49, column: 4, scope: !6)
