; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 4, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = lshr i32 %11, 2, !dbg !11
  %13 = and i32 %12, 15, !dbg !11
  %14 = and i32 %11, 3, !dbg !11
  %15 = and i32 %11, 15, !dbg !11
  %16 = or disjoint i32 %13, %10, !dbg !12
  %17 = or disjoint i32 %10, %15, !dbg !12
  %18 = icmp slt i32 %16, %5, !dbg !13
  %.fr = freeze i1 %18
  %19 = icmp slt i32 %17, %5, !dbg !13
  %20 = shl i32 %16, 12, !dbg !14
  %21 = or disjoint i32 %20, %14
  %22 = and i32 %11, 192
  %23 = icmp eq i32 %22, 0
  %24 = and i1 %23, %.fr
  br i1 %.fr, label %.split.us, label %.split

.split.us:                                        ; preds = %8, %.split.us
  %25 = phi float [ %39, %.split.us ], [ 0.000000e+00, %8 ]
  %26 = phi i32 [ %42, %.split.us ], [ 0, %8 ]
  %27 = or i32 %21, %26, !dbg !15
  %28 = sext i32 %27 to i64, !dbg !16
  %29 = getelementptr half, ptr addrspace(1) %2, i64 %28, !dbg !16
  %30 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %29, i1 true) #5, !dbg !17
  %31 = bitcast i16 %30 to half, !dbg !17
  %32 = fpext half %31 to float, !dbg !18
  %33 = getelementptr half, ptr addrspace(1) %0, i64 %28, !dbg !19
  %34 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %33, i1 true) #5, !dbg !20
  %35 = bitcast i16 %34 to half, !dbg !20
  %36 = fpext half %35 to float, !dbg !21
  %37 = fadd float %32, %36, !dbg !22
  %38 = fmul float %37, %37, !dbg !23
  %39 = fadd float %25, %38, !dbg !24
  %40 = fptrunc float %37 to half, !dbg !25
  %41 = bitcast half %40 to i16, !dbg !25
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %41, ptr addrspace(1) %33, i1 %24) #5, !dbg !25
  %42 = add nuw nsw i32 %26, 4, !dbg !26
  %43 = icmp samesign ult i32 %26, 4092, !dbg !26
  br i1 %43, label %.split.us, label %.split7.us, !dbg !26

.split:                                           ; preds = %8, %.split
  %44 = phi i32 [ %55, %.split ], [ 0, %8 ]
  %45 = or i32 %21, %44, !dbg !15
  %46 = sext i32 %45 to i64, !dbg !16
  %47 = getelementptr half, ptr addrspace(1) %2, i64 %46, !dbg !16
  %48 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %47, i1 false) #5, !dbg !17
  %49 = bitcast i16 %48 to half, !dbg !17
  %50 = getelementptr half, ptr addrspace(1) %0, i64 %46, !dbg !19
  %51 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %50, i1 false) #5, !dbg !20
  %52 = bitcast i16 %51 to half, !dbg !20
  %53 = fadd half %49, %52, !dbg !25
  %54 = bitcast half %53 to i16, !dbg !25
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %54, ptr addrspace(1) %50, i1 %24) #5, !dbg !25
  %55 = add nuw nsw i32 %44, 4, !dbg !26
  %56 = icmp samesign ult i32 %44, 4092, !dbg !26
  br i1 %56, label %.split, label %.split7.us, !dbg !26

.split7.us:                                       ; preds = %.split, %.split.us
  %.us-phi = phi float [ %39, %.split.us ], [ 0.000000e+00, %.split ], !dbg !27
  %57 = bitcast float %.us-phi to i32, !dbg !27
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 2, i32 31), !dbg !27
  %59 = bitcast i32 %58 to float, !dbg !27
  %60 = fadd float %.us-phi, %59, !dbg !31
  %61 = bitcast float %60 to i32, !dbg !27
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 1, i32 31), !dbg !27
  %63 = bitcast i32 %62 to float, !dbg !27
  %64 = fadd float %60, %63, !dbg !31
  %65 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %13, !dbg !33
  %66 = bitcast float %64 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %66, i1 true) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %67 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %15, !dbg !33
  %68 = load float, ptr addrspace(3) %67, align 4, !dbg !33
  %69 = tail call float @llvm.nvvm.div.full(float %68, float 4.096000e+03), !dbg !34
  %70 = tail call float @llvm.nvvm.div.full(float %64, float 4.096000e+03), !dbg !34
  %71 = fadd float %69, 0x3EE4F8B580000000, !dbg !35
  %72 = fadd float %70, 0x3EE4F8B580000000, !dbg !35
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i = icmp eq i32 %73, 0, !dbg !36
  br i1 %.not.i, label %76, label %74, !dbg !36

74:                                               ; preds = %.split7.us
  %75 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %71), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

76:                                               ; preds = %.split7.us
  %77 = tail call float @llvm.nvvm.rsqrt.approx.f(float %71), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

__nv_rsqrtf.exit:                                 ; preds = %74, %76
  %.0.i = phi float [ %75, %74 ], [ %77, %76 ], !dbg !36
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i3 = icmp eq i32 %78, 0, !dbg !36
  br i1 %.not.i3, label %81, label %79, !dbg !36

79:                                               ; preds = %__nv_rsqrtf.exit
  %80 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %72), !dbg !36
  br label %__nv_rsqrtf.exit5, !dbg !36

81:                                               ; preds = %__nv_rsqrtf.exit
  %82 = tail call float @llvm.nvvm.rsqrt.approx.f(float %72), !dbg !36
  br label %__nv_rsqrtf.exit5, !dbg !36

__nv_rsqrtf.exit5:                                ; preds = %79, %81
  %.0.i4 = phi float [ %80, %79 ], [ %82, %81 ], !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %83 = sext i32 %17 to i64, !dbg !38
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %83, !dbg !38
  %85 = and i32 %11, 240, !dbg !39
  %86 = icmp eq i32 %85, 0, !dbg !39
  %87 = bitcast float %.0.i to i32, !dbg !39
  %88 = and i1 %86, %19, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %87, ptr addrspace(1) %84, i1 %88) #5, !dbg !39
  %89 = zext nneg i32 %14 to i64, !dbg !40
  br label %90, !dbg !40

90:                                               ; preds = %__nv_rsqrtf.exit5, %90
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit5 ], [ %indvars.iv.next, %90 ]
  %91 = or disjoint i64 %indvars.iv, %89, !dbg !41
  %92 = getelementptr half, ptr addrspace(1) %3, i64 %91, !dbg !42
  %93 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %92, i1 true) #5, !dbg !43
  %94 = bitcast i16 %93 to half, !dbg !43
  %95 = fpext half %94 to float, !dbg !44
  %96 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %21, %96
  %97 = sext i32 %.reass to i64, !dbg !45
  %98 = getelementptr half, ptr addrspace(1) %0, i64 %97, !dbg !45
  %99 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %98, i1 %.fr) #5, !dbg !46
  %100 = bitcast i16 %99 to half, !dbg !46
  %101 = fpext half %100 to float, !dbg !47
  %102 = fmul float %.0.i4, %101, !dbg !48
  %103 = fmul float %102, %95, !dbg !49
  %104 = getelementptr half, ptr addrspace(1) %4, i64 %97, !dbg !50
  %105 = fptrunc float %103 to half, !dbg !51
  %106 = bitcast half %105 to i16, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %106, ptr addrspace(1) %104, i1 %24) #5, !dbg !51
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !40
  %107 = icmp samesign ult i64 %indvars.iv, 4092, !dbg !40
  br i1 %107, label %90, label %108, !dbg !40

108:                                              ; preds = %90
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5c3dyzot3z75ffv2rgpknn5id3oqk635hti77j23bckhoi55elb.py", directory: "./local_cache/5c")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 35, column: 46, scope: !6)
!15 = !DILocation(line: 35, column: 41, scope: !6)
!16 = !DILocation(line: 35, column: 34, scope: !6)
!17 = !DILocation(line: 35, column: 51, scope: !6)
!18 = !DILocation(line: 35, column: 113, scope: !6)
!19 = !DILocation(line: 36, column: 38, scope: !6)
!20 = !DILocation(line: 36, column: 55, scope: !6)
!21 = !DILocation(line: 36, column: 117, scope: !6)
!22 = !DILocation(line: 37, column: 22, scope: !6)
!23 = !DILocation(line: 39, column: 22, scope: !6)
!24 = !DILocation(line: 41, column: 23, scope: !6)
!25 = !DILocation(line: 43, column: 55, scope: !6)
!26 = !DILocation(line: 29, column: 40, scope: !6)
!27 = !DILocation(line: 286, column: 36, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !6, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!30 = !DILocation(line: 44, column: 25, scope: !6)
!31 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !30)
!32 = distinct !DILexicalBlockFile(scope: !28, file: !29, discriminator: 0)
!33 = !DILocation(line: 44, column: 28, scope: !6)
!34 = !DILocation(line: 46, column: 19, scope: !6)
!35 = !DILocation(line: 48, column: 19, scope: !6)
!36 = !DILocation(line: 49, column: 28, scope: !6)
!37 = !DILocation(line: 50, column: 4, scope: !6)
!38 = !DILocation(line: 51, column: 28, scope: !6)
!39 = !DILocation(line: 51, column: 40, scope: !6)
!40 = !DILocation(line: 52, column: 40, scope: !6)
!41 = !DILocation(line: 53, column: 31, scope: !6)
!42 = !DILocation(line: 58, column: 35, scope: !6)
!43 = !DILocation(line: 58, column: 42, scope: !6)
!44 = !DILocation(line: 58, column: 95, scope: !6)
!45 = !DILocation(line: 59, column: 39, scope: !6)
!46 = !DILocation(line: 59, column: 56, scope: !6)
!47 = !DILocation(line: 59, column: 118, scope: !6)
!48 = !DILocation(line: 61, column: 24, scope: !6)
!49 = !DILocation(line: 63, column: 24, scope: !6)
!50 = !DILocation(line: 64, column: 29, scope: !6)
!51 = !DILocation(line: 64, column: 53, scope: !6)
!52 = !DILocation(line: 52, column: 4, scope: !6)
