; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = shl i32 %10, 1, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = and i32 %12, 256, !dbg !11
  %.lobit = lshr exact i32 %13, 8, !dbg !11
  %14 = or disjoint i32 %.lobit, %11, !dbg !12
  %15 = icmp slt i32 %14, %6, !dbg !13
  %16 = shl i32 %12, 3, !dbg !14
  %17 = and i32 %16, 2040, !dbg !14
  %18 = shl i32 %14, 12, !dbg !15
  %19 = or disjoint i32 %18, %17
  %20 = insertelement <8 x i1> poison, i1 %15, i64 0, !dbg !16
  %21 = shufflevector <8 x i1> %20, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !16
  %22 = and i32 %12, 31, !dbg !11
  %23 = sext i32 %19 to i64, !dbg !17
  %24 = getelementptr half, ptr addrspace(1) %2, i64 %23, !dbg !17
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %24, i1 %15) #5, !dbg !18
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !18
  %27 = bitcast i32 %26 to <2 x half>, !dbg !18
  %28 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !18
  %29 = bitcast i32 %28 to <2 x half>, !dbg !18
  %30 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !18
  %31 = bitcast i32 %30 to <2 x half>, !dbg !18
  %32 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !18
  %33 = bitcast i32 %32 to <2 x half>, !dbg !18
  %34 = getelementptr half, ptr addrspace(1) %3, i64 %23, !dbg !19
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %34, i1 %15) #5, !dbg !20
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !20
  %37 = bitcast i32 %36 to <2 x half>, !dbg !20
  %38 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !20
  %39 = bitcast i32 %38 to <2 x half>, !dbg !20
  %40 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !20
  %41 = bitcast i32 %40 to <2 x half>, !dbg !20
  %42 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !20
  %43 = bitcast i32 %42 to <2 x half>, !dbg !20
  %44 = getelementptr half, ptr addrspace(1) %0, i64 %23, !dbg !21
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %44, i1 %15) #5, !dbg !22
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !22
  %47 = bitcast i32 %46 to <2 x half>, !dbg !22
  %48 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !22
  %49 = bitcast i32 %48 to <2 x half>, !dbg !22
  %50 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !22
  %51 = bitcast i32 %50 to <2 x half>, !dbg !22
  %52 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !22
  %53 = bitcast i32 %52 to <2 x half>, !dbg !22
  %54 = shufflevector <2 x half> %27, <2 x half> %29, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %55 = shufflevector <2 x half> %31, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %56 = shufflevector <8 x half> %54, <8 x half> %55, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !23
  %57 = shufflevector <2 x half> %31, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %58 = shufflevector <8 x half> %56, <8 x half> %57, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !23
  %59 = shufflevector <2 x half> %33, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %60 = shufflevector <8 x half> %58, <8 x half> %59, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !23
  %61 = shufflevector <2 x half> %33, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %62 = shufflevector <8 x half> %60, <8 x half> %61, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !23
  %63 = fpext <8 x half> %62 to <8 x float>, !dbg !23
  %64 = shufflevector <2 x half> %37, <2 x half> %39, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %65 = shufflevector <2 x half> %41, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %66 = shufflevector <8 x half> %64, <8 x half> %65, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !24
  %67 = shufflevector <2 x half> %41, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %68 = shufflevector <8 x half> %66, <8 x half> %67, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !24
  %69 = shufflevector <2 x half> %43, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %70 = shufflevector <8 x half> %68, <8 x half> %69, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !24
  %71 = shufflevector <2 x half> %43, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %72 = shufflevector <8 x half> %70, <8 x half> %71, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !24
  %73 = fpext <8 x half> %72 to <8 x float>, !dbg !24
  %74 = shufflevector <2 x half> %47, <2 x half> %49, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %75 = shufflevector <2 x half> %51, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %76 = shufflevector <8 x half> %74, <8 x half> %75, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !25
  %77 = shufflevector <2 x half> %51, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %78 = shufflevector <8 x half> %76, <8 x half> %77, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !25
  %79 = shufflevector <2 x half> %53, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %80 = shufflevector <8 x half> %78, <8 x half> %79, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !25
  %81 = shufflevector <2 x half> %53, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %82 = shufflevector <8 x half> %80, <8 x half> %81, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !25
  %83 = fpext <8 x half> %82 to <8 x float>, !dbg !25
  %84 = fadd <8 x float> %63, %73, !dbg !26
  %85 = fadd <8 x float> %84, %83, !dbg !27
  %86 = fmul <8 x float> %85, %85, !dbg !28
  %87 = extractelement <8 x float> %85, i64 0, !dbg !29
  %88 = fptrunc float %87 to half, !dbg !29
  %89 = extractelement <8 x float> %85, i64 1, !dbg !29
  %90 = fptrunc float %89 to half, !dbg !29
  %91 = extractelement <8 x float> %85, i64 2, !dbg !29
  %92 = fptrunc float %91 to half, !dbg !29
  %93 = extractelement <8 x float> %85, i64 3, !dbg !29
  %94 = fptrunc float %93 to half, !dbg !29
  %95 = extractelement <8 x float> %85, i64 4, !dbg !29
  %96 = fptrunc float %95 to half, !dbg !29
  %97 = extractelement <8 x float> %85, i64 5, !dbg !29
  %98 = fptrunc float %97 to half, !dbg !29
  %99 = extractelement <8 x float> %85, i64 6, !dbg !29
  %100 = fptrunc float %99 to half, !dbg !29
  %101 = extractelement <8 x float> %85, i64 7, !dbg !29
  %102 = fptrunc float %101 to half, !dbg !29
  %103 = insertelement <2 x half> poison, half %88, i64 0, !dbg !29
  %104 = insertelement <2 x half> %103, half %90, i64 1, !dbg !29
  %105 = bitcast <2 x half> %104 to i32, !dbg !29
  %106 = insertelement <2 x half> poison, half %92, i64 0, !dbg !29
  %107 = insertelement <2 x half> %106, half %94, i64 1, !dbg !29
  %108 = bitcast <2 x half> %107 to i32, !dbg !29
  %109 = insertelement <2 x half> poison, half %96, i64 0, !dbg !29
  %110 = insertelement <2 x half> %109, half %98, i64 1, !dbg !29
  %111 = bitcast <2 x half> %110 to i32, !dbg !29
  %112 = insertelement <2 x half> poison, half %100, i64 0, !dbg !29
  %113 = insertelement <2 x half> %112, half %102, i64 1, !dbg !29
  %114 = bitcast <2 x half> %113 to i32, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %105, i32 %108, i32 %111, i32 %114, ptr addrspace(1) %44, i1 %15) #5, !dbg !29
  %115 = or disjoint i32 %19, 2048, !dbg !30
  %116 = sext i32 %115 to i64, !dbg !17
  %117 = getelementptr half, ptr addrspace(1) %2, i64 %116, !dbg !17
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %117, i1 %15) #5, !dbg !18
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !18
  %120 = bitcast i32 %119 to <2 x half>, !dbg !18
  %121 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !18
  %122 = bitcast i32 %121 to <2 x half>, !dbg !18
  %123 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !18
  %124 = bitcast i32 %123 to <2 x half>, !dbg !18
  %125 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !18
  %126 = bitcast i32 %125 to <2 x half>, !dbg !18
  %127 = getelementptr half, ptr addrspace(1) %3, i64 %116, !dbg !19
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %127, i1 %15) #5, !dbg !20
  %129 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !20
  %130 = bitcast i32 %129 to <2 x half>, !dbg !20
  %131 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !20
  %132 = bitcast i32 %131 to <2 x half>, !dbg !20
  %133 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !20
  %134 = bitcast i32 %133 to <2 x half>, !dbg !20
  %135 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !20
  %136 = bitcast i32 %135 to <2 x half>, !dbg !20
  %137 = getelementptr half, ptr addrspace(1) %0, i64 %116, !dbg !21
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %137, i1 %15) #5, !dbg !22
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !22
  %140 = bitcast i32 %139 to <2 x half>, !dbg !22
  %141 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !22
  %142 = bitcast i32 %141 to <2 x half>, !dbg !22
  %143 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !22
  %144 = bitcast i32 %143 to <2 x half>, !dbg !22
  %145 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !22
  %146 = bitcast i32 %145 to <2 x half>, !dbg !22
  %147 = shufflevector <2 x half> %120, <2 x half> %122, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %148 = shufflevector <2 x half> %124, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %149 = shufflevector <8 x half> %147, <8 x half> %148, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !23
  %150 = shufflevector <2 x half> %124, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %151 = shufflevector <8 x half> %149, <8 x half> %150, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !23
  %152 = shufflevector <2 x half> %126, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %153 = shufflevector <8 x half> %151, <8 x half> %152, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !23
  %154 = shufflevector <2 x half> %126, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %155 = shufflevector <8 x half> %153, <8 x half> %154, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !23
  %156 = fpext <8 x half> %155 to <8 x float>, !dbg !23
  %157 = shufflevector <2 x half> %130, <2 x half> %132, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %158 = shufflevector <2 x half> %134, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %159 = shufflevector <8 x half> %157, <8 x half> %158, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !24
  %160 = shufflevector <2 x half> %134, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %161 = shufflevector <8 x half> %159, <8 x half> %160, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !24
  %162 = shufflevector <2 x half> %136, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %163 = shufflevector <8 x half> %161, <8 x half> %162, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !24
  %164 = shufflevector <2 x half> %136, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %165 = shufflevector <8 x half> %163, <8 x half> %164, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !24
  %166 = fpext <8 x half> %165 to <8 x float>, !dbg !24
  %167 = shufflevector <2 x half> %140, <2 x half> %142, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %168 = shufflevector <2 x half> %144, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %169 = shufflevector <8 x half> %167, <8 x half> %168, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !25
  %170 = shufflevector <2 x half> %144, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %171 = shufflevector <8 x half> %169, <8 x half> %170, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !25
  %172 = shufflevector <2 x half> %146, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %173 = shufflevector <8 x half> %171, <8 x half> %172, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !25
  %174 = shufflevector <2 x half> %146, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %175 = shufflevector <8 x half> %173, <8 x half> %174, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !25
  %176 = fpext <8 x half> %175 to <8 x float>, !dbg !25
  %177 = fadd <8 x float> %156, %166, !dbg !26
  %178 = fadd <8 x float> %177, %176, !dbg !27
  %179 = fmul <8 x float> %178, %178, !dbg !28
  %180 = fadd <8 x float> %86, %179, !dbg !31
  %181 = select <8 x i1> %21, <8 x float> %180, <8 x float> zeroinitializer, !dbg !16
  %182 = extractelement <8 x float> %178, i64 0, !dbg !29
  %183 = fptrunc float %182 to half, !dbg !29
  %184 = extractelement <8 x float> %178, i64 1, !dbg !29
  %185 = fptrunc float %184 to half, !dbg !29
  %186 = extractelement <8 x float> %178, i64 2, !dbg !29
  %187 = fptrunc float %186 to half, !dbg !29
  %188 = extractelement <8 x float> %178, i64 3, !dbg !29
  %189 = fptrunc float %188 to half, !dbg !29
  %190 = extractelement <8 x float> %178, i64 4, !dbg !29
  %191 = fptrunc float %190 to half, !dbg !29
  %192 = extractelement <8 x float> %178, i64 5, !dbg !29
  %193 = fptrunc float %192 to half, !dbg !29
  %194 = extractelement <8 x float> %178, i64 6, !dbg !29
  %195 = fptrunc float %194 to half, !dbg !29
  %196 = extractelement <8 x float> %178, i64 7, !dbg !29
  %197 = fptrunc float %196 to half, !dbg !29
  %198 = insertelement <2 x half> poison, half %183, i64 0, !dbg !29
  %199 = insertelement <2 x half> %198, half %185, i64 1, !dbg !29
  %200 = bitcast <2 x half> %199 to i32, !dbg !29
  %201 = insertelement <2 x half> poison, half %187, i64 0, !dbg !29
  %202 = insertelement <2 x half> %201, half %189, i64 1, !dbg !29
  %203 = bitcast <2 x half> %202 to i32, !dbg !29
  %204 = insertelement <2 x half> poison, half %191, i64 0, !dbg !29
  %205 = insertelement <2 x half> %204, half %193, i64 1, !dbg !29
  %206 = bitcast <2 x half> %205 to i32, !dbg !29
  %207 = insertelement <2 x half> poison, half %195, i64 0, !dbg !29
  %208 = insertelement <2 x half> %207, half %197, i64 1, !dbg !29
  %209 = bitcast <2 x half> %208 to i32, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %200, i32 %203, i32 %206, i32 %209, ptr addrspace(1) %137, i1 %15) #5, !dbg !29
  %210 = lshr i32 %12, 5, !dbg !11
  %211 = and i32 %12, 1, !dbg !11
  %shift = shufflevector <8 x float> %181, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %212 = fadd <8 x float> %181, %shift, !dbg !32
  %shift55 = shufflevector <8 x float> %181, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %213 = fadd <8 x float> %shift55, %212, !dbg !32
  %shift56 = shufflevector <8 x float> %181, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %214 = fadd <8 x float> %shift56, %213, !dbg !32
  %shift57 = shufflevector <8 x float> %181, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %215 = fadd <8 x float> %shift57, %214, !dbg !32
  %shift58 = shufflevector <8 x float> %181, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %216 = fadd <8 x float> %shift58, %215, !dbg !32
  %shift59 = shufflevector <8 x float> %181, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %217 = fadd <8 x float> %shift59, %216, !dbg !32
  %shift60 = shufflevector <8 x float> %181, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %218 = fadd <8 x float> %shift60, %217, !dbg !32
  %219 = extractelement <8 x float> %218, i64 0, !dbg !32
  %220 = bitcast float %219 to i32, !dbg !37
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 16, i32 31), !dbg !37
  %222 = bitcast i32 %221 to float, !dbg !37
  %223 = fadd float %219, %222, !dbg !32
  %224 = bitcast float %223 to i32, !dbg !37
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 8, i32 31), !dbg !37
  %226 = bitcast i32 %225 to float, !dbg !37
  %227 = fadd float %223, %226, !dbg !32
  %228 = bitcast float %227 to i32, !dbg !37
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 4, i32 31), !dbg !37
  %230 = bitcast i32 %229 to float, !dbg !37
  %231 = fadd float %227, %230, !dbg !32
  %232 = bitcast float %231 to i32, !dbg !37
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 2, i32 31), !dbg !37
  %234 = bitcast i32 %233 to float, !dbg !37
  %235 = fadd float %231, %234, !dbg !32
  %236 = bitcast float %235 to i32, !dbg !37
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 1, i32 31), !dbg !37
  %238 = bitcast i32 %237 to float, !dbg !37
  %239 = fadd float %235, %238, !dbg !32
  %240 = and i32 %210, 7, !dbg !37
  %241 = icmp eq i32 %22, 0, !dbg !37
  %242 = lshr exact i32 %13, 5, !dbg !37
  %243 = or disjoint i32 %242, %240, !dbg !37
  %244 = getelementptr float, ptr addrspace(3) @global_smem, i32 %243, !dbg !37
  %245 = bitcast float %239 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %245, i1 %241) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %246 = icmp slt i32 %12, 16, !dbg !37
  %247 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !37
  %248 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %247, i1 %246) #5, !dbg !37
  %249 = bitcast i32 %248 to float, !dbg !37
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 4, i32 31), !dbg !37
  %251 = bitcast i32 %250 to float, !dbg !37
  %252 = fadd float %249, %251, !dbg !32
  %253 = bitcast float %252 to i32, !dbg !37
  %254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %253, i32 2, i32 31), !dbg !37
  %255 = bitcast i32 %254 to float, !dbg !37
  %256 = fadd float %252, %255, !dbg !32
  %257 = bitcast float %256 to i32, !dbg !37
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 1, i32 31), !dbg !37
  %259 = bitcast i32 %258 to float, !dbg !37
  %260 = fadd float %256, %259, !dbg !32
  %261 = and i32 %12, 7, !dbg !37
  %262 = icmp eq i32 %261, 0, !dbg !37
  %263 = and i1 %246, %262, !dbg !37
  %264 = bitcast float %260 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %264, i1 %263) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %265 = getelementptr float, ptr addrspace(3) @global_smem, i32 %242, !dbg !37
  %266 = load float, ptr addrspace(3) %265, align 16, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %267 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !38
  %268 = bitcast float %266 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %268, i1 true) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %269 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %211, !dbg !38
  %270 = load float, ptr addrspace(3) %269, align 4, !dbg !38
  %271 = tail call float @llvm.nvvm.div.full(float %270, float 4.096000e+03), !dbg !39
  %272 = tail call float @llvm.nvvm.div.full(float %266, float 4.096000e+03), !dbg !39
  %273 = fadd float %271, 0x3EE4F8B580000000, !dbg !40
  %274 = fadd float %272, 0x3EE4F8B580000000, !dbg !40
  %275 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not.i = icmp eq i32 %275, 0, !dbg !38
  br i1 %.not.i, label %278, label %276, !dbg !38

276:                                              ; preds = %9
  %277 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %273), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

278:                                              ; preds = %9
  %279 = tail call float @llvm.nvvm.rsqrt.approx.f(float %273), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %276, %278
  %.0.i = phi float [ %277, %276 ], [ %279, %278 ], !dbg !38
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %283 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %284 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %285 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %286 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %287 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not.i31 = icmp eq i32 %287, 0, !dbg !38
  br i1 %.not.i31, label %290, label %288, !dbg !38

288:                                              ; preds = %__nv_rsqrtf.exit
  %289 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %274), !dbg !38
  br label %__nv_rsqrtf.exit33, !dbg !38

290:                                              ; preds = %__nv_rsqrtf.exit
  %291 = tail call float @llvm.nvvm.rsqrt.approx.f(float %274), !dbg !38
  br label %__nv_rsqrtf.exit33, !dbg !38

__nv_rsqrtf.exit33:                               ; preds = %288, %290
  %.0.i32 = phi float [ %289, %288 ], [ %291, %290 ], !dbg !38
  %292 = shl i32 %12, 2, !dbg !14
  %293 = and i32 %292, 2044, !dbg !14
  %294 = or disjoint i32 %11, %211, !dbg !12
  %295 = icmp slt i32 %294, %6, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %296 = sext i32 %294 to i64, !dbg !42
  %297 = getelementptr float, ptr addrspace(1) %1, i64 %296, !dbg !42
  %298 = and i32 %12, 510, !dbg !43
  %299 = icmp eq i32 %298, 0, !dbg !43
  %300 = bitcast float %.0.i to i32, !dbg !43
  %301 = and i1 %299, %295, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %300, ptr addrspace(1) %297, i1 %301) #5, !dbg !43
  %302 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %293
  %303 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %17
  %304 = or disjoint i32 %17, 4
  %305 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %304
  %306 = zext nneg i32 %293 to i64, !dbg !44
  %307 = getelementptr half, ptr addrspace(1) %4, i64 %306, !dbg !45
  %308 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %307, i1 true) #5, !dbg !46
  %309 = extractvalue { i32, i32 } %308, 0, !dbg !46
  %310 = bitcast i32 %309 to <2 x half>, !dbg !46
  %311 = extractvalue { i32, i32 } %308, 1, !dbg !46
  %312 = bitcast i32 %311 to <2 x half>, !dbg !46
  %313 = extractelement <2 x half> %310, i64 0, !dbg !46
  %314 = extractelement <2 x half> %310, i64 1, !dbg !46
  %315 = extractelement <2 x half> %312, i64 0, !dbg !46
  %316 = extractelement <2 x half> %312, i64 1, !dbg !46
  %317 = fpext half %313 to float, !dbg !47
  %318 = fpext half %314 to float, !dbg !47
  %319 = fpext half %315 to float, !dbg !47
  %320 = fpext half %316 to float, !dbg !47
  %321 = sext i32 %19 to i64, !dbg !48
  %322 = getelementptr half, ptr addrspace(1) %0, i64 %321, !dbg !48
  %323 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %322, i1 %15) #5, !dbg !49
  %324 = extractvalue { i32, i32, i32, i32 } %323, 0, !dbg !49
  %325 = bitcast i32 %324 to <2 x half>, !dbg !49
  %326 = extractvalue { i32, i32, i32, i32 } %323, 1, !dbg !49
  %327 = bitcast i32 %326 to <2 x half>, !dbg !49
  %328 = extractvalue { i32, i32, i32, i32 } %323, 2, !dbg !49
  %329 = bitcast i32 %328 to <2 x half>, !dbg !49
  %330 = extractvalue { i32, i32, i32, i32 } %323, 3, !dbg !49
  %331 = bitcast i32 %330 to <2 x half>, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %332 = bitcast float %317 to i32, !dbg !50
  %333 = bitcast float %318 to i32, !dbg !50
  %334 = bitcast float %319 to i32, !dbg !50
  %335 = bitcast float %320 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %302, i32 %332, i32 %333, i32 %334, i32 %335, i1 true) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %336 = getelementptr inbounds nuw i8, ptr addrspace(3) %303, i32 8, !dbg !50
  %337 = getelementptr inbounds nuw i8, ptr addrspace(3) %305, i32 8, !dbg !50
  %338 = getelementptr half, ptr addrspace(1) %5, i64 %321, !dbg !51
  %339 = fpext <2 x half> %325 to <2 x float>, !dbg !52
  %340 = insertelement <2 x float> poison, float %.0.i32, i64 0, !dbg !53
  %341 = shufflevector <2 x float> %340, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %342 = fmul <2 x float> %341, %339, !dbg !53
  %343 = load <2 x float>, ptr addrspace(3) %303, align 16, !dbg !50
  %344 = fmul <2 x float> %343, %342, !dbg !50
  %345 = fptrunc <2 x float> %344 to <2 x half>, !dbg !54
  %346 = fpext <2 x half> %327 to <2 x float>, !dbg !52
  %347 = fmul <2 x float> %341, %346, !dbg !53
  %348 = load <2 x float>, ptr addrspace(3) %336, align 8, !dbg !50
  %349 = fmul <2 x float> %348, %347, !dbg !50
  %350 = fptrunc <2 x float> %349 to <2 x half>, !dbg !54
  %351 = fpext <2 x half> %329 to <2 x float>, !dbg !52
  %352 = fmul <2 x float> %341, %351, !dbg !53
  %353 = load <2 x float>, ptr addrspace(3) %305, align 16, !dbg !50
  %354 = fmul <2 x float> %352, %353, !dbg !50
  %355 = fptrunc <2 x float> %354 to <2 x half>, !dbg !54
  %356 = fpext <2 x half> %331 to <2 x float>, !dbg !52
  %357 = fmul <2 x float> %341, %356, !dbg !53
  %358 = load <2 x float>, ptr addrspace(3) %337, align 8, !dbg !50
  %359 = fmul <2 x float> %357, %358, !dbg !50
  %360 = fptrunc <2 x float> %359 to <2 x half>, !dbg !54
  %361 = bitcast <2 x half> %345 to i32, !dbg !54
  %362 = bitcast <2 x half> %350 to i32, !dbg !54
  %363 = bitcast <2 x half> %355 to i32, !dbg !54
  %364 = bitcast <2 x half> %360 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %361, i32 %362, i32 %363, i32 %364, ptr addrspace(1) %338, i1 %15) #5, !dbg !54
  %365 = or disjoint i64 %306, 2048, !dbg !55
  %366 = getelementptr half, ptr addrspace(1) %4, i64 %365, !dbg !45
  %367 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %366, i1 true) #5, !dbg !46
  %368 = extractvalue { i32, i32 } %367, 0, !dbg !46
  %369 = bitcast i32 %368 to <2 x half>, !dbg !46
  %370 = extractvalue { i32, i32 } %367, 1, !dbg !46
  %371 = bitcast i32 %370 to <2 x half>, !dbg !46
  %372 = extractelement <2 x half> %369, i64 0, !dbg !46
  %373 = extractelement <2 x half> %369, i64 1, !dbg !46
  %374 = extractelement <2 x half> %371, i64 0, !dbg !46
  %375 = extractelement <2 x half> %371, i64 1, !dbg !46
  %376 = fpext half %372 to float, !dbg !47
  %377 = fpext half %373 to float, !dbg !47
  %378 = fpext half %374 to float, !dbg !47
  %379 = fpext half %375 to float, !dbg !47
  %380 = or disjoint i32 %19, 2048, !dbg !56
  %381 = sext i32 %380 to i64, !dbg !48
  %382 = getelementptr half, ptr addrspace(1) %0, i64 %381, !dbg !48
  %383 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %382, i1 %15) #5, !dbg !49
  %384 = extractvalue { i32, i32, i32, i32 } %383, 0, !dbg !49
  %385 = bitcast i32 %384 to <2 x half>, !dbg !49
  %386 = extractvalue { i32, i32, i32, i32 } %383, 1, !dbg !49
  %387 = bitcast i32 %386 to <2 x half>, !dbg !49
  %388 = extractvalue { i32, i32, i32, i32 } %383, 2, !dbg !49
  %389 = bitcast i32 %388 to <2 x half>, !dbg !49
  %390 = extractvalue { i32, i32, i32, i32 } %383, 3, !dbg !49
  %391 = bitcast i32 %390 to <2 x half>, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %392 = bitcast float %376 to i32, !dbg !50
  %393 = bitcast float %377 to i32, !dbg !50
  %394 = bitcast float %378 to i32, !dbg !50
  %395 = bitcast float %379 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %302, i32 %392, i32 %393, i32 %394, i32 %395, i1 true) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %396 = getelementptr half, ptr addrspace(1) %5, i64 %381, !dbg !51
  %397 = fpext <2 x half> %385 to <2 x float>, !dbg !52
  %398 = fmul <2 x float> %341, %397, !dbg !53
  %399 = load <2 x float>, ptr addrspace(3) %303, align 16, !dbg !50
  %400 = fmul <2 x float> %399, %398, !dbg !50
  %401 = fptrunc <2 x float> %400 to <2 x half>, !dbg !54
  %402 = fpext <2 x half> %387 to <2 x float>, !dbg !52
  %403 = fmul <2 x float> %341, %402, !dbg !53
  %404 = load <2 x float>, ptr addrspace(3) %336, align 8, !dbg !50
  %405 = fmul <2 x float> %404, %403, !dbg !50
  %406 = fptrunc <2 x float> %405 to <2 x half>, !dbg !54
  %407 = fpext <2 x half> %389 to <2 x float>, !dbg !52
  %408 = fmul <2 x float> %341, %407, !dbg !53
  %409 = load <2 x float>, ptr addrspace(3) %305, align 16, !dbg !50
  %410 = fmul <2 x float> %408, %409, !dbg !50
  %411 = fptrunc <2 x float> %410 to <2 x half>, !dbg !54
  %412 = fpext <2 x half> %391 to <2 x float>, !dbg !52
  %413 = fmul <2 x float> %341, %412, !dbg !53
  %414 = load <2 x float>, ptr addrspace(3) %337, align 8, !dbg !50
  %415 = fmul <2 x float> %413, %414, !dbg !50
  %416 = fptrunc <2 x float> %415 to <2 x half>, !dbg !54
  %417 = bitcast <2 x half> %401 to i32, !dbg !54
  %418 = bitcast <2 x half> %406 to i32, !dbg !54
  %419 = bitcast <2 x half> %411 to i32, !dbg !54
  %420 = bitcast <2 x half> %416 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %417, i32 %418, i32 %419, i32 %420, ptr addrspace(1) %396, i1 %15) #5, !dbg !54
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cirveghol7wjrq7zwkkgu3sphruzjhq4ru5zcvmudgaexdo5niag.py", directory: "./local_cache/ir")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 44, column: 48, scope: !6)
!17 = !DILocation(line: 35, column: 34, scope: !6)
!18 = !DILocation(line: 35, column: 51, scope: !6)
!19 = !DILocation(line: 36, column: 34, scope: !6)
!20 = !DILocation(line: 36, column: 51, scope: !6)
!21 = !DILocation(line: 37, column: 38, scope: !6)
!22 = !DILocation(line: 37, column: 55, scope: !6)
!23 = !DILocation(line: 35, column: 113, scope: !6)
!24 = !DILocation(line: 36, column: 113, scope: !6)
!25 = !DILocation(line: 37, column: 117, scope: !6)
!26 = !DILocation(line: 38, column: 22, scope: !6)
!27 = !DILocation(line: 39, column: 22, scope: !6)
!28 = !DILocation(line: 41, column: 22, scope: !6)
!29 = !DILocation(line: 45, column: 55, scope: !6)
!30 = !DILocation(line: 35, column: 41, scope: !6)
!31 = !DILocation(line: 43, column: 23, scope: !6)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !36)
!33 = distinct !DILexicalBlockFile(scope: !35, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!35 = distinct !DILexicalBlockFile(scope: !6, file: !34, discriminator: 0)
!36 = !DILocation(line: 46, column: 25, scope: !6)
!37 = !DILocation(line: 286, column: 36, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 51, column: 28, scope: !6)
!39 = !DILocation(line: 48, column: 20, scope: !6)
!40 = !DILocation(line: 50, column: 20, scope: !6)
!41 = !DILocation(line: 52, column: 4, scope: !6)
!42 = !DILocation(line: 53, column: 28, scope: !6)
!43 = !DILocation(line: 53, column: 40, scope: !6)
!44 = !DILocation(line: 54, column: 40, scope: !6)
!45 = !DILocation(line: 60, column: 35, scope: !6)
!46 = !DILocation(line: 60, column: 42, scope: !6)
!47 = !DILocation(line: 60, column: 95, scope: !6)
!48 = !DILocation(line: 61, column: 39, scope: !6)
!49 = !DILocation(line: 61, column: 56, scope: !6)
!50 = !DILocation(line: 65, column: 24, scope: !6)
!51 = !DILocation(line: 66, column: 29, scope: !6)
!52 = !DILocation(line: 61, column: 118, scope: !6)
!53 = !DILocation(line: 63, column: 24, scope: !6)
!54 = !DILocation(line: 66, column: 53, scope: !6)
!55 = !DILocation(line: 55, column: 31, scope: !6)
!56 = !DILocation(line: 61, column: 46, scope: !6)
!57 = !DILocation(line: 54, column: 4, scope: !6)
