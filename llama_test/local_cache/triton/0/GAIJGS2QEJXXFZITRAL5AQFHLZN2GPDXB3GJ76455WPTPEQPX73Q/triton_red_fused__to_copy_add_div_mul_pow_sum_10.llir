; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_red_fused__to_copy_add_div_mul_pow_sum_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = shl i32 %11, 4, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %14 = lshr i32 %13, 4, !dbg !11
  %15 = and i32 %14, 15, !dbg !11
  %16 = or disjoint i32 %15, %12, !dbg !12
  %17 = icmp slt i32 %16, %7, !dbg !13
  %18 = shl i32 %13, 2, !dbg !14
  %19 = and i32 %18, 60, !dbg !14
  %20 = shl i32 %16, 12, !dbg !15
  %invariant.op = or disjoint i32 %19, %20, !dbg !16
  %21 = zext nneg i32 %19 to i64, !dbg !16
  br label %22, !dbg !16

22:                                               ; preds = %10, %22
  %indvars.iv = phi i64 [ 0, %10 ], [ %indvars.iv.next, %22 ]
  %23 = phi float [ 0.000000e+00, %10 ], [ %120, %22 ]
  %24 = phi float [ 0.000000e+00, %10 ], [ %121, %22 ]
  %25 = phi float [ 0.000000e+00, %10 ], [ %122, %22 ]
  %26 = phi float [ 0.000000e+00, %10 ], [ %123, %22 ]
  %27 = or disjoint i64 %indvars.iv, %21, !dbg !17
  %28 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %28
  %29 = sext i32 %.reass to i64, !dbg !18
  %30 = getelementptr half, ptr addrspace(1) %1, i64 %29, !dbg !18
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %30, i1 %17) #2, !dbg !19
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !19
  %33 = bitcast i32 %32 to <2 x half>, !dbg !19
  %34 = extractvalue { i32, i32 } %31, 1, !dbg !19
  %35 = bitcast i32 %34 to <2 x half>, !dbg !19
  %36 = extractelement <2 x half> %33, i64 0, !dbg !19
  %37 = extractelement <2 x half> %33, i64 1, !dbg !19
  %38 = extractelement <2 x half> %35, i64 0, !dbg !19
  %39 = extractelement <2 x half> %35, i64 1, !dbg !19
  %40 = fpext half %36 to float, !dbg !20
  %41 = fpext half %37 to float, !dbg !20
  %42 = fpext half %38 to float, !dbg !20
  %43 = fpext half %39 to float, !dbg !20
  %44 = getelementptr half, ptr addrspace(1) %2, i64 %29, !dbg !21
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %44, i1 %17) #2, !dbg !22
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !22
  %47 = bitcast i32 %46 to <2 x half>, !dbg !22
  %48 = extractvalue { i32, i32 } %45, 1, !dbg !22
  %49 = bitcast i32 %48 to <2 x half>, !dbg !22
  %50 = extractelement <2 x half> %47, i64 0, !dbg !22
  %51 = extractelement <2 x half> %47, i64 1, !dbg !22
  %52 = extractelement <2 x half> %49, i64 0, !dbg !22
  %53 = extractelement <2 x half> %49, i64 1, !dbg !22
  %54 = fpext half %50 to float, !dbg !23
  %55 = fpext half %51 to float, !dbg !23
  %56 = fpext half %52 to float, !dbg !23
  %57 = fpext half %53 to float, !dbg !23
  %58 = getelementptr half, ptr addrspace(1) %3, i64 %29, !dbg !24
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %58, i1 %17) #2, !dbg !25
  %60 = extractvalue { i32, i32 } %59, 0, !dbg !25
  %61 = bitcast i32 %60 to <2 x half>, !dbg !25
  %62 = extractvalue { i32, i32 } %59, 1, !dbg !25
  %63 = bitcast i32 %62 to <2 x half>, !dbg !25
  %64 = extractelement <2 x half> %61, i64 0, !dbg !25
  %65 = extractelement <2 x half> %61, i64 1, !dbg !25
  %66 = extractelement <2 x half> %63, i64 0, !dbg !25
  %67 = extractelement <2 x half> %63, i64 1, !dbg !25
  %68 = fpext half %64 to float, !dbg !26
  %69 = fpext half %65 to float, !dbg !26
  %70 = fpext half %66 to float, !dbg !26
  %71 = fpext half %67 to float, !dbg !26
  %72 = getelementptr half, ptr addrspace(1) %4, i64 %27, !dbg !27
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %72, i1 true) #2, !dbg !28
  %74 = extractvalue { i32, i32 } %73, 0, !dbg !28
  %75 = bitcast i32 %74 to <2 x half>, !dbg !28
  %76 = extractvalue { i32, i32 } %73, 1, !dbg !28
  %77 = bitcast i32 %76 to <2 x half>, !dbg !28
  %78 = extractelement <2 x half> %75, i64 0, !dbg !28
  %79 = extractelement <2 x half> %75, i64 1, !dbg !28
  %80 = extractelement <2 x half> %77, i64 0, !dbg !28
  %81 = extractelement <2 x half> %77, i64 1, !dbg !28
  %82 = fpext half %78 to float, !dbg !29
  %83 = fpext half %79 to float, !dbg !29
  %84 = fpext half %80 to float, !dbg !29
  %85 = fpext half %81 to float, !dbg !29
  %86 = getelementptr half, ptr addrspace(1) %5, i64 %29, !dbg !30
  %87 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %86, i1 %17) #2, !dbg !31
  %88 = extractvalue { i32, i32 } %87, 0, !dbg !31
  %89 = bitcast i32 %88 to <2 x half>, !dbg !31
  %90 = extractvalue { i32, i32 } %87, 1, !dbg !31
  %91 = bitcast i32 %90 to <2 x half>, !dbg !31
  %92 = extractelement <2 x half> %89, i64 0, !dbg !31
  %93 = extractelement <2 x half> %89, i64 1, !dbg !31
  %94 = extractelement <2 x half> %91, i64 0, !dbg !31
  %95 = extractelement <2 x half> %91, i64 1, !dbg !31
  %96 = fpext half %92 to float, !dbg !32
  %97 = fpext half %93 to float, !dbg !32
  %98 = fpext half %94 to float, !dbg !32
  %99 = fpext half %95 to float, !dbg !32
  %100 = fadd float %40, %54, !dbg !33
  %101 = fadd float %41, %55, !dbg !33
  %102 = fadd float %42, %56, !dbg !33
  %103 = fadd float %43, %57, !dbg !33
  %104 = fadd float %100, %68, !dbg !34
  %105 = fadd float %101, %69, !dbg !34
  %106 = fadd float %102, %70, !dbg !34
  %107 = fadd float %103, %71, !dbg !34
  %108 = fmul float %104, %82, !dbg !35
  %109 = fmul float %105, %83, !dbg !35
  %110 = fmul float %106, %84, !dbg !35
  %111 = fmul float %107, %85, !dbg !35
  %112 = fmul float %108, %96, !dbg !36
  %113 = fmul float %109, %97, !dbg !36
  %114 = fmul float %110, %98, !dbg !36
  %115 = fmul float %111, %99, !dbg !36
  %116 = fadd float %23, %112, !dbg !37
  %117 = fadd float %24, %113, !dbg !37
  %118 = fadd float %25, %114, !dbg !37
  %119 = fadd float %26, %115, !dbg !37
  %120 = select i1 %17, float %116, float %23, !dbg !38
  %121 = select i1 %17, float %117, float %24, !dbg !38
  %122 = select i1 %17, float %118, float %25, !dbg !38
  %123 = select i1 %17, float %119, float %26, !dbg !38
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !16
  %124 = icmp samesign ult i64 %indvars.iv, 4032, !dbg !16
  br i1 %124, label %22, label %125, !dbg !16

125:                                              ; preds = %22
  %126 = fadd float %120, %121, !dbg !39
  %127 = fadd float %122, %126, !dbg !39
  %128 = fadd float %123, %127, !dbg !39
  %129 = bitcast float %128 to i32, !dbg !44
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 8, i32 31), !dbg !44
  %131 = bitcast i32 %130 to float, !dbg !44
  %132 = fadd float %128, %131, !dbg !39
  %133 = bitcast float %132 to i32, !dbg !44
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 4, i32 31), !dbg !44
  %135 = bitcast i32 %134 to float, !dbg !44
  %136 = fadd float %132, %135, !dbg !39
  %137 = bitcast float %136 to i32, !dbg !44
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 2, i32 31), !dbg !44
  %139 = bitcast i32 %138 to float, !dbg !44
  %140 = fadd float %136, %139, !dbg !39
  %141 = bitcast float %140 to i32, !dbg !44
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 1, i32 31), !dbg !44
  %143 = bitcast i32 %142 to float, !dbg !44
  %144 = fadd float %140, %143, !dbg !39
  %145 = sext i32 %16 to i64, !dbg !45
  %146 = getelementptr float, ptr addrspace(1) %6, i64 %145, !dbg !45
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %17) #2, !dbg !46
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %17) #2, !dbg !46
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %17) #2, !dbg !46
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %17) #2, !dbg !46
  %151 = bitcast i32 %150 to float, !dbg !46
  %152 = fmul float %144, -5.000000e-01, !dbg !47
  %153 = fmul float %151, %151, !dbg !48
  %154 = fmul float %153, %151, !dbg !49
  %155 = fmul float %152, %154, !dbg !50
  %156 = fmul float %155, 0x3F30000000000000, !dbg !51
  %157 = insertelement <2 x float> poison, float %151, i64 0, !dbg !52
  %158 = shufflevector <2 x float> %157, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %159 = insertelement <2 x float> poison, float %156, i64 0, !dbg !53
  %160 = shufflevector <2 x float> %159, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  br label %161, !dbg !54

161:                                              ; preds = %125, %161
  %indvars.iv7 = phi i64 [ 0, %125 ], [ %indvars.iv.next8, %161 ]
  %162 = or disjoint i64 %indvars.iv7, %21, !dbg !55
  %163 = trunc nuw nsw i64 %indvars.iv7 to i32
  %.reass3 = or i32 %invariant.op, %163
  %164 = sext i32 %.reass3 to i64, !dbg !56
  %165 = getelementptr half, ptr addrspace(1) %0, i64 %164, !dbg !56
  %166 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %165, i1 %17) #2, !dbg !57
  %167 = extractvalue { i32, i32 } %166, 0, !dbg !57
  %168 = bitcast i32 %167 to <2 x half>, !dbg !57
  %169 = extractvalue { i32, i32 } %166, 1, !dbg !57
  %170 = bitcast i32 %169 to <2 x half>, !dbg !57
  %171 = getelementptr half, ptr addrspace(1) %1, i64 %164, !dbg !58
  %172 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %171, i1 %17) #2, !dbg !59
  %173 = extractvalue { i32, i32 } %172, 0, !dbg !59
  %174 = bitcast i32 %173 to <2 x half>, !dbg !59
  %175 = extractvalue { i32, i32 } %172, 1, !dbg !59
  %176 = bitcast i32 %175 to <2 x half>, !dbg !59
  %177 = getelementptr half, ptr addrspace(1) %2, i64 %164, !dbg !60
  %178 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %177, i1 %17) #2, !dbg !61
  %179 = extractvalue { i32, i32 } %178, 0, !dbg !61
  %180 = bitcast i32 %179 to <2 x half>, !dbg !61
  %181 = extractvalue { i32, i32 } %178, 1, !dbg !61
  %182 = bitcast i32 %181 to <2 x half>, !dbg !61
  %183 = getelementptr half, ptr addrspace(1) %3, i64 %164, !dbg !62
  %184 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %183, i1 %17) #2, !dbg !63
  %185 = extractvalue { i32, i32 } %184, 0, !dbg !63
  %186 = bitcast i32 %185 to <2 x half>, !dbg !63
  %187 = extractvalue { i32, i32 } %184, 1, !dbg !63
  %188 = bitcast i32 %187 to <2 x half>, !dbg !63
  %189 = getelementptr half, ptr addrspace(1) %4, i64 %162, !dbg !64
  %190 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %189, i1 true) #2, !dbg !65
  %191 = extractvalue { i32, i32 } %190, 0, !dbg !65
  %192 = bitcast i32 %191 to <2 x half>, !dbg !65
  %193 = extractvalue { i32, i32 } %190, 1, !dbg !65
  %194 = bitcast i32 %193 to <2 x half>, !dbg !65
  %195 = getelementptr half, ptr addrspace(1) %5, i64 %164, !dbg !66
  %196 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %195, i1 %17) #2, !dbg !67
  %197 = extractvalue { i32, i32 } %196, 0, !dbg !67
  %198 = bitcast i32 %197 to <2 x half>, !dbg !67
  %199 = extractvalue { i32, i32 } %196, 1, !dbg !67
  %200 = bitcast i32 %199 to <2 x half>, !dbg !67
  %201 = fpext <2 x half> %168 to <2 x float>, !dbg !68
  %202 = fpext <2 x half> %174 to <2 x float>, !dbg !69
  %203 = fpext <2 x half> %180 to <2 x float>, !dbg !70
  %204 = fpext <2 x half> %186 to <2 x float>, !dbg !71
  %205 = fpext <2 x half> %192 to <2 x float>, !dbg !72
  %206 = fpext <2 x half> %198 to <2 x float>, !dbg !73
  %207 = fadd <2 x float> %202, %203, !dbg !74
  %208 = fadd <2 x float> %207, %204, !dbg !75
  %209 = fmul <2 x float> %208, %205, !dbg !76
  %210 = fmul <2 x float> %209, %158, !dbg !52
  %211 = fmul <2 x float> %206, splat (float 2.000000e+00), !dbg !77
  %212 = fmul <2 x float> %160, %211, !dbg !53
  %213 = fadd <2 x float> %210, %212, !dbg !78
  %214 = fadd <2 x float> %213, %201, !dbg !79
  %215 = fptrunc <2 x float> %214 to <2 x half>, !dbg !80
  %216 = fpext <2 x half> %170 to <2 x float>, !dbg !68
  %217 = fpext <2 x half> %176 to <2 x float>, !dbg !69
  %218 = fpext <2 x half> %182 to <2 x float>, !dbg !70
  %219 = fpext <2 x half> %188 to <2 x float>, !dbg !71
  %220 = fpext <2 x half> %194 to <2 x float>, !dbg !72
  %221 = fpext <2 x half> %200 to <2 x float>, !dbg !73
  %222 = fadd <2 x float> %217, %218, !dbg !74
  %223 = fadd <2 x float> %222, %219, !dbg !75
  %224 = fmul <2 x float> %223, %220, !dbg !76
  %225 = fmul <2 x float> %224, %158, !dbg !52
  %226 = fmul <2 x float> %221, splat (float 2.000000e+00), !dbg !77
  %227 = fmul <2 x float> %160, %226, !dbg !53
  %228 = fadd <2 x float> %225, %227, !dbg !78
  %229 = fadd <2 x float> %228, %216, !dbg !79
  %230 = fptrunc <2 x float> %229 to <2 x half>, !dbg !80
  %231 = bitcast <2 x half> %215 to i32, !dbg !80
  %232 = bitcast <2 x half> %230 to i32, !dbg !80
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %231, i32 %232, ptr addrspace(1) %165, i1 %17) #2, !dbg !80
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 64, !dbg !54
  %233 = icmp samesign ult i64 %indvars.iv7, 4032, !dbg !54
  br i1 %233, label %161, label %234, !dbg !54

234:                                              ; preds = %161
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ca52bl5squdroeaanlxdwl3jwdjj2wexli2lmyaxagznldaazf2w.py", directory: "./local_cache/a5")
!4 = !{ptr @triton_red_fused__to_copy_add_div_mul_pow_sum_10, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_mul_pow_sum_10", linkageName: "triton_red_fused__to_copy_add_div_mul_pow_sum_10", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 29, column: 40, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 35, column: 34, scope: !6)
!19 = !DILocation(line: 35, column: 51, scope: !6)
!20 = !DILocation(line: 35, column: 112, scope: !6)
!21 = !DILocation(line: 36, column: 34, scope: !6)
!22 = !DILocation(line: 36, column: 51, scope: !6)
!23 = !DILocation(line: 36, column: 112, scope: !6)
!24 = !DILocation(line: 37, column: 34, scope: !6)
!25 = !DILocation(line: 37, column: 51, scope: !6)
!26 = !DILocation(line: 37, column: 112, scope: !6)
!27 = !DILocation(line: 38, column: 34, scope: !6)
!28 = !DILocation(line: 38, column: 41, scope: !6)
!29 = !DILocation(line: 38, column: 94, scope: !6)
!30 = !DILocation(line: 39, column: 34, scope: !6)
!31 = !DILocation(line: 39, column: 51, scope: !6)
!32 = !DILocation(line: 39, column: 112, scope: !6)
!33 = !DILocation(line: 40, column: 22, scope: !6)
!34 = !DILocation(line: 41, column: 22, scope: !6)
!35 = !DILocation(line: 42, column: 22, scope: !6)
!36 = !DILocation(line: 45, column: 23, scope: !6)
!37 = !DILocation(line: 47, column: 25, scope: !6)
!38 = !DILocation(line: 48, column: 50, scope: !6)
!39 = !DILocation(line: 256, column: 15, scope: !40, inlinedAt: !43)
!40 = distinct !DILexicalBlockFile(scope: !42, file: !41, discriminator: 0)
!41 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!42 = distinct !DILexicalBlockFile(scope: !6, file: !41, discriminator: 0)
!43 = !DILocation(line: 49, column: 27, scope: !6)
!44 = !DILocation(line: 286, column: 36, scope: !42, inlinedAt: !43)
!45 = !DILocation(line: 50, column: 31, scope: !6)
!46 = !DILocation(line: 50, column: 36, scope: !6)
!47 = !DILocation(line: 69, column: 24, scope: !6)
!48 = !DILocation(line: 70, column: 24, scope: !6)
!49 = !DILocation(line: 71, column: 24, scope: !6)
!50 = !DILocation(line: 72, column: 24, scope: !6)
!51 = !DILocation(line: 74, column: 24, scope: !6)
!52 = !DILocation(line: 67, column: 24, scope: !6)
!53 = !DILocation(line: 78, column: 24, scope: !6)
!54 = !DILocation(line: 51, column: 40, scope: !6)
!55 = !DILocation(line: 52, column: 31, scope: !6)
!56 = !DILocation(line: 57, column: 39, scope: !6)
!57 = !DILocation(line: 57, column: 56, scope: !6)
!58 = !DILocation(line: 58, column: 35, scope: !6)
!59 = !DILocation(line: 58, column: 52, scope: !6)
!60 = !DILocation(line: 59, column: 35, scope: !6)
!61 = !DILocation(line: 59, column: 52, scope: !6)
!62 = !DILocation(line: 60, column: 35, scope: !6)
!63 = !DILocation(line: 60, column: 52, scope: !6)
!64 = !DILocation(line: 61, column: 35, scope: !6)
!65 = !DILocation(line: 61, column: 42, scope: !6)
!66 = !DILocation(line: 62, column: 35, scope: !6)
!67 = !DILocation(line: 62, column: 52, scope: !6)
!68 = !DILocation(line: 57, column: 118, scope: !6)
!69 = !DILocation(line: 58, column: 114, scope: !6)
!70 = !DILocation(line: 59, column: 114, scope: !6)
!71 = !DILocation(line: 60, column: 114, scope: !6)
!72 = !DILocation(line: 61, column: 95, scope: !6)
!73 = !DILocation(line: 62, column: 114, scope: !6)
!74 = !DILocation(line: 63, column: 24, scope: !6)
!75 = !DILocation(line: 64, column: 24, scope: !6)
!76 = !DILocation(line: 65, column: 24, scope: !6)
!77 = !DILocation(line: 77, column: 24, scope: !6)
!78 = !DILocation(line: 79, column: 24, scope: !6)
!79 = !DILocation(line: 81, column: 24, scope: !6)
!80 = !DILocation(line: 82, column: 56, scope: !6)
!81 = !DILocation(line: 51, column: 4, scope: !6)
