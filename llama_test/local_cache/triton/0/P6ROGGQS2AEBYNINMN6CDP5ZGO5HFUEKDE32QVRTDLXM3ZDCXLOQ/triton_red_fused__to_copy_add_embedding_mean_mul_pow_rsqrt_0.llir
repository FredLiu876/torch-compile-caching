; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [73 x i8] c"./local_cache/us/cusn5r4ftncl7gqsiixg3hw3ojcfuvaqdhezlxblwecnlckjkjne.py\00"
@assertMessage_0 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp4 < 128256\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !10 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 5, !dbg !12
  %.lobit2 = lshr i32 %11, 7, !dbg !12
  %13 = and i32 %.lobit2, 3, !dbg !12
  %14 = and i32 %11, 31, !dbg !12
  %15 = and i32 %11, 3, !dbg !12
  %16 = shl i32 %11, 2, !dbg !13
  %17 = and i32 %16, 508, !dbg !13
  %18 = and i32 %11, 511, !dbg !13
  %19 = shl i32 %10, 2, !dbg !14
  %20 = or disjoint i32 %13, %19, !dbg !15
  %21 = or disjoint i32 %19, 1, !dbg !15
  %22 = or disjoint i32 %19, 2, !dbg !15
  %23 = or disjoint i32 %19, 3, !dbg !15
  %24 = or disjoint i32 %19, %15, !dbg !15
  %25 = icmp slt i32 %20, %6, !dbg !16
  %26 = insertelement <4 x i32> poison, i32 %19, i64 0, !dbg !16
  %27 = insertelement <4 x i32> %26, i32 %21, i64 1, !dbg !16
  %28 = insertelement <4 x i32> %27, i32 %22, i64 2, !dbg !16
  %29 = insertelement <4 x i32> %28, i32 %23, i64 3, !dbg !16
  %30 = insertelement <4 x i32> poison, i32 %6, i64 0, !dbg !16
  %31 = shufflevector <4 x i32> %30, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !16
  %32 = icmp slt <4 x i32> %29, %31, !dbg !16
  %33 = icmp slt i32 %24, %6, !dbg !16
  %34 = sext i32 %20 to i64, !dbg !17
  %35 = getelementptr i64, ptr addrspace(1) %1, i64 %34, !dbg !17
  %36 = sext i32 %19 to i64, !dbg !17
  %37 = getelementptr i64, ptr addrspace(1) %1, i64 %36, !dbg !17
  %38 = sext i32 %21 to i64, !dbg !17
  %39 = getelementptr i64, ptr addrspace(1) %1, i64 %38, !dbg !17
  %40 = sext i32 %22 to i64, !dbg !17
  %41 = getelementptr i64, ptr addrspace(1) %1, i64 %40, !dbg !17
  %42 = sext i32 %23 to i64, !dbg !17
  %43 = getelementptr i64, ptr addrspace(1) %1, i64 %42, !dbg !17
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 %25) #6, !dbg !18
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 %25) #6, !dbg !18
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 %25) #6, !dbg !18
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 %25) #6, !dbg !18
  %48 = extractelement <4 x i1> %32, i64 0, !dbg !18
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 %48) #6, !dbg !18
  %50 = extractelement <4 x i1> %32, i64 1, !dbg !18
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 %50) #6, !dbg !18
  %52 = extractelement <4 x i1> %32, i64 2, !dbg !18
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %52) #6, !dbg !18
  %54 = extractelement <4 x i1> %32, i64 3, !dbg !18
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 %54) #6, !dbg !18
  %56 = insertelement <4 x i64> poison, i64 %49, i64 0, !dbg !19
  %57 = insertelement <4 x i64> %56, i64 %51, i64 1, !dbg !19
  %58 = insertelement <4 x i64> %57, i64 %53, i64 2, !dbg !19
  %59 = insertelement <4 x i64> %58, i64 %55, i64 3, !dbg !19
  %60 = add <4 x i64> %59, splat (i64 128256), !dbg !19
  %61 = icmp slt i64 %47, 0, !dbg !20
  %62 = icmp slt <4 x i64> %59, zeroinitializer, !dbg !20
  %63 = select <4 x i1> %62, <4 x i64> %60, <4 x i64> %59, !dbg !21
  %64 = icmp ugt <4 x i64> %63, splat (i64 128255), !dbg !22
  %65 = and <4 x i1> %32, %64, !dbg !23
  %66 = shl i64 %47, 12, !dbg !24
  %67 = add i64 %66, 525336576, !dbg !24
  %68 = select i1 %61, i64 %67, i64 %66, !dbg !24
  %69 = shl i32 %20, 12, !dbg !25
  %70 = bitcast <4 x i1> %65 to i4
  %.not = icmp eq i4 %70, 0
  %invariant.op = or disjoint i32 %17, %69, !dbg !26
  %71 = getelementptr half, ptr addrspace(1) %2, i64 %68
  br i1 %.not, label %.split.preheader, label %108, !dbg !27

.split.preheader:                                 ; preds = %9
  %72 = zext nneg i32 %17 to i64, !dbg !26
  br label %.split, !dbg !26

.split:                                           ; preds = %.split.preheader, %.split
  %indvars.iv = phi i64 [ 0, %.split.preheader ], [ %indvars.iv.next, %.split ]
  %73 = phi float [ 0.000000e+00, %.split.preheader ], [ %100, %.split ]
  %74 = phi float [ 0.000000e+00, %.split.preheader ], [ %101, %.split ]
  %75 = phi float [ 0.000000e+00, %.split.preheader ], [ %102, %.split ]
  %76 = phi float [ 0.000000e+00, %.split.preheader ], [ %103, %.split ]
  %77 = or disjoint i64 %indvars.iv, %72, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %78 = getelementptr half, ptr addrspace(1) %71, i64 %77, !dbg !29
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %78, i1 %25) #6, !dbg !30
  %80 = extractvalue { i32, i32 } %79, 0, !dbg !30
  %81 = bitcast i32 %80 to <2 x half>, !dbg !30
  %82 = extractvalue { i32, i32 } %79, 1, !dbg !30
  %83 = bitcast i32 %82 to <2 x half>, !dbg !30
  %84 = extractelement <2 x half> %81, i64 0, !dbg !30
  %85 = extractelement <2 x half> %81, i64 1, !dbg !30
  %86 = extractelement <2 x half> %83, i64 0, !dbg !30
  %87 = extractelement <2 x half> %83, i64 1, !dbg !30
  %88 = fpext half %84 to float, !dbg !31
  %89 = fpext half %85 to float, !dbg !31
  %90 = fpext half %86 to float, !dbg !31
  %91 = fpext half %87 to float, !dbg !31
  %92 = fmul float %88, %88, !dbg !32
  %93 = fmul float %89, %89, !dbg !32
  %94 = fmul float %90, %90, !dbg !32
  %95 = fmul float %91, %91, !dbg !32
  %96 = fadd float %73, %92, !dbg !33
  %97 = fadd float %74, %93, !dbg !33
  %98 = fadd float %75, %94, !dbg !33
  %99 = fadd float %76, %95, !dbg !33
  %100 = select i1 %25, float %96, float %73, !dbg !34
  %101 = select i1 %25, float %97, float %74, !dbg !34
  %102 = select i1 %25, float %98, float %75, !dbg !34
  %103 = select i1 %25, float %99, float %76, !dbg !34
  %104 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %104
  %105 = sext i32 %.reass to i64, !dbg !35
  %106 = getelementptr half, ptr addrspace(1) %4, i64 %105, !dbg !35
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %80, i32 %82, ptr addrspace(1) %106, i1 %25) #6, !dbg !36
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !26
  %107 = icmp samesign ult i64 %indvars.iv, 3584, !dbg !26
  br i1 %107, label %.split, label %109, !dbg !26

108:                                              ; preds = %9
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !27
  unreachable, !dbg !27

109:                                              ; preds = %.split
  %110 = fadd float %100, %101, !dbg !37
  %111 = fadd float %102, %110, !dbg !37
  %112 = fadd float %103, %111, !dbg !37
  %113 = bitcast float %112 to i32, !dbg !42
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 16, i32 31), !dbg !42
  %115 = bitcast i32 %114 to float, !dbg !42
  %116 = fadd float %112, %115, !dbg !37
  %117 = bitcast float %116 to i32, !dbg !42
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 8, i32 31), !dbg !42
  %119 = bitcast i32 %118 to float, !dbg !42
  %120 = fadd float %116, %119, !dbg !37
  %121 = bitcast float %120 to i32, !dbg !42
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 4, i32 31), !dbg !42
  %123 = bitcast i32 %122 to float, !dbg !42
  %124 = fadd float %120, %123, !dbg !37
  %125 = bitcast float %124 to i32, !dbg !42
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 2, i32 31), !dbg !42
  %127 = bitcast i32 %126 to float, !dbg !42
  %128 = fadd float %124, %127, !dbg !37
  %129 = bitcast float %128 to i32, !dbg !42
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 1, i32 31), !dbg !42
  %131 = bitcast i32 %130 to float, !dbg !42
  %132 = fadd float %128, %131, !dbg !37
  %133 = and i32 %12, 3, !dbg !42
  %134 = icmp eq i32 %14, 0, !dbg !42
  %135 = shl nuw nsw i32 %13, 2, !dbg !42
  %136 = or disjoint i32 %135, %133, !dbg !42
  %137 = getelementptr float, ptr addrspace(3) @global_smem, i32 %136, !dbg !42
  %138 = bitcast float %132 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 %134) #6, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %139 = icmp slt i32 %11, 16, !dbg !42
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !42
  %141 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %140, i1 %139) #6, !dbg !42
  %142 = bitcast i32 %141 to float, !dbg !42
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 2, i32 31), !dbg !42
  %144 = bitcast i32 %143 to float, !dbg !42
  %145 = fadd float %142, %144, !dbg !37
  %146 = bitcast float %145 to i32, !dbg !42
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 1, i32 31), !dbg !42
  %148 = bitcast i32 %147 to float, !dbg !42
  %149 = fadd float %145, %148, !dbg !37
  %150 = icmp eq i32 %15, 0, !dbg !42
  %151 = and i1 %139, %150, !dbg !42
  %152 = bitcast float %149 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %152, i1 %151) #6, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i32 %135, !dbg !42
  %154 = load float, ptr addrspace(3) %153, align 16, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %155 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %13, !dbg !43
  %156 = bitcast float %154 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %156, i1 true) #6, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %157 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %15, !dbg !43
  %158 = load float, ptr addrspace(3) %157, align 4, !dbg !43
  %159 = tail call float @llvm.nvvm.div.full(float %158, float 4.096000e+03), !dbg !44
  %160 = tail call float @llvm.nvvm.div.full(float %154, float 4.096000e+03), !dbg !44
  %161 = fadd float %159, 0x3EE4F8B580000000, !dbg !45
  %162 = fadd float %160, 0x3EE4F8B580000000, !dbg !45
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %.not.i = icmp eq i32 %163, 0, !dbg !43
  br i1 %.not.i, label %166, label %164, !dbg !43

164:                                              ; preds = %109
  %165 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %161), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

166:                                              ; preds = %109
  %167 = tail call float @llvm.nvvm.rsqrt.approx.f(float %161), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

__nv_rsqrtf.exit:                                 ; preds = %164, %166
  %.0.i = phi float [ %165, %164 ], [ %167, %166 ], !dbg !43
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %.not.i20 = icmp eq i32 %171, 0, !dbg !43
  br i1 %.not.i20, label %174, label %172, !dbg !43

172:                                              ; preds = %__nv_rsqrtf.exit
  %173 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %162), !dbg !43
  br label %__nv_rsqrtf.exit22, !dbg !43

174:                                              ; preds = %__nv_rsqrtf.exit
  %175 = tail call float @llvm.nvvm.rsqrt.approx.f(float %162), !dbg !43
  br label %__nv_rsqrtf.exit22, !dbg !43

__nv_rsqrtf.exit22:                               ; preds = %172, %174
  %.0.i21 = phi float [ %173, %172 ], [ %175, %174 ], !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %176 = sext i32 %24 to i64, !dbg !47
  %177 = getelementptr float, ptr addrspace(1) %0, i64 %176, !dbg !47
  %178 = and i32 %11, 508, !dbg !48
  %179 = icmp eq i32 %178, 0, !dbg !48
  %180 = bitcast float %.0.i to i32, !dbg !48
  %181 = and i1 %179, %33, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %180, ptr addrspace(1) %177, i1 %181) #6, !dbg !48
  %182 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %18
  %183 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %17
  %184 = zext nneg i32 %18 to i64, !dbg !49
  %185 = getelementptr inbounds nuw i8, ptr addrspace(3) %183, i32 8
  %186 = insertelement <2 x float> poison, float %.0.i21, i64 0, !dbg !50
  %187 = shufflevector <2 x float> %186, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  br label %188, !dbg !49

188:                                              ; preds = %__nv_rsqrtf.exit22, %188
  %indvars.iv27 = phi i64 [ 0, %__nv_rsqrtf.exit22 ], [ %indvars.iv.next28, %188 ]
  %189 = or disjoint i64 %indvars.iv27, %184, !dbg !51
  %190 = getelementptr half, ptr addrspace(1) %3, i64 %189, !dbg !52
  %191 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %190, i1 true) #6, !dbg !53
  %192 = bitcast i16 %191 to half, !dbg !53
  %193 = fpext half %192 to float, !dbg !54
  %194 = trunc nuw nsw i64 %indvars.iv27 to i32, !dbg !55
  %195 = or i32 %invariant.op, %194, !dbg !55
  %196 = sext i32 %195 to i64, !dbg !56
  %197 = getelementptr half, ptr addrspace(1) %4, i64 %196, !dbg !56
  %198 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %197, i1 %25) #6, !dbg !57
  %199 = extractvalue { i32, i32 } %198, 0, !dbg !57
  %200 = bitcast i32 %199 to <2 x half>, !dbg !57
  %201 = extractvalue { i32, i32 } %198, 1, !dbg !57
  %202 = bitcast i32 %201 to <2 x half>, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %203 = bitcast float %193 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %203, i1 true) #6, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %204 = getelementptr half, ptr addrspace(1) %5, i64 %196, !dbg !59
  %205 = fpext <2 x half> %200 to <2 x float>, !dbg !60
  %206 = fmul <2 x float> %187, %205, !dbg !50
  %207 = load <2 x float>, ptr addrspace(3) %183, align 16, !dbg !58
  %208 = fmul <2 x float> %207, %206, !dbg !58
  %209 = fptrunc <2 x float> %208 to <2 x half>, !dbg !61
  %210 = fpext <2 x half> %202 to <2 x float>, !dbg !60
  %211 = fmul <2 x float> %187, %210, !dbg !50
  %212 = load <2 x float>, ptr addrspace(3) %185, align 8, !dbg !58
  %213 = fmul <2 x float> %212, %211, !dbg !58
  %214 = fptrunc <2 x float> %213 to <2 x half>, !dbg !61
  %215 = bitcast <2 x half> %209 to i32, !dbg !61
  %216 = bitcast <2 x half> %214 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %215, i32 %216, ptr addrspace(1) %204, i1 %25) #6, !dbg !61
  %indvars.iv.next28 = add nuw nsw i64 %indvars.iv27, 512, !dbg !49
  %217 = icmp samesign ult i64 %indvars.iv27, 3584, !dbg !49
  br i1 %217, label %188, label %218, !dbg !49

218:                                              ; preds = %188
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cusn5r4ftncl7gqsiixg3hw3ojcfuvaqdhezlxblwecnlckjkjne.py", directory: "./local_cache/us")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 22, column: 28, scope: !10)
!12 = !DILocation(line: 23, column: 44, scope: !10)
!13 = !DILocation(line: 25, column: 37, scope: !10)
!14 = !DILocation(line: 22, column: 33, scope: !10)
!15 = !DILocation(line: 23, column: 23, scope: !10)
!16 = !DILocation(line: 24, column: 21, scope: !10)
!17 = !DILocation(line: 28, column: 30, scope: !10)
!18 = !DILocation(line: 28, column: 35, scope: !10)
!19 = !DILocation(line: 37, column: 22, scope: !10)
!20 = !DILocation(line: 38, column: 22, scope: !10)
!21 = !DILocation(line: 39, column: 36, scope: !10)
!22 = !DILocation(line: 40, column: 41, scope: !10)
!23 = !DILocation(line: 40, column: 59, scope: !10)
!24 = !DILocation(line: 41, column: 46, scope: !10)
!25 = !DILocation(line: 47, column: 41, scope: !10)
!26 = !DILocation(line: 30, column: 40, scope: !10)
!27 = !DILocation(line: 40, column: 69, scope: !10)
!28 = !DILocation(line: 31, column: 31, scope: !10)
!29 = !DILocation(line: 41, column: 34, scope: !10)
!30 = !DILocation(line: 41, column: 53, scope: !10)
!31 = !DILocation(line: 41, column: 115, scope: !10)
!32 = !DILocation(line: 43, column: 22, scope: !10)
!33 = !DILocation(line: 45, column: 25, scope: !10)
!34 = !DILocation(line: 46, column: 50, scope: !10)
!35 = !DILocation(line: 47, column: 29, scope: !10)
!36 = !DILocation(line: 47, column: 52, scope: !10)
!37 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !41)
!38 = distinct !DILexicalBlockFile(scope: !40, file: !39, discriminator: 0)
!39 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!40 = distinct !DILexicalBlockFile(scope: !10, file: !39, discriminator: 0)
!41 = !DILocation(line: 48, column: 27, scope: !10)
!42 = !DILocation(line: 286, column: 36, scope: !40, inlinedAt: !41)
!43 = !DILocation(line: 53, column: 28, scope: !10)
!44 = !DILocation(line: 50, column: 21, scope: !10)
!45 = !DILocation(line: 52, column: 20, scope: !10)
!46 = !DILocation(line: 54, column: 4, scope: !10)
!47 = !DILocation(line: 55, column: 28, scope: !10)
!48 = !DILocation(line: 55, column: 40, scope: !10)
!49 = !DILocation(line: 56, column: 40, scope: !10)
!50 = !DILocation(line: 65, column: 24, scope: !10)
!51 = !DILocation(line: 57, column: 31, scope: !10)
!52 = !DILocation(line: 62, column: 35, scope: !10)
!53 = !DILocation(line: 62, column: 42, scope: !10)
!54 = !DILocation(line: 62, column: 95, scope: !10)
!55 = !DILocation(line: 63, column: 43, scope: !10)
!56 = !DILocation(line: 63, column: 36, scope: !10)
!57 = !DILocation(line: 63, column: 53, scope: !10)
!58 = !DILocation(line: 67, column: 24, scope: !10)
!59 = !DILocation(line: 68, column: 29, scope: !10)
!60 = !DILocation(line: 63, column: 115, scope: !10)
!61 = !DILocation(line: 68, column: 53, scope: !10)
!62 = !DILocation(line: 56, column: 4, scope: !10)
