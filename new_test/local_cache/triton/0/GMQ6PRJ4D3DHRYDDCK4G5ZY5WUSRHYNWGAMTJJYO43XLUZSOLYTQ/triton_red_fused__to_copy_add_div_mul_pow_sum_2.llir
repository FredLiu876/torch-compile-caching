; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_div_mul_pow_sum_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = icmp slt i32 %8, %4, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = and i32 %10, 31, !dbg !11
  %12 = shl i32 %10, 2, !dbg !11
  %13 = and i32 %12, 2044, !dbg !11
  %14 = shl i32 %8, 12, !dbg !12
  %invariant.op = or disjoint i32 %13, %14, !dbg !13
  %15 = zext nneg i32 %13 to i64, !dbg !13
  %16 = sext i32 %invariant.op to i64, !dbg !14
  %17 = getelementptr half, ptr addrspace(1) %0, i64 %16, !dbg !14
  %18 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %17, i1 %9) #3, !dbg !15
  %19 = extractvalue { i32, i32 } %18, 0, !dbg !15
  %20 = bitcast i32 %19 to <2 x half>, !dbg !15
  %21 = extractvalue { i32, i32 } %18, 1, !dbg !15
  %22 = bitcast i32 %21 to <2 x half>, !dbg !15
  %23 = getelementptr half, ptr addrspace(1) %1, i64 %15, !dbg !16
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %23, i1 true) #3, !dbg !17
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !17
  %26 = bitcast i32 %25 to <2 x half>, !dbg !17
  %27 = extractvalue { i32, i32 } %24, 1, !dbg !17
  %28 = bitcast i32 %27 to <2 x half>, !dbg !17
  %29 = getelementptr half, ptr addrspace(1) %2, i64 %16, !dbg !18
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %29, i1 %9) #3, !dbg !19
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !19
  %32 = bitcast i32 %31 to <2 x half>, !dbg !19
  %33 = extractvalue { i32, i32 } %30, 1, !dbg !19
  %34 = bitcast i32 %33 to <2 x half>, !dbg !19
  %35 = or disjoint i64 %15, 2048, !dbg !20
  %.reass.1 = or disjoint i32 %invariant.op, 2048
  %36 = sext i32 %.reass.1 to i64, !dbg !14
  %37 = getelementptr half, ptr addrspace(1) %0, i64 %36, !dbg !14
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %37, i1 %9) #3, !dbg !15
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !15
  %40 = bitcast i32 %39 to <2 x half>, !dbg !15
  %41 = extractvalue { i32, i32 } %38, 1, !dbg !15
  %42 = bitcast i32 %41 to <2 x half>, !dbg !15
  %43 = getelementptr half, ptr addrspace(1) %1, i64 %35, !dbg !16
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %43, i1 true) #3, !dbg !17
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !17
  %46 = bitcast i32 %45 to <2 x half>, !dbg !17
  %47 = extractvalue { i32, i32 } %44, 1, !dbg !17
  %48 = bitcast i32 %47 to <2 x half>, !dbg !17
  %49 = getelementptr half, ptr addrspace(1) %2, i64 %36, !dbg !18
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %49, i1 %9) #3, !dbg !19
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !19
  %52 = bitcast i32 %51 to <2 x half>, !dbg !19
  %53 = extractvalue { i32, i32 } %50, 1, !dbg !19
  %54 = bitcast i32 %53 to <2 x half>, !dbg !19
  %55 = fpext <2 x half> %20 to <2 x float>, !dbg !21
  %56 = fpext <2 x half> %26 to <2 x float>, !dbg !22
  %57 = fpext <2 x half> %32 to <2 x float>, !dbg !23
  %58 = fmul <2 x float> %55, %56, !dbg !24
  %59 = fmul <2 x float> %58, %57, !dbg !25
  %60 = fadd <2 x float> %59, zeroinitializer, !dbg !26
  %61 = fpext <2 x half> %40 to <2 x float>, !dbg !21
  %62 = fpext <2 x half> %46 to <2 x float>, !dbg !22
  %63 = fpext <2 x half> %52 to <2 x float>, !dbg !23
  %64 = fmul <2 x float> %61, %62, !dbg !24
  %65 = fmul <2 x float> %64, %63, !dbg !25
  %66 = fadd <2 x float> %60, %65, !dbg !26
  %67 = fpext <2 x half> %22 to <2 x float>, !dbg !21
  %68 = fpext <2 x half> %28 to <2 x float>, !dbg !22
  %69 = fpext <2 x half> %34 to <2 x float>, !dbg !23
  %70 = fmul <2 x float> %67, %68, !dbg !24
  %71 = fmul <2 x float> %70, %69, !dbg !25
  %72 = fadd <2 x float> %71, zeroinitializer, !dbg !26
  %73 = fpext <2 x half> %42 to <2 x float>, !dbg !21
  %74 = fpext <2 x half> %48 to <2 x float>, !dbg !22
  %75 = fpext <2 x half> %54 to <2 x float>, !dbg !23
  %76 = fmul <2 x float> %73, %74, !dbg !24
  %77 = fmul <2 x float> %76, %75, !dbg !25
  %78 = fadd <2 x float> %72, %77, !dbg !26
  %79 = lshr i32 %10, 5, !dbg !11
  %shift = shufflevector <2 x float> %66, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %80 = fadd <2 x float> %66, %shift, !dbg !27
  %81 = fadd <2 x float> %78, %80, !dbg !27
  %shift7 = shufflevector <2 x float> %78, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %82 = fadd <2 x float> %shift7, %81, !dbg !27
  %83 = extractelement <2 x float> %82, i64 0, !dbg !27
  %84 = select i1 %9, float %83, float 0.000000e+00, !dbg !27
  %85 = bitcast float %84 to i32, !dbg !32
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 16, i32 31), !dbg !32
  %87 = bitcast i32 %86 to float, !dbg !32
  %88 = fadd float %84, %87, !dbg !27
  %89 = bitcast float %88 to i32, !dbg !32
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 8, i32 31), !dbg !32
  %91 = bitcast i32 %90 to float, !dbg !32
  %92 = fadd float %88, %91, !dbg !27
  %93 = bitcast float %92 to i32, !dbg !32
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 4, i32 31), !dbg !32
  %95 = bitcast i32 %94 to float, !dbg !32
  %96 = fadd float %92, %95, !dbg !27
  %97 = bitcast float %96 to i32, !dbg !32
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 2, i32 31), !dbg !32
  %99 = bitcast i32 %98 to float, !dbg !32
  %100 = fadd float %96, %99, !dbg !27
  %101 = bitcast float %100 to i32, !dbg !32
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 1, i32 31), !dbg !32
  %103 = bitcast i32 %102 to float, !dbg !32
  %104 = fadd float %100, %103, !dbg !27
  %105 = and i32 %79, 15, !dbg !32
  %106 = icmp eq i32 %11, 0, !dbg !32
  %107 = zext nneg i32 %105 to i64, !dbg !32
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i64 %107, !dbg !32
  %109 = bitcast float %104 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 %106) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %110 = icmp slt i32 %10, 16, !dbg !32
  %111 = sext i32 %10 to i64, !dbg !32
  %112 = getelementptr float, ptr addrspace(3) @global_smem, i64 %111, !dbg !32
  %113 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %112, i1 %110) #3, !dbg !32
  %114 = bitcast i32 %113 to float, !dbg !32
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 8, i32 31), !dbg !32
  %116 = bitcast i32 %115 to float, !dbg !32
  %117 = fadd float %114, %116, !dbg !27
  %118 = bitcast float %117 to i32, !dbg !32
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 4, i32 31), !dbg !32
  %120 = bitcast i32 %119 to float, !dbg !32
  %121 = fadd float %117, %120, !dbg !27
  %122 = bitcast float %121 to i32, !dbg !32
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 2, i32 31), !dbg !32
  %124 = bitcast i32 %123 to float, !dbg !32
  %125 = fadd float %121, %124, !dbg !27
  %126 = bitcast float %125 to i32, !dbg !32
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 1, i32 31), !dbg !32
  %128 = bitcast i32 %127 to float, !dbg !32
  %129 = fadd float %125, %128, !dbg !27
  %130 = and i32 %10, 15, !dbg !32
  %131 = icmp eq i32 %130, 0, !dbg !32
  %132 = and i1 %110, %131, !dbg !32
  %133 = bitcast float %129 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %133, i1 %132) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %134 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !32
  %135 = sext i32 %8 to i64, !dbg !33
  %136 = getelementptr float, ptr addrspace(1) %3, i64 %135, !dbg !33
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %9) #3, !dbg !34
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %9) #3, !dbg !34
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %9) #3, !dbg !34
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %9) #3, !dbg !34
  %141 = bitcast i32 %140 to float, !dbg !34
  %142 = fmul float %134, -5.000000e-01, !dbg !35
  %143 = fmul float %141, %141, !dbg !36
  %144 = fmul float %143, %141, !dbg !37
  %145 = fmul float %142, %144, !dbg !38
  %146 = fmul float %145, 0x3F30000000000000, !dbg !39
  %147 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %17, i1 %9) #3, !dbg !40
  %148 = extractvalue { i32, i32 } %147, 0, !dbg !40
  %149 = bitcast i32 %148 to <2 x half>, !dbg !40
  %150 = extractvalue { i32, i32 } %147, 1, !dbg !40
  %151 = bitcast i32 %150 to <2 x half>, !dbg !40
  %152 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %23, i1 true) #3, !dbg !41
  %153 = extractvalue { i32, i32 } %152, 0, !dbg !41
  %154 = bitcast i32 %153 to <2 x half>, !dbg !41
  %155 = extractvalue { i32, i32 } %152, 1, !dbg !41
  %156 = bitcast i32 %155 to <2 x half>, !dbg !41
  %157 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %29, i1 %9) #3, !dbg !42
  %158 = extractvalue { i32, i32 } %157, 0, !dbg !42
  %159 = bitcast i32 %158 to <2 x half>, !dbg !42
  %160 = extractvalue { i32, i32 } %157, 1, !dbg !42
  %161 = bitcast i32 %160 to <2 x half>, !dbg !42
  %162 = fpext <2 x half> %149 to <2 x float>, !dbg !43
  %163 = fpext <2 x half> %154 to <2 x float>, !dbg !44
  %164 = fpext <2 x half> %159 to <2 x float>, !dbg !45
  %165 = fmul <2 x float> %162, %163, !dbg !46
  %166 = insertelement <2 x float> poison, float %141, i64 0, !dbg !47
  %167 = shufflevector <2 x float> %166, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !47
  %168 = fmul <2 x float> %165, %167, !dbg !47
  %169 = fmul <2 x float> %164, splat (float 2.000000e+00), !dbg !48
  %170 = insertelement <2 x float> poison, float %146, i64 0, !dbg !49
  %171 = shufflevector <2 x float> %170, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %172 = fmul <2 x float> %171, %169, !dbg !49
  %173 = fadd <2 x float> %168, %172, !dbg !50
  %174 = fptrunc <2 x float> %173 to <2 x half>, !dbg !51
  %175 = fpext <2 x half> %151 to <2 x float>, !dbg !43
  %176 = fpext <2 x half> %156 to <2 x float>, !dbg !44
  %177 = fpext <2 x half> %161 to <2 x float>, !dbg !45
  %178 = fmul <2 x float> %175, %176, !dbg !46
  %179 = fmul <2 x float> %178, %167, !dbg !47
  %180 = fmul <2 x float> %177, splat (float 2.000000e+00), !dbg !48
  %181 = fmul <2 x float> %171, %180, !dbg !49
  %182 = fadd <2 x float> %179, %181, !dbg !50
  %183 = fptrunc <2 x float> %182 to <2 x half>, !dbg !51
  %184 = bitcast <2 x half> %174 to i32, !dbg !51
  %185 = bitcast <2 x half> %183 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %184, i32 %185, ptr addrspace(1) %17, i1 %9) #3, !dbg !51
  %186 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %37, i1 %9) #3, !dbg !40
  %187 = extractvalue { i32, i32 } %186, 0, !dbg !40
  %188 = bitcast i32 %187 to <2 x half>, !dbg !40
  %189 = extractvalue { i32, i32 } %186, 1, !dbg !40
  %190 = bitcast i32 %189 to <2 x half>, !dbg !40
  %191 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %43, i1 true) #3, !dbg !41
  %192 = extractvalue { i32, i32 } %191, 0, !dbg !41
  %193 = bitcast i32 %192 to <2 x half>, !dbg !41
  %194 = extractvalue { i32, i32 } %191, 1, !dbg !41
  %195 = bitcast i32 %194 to <2 x half>, !dbg !41
  %196 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %49, i1 %9) #3, !dbg !42
  %197 = extractvalue { i32, i32 } %196, 0, !dbg !42
  %198 = bitcast i32 %197 to <2 x half>, !dbg !42
  %199 = extractvalue { i32, i32 } %196, 1, !dbg !42
  %200 = bitcast i32 %199 to <2 x half>, !dbg !42
  %201 = fpext <2 x half> %188 to <2 x float>, !dbg !43
  %202 = fpext <2 x half> %193 to <2 x float>, !dbg !44
  %203 = fpext <2 x half> %198 to <2 x float>, !dbg !45
  %204 = fmul <2 x float> %201, %202, !dbg !46
  %205 = fmul <2 x float> %204, %167, !dbg !47
  %206 = fmul <2 x float> %203, splat (float 2.000000e+00), !dbg !48
  %207 = fmul <2 x float> %171, %206, !dbg !49
  %208 = fadd <2 x float> %205, %207, !dbg !50
  %209 = fptrunc <2 x float> %208 to <2 x half>, !dbg !51
  %210 = fpext <2 x half> %190 to <2 x float>, !dbg !43
  %211 = fpext <2 x half> %195 to <2 x float>, !dbg !44
  %212 = fpext <2 x half> %200 to <2 x float>, !dbg !45
  %213 = fmul <2 x float> %210, %211, !dbg !46
  %214 = fmul <2 x float> %213, %167, !dbg !47
  %215 = fmul <2 x float> %212, splat (float 2.000000e+00), !dbg !48
  %216 = fmul <2 x float> %171, %215, !dbg !49
  %217 = fadd <2 x float> %214, %216, !dbg !50
  %218 = fptrunc <2 x float> %217 to <2 x half>, !dbg !51
  %219 = bitcast <2 x half> %209 to i32, !dbg !51
  %220 = bitcast <2 x half> %218 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %219, i32 %220, ptr addrspace(1) %37, i1 %9) #3, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6dfi5krguusrox3zkmtwd6w5h4h7dbj756re5gbfvoizvxxionr.py", directory: "/tmp/torchinductor_root/6d")
!4 = !{ptr @triton_red_fused__to_copy_add_div_mul_pow_sum_2, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_mul_pow_sum_2", linkageName: "triton_red_fused__to_copy_add_div_mul_pow_sum_2", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 21, scope: !6)
!11 = !DILocation(line: 25, column: 37, scope: !6)
!12 = !DILocation(line: 35, column: 50, scope: !6)
!13 = !DILocation(line: 29, column: 40, scope: !6)
!14 = !DILocation(line: 35, column: 38, scope: !6)
!15 = !DILocation(line: 35, column: 55, scope: !6)
!16 = !DILocation(line: 36, column: 34, scope: !6)
!17 = !DILocation(line: 36, column: 41, scope: !6)
!18 = !DILocation(line: 37, column: 34, scope: !6)
!19 = !DILocation(line: 37, column: 51, scope: !6)
!20 = !DILocation(line: 30, column: 31, scope: !6)
!21 = !DILocation(line: 35, column: 116, scope: !6)
!22 = !DILocation(line: 36, column: 94, scope: !6)
!23 = !DILocation(line: 37, column: 112, scope: !6)
!24 = !DILocation(line: 38, column: 22, scope: !6)
!25 = !DILocation(line: 41, column: 22, scope: !6)
!26 = !DILocation(line: 43, column: 23, scope: !6)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!30 = distinct !DILexicalBlockFile(scope: !6, file: !29, discriminator: 0)
!31 = !DILocation(line: 45, column: 25, scope: !6)
!32 = !DILocation(line: 286, column: 36, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 46, column: 31, scope: !6)
!34 = !DILocation(line: 46, column: 36, scope: !6)
!35 = !DILocation(line: 60, column: 23, scope: !6)
!36 = !DILocation(line: 61, column: 24, scope: !6)
!37 = !DILocation(line: 62, column: 24, scope: !6)
!38 = !DILocation(line: 63, column: 24, scope: !6)
!39 = !DILocation(line: 65, column: 24, scope: !6)
!40 = !DILocation(line: 53, column: 56, scope: !6)
!41 = !DILocation(line: 54, column: 42, scope: !6)
!42 = !DILocation(line: 55, column: 52, scope: !6)
!43 = !DILocation(line: 53, column: 118, scope: !6)
!44 = !DILocation(line: 54, column: 95, scope: !6)
!45 = !DILocation(line: 55, column: 114, scope: !6)
!46 = !DILocation(line: 56, column: 24, scope: !6)
!47 = !DILocation(line: 58, column: 24, scope: !6)
!48 = !DILocation(line: 68, column: 24, scope: !6)
!49 = !DILocation(line: 69, column: 24, scope: !6)
!50 = !DILocation(line: 70, column: 24, scope: !6)
!51 = !DILocation(line: 72, column: 56, scope: !6)
!52 = !DILocation(line: 47, column: 4, scope: !6)
