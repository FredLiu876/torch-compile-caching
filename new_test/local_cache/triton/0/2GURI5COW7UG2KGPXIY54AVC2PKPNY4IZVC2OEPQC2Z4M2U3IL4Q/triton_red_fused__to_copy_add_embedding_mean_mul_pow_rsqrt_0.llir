; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/yi/cyihme7t354xdekku5rks7waotqdnz3mpo47q3uhqjtr5ixrgolb.py\00"
@assertMessage_0 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp4 < 128256\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !10 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %11 = icmp slt i32 %10, %6, !dbg !12
  %12 = sext i32 %10 to i64, !dbg !13
  %13 = getelementptr i64, ptr addrspace(1) %1, i64 %12, !dbg !13
  %14 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %15 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %16 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %17 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %18 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %23 = add i64 %22, 128256, !dbg !15
  %24 = icmp slt i64 %22, 0, !dbg !16
  %25 = select i1 %24, i64 %23, i64 %22, !dbg !17
  %26 = icmp ugt i64 %25, 128255, !dbg !18
  %.not2 = and i1 %11, %26, !dbg !19
  br i1 %.not2, label %27, label %28, !dbg !19

27:                                               ; preds = %9
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !19
  unreachable, !dbg !19

28:                                               ; preds = %9
  %29 = icmp slt i64 %21, 0, !dbg !16
  %30 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !20
  %31 = shl i32 %30, 3, !dbg !20
  %32 = and i32 %31, 4088, !dbg !20
  %33 = lshr i32 %30, 5, !dbg !20
  %34 = and i32 %30, 31, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %35 = shl i64 %21, 12, !dbg !21
  %36 = add i64 %35, 525336576, !dbg !21
  %37 = select i1 %29, i64 %36, i64 %35, !dbg !21
  %38 = zext nneg i32 %32 to i64, !dbg !22
  %39 = getelementptr half, ptr addrspace(1) %2, i64 %37, !dbg !23
  %40 = getelementptr half, ptr addrspace(1) %39, i64 %38, !dbg !23
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %40, i1 %11) #6, !dbg !24
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !24
  %43 = bitcast i32 %42 to <2 x half>, !dbg !24
  %44 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !24
  %45 = bitcast i32 %44 to <2 x half>, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !24
  %47 = bitcast i32 %46 to <2 x half>, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !24
  %49 = bitcast i32 %48 to <2 x half>, !dbg !24
  %50 = extractelement <2 x half> %43, i64 0, !dbg !24
  %51 = extractelement <2 x half> %43, i64 1, !dbg !24
  %52 = extractelement <2 x half> %45, i64 0, !dbg !24
  %53 = extractelement <2 x half> %45, i64 1, !dbg !24
  %54 = extractelement <2 x half> %47, i64 0, !dbg !24
  %55 = extractelement <2 x half> %47, i64 1, !dbg !24
  %56 = extractelement <2 x half> %49, i64 0, !dbg !24
  %57 = extractelement <2 x half> %49, i64 1, !dbg !24
  %58 = fpext half %50 to float, !dbg !25
  %59 = fpext half %51 to float, !dbg !25
  %60 = fpext half %52 to float, !dbg !25
  %61 = fpext half %53 to float, !dbg !25
  %62 = fpext half %54 to float, !dbg !25
  %63 = fpext half %55 to float, !dbg !25
  %64 = fpext half %56 to float, !dbg !25
  %65 = fpext half %57 to float, !dbg !25
  %66 = fmul float %58, %58, !dbg !26
  %67 = fmul float %59, %59, !dbg !26
  %68 = fmul float %60, %60, !dbg !26
  %69 = fmul float %61, %61, !dbg !26
  %70 = fmul float %62, %62, !dbg !26
  %71 = fmul float %63, %63, !dbg !26
  %72 = fmul float %64, %64, !dbg !26
  %73 = fmul float %65, %65, !dbg !26
  %74 = shl i32 %10, 12, !dbg !27
  %75 = or disjoint i32 %32, %74, !dbg !28
  %76 = sext i32 %75 to i64, !dbg !29
  %77 = getelementptr half, ptr addrspace(1) %4, i64 %76, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %42, i32 %44, i32 %46, i32 %48, ptr addrspace(1) %77, i1 %11) #6, !dbg !30
  %78 = fadd float %66, %67, !dbg !31
  %79 = fadd float %68, %78, !dbg !31
  %80 = fadd float %69, %79, !dbg !31
  %81 = fadd float %70, %80, !dbg !31
  %82 = fadd float %71, %81, !dbg !31
  %83 = fadd float %72, %82, !dbg !31
  %84 = fadd float %73, %83, !dbg !31
  %85 = select i1 %11, float %84, float 0.000000e+00, !dbg !31
  %86 = bitcast float %85 to i32, !dbg !36
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 16, i32 31), !dbg !36
  %88 = bitcast i32 %87 to float, !dbg !36
  %89 = fadd float %85, %88, !dbg !31
  %90 = bitcast float %89 to i32, !dbg !36
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 8, i32 31), !dbg !36
  %92 = bitcast i32 %91 to float, !dbg !36
  %93 = fadd float %89, %92, !dbg !31
  %94 = bitcast float %93 to i32, !dbg !36
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 4, i32 31), !dbg !36
  %96 = bitcast i32 %95 to float, !dbg !36
  %97 = fadd float %93, %96, !dbg !31
  %98 = bitcast float %97 to i32, !dbg !36
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 2, i32 31), !dbg !36
  %100 = bitcast i32 %99 to float, !dbg !36
  %101 = fadd float %97, %100, !dbg !31
  %102 = bitcast float %101 to i32, !dbg !36
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 1, i32 31), !dbg !36
  %104 = bitcast i32 %103 to float, !dbg !36
  %105 = fadd float %101, %104, !dbg !31
  %106 = and i32 %33, 15, !dbg !36
  %107 = icmp eq i32 %34, 0, !dbg !36
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !36
  %109 = bitcast float %105 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 %107) #6, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %110 = icmp slt i32 %30, 16, !dbg !36
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i32 %30, !dbg !36
  %112 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %111, i1 %110) #6, !dbg !36
  %113 = bitcast i32 %112 to float, !dbg !36
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 8, i32 31), !dbg !36
  %115 = bitcast i32 %114 to float, !dbg !36
  %116 = fadd float %113, %115, !dbg !31
  %117 = bitcast float %116 to i32, !dbg !36
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 4, i32 31), !dbg !36
  %119 = bitcast i32 %118 to float, !dbg !36
  %120 = fadd float %116, %119, !dbg !31
  %121 = bitcast float %120 to i32, !dbg !36
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 2, i32 31), !dbg !36
  %123 = bitcast i32 %122 to float, !dbg !36
  %124 = fadd float %120, %123, !dbg !31
  %125 = bitcast float %124 to i32, !dbg !36
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 1, i32 31), !dbg !36
  %127 = bitcast i32 %126 to float, !dbg !36
  %128 = fadd float %124, %127, !dbg !31
  %129 = and i32 %30, 15, !dbg !36
  %130 = icmp eq i32 %129, 0, !dbg !36
  %131 = and i1 %110, %130, !dbg !36
  %132 = bitcast float %128 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %132, i1 %131) #6, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %133 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !36
  %134 = tail call float @llvm.nvvm.div.full(float %133, float 4.096000e+03), !dbg !37
  %135 = fadd float %134, 0x3EE4F8B580000000, !dbg !38
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %.not.i = icmp eq i32 %136, 0, !dbg !39
  br i1 %.not.i, label %139, label %137, !dbg !39

137:                                              ; preds = %28
  %138 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %135), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

139:                                              ; preds = %28
  %140 = tail call float @llvm.nvvm.rsqrt.approx.f(float %135), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

__nv_rsqrtf.exit:                                 ; preds = %137, %139
  %.0.i = phi float [ %138, %137 ], [ %140, %139 ], !dbg !39
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %.not.i24 = icmp eq i32 %148, 0, !dbg !39
  br i1 %.not.i24, label %151, label %149, !dbg !39

149:                                              ; preds = %__nv_rsqrtf.exit
  %150 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %135), !dbg !39
  br label %__nv_rsqrtf.exit26, !dbg !39

151:                                              ; preds = %__nv_rsqrtf.exit
  %152 = tail call float @llvm.nvvm.rsqrt.approx.f(float %135), !dbg !39
  br label %__nv_rsqrtf.exit26, !dbg !39

__nv_rsqrtf.exit26:                               ; preds = %149, %151
  %.0.i25 = phi float [ %150, %149 ], [ %152, %151 ], !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %153 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !41
  %154 = and i32 %30, 511, !dbg !42
  %155 = icmp eq i32 %154, 0, !dbg !42
  %156 = bitcast float %.0.i to i32, !dbg !42
  %157 = and i1 %155, %11, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %156, ptr addrspace(1) %153, i1 %157) #6, !dbg !42
  %158 = getelementptr half, ptr addrspace(1) %3, i64 %38, !dbg !43
  %159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %158, i1 true) #6, !dbg !44
  %160 = extractvalue { i32, i32, i32, i32 } %159, 0, !dbg !44
  %161 = bitcast i32 %160 to <2 x half>, !dbg !44
  %162 = extractvalue { i32, i32, i32, i32 } %159, 1, !dbg !44
  %163 = bitcast i32 %162 to <2 x half>, !dbg !44
  %164 = extractvalue { i32, i32, i32, i32 } %159, 2, !dbg !44
  %165 = bitcast i32 %164 to <2 x half>, !dbg !44
  %166 = extractvalue { i32, i32, i32, i32 } %159, 3, !dbg !44
  %167 = bitcast i32 %166 to <2 x half>, !dbg !44
  %168 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %77, i1 %11) #6, !dbg !45
  %169 = extractvalue { i32, i32, i32, i32 } %168, 0, !dbg !45
  %170 = bitcast i32 %169 to <2 x half>, !dbg !45
  %171 = extractvalue { i32, i32, i32, i32 } %168, 1, !dbg !45
  %172 = bitcast i32 %171 to <2 x half>, !dbg !45
  %173 = extractvalue { i32, i32, i32, i32 } %168, 2, !dbg !45
  %174 = bitcast i32 %173 to <2 x half>, !dbg !45
  %175 = extractvalue { i32, i32, i32, i32 } %168, 3, !dbg !45
  %176 = bitcast i32 %175 to <2 x half>, !dbg !45
  %177 = getelementptr half, ptr addrspace(1) %5, i64 %76, !dbg !46
  %178 = fpext <2 x half> %161 to <2 x float>, !dbg !47
  %179 = fpext <2 x half> %170 to <2 x float>, !dbg !48
  %180 = insertelement <2 x float> poison, float %.0.i25, i64 0, !dbg !49
  %181 = shufflevector <2 x float> %180, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %182 = fmul <2 x float> %181, %179, !dbg !49
  %183 = fmul <2 x float> %182, %178, !dbg !50
  %184 = fptrunc <2 x float> %183 to <2 x half>, !dbg !51
  %185 = fpext <2 x half> %163 to <2 x float>, !dbg !47
  %186 = fpext <2 x half> %172 to <2 x float>, !dbg !48
  %187 = fmul <2 x float> %181, %186, !dbg !49
  %188 = fmul <2 x float> %187, %185, !dbg !50
  %189 = fptrunc <2 x float> %188 to <2 x half>, !dbg !51
  %190 = fpext <2 x half> %165 to <2 x float>, !dbg !47
  %191 = fpext <2 x half> %174 to <2 x float>, !dbg !48
  %192 = fmul <2 x float> %181, %191, !dbg !49
  %193 = fmul <2 x float> %192, %190, !dbg !50
  %194 = fptrunc <2 x float> %193 to <2 x half>, !dbg !51
  %195 = fpext <2 x half> %167 to <2 x float>, !dbg !47
  %196 = fpext <2 x half> %176 to <2 x float>, !dbg !48
  %197 = fmul <2 x float> %181, %196, !dbg !49
  %198 = fmul <2 x float> %197, %195, !dbg !50
  %199 = fptrunc <2 x float> %198 to <2 x half>, !dbg !51
  %200 = bitcast <2 x half> %184 to i32, !dbg !51
  %201 = bitcast <2 x half> %189 to i32, !dbg !51
  %202 = bitcast <2 x half> %194 to i32, !dbg !51
  %203 = bitcast <2 x half> %199 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %200, i32 %201, i32 %202, i32 %203, ptr addrspace(1) %177, i1 %11) #6, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyihme7t354xdekku5rks7waotqdnz3mpo47q3uhqjtr5ixrgolb.py", directory: "/tmp/torchinductor_root/yi")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 22, column: 28, scope: !10)
!12 = !DILocation(line: 24, column: 21, scope: !10)
!13 = !DILocation(line: 28, column: 30, scope: !10)
!14 = !DILocation(line: 28, column: 35, scope: !10)
!15 = !DILocation(line: 37, column: 22, scope: !10)
!16 = !DILocation(line: 38, column: 22, scope: !10)
!17 = !DILocation(line: 39, column: 36, scope: !10)
!18 = !DILocation(line: 40, column: 41, scope: !10)
!19 = !DILocation(line: 40, column: 69, scope: !10)
!20 = !DILocation(line: 25, column: 37, scope: !10)
!21 = !DILocation(line: 41, column: 46, scope: !10)
!22 = !DILocation(line: 41, column: 41, scope: !10)
!23 = !DILocation(line: 41, column: 34, scope: !10)
!24 = !DILocation(line: 41, column: 53, scope: !10)
!25 = !DILocation(line: 41, column: 115, scope: !10)
!26 = !DILocation(line: 43, column: 22, scope: !10)
!27 = !DILocation(line: 47, column: 41, scope: !10)
!28 = !DILocation(line: 47, column: 36, scope: !10)
!29 = !DILocation(line: 47, column: 29, scope: !10)
!30 = !DILocation(line: 47, column: 52, scope: !10)
!31 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !35)
!32 = distinct !DILexicalBlockFile(scope: !34, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!34 = distinct !DILexicalBlockFile(scope: !10, file: !33, discriminator: 0)
!35 = !DILocation(line: 48, column: 27, scope: !10)
!36 = !DILocation(line: 286, column: 36, scope: !34, inlinedAt: !35)
!37 = !DILocation(line: 50, column: 21, scope: !10)
!38 = !DILocation(line: 52, column: 20, scope: !10)
!39 = !DILocation(line: 53, column: 28, scope: !10)
!40 = !DILocation(line: 54, column: 4, scope: !10)
!41 = !DILocation(line: 55, column: 28, scope: !10)
!42 = !DILocation(line: 55, column: 40, scope: !10)
!43 = !DILocation(line: 62, column: 35, scope: !10)
!44 = !DILocation(line: 62, column: 42, scope: !10)
!45 = !DILocation(line: 63, column: 53, scope: !10)
!46 = !DILocation(line: 68, column: 29, scope: !10)
!47 = !DILocation(line: 62, column: 95, scope: !10)
!48 = !DILocation(line: 63, column: 115, scope: !10)
!49 = !DILocation(line: 65, column: 24, scope: !10)
!50 = !DILocation(line: 67, column: 24, scope: !10)
!51 = !DILocation(line: 68, column: 53, scope: !10)
!52 = !DILocation(line: 56, column: 4, scope: !10)
