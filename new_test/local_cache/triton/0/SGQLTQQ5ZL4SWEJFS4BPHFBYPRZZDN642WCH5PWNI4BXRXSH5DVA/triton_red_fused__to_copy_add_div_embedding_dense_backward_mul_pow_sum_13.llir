; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/rn/crnwhfxb7zfxfwwrin7h4kkc5jsfdj3u6ms7omvekbnm6ohwt6c5.py\00"
@assertMessage_0 = internal constant [41 x i8] c"index out of bounds: 0 <= tmp49 < 128256\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_div_embedding_dense_backward_mul_pow_sum_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10, ptr addrspace(1) readnone captures(none) %11) local_unnamed_addr !dbg !10 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %14 = icmp slt i32 %13, %9, !dbg !12
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %16 = and i32 %15, 31, !dbg !13
  %17 = shl i32 %15, 2, !dbg !13
  %18 = and i32 %17, 2044, !dbg !13
  %19 = shl i32 %13, 12, !dbg !14
  %invariant.op = or disjoint i32 %18, %19, !dbg !15
  %20 = zext nneg i32 %18 to i64, !dbg !15
  %21 = sext i32 %invariant.op to i64, !dbg !16
  %22 = getelementptr half, ptr addrspace(1) %0, i64 %21, !dbg !16
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %22, i1 %14) #4, !dbg !17
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !17
  %25 = bitcast i32 %24 to <2 x half>, !dbg !17
  %26 = extractvalue { i32, i32 } %23, 1, !dbg !17
  %27 = bitcast i32 %26 to <2 x half>, !dbg !17
  %28 = getelementptr half, ptr addrspace(1) %1, i64 %21, !dbg !18
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %28, i1 %14) #4, !dbg !19
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !19
  %31 = bitcast i32 %30 to <2 x half>, !dbg !19
  %32 = extractvalue { i32, i32 } %29, 1, !dbg !19
  %33 = bitcast i32 %32 to <2 x half>, !dbg !19
  %34 = getelementptr half, ptr addrspace(1) %2, i64 %21, !dbg !20
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %34, i1 %14) #4, !dbg !21
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !21
  %37 = bitcast i32 %36 to <2 x half>, !dbg !21
  %38 = extractvalue { i32, i32 } %35, 1, !dbg !21
  %39 = bitcast i32 %38 to <2 x half>, !dbg !21
  %40 = getelementptr half, ptr addrspace(1) %3, i64 %20, !dbg !22
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %40, i1 true) #4, !dbg !23
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !23
  %43 = bitcast i32 %42 to <2 x half>, !dbg !23
  %44 = extractvalue { i32, i32 } %41, 1, !dbg !23
  %45 = bitcast i32 %44 to <2 x half>, !dbg !23
  %46 = getelementptr half, ptr addrspace(1) %4, i64 %21, !dbg !24
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %46, i1 %14) #4, !dbg !25
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !25
  %49 = bitcast i32 %48 to <2 x half>, !dbg !25
  %50 = extractvalue { i32, i32 } %47, 1, !dbg !25
  %51 = bitcast i32 %50 to <2 x half>, !dbg !25
  %52 = or disjoint i64 %20, 2048, !dbg !26
  %.reass.1 = or disjoint i32 %invariant.op, 2048
  %53 = sext i32 %.reass.1 to i64, !dbg !16
  %54 = getelementptr half, ptr addrspace(1) %0, i64 %53, !dbg !16
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %54, i1 %14) #4, !dbg !17
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !17
  %57 = bitcast i32 %56 to <2 x half>, !dbg !17
  %58 = extractvalue { i32, i32 } %55, 1, !dbg !17
  %59 = bitcast i32 %58 to <2 x half>, !dbg !17
  %60 = getelementptr half, ptr addrspace(1) %1, i64 %53, !dbg !18
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %60, i1 %14) #4, !dbg !19
  %62 = extractvalue { i32, i32 } %61, 0, !dbg !19
  %63 = bitcast i32 %62 to <2 x half>, !dbg !19
  %64 = extractvalue { i32, i32 } %61, 1, !dbg !19
  %65 = bitcast i32 %64 to <2 x half>, !dbg !19
  %66 = getelementptr half, ptr addrspace(1) %2, i64 %53, !dbg !20
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %66, i1 %14) #4, !dbg !21
  %68 = extractvalue { i32, i32 } %67, 0, !dbg !21
  %69 = bitcast i32 %68 to <2 x half>, !dbg !21
  %70 = extractvalue { i32, i32 } %67, 1, !dbg !21
  %71 = bitcast i32 %70 to <2 x half>, !dbg !21
  %72 = getelementptr half, ptr addrspace(1) %3, i64 %52, !dbg !22
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %72, i1 true) #4, !dbg !23
  %74 = extractvalue { i32, i32 } %73, 0, !dbg !23
  %75 = bitcast i32 %74 to <2 x half>, !dbg !23
  %76 = extractvalue { i32, i32 } %73, 1, !dbg !23
  %77 = bitcast i32 %76 to <2 x half>, !dbg !23
  %78 = getelementptr half, ptr addrspace(1) %4, i64 %53, !dbg !24
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %78, i1 %14) #4, !dbg !25
  %80 = extractvalue { i32, i32 } %79, 0, !dbg !25
  %81 = bitcast i32 %80 to <2 x half>, !dbg !25
  %82 = extractvalue { i32, i32 } %79, 1, !dbg !25
  %83 = bitcast i32 %82 to <2 x half>, !dbg !25
  %84 = fpext <2 x half> %25 to <2 x float>, !dbg !27
  %85 = fpext <2 x half> %31 to <2 x float>, !dbg !28
  %86 = fpext <2 x half> %37 to <2 x float>, !dbg !29
  %87 = fpext <2 x half> %43 to <2 x float>, !dbg !30
  %88 = fpext <2 x half> %49 to <2 x float>, !dbg !31
  %89 = fadd <2 x float> %84, %85, !dbg !32
  %90 = fadd <2 x float> %89, %86, !dbg !33
  %91 = fmul <2 x float> %90, %87, !dbg !34
  %92 = fmul <2 x float> %91, %88, !dbg !35
  %93 = fadd <2 x float> %92, zeroinitializer, !dbg !36
  %94 = fpext <2 x half> %57 to <2 x float>, !dbg !27
  %95 = fpext <2 x half> %63 to <2 x float>, !dbg !28
  %96 = fpext <2 x half> %69 to <2 x float>, !dbg !29
  %97 = fpext <2 x half> %75 to <2 x float>, !dbg !30
  %98 = fpext <2 x half> %81 to <2 x float>, !dbg !31
  %99 = fadd <2 x float> %94, %95, !dbg !32
  %100 = fadd <2 x float> %99, %96, !dbg !33
  %101 = fmul <2 x float> %100, %97, !dbg !34
  %102 = fmul <2 x float> %101, %98, !dbg !35
  %103 = fadd <2 x float> %93, %102, !dbg !36
  %104 = fpext <2 x half> %27 to <2 x float>, !dbg !27
  %105 = fpext <2 x half> %33 to <2 x float>, !dbg !28
  %106 = fpext <2 x half> %39 to <2 x float>, !dbg !29
  %107 = fpext <2 x half> %45 to <2 x float>, !dbg !30
  %108 = fpext <2 x half> %51 to <2 x float>, !dbg !31
  %109 = fadd <2 x float> %104, %105, !dbg !32
  %110 = fadd <2 x float> %109, %106, !dbg !33
  %111 = fmul <2 x float> %110, %107, !dbg !34
  %112 = fmul <2 x float> %111, %108, !dbg !35
  %113 = fadd <2 x float> %112, zeroinitializer, !dbg !36
  %114 = fpext <2 x half> %59 to <2 x float>, !dbg !27
  %115 = fpext <2 x half> %65 to <2 x float>, !dbg !28
  %116 = fpext <2 x half> %71 to <2 x float>, !dbg !29
  %117 = fpext <2 x half> %77 to <2 x float>, !dbg !30
  %118 = fpext <2 x half> %83 to <2 x float>, !dbg !31
  %119 = fadd <2 x float> %114, %115, !dbg !32
  %120 = fadd <2 x float> %119, %116, !dbg !33
  %121 = fmul <2 x float> %120, %117, !dbg !34
  %122 = fmul <2 x float> %121, %118, !dbg !35
  %123 = fadd <2 x float> %113, %122, !dbg !36
  %124 = lshr i32 %15, 5, !dbg !13
  %shift = shufflevector <2 x float> %103, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !37
  %125 = fadd <2 x float> %103, %shift, !dbg !37
  %126 = fadd <2 x float> %123, %125, !dbg !37
  %shift9 = shufflevector <2 x float> %123, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !37
  %127 = fadd <2 x float> %shift9, %126, !dbg !37
  %128 = extractelement <2 x float> %127, i64 0, !dbg !37
  %129 = select i1 %14, float %128, float 0.000000e+00, !dbg !37
  %130 = bitcast float %129 to i32, !dbg !42
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 16, i32 31), !dbg !42
  %132 = bitcast i32 %131 to float, !dbg !42
  %133 = fadd float %129, %132, !dbg !37
  %134 = bitcast float %133 to i32, !dbg !42
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 8, i32 31), !dbg !42
  %136 = bitcast i32 %135 to float, !dbg !42
  %137 = fadd float %133, %136, !dbg !37
  %138 = bitcast float %137 to i32, !dbg !42
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 4, i32 31), !dbg !42
  %140 = bitcast i32 %139 to float, !dbg !42
  %141 = fadd float %137, %140, !dbg !37
  %142 = bitcast float %141 to i32, !dbg !42
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 2, i32 31), !dbg !42
  %144 = bitcast i32 %143 to float, !dbg !42
  %145 = fadd float %141, %144, !dbg !37
  %146 = bitcast float %145 to i32, !dbg !42
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 1, i32 31), !dbg !42
  %148 = bitcast i32 %147 to float, !dbg !42
  %149 = fadd float %145, %148, !dbg !37
  %150 = and i32 %124, 15, !dbg !42
  %151 = icmp eq i32 %16, 0, !dbg !42
  %152 = zext nneg i32 %150 to i64, !dbg !42
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i64 %152, !dbg !42
  %154 = bitcast float %149 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 %151) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %155 = icmp slt i32 %15, 16, !dbg !42
  %156 = sext i32 %15 to i64, !dbg !42
  %157 = getelementptr float, ptr addrspace(3) @global_smem, i64 %156, !dbg !42
  %158 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %157, i1 %155) #4, !dbg !42
  %159 = bitcast i32 %158 to float, !dbg !42
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 8, i32 31), !dbg !42
  %161 = bitcast i32 %160 to float, !dbg !42
  %162 = fadd float %159, %161, !dbg !37
  %163 = bitcast float %162 to i32, !dbg !42
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 4, i32 31), !dbg !42
  %165 = bitcast i32 %164 to float, !dbg !42
  %166 = fadd float %162, %165, !dbg !37
  %167 = bitcast float %166 to i32, !dbg !42
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 2, i32 31), !dbg !42
  %169 = bitcast i32 %168 to float, !dbg !42
  %170 = fadd float %166, %169, !dbg !37
  %171 = bitcast float %170 to i32, !dbg !42
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 1, i32 31), !dbg !42
  %173 = bitcast i32 %172 to float, !dbg !42
  %174 = fadd float %170, %173, !dbg !37
  %175 = and i32 %15, 15, !dbg !42
  %176 = icmp eq i32 %175, 0, !dbg !42
  %177 = and i1 %155, %176, !dbg !42
  %178 = bitcast float %174 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %178, i1 %177) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %179 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !42
  %180 = sext i32 %13 to i64, !dbg !43
  %181 = getelementptr i64, ptr addrspace(1) %5, i64 %180, !dbg !43
  %182 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %181, i1 %14) #4, !dbg !44
  %183 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %181, i1 %14) #4, !dbg !44
  %184 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %181, i1 %14) #4, !dbg !44
  %185 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %181, i1 %14) #4, !dbg !44
  %186 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %181, i1 %14) #4, !dbg !44
  %187 = getelementptr float, ptr addrspace(1) %7, i64 %180, !dbg !45
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 %14) #4, !dbg !46
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 %14) #4, !dbg !46
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 %14) #4, !dbg !46
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 %14) #4, !dbg !46
  %192 = add i64 %186, 128256, !dbg !47
  %193 = icmp slt i64 %186, 0, !dbg !48
  %194 = select i1 %193, i64 %192, i64 %186, !dbg !49
  %195 = icmp ugt i64 %194, 128255, !dbg !50
  %.not3 = and i1 %14, %195, !dbg !51
  %196 = getelementptr half, ptr addrspace(1) %6, i64 %21, !dbg !52
  %197 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %196, i1 %14) #4, !dbg !53
  %198 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %22, i1 %14) #4, !dbg !54
  %199 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %28, i1 %14) #4, !dbg !55
  %200 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %34, i1 %14) #4, !dbg !56
  %201 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %40, i1 true) #4, !dbg !57
  %202 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %46, i1 %14) #4, !dbg !58
  br i1 %.not3, label %203, label %204, !dbg !59

203:                                              ; preds = %12
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 92, ptr nonnull @assertFunc_0, i64 1), !dbg !59
  unreachable, !dbg !59

204:                                              ; preds = %12
  %205 = icmp slt i64 %185, 0, !dbg !48
  %206 = shl i64 %185, 12, !dbg !51
  %207 = add i64 %206, 525336576, !dbg !51
  %208 = select i1 %205, i64 %207, i64 %206, !dbg !51
  %209 = getelementptr float, ptr addrspace(1) %8, i64 %208
  %210 = fmul float %179, -5.000000e-01, !dbg !60
  %211 = bitcast i32 %191 to float, !dbg !46
  %212 = fmul float %211, %211, !dbg !61
  %213 = fmul float %212, %211, !dbg !62
  %214 = fmul float %210, %213, !dbg !63
  %215 = fmul float %214, 0x3F30000000000000, !dbg !64
  %216 = icmp eq i64 %185, -1, !dbg !65
  %217 = extractvalue { i32, i32 } %198, 1, !dbg !54
  %218 = bitcast i32 %217 to <2 x half>, !dbg !54
  %219 = extractelement <2 x half> %218, i64 1, !dbg !54
  %220 = fpext half %219 to float, !dbg !66
  %221 = extractvalue { i32, i32 } %199, 1, !dbg !55
  %222 = bitcast i32 %221 to <2 x half>, !dbg !55
  %223 = extractelement <2 x half> %222, i64 1, !dbg !55
  %224 = fpext half %223 to float, !dbg !67
  %225 = fadd float %220, %224, !dbg !68
  %226 = extractvalue { i32, i32 } %200, 1, !dbg !56
  %227 = bitcast i32 %226 to <2 x half>, !dbg !56
  %228 = extractelement <2 x half> %227, i64 1, !dbg !56
  %229 = fpext half %228 to float, !dbg !69
  %230 = fadd float %225, %229, !dbg !70
  %231 = extractvalue { i32, i32 } %201, 1, !dbg !57
  %232 = bitcast i32 %231 to <2 x half>, !dbg !57
  %233 = extractelement <2 x half> %232, i64 1, !dbg !57
  %234 = fpext half %233 to float, !dbg !71
  %235 = fmul float %230, %234, !dbg !72
  %236 = fmul float %235, %211, !dbg !73
  %237 = extractvalue { i32, i32 } %202, 1, !dbg !58
  %238 = bitcast i32 %237 to <2 x half>, !dbg !58
  %239 = extractelement <2 x half> %238, i64 1, !dbg !58
  %240 = fpext half %239 to float, !dbg !74
  %241 = fmul float %240, 2.000000e+00, !dbg !75
  %242 = fmul float %215, %241, !dbg !76
  %243 = fadd float %236, %242, !dbg !77
  %244 = extractvalue { i32, i32 } %197, 1, !dbg !53
  %245 = bitcast i32 %244 to <2 x half>, !dbg !53
  %246 = extractelement <2 x half> %245, i64 1, !dbg !53
  %247 = fpext half %246 to float, !dbg !78
  %248 = fadd float %243, %247, !dbg !79
  %249 = select i1 %216, float 0.000000e+00, float %248, !dbg !80
  %250 = extractelement <2 x half> %218, i64 0, !dbg !54
  %251 = fpext half %250 to float, !dbg !66
  %252 = extractelement <2 x half> %222, i64 0, !dbg !55
  %253 = fpext half %252 to float, !dbg !67
  %254 = fadd float %251, %253, !dbg !68
  %255 = extractelement <2 x half> %227, i64 0, !dbg !56
  %256 = fpext half %255 to float, !dbg !69
  %257 = fadd float %254, %256, !dbg !70
  %258 = extractelement <2 x half> %232, i64 0, !dbg !57
  %259 = fpext half %258 to float, !dbg !71
  %260 = fmul float %257, %259, !dbg !72
  %261 = fmul float %260, %211, !dbg !73
  %262 = extractelement <2 x half> %238, i64 0, !dbg !58
  %263 = fpext half %262 to float, !dbg !74
  %264 = fmul float %263, 2.000000e+00, !dbg !75
  %265 = fmul float %215, %264, !dbg !76
  %266 = fadd float %261, %265, !dbg !77
  %267 = extractelement <2 x half> %245, i64 0, !dbg !53
  %268 = fpext half %267 to float, !dbg !78
  %269 = fadd float %266, %268, !dbg !79
  %270 = select i1 %216, float 0.000000e+00, float %269, !dbg !80
  %271 = extractvalue { i32, i32 } %198, 0, !dbg !54
  %272 = bitcast i32 %271 to <2 x half>, !dbg !54
  %273 = extractelement <2 x half> %272, i64 1, !dbg !54
  %274 = fpext half %273 to float, !dbg !66
  %275 = extractvalue { i32, i32 } %199, 0, !dbg !55
  %276 = bitcast i32 %275 to <2 x half>, !dbg !55
  %277 = extractelement <2 x half> %276, i64 1, !dbg !55
  %278 = fpext half %277 to float, !dbg !67
  %279 = fadd float %274, %278, !dbg !68
  %280 = extractvalue { i32, i32 } %200, 0, !dbg !56
  %281 = bitcast i32 %280 to <2 x half>, !dbg !56
  %282 = extractelement <2 x half> %281, i64 1, !dbg !56
  %283 = fpext half %282 to float, !dbg !69
  %284 = fadd float %279, %283, !dbg !70
  %285 = extractvalue { i32, i32 } %201, 0, !dbg !57
  %286 = bitcast i32 %285 to <2 x half>, !dbg !57
  %287 = extractelement <2 x half> %286, i64 1, !dbg !57
  %288 = fpext half %287 to float, !dbg !71
  %289 = fmul float %284, %288, !dbg !72
  %290 = fmul float %289, %211, !dbg !73
  %291 = extractvalue { i32, i32 } %202, 0, !dbg !58
  %292 = bitcast i32 %291 to <2 x half>, !dbg !58
  %293 = extractelement <2 x half> %292, i64 1, !dbg !58
  %294 = fpext half %293 to float, !dbg !74
  %295 = fmul float %294, 2.000000e+00, !dbg !75
  %296 = fmul float %215, %295, !dbg !76
  %297 = fadd float %290, %296, !dbg !77
  %298 = extractvalue { i32, i32 } %197, 0, !dbg !53
  %299 = bitcast i32 %298 to <2 x half>, !dbg !53
  %300 = extractelement <2 x half> %299, i64 1, !dbg !53
  %301 = fpext half %300 to float, !dbg !78
  %302 = fadd float %297, %301, !dbg !79
  %303 = select i1 %216, float 0.000000e+00, float %302, !dbg !80
  %304 = extractelement <2 x half> %272, i64 0, !dbg !54
  %305 = fpext half %304 to float, !dbg !66
  %306 = extractelement <2 x half> %276, i64 0, !dbg !55
  %307 = fpext half %306 to float, !dbg !67
  %308 = fadd float %305, %307, !dbg !68
  %309 = extractelement <2 x half> %281, i64 0, !dbg !56
  %310 = fpext half %309 to float, !dbg !69
  %311 = fadd float %308, %310, !dbg !70
  %312 = extractelement <2 x half> %286, i64 0, !dbg !57
  %313 = fpext half %312 to float, !dbg !71
  %314 = fmul float %311, %313, !dbg !72
  %315 = fmul float %314, %211, !dbg !73
  %316 = extractelement <2 x half> %292, i64 0, !dbg !58
  %317 = fpext half %316 to float, !dbg !74
  %318 = fmul float %317, 2.000000e+00, !dbg !75
  %319 = fmul float %215, %318, !dbg !76
  %320 = fadd float %315, %319, !dbg !77
  %321 = extractelement <2 x half> %299, i64 0, !dbg !53
  %322 = fpext half %321 to float, !dbg !78
  %323 = fadd float %320, %322, !dbg !79
  %324 = select i1 %216, float 0.000000e+00, float %323, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %325 = getelementptr float, ptr addrspace(1) %209, i64 %20, !dbg !81
  %326 = tail call { float, float, float, float } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$9 atom.global.gpu.relaxed.add.v4.f32 { $0, $1, $2, $3 }, [ $4 + 0 ], { $5, $6, $7, $8 };", "=r,=r,=r,=r,l,r,r,r,r,b"(ptr addrspace(1) %325, float %324, float %303, float %270, float %249, i1 %14) #4, !dbg !82
  %327 = getelementptr half, ptr addrspace(1) %6, i64 %53, !dbg !52
  %328 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %327, i1 %14) #4, !dbg !53
  %329 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %54, i1 %14) #4, !dbg !54
  %330 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %60, i1 %14) #4, !dbg !55
  %331 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %66, i1 %14) #4, !dbg !56
  %332 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %72, i1 true) #4, !dbg !57
  %333 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %78, i1 %14) #4, !dbg !58
  %334 = extractvalue { i32, i32 } %329, 1, !dbg !54
  %335 = bitcast i32 %334 to <2 x half>, !dbg !54
  %336 = extractelement <2 x half> %335, i64 1, !dbg !54
  %337 = fpext half %336 to float, !dbg !66
  %338 = extractvalue { i32, i32 } %330, 1, !dbg !55
  %339 = bitcast i32 %338 to <2 x half>, !dbg !55
  %340 = extractelement <2 x half> %339, i64 1, !dbg !55
  %341 = fpext half %340 to float, !dbg !67
  %342 = fadd float %337, %341, !dbg !68
  %343 = extractvalue { i32, i32 } %331, 1, !dbg !56
  %344 = bitcast i32 %343 to <2 x half>, !dbg !56
  %345 = extractelement <2 x half> %344, i64 1, !dbg !56
  %346 = fpext half %345 to float, !dbg !69
  %347 = fadd float %342, %346, !dbg !70
  %348 = extractvalue { i32, i32 } %332, 1, !dbg !57
  %349 = bitcast i32 %348 to <2 x half>, !dbg !57
  %350 = extractelement <2 x half> %349, i64 1, !dbg !57
  %351 = fpext half %350 to float, !dbg !71
  %352 = fmul float %347, %351, !dbg !72
  %353 = fmul float %352, %211, !dbg !73
  %354 = extractvalue { i32, i32 } %333, 1, !dbg !58
  %355 = bitcast i32 %354 to <2 x half>, !dbg !58
  %356 = extractelement <2 x half> %355, i64 1, !dbg !58
  %357 = fpext half %356 to float, !dbg !74
  %358 = fmul float %357, 2.000000e+00, !dbg !75
  %359 = fmul float %215, %358, !dbg !76
  %360 = fadd float %353, %359, !dbg !77
  %361 = extractvalue { i32, i32 } %328, 1, !dbg !53
  %362 = bitcast i32 %361 to <2 x half>, !dbg !53
  %363 = extractelement <2 x half> %362, i64 1, !dbg !53
  %364 = fpext half %363 to float, !dbg !78
  %365 = fadd float %360, %364, !dbg !79
  %366 = select i1 %216, float 0.000000e+00, float %365, !dbg !80
  %367 = extractelement <2 x half> %335, i64 0, !dbg !54
  %368 = fpext half %367 to float, !dbg !66
  %369 = extractelement <2 x half> %339, i64 0, !dbg !55
  %370 = fpext half %369 to float, !dbg !67
  %371 = fadd float %368, %370, !dbg !68
  %372 = extractelement <2 x half> %344, i64 0, !dbg !56
  %373 = fpext half %372 to float, !dbg !69
  %374 = fadd float %371, %373, !dbg !70
  %375 = extractelement <2 x half> %349, i64 0, !dbg !57
  %376 = fpext half %375 to float, !dbg !71
  %377 = fmul float %374, %376, !dbg !72
  %378 = fmul float %377, %211, !dbg !73
  %379 = extractelement <2 x half> %355, i64 0, !dbg !58
  %380 = fpext half %379 to float, !dbg !74
  %381 = fmul float %380, 2.000000e+00, !dbg !75
  %382 = fmul float %215, %381, !dbg !76
  %383 = fadd float %378, %382, !dbg !77
  %384 = extractelement <2 x half> %362, i64 0, !dbg !53
  %385 = fpext half %384 to float, !dbg !78
  %386 = fadd float %383, %385, !dbg !79
  %387 = select i1 %216, float 0.000000e+00, float %386, !dbg !80
  %388 = extractvalue { i32, i32 } %329, 0, !dbg !54
  %389 = bitcast i32 %388 to <2 x half>, !dbg !54
  %390 = extractelement <2 x half> %389, i64 1, !dbg !54
  %391 = fpext half %390 to float, !dbg !66
  %392 = extractvalue { i32, i32 } %330, 0, !dbg !55
  %393 = bitcast i32 %392 to <2 x half>, !dbg !55
  %394 = extractelement <2 x half> %393, i64 1, !dbg !55
  %395 = fpext half %394 to float, !dbg !67
  %396 = fadd float %391, %395, !dbg !68
  %397 = extractvalue { i32, i32 } %331, 0, !dbg !56
  %398 = bitcast i32 %397 to <2 x half>, !dbg !56
  %399 = extractelement <2 x half> %398, i64 1, !dbg !56
  %400 = fpext half %399 to float, !dbg !69
  %401 = fadd float %396, %400, !dbg !70
  %402 = extractvalue { i32, i32 } %332, 0, !dbg !57
  %403 = bitcast i32 %402 to <2 x half>, !dbg !57
  %404 = extractelement <2 x half> %403, i64 1, !dbg !57
  %405 = fpext half %404 to float, !dbg !71
  %406 = fmul float %401, %405, !dbg !72
  %407 = fmul float %406, %211, !dbg !73
  %408 = extractvalue { i32, i32 } %333, 0, !dbg !58
  %409 = bitcast i32 %408 to <2 x half>, !dbg !58
  %410 = extractelement <2 x half> %409, i64 1, !dbg !58
  %411 = fpext half %410 to float, !dbg !74
  %412 = fmul float %411, 2.000000e+00, !dbg !75
  %413 = fmul float %215, %412, !dbg !76
  %414 = fadd float %407, %413, !dbg !77
  %415 = extractvalue { i32, i32 } %328, 0, !dbg !53
  %416 = bitcast i32 %415 to <2 x half>, !dbg !53
  %417 = extractelement <2 x half> %416, i64 1, !dbg !53
  %418 = fpext half %417 to float, !dbg !78
  %419 = fadd float %414, %418, !dbg !79
  %420 = select i1 %216, float 0.000000e+00, float %419, !dbg !80
  %421 = extractelement <2 x half> %389, i64 0, !dbg !54
  %422 = fpext half %421 to float, !dbg !66
  %423 = extractelement <2 x half> %393, i64 0, !dbg !55
  %424 = fpext half %423 to float, !dbg !67
  %425 = fadd float %422, %424, !dbg !68
  %426 = extractelement <2 x half> %398, i64 0, !dbg !56
  %427 = fpext half %426 to float, !dbg !69
  %428 = fadd float %425, %427, !dbg !70
  %429 = extractelement <2 x half> %403, i64 0, !dbg !57
  %430 = fpext half %429 to float, !dbg !71
  %431 = fmul float %428, %430, !dbg !72
  %432 = fmul float %431, %211, !dbg !73
  %433 = extractelement <2 x half> %409, i64 0, !dbg !58
  %434 = fpext half %433 to float, !dbg !74
  %435 = fmul float %434, 2.000000e+00, !dbg !75
  %436 = fmul float %215, %435, !dbg !76
  %437 = fadd float %432, %436, !dbg !77
  %438 = extractelement <2 x half> %416, i64 0, !dbg !53
  %439 = fpext half %438 to float, !dbg !78
  %440 = fadd float %437, %439, !dbg !79
  %441 = select i1 %216, float 0.000000e+00, float %440, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %442 = getelementptr float, ptr addrspace(1) %209, i64 %52, !dbg !81
  %443 = tail call { float, float, float, float } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$9 atom.global.gpu.relaxed.add.v4.f32 { $0, $1, $2, $3 }, [ $4 + 0 ], { $5, $6, $7, $8 };", "=r,=r,=r,=r,l,r,r,r,r,b"(ptr addrspace(1) %442, float %441, float %420, float %387, float %366, i1 %14) #4, !dbg !82
  ret void, !dbg !83
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crnwhfxb7zfxfwwrin7h4kkc5jsfdj3u6ms7omvekbnm6ohwt6c5.py", directory: "/tmp/torchinductor_root/rn")
!4 = !{ptr @triton_red_fused__to_copy_add_div_embedding_dense_backward_mul_pow_sum_13, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_embedding_dense_backward_mul_pow_sum_13", linkageName: "triton_red_fused__to_copy_add_div_embedding_dense_backward_mul_pow_sum_13", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 22, column: 28, scope: !10)
!12 = !DILocation(line: 24, column: 21, scope: !10)
!13 = !DILocation(line: 25, column: 37, scope: !10)
!14 = !DILocation(line: 35, column: 46, scope: !10)
!15 = !DILocation(line: 29, column: 40, scope: !10)
!16 = !DILocation(line: 35, column: 34, scope: !10)
!17 = !DILocation(line: 35, column: 51, scope: !10)
!18 = !DILocation(line: 36, column: 34, scope: !10)
!19 = !DILocation(line: 36, column: 51, scope: !10)
!20 = !DILocation(line: 37, column: 34, scope: !10)
!21 = !DILocation(line: 37, column: 51, scope: !10)
!22 = !DILocation(line: 38, column: 34, scope: !10)
!23 = !DILocation(line: 38, column: 41, scope: !10)
!24 = !DILocation(line: 39, column: 34, scope: !10)
!25 = !DILocation(line: 39, column: 51, scope: !10)
!26 = !DILocation(line: 30, column: 31, scope: !10)
!27 = !DILocation(line: 35, column: 112, scope: !10)
!28 = !DILocation(line: 36, column: 112, scope: !10)
!29 = !DILocation(line: 37, column: 112, scope: !10)
!30 = !DILocation(line: 38, column: 94, scope: !10)
!31 = !DILocation(line: 39, column: 112, scope: !10)
!32 = !DILocation(line: 40, column: 22, scope: !10)
!33 = !DILocation(line: 41, column: 22, scope: !10)
!34 = !DILocation(line: 42, column: 22, scope: !10)
!35 = !DILocation(line: 45, column: 23, scope: !10)
!36 = !DILocation(line: 47, column: 25, scope: !10)
!37 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !41)
!38 = distinct !DILexicalBlockFile(scope: !40, file: !39, discriminator: 0)
!39 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!40 = distinct !DILexicalBlockFile(scope: !10, file: !39, discriminator: 0)
!41 = !DILocation(line: 49, column: 27, scope: !10)
!42 = !DILocation(line: 286, column: 36, scope: !40, inlinedAt: !41)
!43 = !DILocation(line: 50, column: 31, scope: !10)
!44 = !DILocation(line: 50, column: 36, scope: !10)
!45 = !DILocation(line: 51, column: 31, scope: !10)
!46 = !DILocation(line: 51, column: 36, scope: !10)
!47 = !DILocation(line: 89, column: 24, scope: !10)
!48 = !DILocation(line: 90, column: 24, scope: !10)
!49 = !DILocation(line: 91, column: 39, scope: !10)
!50 = !DILocation(line: 92, column: 42, scope: !10)
!51 = !DILocation(line: 93, column: 62, scope: !10)
!52 = !DILocation(line: 58, column: 35, scope: !10)
!53 = !DILocation(line: 58, column: 52, scope: !10)
!54 = !DILocation(line: 59, column: 52, scope: !10)
!55 = !DILocation(line: 60, column: 52, scope: !10)
!56 = !DILocation(line: 61, column: 52, scope: !10)
!57 = !DILocation(line: 62, column: 42, scope: !10)
!58 = !DILocation(line: 63, column: 52, scope: !10)
!59 = !DILocation(line: 92, column: 71, scope: !10)
!60 = !DILocation(line: 72, column: 24, scope: !10)
!61 = !DILocation(line: 73, column: 24, scope: !10)
!62 = !DILocation(line: 74, column: 24, scope: !10)
!63 = !DILocation(line: 75, column: 24, scope: !10)
!64 = !DILocation(line: 77, column: 24, scope: !10)
!65 = !DILocation(line: 65, column: 25, scope: !10)
!66 = !DILocation(line: 59, column: 114, scope: !10)
!67 = !DILocation(line: 60, column: 114, scope: !10)
!68 = !DILocation(line: 66, column: 24, scope: !10)
!69 = !DILocation(line: 61, column: 114, scope: !10)
!70 = !DILocation(line: 67, column: 24, scope: !10)
!71 = !DILocation(line: 62, column: 95, scope: !10)
!72 = !DILocation(line: 68, column: 24, scope: !10)
!73 = !DILocation(line: 70, column: 24, scope: !10)
!74 = !DILocation(line: 63, column: 114, scope: !10)
!75 = !DILocation(line: 80, column: 24, scope: !10)
!76 = !DILocation(line: 81, column: 24, scope: !10)
!77 = !DILocation(line: 82, column: 24, scope: !10)
!78 = !DILocation(line: 58, column: 114, scope: !10)
!79 = !DILocation(line: 84, column: 24, scope: !10)
!80 = !DILocation(line: 87, column: 39, scope: !10)
!81 = !DILocation(line: 93, column: 34, scope: !10)
!82 = !DILocation(line: 93, column: 98, scope: !10)
!83 = !DILocation(line: 52, column: 4, scope: !10)
