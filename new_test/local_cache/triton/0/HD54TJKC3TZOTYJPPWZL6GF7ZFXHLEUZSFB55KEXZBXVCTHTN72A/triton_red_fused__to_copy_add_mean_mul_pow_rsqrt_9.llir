; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 1, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 31, !dbg !11
  %13 = and i32 %11, 1, !dbg !11
  %14 = or disjoint i32 %10, 1, !dbg !12
  %15 = icmp slt i32 %10, %5, !dbg !13
  %16 = icmp slt i32 %14, %5, !dbg !13
  %17 = lshr i32 %11, 5, !dbg !14
  %18 = shl i32 %11, 3, !dbg !14
  %19 = and i32 %18, 4088, !dbg !14
  %20 = shl i32 %9, 13, !dbg !15
  %21 = shl i32 %14, 12, !dbg !15
  %22 = or disjoint i32 %19, %20, !dbg !16
  %23 = or disjoint i32 %21, %19, !dbg !16
  %24 = sext i32 %22 to i64, !dbg !17
  %25 = getelementptr half, ptr addrspace(1) %2, i64 %24, !dbg !17
  %26 = sext i32 %23 to i64, !dbg !17
  %27 = getelementptr half, ptr addrspace(1) %2, i64 %26, !dbg !17
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %25, i1 %15) #5, !dbg !18
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !18
  %30 = bitcast i32 %29 to <2 x half>, !dbg !18
  %31 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !18
  %32 = bitcast i32 %31 to <2 x half>, !dbg !18
  %33 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !18
  %34 = bitcast i32 %33 to <2 x half>, !dbg !18
  %35 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !18
  %36 = bitcast i32 %35 to <2 x half>, !dbg !18
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %27, i1 %16) #5, !dbg !18
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !18
  %39 = bitcast i32 %38 to <2 x half>, !dbg !18
  %40 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !18
  %41 = bitcast i32 %40 to <2 x half>, !dbg !18
  %42 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !18
  %43 = bitcast i32 %42 to <2 x half>, !dbg !18
  %44 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !18
  %45 = bitcast i32 %44 to <2 x half>, !dbg !18
  %46 = getelementptr half, ptr addrspace(1) %0, i64 %24, !dbg !19
  %47 = getelementptr half, ptr addrspace(1) %0, i64 %26, !dbg !19
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %46, i1 %15) #5, !dbg !20
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !20
  %50 = bitcast i32 %49 to <2 x half>, !dbg !20
  %51 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !20
  %52 = bitcast i32 %51 to <2 x half>, !dbg !20
  %53 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !20
  %54 = bitcast i32 %53 to <2 x half>, !dbg !20
  %55 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !20
  %56 = bitcast i32 %55 to <2 x half>, !dbg !20
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %47, i1 %16) #5, !dbg !20
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !20
  %59 = bitcast i32 %58 to <2 x half>, !dbg !20
  %60 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !20
  %61 = bitcast i32 %60 to <2 x half>, !dbg !20
  %62 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !20
  %63 = bitcast i32 %62 to <2 x half>, !dbg !20
  %64 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !20
  %65 = bitcast i32 %64 to <2 x half>, !dbg !20
  %66 = fpext <2 x half> %30 to <2 x float>, !dbg !21
  %67 = fpext <2 x half> %50 to <2 x float>, !dbg !22
  %68 = fadd <2 x float> %66, %67, !dbg !23
  %69 = fmul <2 x float> %68, %68, !dbg !24
  %70 = fmul <2 x float> %68, %68, !dbg !24
  %71 = fptrunc <2 x float> %68 to <2 x half>, !dbg !25
  %72 = fpext <2 x half> %32 to <2 x float>, !dbg !21
  %73 = fpext <2 x half> %52 to <2 x float>, !dbg !22
  %74 = fadd <2 x float> %72, %73, !dbg !23
  %75 = fmul <2 x float> %74, %74, !dbg !24
  %76 = fmul <2 x float> %74, %74, !dbg !24
  %77 = fptrunc <2 x float> %74 to <2 x half>, !dbg !25
  %78 = fpext <2 x half> %34 to <2 x float>, !dbg !21
  %79 = fpext <2 x half> %54 to <2 x float>, !dbg !22
  %80 = fadd <2 x float> %78, %79, !dbg !23
  %81 = fmul <2 x float> %80, %80, !dbg !24
  %82 = fmul <2 x float> %80, %80, !dbg !24
  %83 = fptrunc <2 x float> %80 to <2 x half>, !dbg !25
  %84 = fpext <2 x half> %36 to <2 x float>, !dbg !21
  %85 = fpext <2 x half> %56 to <2 x float>, !dbg !22
  %86 = fadd <2 x float> %84, %85, !dbg !23
  %87 = fmul <2 x float> %86, %86, !dbg !24
  %88 = fmul <2 x float> %86, %86, !dbg !24
  %89 = fptrunc <2 x float> %86 to <2 x half>, !dbg !25
  %90 = fpext <2 x half> %39 to <2 x float>, !dbg !21
  %91 = fpext <2 x half> %59 to <2 x float>, !dbg !22
  %92 = fadd <2 x float> %90, %91, !dbg !23
  %93 = fmul <2 x float> %92, %92, !dbg !24
  %94 = fmul <2 x float> %92, %92, !dbg !24
  %95 = fptrunc <2 x float> %92 to <2 x half>, !dbg !25
  %96 = fpext <2 x half> %41 to <2 x float>, !dbg !21
  %97 = fpext <2 x half> %61 to <2 x float>, !dbg !22
  %98 = fadd <2 x float> %96, %97, !dbg !23
  %99 = fmul <2 x float> %98, %98, !dbg !24
  %100 = fmul <2 x float> %98, %98, !dbg !24
  %101 = fptrunc <2 x float> %98 to <2 x half>, !dbg !25
  %102 = fpext <2 x half> %43 to <2 x float>, !dbg !21
  %103 = fpext <2 x half> %63 to <2 x float>, !dbg !22
  %104 = fadd <2 x float> %102, %103, !dbg !23
  %105 = fmul <2 x float> %104, %104, !dbg !24
  %106 = fmul <2 x float> %104, %104, !dbg !24
  %107 = fptrunc <2 x float> %104 to <2 x half>, !dbg !25
  %108 = fpext <2 x half> %45 to <2 x float>, !dbg !21
  %109 = fpext <2 x half> %65 to <2 x float>, !dbg !22
  %110 = fadd <2 x float> %108, %109, !dbg !23
  %111 = fmul <2 x float> %110, %110, !dbg !24
  %112 = fmul <2 x float> %110, %110, !dbg !24
  %113 = fptrunc <2 x float> %110 to <2 x half>, !dbg !25
  %114 = bitcast <2 x half> %71 to i32, !dbg !25
  %115 = bitcast <2 x half> %77 to i32, !dbg !25
  %116 = bitcast <2 x half> %83 to i32, !dbg !25
  %117 = bitcast <2 x half> %89 to i32, !dbg !25
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %114, i32 %115, i32 %116, i32 %117, ptr addrspace(1) %46, i1 %15) #5, !dbg !25
  %118 = bitcast <2 x half> %95 to i32, !dbg !25
  %119 = bitcast <2 x half> %101 to i32, !dbg !25
  %120 = bitcast <2 x half> %107 to i32, !dbg !25
  %121 = bitcast <2 x half> %113 to i32, !dbg !25
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %118, i32 %119, i32 %120, i32 %121, ptr addrspace(1) %47, i1 %16) #5, !dbg !25
  %shift = shufflevector <2 x float> %70, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !26
  %122 = fadd <2 x float> %69, %shift, !dbg !26
  %123 = fadd <2 x float> %75, %122, !dbg !26
  %shift49 = shufflevector <2 x float> %76, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !26
  %124 = fadd <2 x float> %shift49, %123, !dbg !26
  %125 = fadd <2 x float> %81, %124, !dbg !26
  %shift50 = shufflevector <2 x float> %82, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !26
  %126 = fadd <2 x float> %shift50, %125, !dbg !26
  %127 = fadd <2 x float> %87, %126, !dbg !26
  %shift51 = shufflevector <2 x float> %88, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !26
  %128 = fadd <2 x float> %shift51, %127, !dbg !26
  %129 = extractelement <2 x float> %128, i64 0, !dbg !26
  %130 = select i1 %15, float %129, float 0.000000e+00, !dbg !26
  %shift52 = shufflevector <2 x float> %94, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !26
  %131 = fadd <2 x float> %93, %shift52, !dbg !26
  %132 = fadd <2 x float> %99, %131, !dbg !26
  %shift53 = shufflevector <2 x float> %100, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !26
  %133 = fadd <2 x float> %shift53, %132, !dbg !26
  %134 = fadd <2 x float> %105, %133, !dbg !26
  %shift54 = shufflevector <2 x float> %106, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !26
  %135 = fadd <2 x float> %shift54, %134, !dbg !26
  %136 = fadd <2 x float> %111, %135, !dbg !26
  %shift55 = shufflevector <2 x float> %112, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !26
  %137 = fadd <2 x float> %shift55, %136, !dbg !26
  %138 = extractelement <2 x float> %137, i64 0, !dbg !26
  %139 = select i1 %16, float %138, float 0.000000e+00, !dbg !26
  %140 = bitcast float %130 to i32, !dbg !31
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 16, i32 31), !dbg !31
  %142 = bitcast i32 %141 to float, !dbg !31
  %143 = fadd float %130, %142, !dbg !26
  %144 = bitcast float %143 to i32, !dbg !31
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 8, i32 31), !dbg !31
  %146 = bitcast i32 %145 to float, !dbg !31
  %147 = fadd float %143, %146, !dbg !26
  %148 = bitcast float %147 to i32, !dbg !31
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 4, i32 31), !dbg !31
  %150 = bitcast i32 %149 to float, !dbg !31
  %151 = fadd float %147, %150, !dbg !26
  %152 = bitcast float %151 to i32, !dbg !31
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 2, i32 31), !dbg !31
  %154 = bitcast i32 %153 to float, !dbg !31
  %155 = fadd float %151, %154, !dbg !26
  %156 = bitcast float %155 to i32, !dbg !31
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 1, i32 31), !dbg !31
  %158 = bitcast i32 %157 to float, !dbg !31
  %159 = fadd float %155, %158, !dbg !26
  %160 = bitcast float %139 to i32, !dbg !31
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 16, i32 31), !dbg !31
  %162 = bitcast i32 %161 to float, !dbg !31
  %163 = fadd float %139, %162, !dbg !26
  %164 = bitcast float %163 to i32, !dbg !31
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 8, i32 31), !dbg !31
  %166 = bitcast i32 %165 to float, !dbg !31
  %167 = fadd float %163, %166, !dbg !26
  %168 = bitcast float %167 to i32, !dbg !31
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 4, i32 31), !dbg !31
  %170 = bitcast i32 %169 to float, !dbg !31
  %171 = fadd float %167, %170, !dbg !26
  %172 = bitcast float %171 to i32, !dbg !31
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 2, i32 31), !dbg !31
  %174 = bitcast i32 %173 to float, !dbg !31
  %175 = fadd float %171, %174, !dbg !26
  %176 = bitcast float %175 to i32, !dbg !31
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 1, i32 31), !dbg !31
  %178 = bitcast i32 %177 to float, !dbg !31
  %179 = fadd float %175, %178, !dbg !26
  %180 = and i32 %17, 15, !dbg !31
  %181 = icmp eq i32 %12, 0, !dbg !31
  %182 = getelementptr float, ptr addrspace(3) @global_smem, i32 %180, !dbg !31
  %183 = bitcast float %159 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %183, i1 %181) #5, !dbg !31
  %184 = or disjoint i32 %180, 16, !dbg !31
  %185 = getelementptr float, ptr addrspace(3) @global_smem, i32 %184, !dbg !31
  %186 = bitcast float %179 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %186, i1 %181) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %187 = icmp slt i32 %11, 32, !dbg !31
  %188 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !31
  %189 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %188, i1 %187) #5, !dbg !31
  %190 = bitcast i32 %189 to float, !dbg !31
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 8, i32 31), !dbg !31
  %192 = bitcast i32 %191 to float, !dbg !31
  %193 = fadd float %190, %192, !dbg !26
  %194 = bitcast float %193 to i32, !dbg !31
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 4, i32 31), !dbg !31
  %196 = bitcast i32 %195 to float, !dbg !31
  %197 = fadd float %193, %196, !dbg !26
  %198 = bitcast float %197 to i32, !dbg !31
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 2, i32 31), !dbg !31
  %200 = bitcast i32 %199 to float, !dbg !31
  %201 = fadd float %197, %200, !dbg !26
  %202 = bitcast float %201 to i32, !dbg !31
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 1, i32 31), !dbg !31
  %204 = bitcast i32 %203 to float, !dbg !31
  %205 = fadd float %201, %204, !dbg !26
  %206 = and i32 %11, 15, !dbg !31
  %207 = icmp eq i32 %206, 0, !dbg !31
  %208 = and i1 %187, %207, !dbg !31
  %209 = bitcast float %205 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %188, <1 x i32> %209, i1 %208) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %210 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !31
  %211 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %212 = bitcast float %210 to i32, !dbg !32
  %213 = bitcast float %211 to i32, !dbg !32
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %212, i32 %213, i1 true) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %214 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %13, !dbg !32
  %215 = load float, ptr addrspace(3) %214, align 4, !dbg !32
  %216 = tail call float @llvm.nvvm.div.full(float %215, float 4.096000e+03), !dbg !33
  %217 = tail call float @llvm.nvvm.div.full(float %210, float 4.096000e+03), !dbg !33
  %218 = tail call float @llvm.nvvm.div.full(float %211, float 4.096000e+03), !dbg !33
  %219 = fadd float %216, 0x3EE4F8B580000000, !dbg !34
  %220 = fadd float %217, 0x3EE4F8B580000000, !dbg !34
  %221 = fadd float %218, 0x3EE4F8B580000000, !dbg !34
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i = icmp eq i32 %222, 0, !dbg !32
  br i1 %.not.i, label %225, label %223, !dbg !32

223:                                              ; preds = %8
  %224 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %219), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

225:                                              ; preds = %8
  %226 = tail call float @llvm.nvvm.rsqrt.approx.f(float %219), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

__nv_rsqrtf.exit:                                 ; preds = %223, %225
  %.0.i = phi float [ %224, %223 ], [ %226, %225 ], !dbg !32
  %227 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i22 = icmp eq i32 %234, 0, !dbg !32
  br i1 %.not.i22, label %237, label %235, !dbg !32

235:                                              ; preds = %__nv_rsqrtf.exit
  %236 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %220), !dbg !32
  br label %__nv_rsqrtf.exit24, !dbg !32

237:                                              ; preds = %__nv_rsqrtf.exit
  %238 = tail call float @llvm.nvvm.rsqrt.approx.f(float %220), !dbg !32
  br label %__nv_rsqrtf.exit24, !dbg !32

__nv_rsqrtf.exit24:                               ; preds = %235, %237
  %.0.i23 = phi float [ %236, %235 ], [ %238, %237 ], !dbg !32
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %240 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %242 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %243 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i46 = icmp eq i32 %246, 0, !dbg !32
  br i1 %.not.i46, label %249, label %247, !dbg !32

247:                                              ; preds = %__nv_rsqrtf.exit24
  %248 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %221), !dbg !32
  br label %__nv_rsqrtf.exit48, !dbg !32

249:                                              ; preds = %__nv_rsqrtf.exit24
  %250 = tail call float @llvm.nvvm.rsqrt.approx.f(float %221), !dbg !32
  br label %__nv_rsqrtf.exit48, !dbg !32

__nv_rsqrtf.exit48:                               ; preds = %247, %249
  %.0.i47 = phi float [ %248, %247 ], [ %250, %249 ], !dbg !32
  %251 = or disjoint i32 %10, %13, !dbg !12
  %252 = icmp slt i32 %251, %5, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %253 = sext i32 %251 to i64, !dbg !36
  %254 = getelementptr float, ptr addrspace(1) %1, i64 %253, !dbg !36
  %255 = and i32 %11, 510, !dbg !37
  %256 = icmp eq i32 %255, 0, !dbg !37
  %257 = bitcast float %.0.i to i32, !dbg !37
  %258 = and i1 %256, %252, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %257, ptr addrspace(1) %254, i1 %258) #5, !dbg !37
  %259 = zext nneg i32 %19 to i64, !dbg !38
  %260 = getelementptr half, ptr addrspace(1) %3, i64 %259, !dbg !38
  %261 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %260, i1 true) #5, !dbg !39
  %262 = extractvalue { i32, i32, i32, i32 } %261, 0, !dbg !39
  %263 = bitcast i32 %262 to <2 x half>, !dbg !39
  %264 = extractvalue { i32, i32, i32, i32 } %261, 1, !dbg !39
  %265 = bitcast i32 %264 to <2 x half>, !dbg !39
  %266 = extractvalue { i32, i32, i32, i32 } %261, 2, !dbg !39
  %267 = bitcast i32 %266 to <2 x half>, !dbg !39
  %268 = extractvalue { i32, i32, i32, i32 } %261, 3, !dbg !39
  %269 = bitcast i32 %268 to <2 x half>, !dbg !39
  %270 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %46, i1 %15) #5, !dbg !40
  %271 = extractvalue { i32, i32, i32, i32 } %270, 0, !dbg !40
  %272 = bitcast i32 %271 to <2 x half>, !dbg !40
  %273 = extractvalue { i32, i32, i32, i32 } %270, 1, !dbg !40
  %274 = bitcast i32 %273 to <2 x half>, !dbg !40
  %275 = extractvalue { i32, i32, i32, i32 } %270, 2, !dbg !40
  %276 = bitcast i32 %275 to <2 x half>, !dbg !40
  %277 = extractvalue { i32, i32, i32, i32 } %270, 3, !dbg !40
  %278 = bitcast i32 %277 to <2 x half>, !dbg !40
  %279 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %47, i1 %16) #5, !dbg !40
  %280 = extractvalue { i32, i32, i32, i32 } %279, 0, !dbg !40
  %281 = bitcast i32 %280 to <2 x half>, !dbg !40
  %282 = extractvalue { i32, i32, i32, i32 } %279, 1, !dbg !40
  %283 = bitcast i32 %282 to <2 x half>, !dbg !40
  %284 = extractvalue { i32, i32, i32, i32 } %279, 2, !dbg !40
  %285 = bitcast i32 %284 to <2 x half>, !dbg !40
  %286 = extractvalue { i32, i32, i32, i32 } %279, 3, !dbg !40
  %287 = bitcast i32 %286 to <2 x half>, !dbg !40
  %288 = getelementptr half, ptr addrspace(1) %4, i64 %24, !dbg !41
  %289 = getelementptr half, ptr addrspace(1) %4, i64 %26, !dbg !41
  %290 = fpext <2 x half> %263 to <2 x float>, !dbg !42
  %291 = fpext <2 x half> %272 to <2 x float>, !dbg !43
  %292 = insertelement <2 x float> poison, float %.0.i23, i64 0, !dbg !44
  %293 = shufflevector <2 x float> %292, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !44
  %294 = fmul <2 x float> %293, %291, !dbg !44
  %295 = fmul <2 x float> %294, %290, !dbg !45
  %296 = fptrunc <2 x float> %295 to <2 x half>, !dbg !46
  %297 = fpext <2 x half> %265 to <2 x float>, !dbg !42
  %298 = fpext <2 x half> %274 to <2 x float>, !dbg !43
  %299 = fmul <2 x float> %293, %298, !dbg !44
  %300 = fmul <2 x float> %299, %297, !dbg !45
  %301 = fptrunc <2 x float> %300 to <2 x half>, !dbg !46
  %302 = fpext <2 x half> %267 to <2 x float>, !dbg !42
  %303 = fpext <2 x half> %276 to <2 x float>, !dbg !43
  %304 = fmul <2 x float> %293, %303, !dbg !44
  %305 = fmul <2 x float> %304, %302, !dbg !45
  %306 = fptrunc <2 x float> %305 to <2 x half>, !dbg !46
  %307 = fpext <2 x half> %269 to <2 x float>, !dbg !42
  %308 = fpext <2 x half> %278 to <2 x float>, !dbg !43
  %309 = fmul <2 x float> %293, %308, !dbg !44
  %310 = fmul <2 x float> %309, %307, !dbg !45
  %311 = fptrunc <2 x float> %310 to <2 x half>, !dbg !46
  %312 = fpext <2 x half> %281 to <2 x float>, !dbg !43
  %313 = insertelement <2 x float> poison, float %.0.i47, i64 0, !dbg !44
  %314 = shufflevector <2 x float> %313, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !44
  %315 = fmul <2 x float> %314, %312, !dbg !44
  %316 = fmul <2 x float> %315, %290, !dbg !45
  %317 = fptrunc <2 x float> %316 to <2 x half>, !dbg !46
  %318 = fpext <2 x half> %283 to <2 x float>, !dbg !43
  %319 = fmul <2 x float> %314, %318, !dbg !44
  %320 = fmul <2 x float> %319, %297, !dbg !45
  %321 = fptrunc <2 x float> %320 to <2 x half>, !dbg !46
  %322 = fpext <2 x half> %285 to <2 x float>, !dbg !43
  %323 = fmul <2 x float> %314, %322, !dbg !44
  %324 = fmul <2 x float> %323, %302, !dbg !45
  %325 = fptrunc <2 x float> %324 to <2 x half>, !dbg !46
  %326 = fpext <2 x half> %287 to <2 x float>, !dbg !43
  %327 = fmul <2 x float> %314, %326, !dbg !44
  %328 = fmul <2 x float> %327, %307, !dbg !45
  %329 = fptrunc <2 x float> %328 to <2 x half>, !dbg !46
  %330 = bitcast <2 x half> %296 to i32, !dbg !46
  %331 = bitcast <2 x half> %301 to i32, !dbg !46
  %332 = bitcast <2 x half> %306 to i32, !dbg !46
  %333 = bitcast <2 x half> %311 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %330, i32 %331, i32 %332, i32 %333, ptr addrspace(1) %288, i1 %15) #5, !dbg !46
  %334 = bitcast <2 x half> %317 to i32, !dbg !46
  %335 = bitcast <2 x half> %321 to i32, !dbg !46
  %336 = bitcast <2 x half> %325 to i32, !dbg !46
  %337 = bitcast <2 x half> %329 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %334, i32 %335, i32 %336, i32 %337, ptr addrspace(1) %289, i1 %16) #5, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6w7ysj4hzbjrc3ky2bllh4hizall6zebpysmidywv3kv2zvm2ex.py", directory: "/tmp/torchinductor_root/6w")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 35, column: 41, scope: !6)
!17 = !DILocation(line: 35, column: 34, scope: !6)
!18 = !DILocation(line: 35, column: 51, scope: !6)
!19 = !DILocation(line: 36, column: 38, scope: !6)
!20 = !DILocation(line: 36, column: 55, scope: !6)
!21 = !DILocation(line: 35, column: 113, scope: !6)
!22 = !DILocation(line: 36, column: 117, scope: !6)
!23 = !DILocation(line: 37, column: 22, scope: !6)
!24 = !DILocation(line: 39, column: 22, scope: !6)
!25 = !DILocation(line: 43, column: 55, scope: !6)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !30)
!27 = distinct !DILexicalBlockFile(scope: !29, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!29 = distinct !DILexicalBlockFile(scope: !6, file: !28, discriminator: 0)
!30 = !DILocation(line: 44, column: 25, scope: !6)
!31 = !DILocation(line: 286, column: 36, scope: !29, inlinedAt: !30)
!32 = !DILocation(line: 49, column: 28, scope: !6)
!33 = !DILocation(line: 46, column: 19, scope: !6)
!34 = !DILocation(line: 48, column: 19, scope: !6)
!35 = !DILocation(line: 50, column: 4, scope: !6)
!36 = !DILocation(line: 51, column: 28, scope: !6)
!37 = !DILocation(line: 51, column: 40, scope: !6)
!38 = !DILocation(line: 58, column: 35, scope: !6)
!39 = !DILocation(line: 58, column: 42, scope: !6)
!40 = !DILocation(line: 59, column: 56, scope: !6)
!41 = !DILocation(line: 64, column: 29, scope: !6)
!42 = !DILocation(line: 58, column: 95, scope: !6)
!43 = !DILocation(line: 59, column: 118, scope: !6)
!44 = !DILocation(line: 61, column: 24, scope: !6)
!45 = !DILocation(line: 63, column: 24, scope: !6)
!46 = !DILocation(line: 64, column: 53, scope: !6)
!47 = !DILocation(line: 52, column: 4, scope: !6)
