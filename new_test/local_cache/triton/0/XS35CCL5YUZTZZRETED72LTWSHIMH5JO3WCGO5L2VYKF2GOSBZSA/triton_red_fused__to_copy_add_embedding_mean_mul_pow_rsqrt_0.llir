; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/yi/cyihme7t354xdekku5rks7waotqdnz3mpo47q3uhqjtr5ixrgolb.py\00"
@assertMessage_0 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp4 < 128256\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !10 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %11 = icmp slt i32 %10, %6, !dbg !12
  %12 = sext i32 %10 to i64, !dbg !13
  %13 = getelementptr i64, ptr addrspace(1) %1, i64 %12, !dbg !13
  %14 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %15 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %16 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %17 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %18 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %23 = add i64 %22, 128256, !dbg !15
  %24 = icmp slt i64 %22, 0, !dbg !16
  %25 = select i1 %24, i64 %23, i64 %22, !dbg !17
  %26 = icmp ugt i64 %25, 128255, !dbg !18
  %.not2 = and i1 %11, %26, !dbg !19
  br i1 %.not2, label %27, label %28, !dbg !19

27:                                               ; preds = %9
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !19
  unreachable, !dbg !19

28:                                               ; preds = %9
  %29 = icmp slt i64 %21, 0, !dbg !16
  %30 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !20
  %31 = shl i32 %30, 3, !dbg !20
  %32 = and i32 %31, 2040, !dbg !20
  %33 = or disjoint i32 %32, 2048, !dbg !20
  %34 = lshr i32 %30, 5, !dbg !20
  %35 = and i32 %30, 31, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %36 = shl i64 %21, 12, !dbg !21
  %37 = add i64 %36, 525336576, !dbg !21
  %38 = select i1 %29, i64 %37, i64 %36, !dbg !21
  %39 = zext nneg i32 %32 to i64, !dbg !22
  %40 = zext nneg i32 %33 to i64, !dbg !22
  %41 = getelementptr half, ptr addrspace(1) %2, i64 %38, !dbg !23
  %42 = getelementptr half, ptr addrspace(1) %41, i64 %39, !dbg !23
  %43 = getelementptr half, ptr addrspace(1) %41, i64 %40, !dbg !23
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %42, i1 %11) #6, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !24
  %46 = bitcast i32 %45 to <2 x half>, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !24
  %48 = bitcast i32 %47 to <2 x half>, !dbg !24
  %49 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !24
  %50 = bitcast i32 %49 to <2 x half>, !dbg !24
  %51 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !24
  %52 = bitcast i32 %51 to <2 x half>, !dbg !24
  %53 = extractelement <2 x half> %46, i64 0, !dbg !24
  %54 = extractelement <2 x half> %46, i64 1, !dbg !24
  %55 = extractelement <2 x half> %48, i64 0, !dbg !24
  %56 = extractelement <2 x half> %48, i64 1, !dbg !24
  %57 = extractelement <2 x half> %50, i64 0, !dbg !24
  %58 = extractelement <2 x half> %50, i64 1, !dbg !24
  %59 = extractelement <2 x half> %52, i64 0, !dbg !24
  %60 = extractelement <2 x half> %52, i64 1, !dbg !24
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %43, i1 %11) #6, !dbg !24
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !24
  %63 = bitcast i32 %62 to <2 x half>, !dbg !24
  %64 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !24
  %65 = bitcast i32 %64 to <2 x half>, !dbg !24
  %66 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !24
  %67 = bitcast i32 %66 to <2 x half>, !dbg !24
  %68 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !24
  %69 = bitcast i32 %68 to <2 x half>, !dbg !24
  %70 = extractelement <2 x half> %63, i64 0, !dbg !24
  %71 = extractelement <2 x half> %63, i64 1, !dbg !24
  %72 = extractelement <2 x half> %65, i64 0, !dbg !24
  %73 = extractelement <2 x half> %65, i64 1, !dbg !24
  %74 = extractelement <2 x half> %67, i64 0, !dbg !24
  %75 = extractelement <2 x half> %67, i64 1, !dbg !24
  %76 = extractelement <2 x half> %69, i64 0, !dbg !24
  %77 = extractelement <2 x half> %69, i64 1, !dbg !24
  %78 = fpext half %53 to float, !dbg !25
  %79 = fpext half %54 to float, !dbg !25
  %80 = fpext half %55 to float, !dbg !25
  %81 = fpext half %56 to float, !dbg !25
  %82 = fpext half %57 to float, !dbg !25
  %83 = fpext half %58 to float, !dbg !25
  %84 = fpext half %59 to float, !dbg !25
  %85 = fpext half %60 to float, !dbg !25
  %86 = fpext half %70 to float, !dbg !25
  %87 = fpext half %71 to float, !dbg !25
  %88 = fpext half %72 to float, !dbg !25
  %89 = fpext half %73 to float, !dbg !25
  %90 = fpext half %74 to float, !dbg !25
  %91 = fpext half %75 to float, !dbg !25
  %92 = fpext half %76 to float, !dbg !25
  %93 = fpext half %77 to float, !dbg !25
  %94 = fmul float %78, %78, !dbg !26
  %95 = fmul float %79, %79, !dbg !26
  %96 = fmul float %80, %80, !dbg !26
  %97 = fmul float %81, %81, !dbg !26
  %98 = fmul float %82, %82, !dbg !26
  %99 = fmul float %83, %83, !dbg !26
  %100 = fmul float %84, %84, !dbg !26
  %101 = fmul float %85, %85, !dbg !26
  %102 = fmul float %86, %86, !dbg !26
  %103 = fmul float %87, %87, !dbg !26
  %104 = fmul float %88, %88, !dbg !26
  %105 = fmul float %89, %89, !dbg !26
  %106 = fmul float %90, %90, !dbg !26
  %107 = fmul float %91, %91, !dbg !26
  %108 = fmul float %92, %92, !dbg !26
  %109 = fmul float %93, %93, !dbg !26
  %110 = shl i32 %10, 12, !dbg !27
  %111 = or disjoint i32 %32, %110, !dbg !28
  %112 = or disjoint i32 %33, %110, !dbg !28
  %113 = sext i32 %111 to i64, !dbg !29
  %114 = getelementptr half, ptr addrspace(1) %4, i64 %113, !dbg !29
  %115 = sext i32 %112 to i64, !dbg !29
  %116 = getelementptr half, ptr addrspace(1) %4, i64 %115, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %45, i32 %47, i32 %49, i32 %51, ptr addrspace(1) %114, i1 %11) #6, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %62, i32 %64, i32 %66, i32 %68, ptr addrspace(1) %116, i1 %11) #6, !dbg !30
  %117 = fadd float %94, %95, !dbg !31
  %118 = fadd float %96, %117, !dbg !31
  %119 = fadd float %97, %118, !dbg !31
  %120 = fadd float %98, %119, !dbg !31
  %121 = fadd float %99, %120, !dbg !31
  %122 = fadd float %100, %121, !dbg !31
  %123 = fadd float %101, %122, !dbg !31
  %124 = fadd float %102, %123, !dbg !31
  %125 = fadd float %103, %124, !dbg !31
  %126 = fadd float %104, %125, !dbg !31
  %127 = fadd float %105, %126, !dbg !31
  %128 = fadd float %106, %127, !dbg !31
  %129 = fadd float %107, %128, !dbg !31
  %130 = fadd float %108, %129, !dbg !31
  %131 = fadd float %109, %130, !dbg !31
  %132 = select i1 %11, float %131, float 0.000000e+00, !dbg !31
  %133 = bitcast float %132 to i32, !dbg !36
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 16, i32 31), !dbg !36
  %135 = bitcast i32 %134 to float, !dbg !36
  %136 = fadd float %132, %135, !dbg !31
  %137 = bitcast float %136 to i32, !dbg !36
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 8, i32 31), !dbg !36
  %139 = bitcast i32 %138 to float, !dbg !36
  %140 = fadd float %136, %139, !dbg !31
  %141 = bitcast float %140 to i32, !dbg !36
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 4, i32 31), !dbg !36
  %143 = bitcast i32 %142 to float, !dbg !36
  %144 = fadd float %140, %143, !dbg !31
  %145 = bitcast float %144 to i32, !dbg !36
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 2, i32 31), !dbg !36
  %147 = bitcast i32 %146 to float, !dbg !36
  %148 = fadd float %144, %147, !dbg !31
  %149 = bitcast float %148 to i32, !dbg !36
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 1, i32 31), !dbg !36
  %151 = bitcast i32 %150 to float, !dbg !36
  %152 = fadd float %148, %151, !dbg !31
  %153 = and i32 %34, 7, !dbg !36
  %154 = icmp eq i32 %35, 0, !dbg !36
  %155 = getelementptr float, ptr addrspace(3) @global_smem, i32 %153, !dbg !36
  %156 = bitcast float %152 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %156, i1 %154) #6, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %157 = icmp slt i32 %30, 8, !dbg !36
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i32 %30, !dbg !36
  %159 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %158, i1 %157) #6, !dbg !36
  %160 = bitcast i32 %159 to float, !dbg !36
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 4, i32 31), !dbg !36
  %162 = bitcast i32 %161 to float, !dbg !36
  %163 = fadd float %160, %162, !dbg !31
  %164 = bitcast float %163 to i32, !dbg !36
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 2, i32 31), !dbg !36
  %166 = bitcast i32 %165 to float, !dbg !36
  %167 = fadd float %163, %166, !dbg !31
  %168 = bitcast float %167 to i32, !dbg !36
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 1, i32 31), !dbg !36
  %170 = bitcast i32 %169 to float, !dbg !36
  %171 = fadd float %167, %170, !dbg !31
  %172 = and i32 %30, 7, !dbg !36
  %173 = icmp eq i32 %172, 0, !dbg !36
  %174 = and i1 %157, %173, !dbg !36
  %175 = bitcast float %171 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %175, i1 %174) #6, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %176 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !36
  %177 = tail call float @llvm.nvvm.div.full(float %176, float 4.096000e+03), !dbg !37
  %178 = fadd float %177, 0x3EE4F8B580000000, !dbg !38
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %.not.i = icmp eq i32 %179, 0, !dbg !39
  br i1 %.not.i, label %182, label %180, !dbg !39

180:                                              ; preds = %28
  %181 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %178), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

182:                                              ; preds = %28
  %183 = tail call float @llvm.nvvm.rsqrt.approx.f(float %178), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

__nv_rsqrtf.exit:                                 ; preds = %180, %182
  %.0.i = phi float [ %181, %180 ], [ %183, %182 ], !dbg !39
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %.not.i24 = icmp eq i32 %191, 0, !dbg !39
  br i1 %.not.i24, label %194, label %192, !dbg !39

192:                                              ; preds = %__nv_rsqrtf.exit
  %193 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %178), !dbg !39
  br label %__nv_rsqrtf.exit26, !dbg !39

194:                                              ; preds = %__nv_rsqrtf.exit
  %195 = tail call float @llvm.nvvm.rsqrt.approx.f(float %178), !dbg !39
  br label %__nv_rsqrtf.exit26, !dbg !39

__nv_rsqrtf.exit26:                               ; preds = %192, %194
  %.0.i25 = phi float [ %193, %192 ], [ %195, %194 ], !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %196 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !41
  %197 = and i32 %30, 255, !dbg !42
  %198 = icmp eq i32 %197, 0, !dbg !42
  %199 = bitcast float %.0.i to i32, !dbg !42
  %200 = and i1 %198, %11, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %199, ptr addrspace(1) %196, i1 %200) #6, !dbg !42
  %201 = getelementptr half, ptr addrspace(1) %3, i64 %39, !dbg !43
  %202 = getelementptr half, ptr addrspace(1) %3, i64 %40, !dbg !43
  %203 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %201, i1 true) #6, !dbg !44
  %204 = extractvalue { i32, i32, i32, i32 } %203, 0, !dbg !44
  %205 = bitcast i32 %204 to <2 x half>, !dbg !44
  %206 = extractvalue { i32, i32, i32, i32 } %203, 1, !dbg !44
  %207 = bitcast i32 %206 to <2 x half>, !dbg !44
  %208 = extractvalue { i32, i32, i32, i32 } %203, 2, !dbg !44
  %209 = bitcast i32 %208 to <2 x half>, !dbg !44
  %210 = extractvalue { i32, i32, i32, i32 } %203, 3, !dbg !44
  %211 = bitcast i32 %210 to <2 x half>, !dbg !44
  %212 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %202, i1 true) #6, !dbg !44
  %213 = extractvalue { i32, i32, i32, i32 } %212, 0, !dbg !44
  %214 = bitcast i32 %213 to <2 x half>, !dbg !44
  %215 = extractvalue { i32, i32, i32, i32 } %212, 1, !dbg !44
  %216 = bitcast i32 %215 to <2 x half>, !dbg !44
  %217 = extractvalue { i32, i32, i32, i32 } %212, 2, !dbg !44
  %218 = bitcast i32 %217 to <2 x half>, !dbg !44
  %219 = extractvalue { i32, i32, i32, i32 } %212, 3, !dbg !44
  %220 = bitcast i32 %219 to <2 x half>, !dbg !44
  %221 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %114, i1 %11) #6, !dbg !45
  %222 = extractvalue { i32, i32, i32, i32 } %221, 0, !dbg !45
  %223 = bitcast i32 %222 to <2 x half>, !dbg !45
  %224 = extractvalue { i32, i32, i32, i32 } %221, 1, !dbg !45
  %225 = bitcast i32 %224 to <2 x half>, !dbg !45
  %226 = extractvalue { i32, i32, i32, i32 } %221, 2, !dbg !45
  %227 = bitcast i32 %226 to <2 x half>, !dbg !45
  %228 = extractvalue { i32, i32, i32, i32 } %221, 3, !dbg !45
  %229 = bitcast i32 %228 to <2 x half>, !dbg !45
  %230 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %116, i1 %11) #6, !dbg !45
  %231 = extractvalue { i32, i32, i32, i32 } %230, 0, !dbg !45
  %232 = bitcast i32 %231 to <2 x half>, !dbg !45
  %233 = extractvalue { i32, i32, i32, i32 } %230, 1, !dbg !45
  %234 = bitcast i32 %233 to <2 x half>, !dbg !45
  %235 = extractvalue { i32, i32, i32, i32 } %230, 2, !dbg !45
  %236 = bitcast i32 %235 to <2 x half>, !dbg !45
  %237 = extractvalue { i32, i32, i32, i32 } %230, 3, !dbg !45
  %238 = bitcast i32 %237 to <2 x half>, !dbg !45
  %239 = getelementptr half, ptr addrspace(1) %5, i64 %113, !dbg !46
  %240 = getelementptr half, ptr addrspace(1) %5, i64 %115, !dbg !46
  %241 = fpext <2 x half> %205 to <2 x float>, !dbg !47
  %242 = fpext <2 x half> %223 to <2 x float>, !dbg !48
  %243 = insertelement <2 x float> poison, float %.0.i25, i64 0, !dbg !49
  %244 = shufflevector <2 x float> %243, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %245 = fmul <2 x float> %244, %242, !dbg !49
  %246 = fmul <2 x float> %245, %241, !dbg !50
  %247 = fptrunc <2 x float> %246 to <2 x half>, !dbg !51
  %248 = fpext <2 x half> %207 to <2 x float>, !dbg !47
  %249 = fpext <2 x half> %225 to <2 x float>, !dbg !48
  %250 = fmul <2 x float> %244, %249, !dbg !49
  %251 = fmul <2 x float> %250, %248, !dbg !50
  %252 = fptrunc <2 x float> %251 to <2 x half>, !dbg !51
  %253 = fpext <2 x half> %209 to <2 x float>, !dbg !47
  %254 = fpext <2 x half> %227 to <2 x float>, !dbg !48
  %255 = fmul <2 x float> %244, %254, !dbg !49
  %256 = fmul <2 x float> %255, %253, !dbg !50
  %257 = fptrunc <2 x float> %256 to <2 x half>, !dbg !51
  %258 = fpext <2 x half> %211 to <2 x float>, !dbg !47
  %259 = fpext <2 x half> %229 to <2 x float>, !dbg !48
  %260 = fmul <2 x float> %244, %259, !dbg !49
  %261 = fmul <2 x float> %260, %258, !dbg !50
  %262 = fptrunc <2 x float> %261 to <2 x half>, !dbg !51
  %263 = fpext <2 x half> %214 to <2 x float>, !dbg !47
  %264 = fpext <2 x half> %232 to <2 x float>, !dbg !48
  %265 = fmul <2 x float> %244, %264, !dbg !49
  %266 = fmul <2 x float> %265, %263, !dbg !50
  %267 = fptrunc <2 x float> %266 to <2 x half>, !dbg !51
  %268 = fpext <2 x half> %216 to <2 x float>, !dbg !47
  %269 = fpext <2 x half> %234 to <2 x float>, !dbg !48
  %270 = fmul <2 x float> %244, %269, !dbg !49
  %271 = fmul <2 x float> %270, %268, !dbg !50
  %272 = fptrunc <2 x float> %271 to <2 x half>, !dbg !51
  %273 = fpext <2 x half> %218 to <2 x float>, !dbg !47
  %274 = fpext <2 x half> %236 to <2 x float>, !dbg !48
  %275 = fmul <2 x float> %244, %274, !dbg !49
  %276 = fmul <2 x float> %275, %273, !dbg !50
  %277 = fptrunc <2 x float> %276 to <2 x half>, !dbg !51
  %278 = fpext <2 x half> %220 to <2 x float>, !dbg !47
  %279 = fpext <2 x half> %238 to <2 x float>, !dbg !48
  %280 = fmul <2 x float> %244, %279, !dbg !49
  %281 = fmul <2 x float> %280, %278, !dbg !50
  %282 = fptrunc <2 x float> %281 to <2 x half>, !dbg !51
  %283 = bitcast <2 x half> %247 to i32, !dbg !51
  %284 = bitcast <2 x half> %252 to i32, !dbg !51
  %285 = bitcast <2 x half> %257 to i32, !dbg !51
  %286 = bitcast <2 x half> %262 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %283, i32 %284, i32 %285, i32 %286, ptr addrspace(1) %239, i1 %11) #6, !dbg !51
  %287 = bitcast <2 x half> %267 to i32, !dbg !51
  %288 = bitcast <2 x half> %272 to i32, !dbg !51
  %289 = bitcast <2 x half> %277 to i32, !dbg !51
  %290 = bitcast <2 x half> %282 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %287, i32 %288, i32 %289, i32 %290, ptr addrspace(1) %240, i1 %11) #6, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyihme7t354xdekku5rks7waotqdnz3mpo47q3uhqjtr5ixrgolb.py", directory: "/tmp/torchinductor_root/yi")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 22, column: 28, scope: !10)
!12 = !DILocation(line: 24, column: 21, scope: !10)
!13 = !DILocation(line: 28, column: 30, scope: !10)
!14 = !DILocation(line: 28, column: 35, scope: !10)
!15 = !DILocation(line: 37, column: 22, scope: !10)
!16 = !DILocation(line: 38, column: 22, scope: !10)
!17 = !DILocation(line: 39, column: 36, scope: !10)
!18 = !DILocation(line: 40, column: 41, scope: !10)
!19 = !DILocation(line: 40, column: 69, scope: !10)
!20 = !DILocation(line: 25, column: 37, scope: !10)
!21 = !DILocation(line: 41, column: 46, scope: !10)
!22 = !DILocation(line: 41, column: 41, scope: !10)
!23 = !DILocation(line: 41, column: 34, scope: !10)
!24 = !DILocation(line: 41, column: 53, scope: !10)
!25 = !DILocation(line: 41, column: 115, scope: !10)
!26 = !DILocation(line: 43, column: 22, scope: !10)
!27 = !DILocation(line: 47, column: 41, scope: !10)
!28 = !DILocation(line: 47, column: 36, scope: !10)
!29 = !DILocation(line: 47, column: 29, scope: !10)
!30 = !DILocation(line: 47, column: 52, scope: !10)
!31 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !35)
!32 = distinct !DILexicalBlockFile(scope: !34, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!34 = distinct !DILexicalBlockFile(scope: !10, file: !33, discriminator: 0)
!35 = !DILocation(line: 48, column: 27, scope: !10)
!36 = !DILocation(line: 286, column: 36, scope: !34, inlinedAt: !35)
!37 = !DILocation(line: 50, column: 21, scope: !10)
!38 = !DILocation(line: 52, column: 20, scope: !10)
!39 = !DILocation(line: 53, column: 28, scope: !10)
!40 = !DILocation(line: 54, column: 4, scope: !10)
!41 = !DILocation(line: 55, column: 28, scope: !10)
!42 = !DILocation(line: 55, column: 40, scope: !10)
!43 = !DILocation(line: 62, column: 35, scope: !10)
!44 = !DILocation(line: 62, column: 42, scope: !10)
!45 = !DILocation(line: 63, column: 53, scope: !10)
!46 = !DILocation(line: 68, column: 29, scope: !10)
!47 = !DILocation(line: 62, column: 95, scope: !10)
!48 = !DILocation(line: 63, column: 115, scope: !10)
!49 = !DILocation(line: 65, column: 24, scope: !10)
!50 = !DILocation(line: 67, column: 24, scope: !10)
!51 = !DILocation(line: 68, column: 53, scope: !10)
!52 = !DILocation(line: 56, column: 4, scope: !10)
