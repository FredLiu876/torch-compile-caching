; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = icmp slt i32 %10, %6, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = shl i32 %12, 3, !dbg !11
  %14 = and i32 %13, 2040, !dbg !11
  %15 = shl i32 %10, 12, !dbg !12
  %16 = or disjoint i32 %14, %15
  %17 = insertelement <8 x i1> poison, i1 %11, i64 0, !dbg !13
  %18 = shufflevector <8 x i1> %17, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !13
  %19 = and i32 %12, 31, !dbg !11
  %20 = sext i32 %16 to i64, !dbg !14
  %21 = getelementptr half, ptr addrspace(1) %2, i64 %20, !dbg !14
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %21, i1 %11) #5, !dbg !15
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !15
  %24 = bitcast i32 %23 to <2 x half>, !dbg !15
  %25 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !15
  %26 = bitcast i32 %25 to <2 x half>, !dbg !15
  %27 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !15
  %28 = bitcast i32 %27 to <2 x half>, !dbg !15
  %29 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !15
  %30 = bitcast i32 %29 to <2 x half>, !dbg !15
  %31 = getelementptr half, ptr addrspace(1) %3, i64 %20, !dbg !16
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %31, i1 %11) #5, !dbg !17
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !17
  %34 = bitcast i32 %33 to <2 x half>, !dbg !17
  %35 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !17
  %36 = bitcast i32 %35 to <2 x half>, !dbg !17
  %37 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !17
  %38 = bitcast i32 %37 to <2 x half>, !dbg !17
  %39 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !17
  %40 = bitcast i32 %39 to <2 x half>, !dbg !17
  %41 = getelementptr half, ptr addrspace(1) %0, i64 %20, !dbg !18
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %41, i1 %11) #5, !dbg !19
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !19
  %44 = bitcast i32 %43 to <2 x half>, !dbg !19
  %45 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !19
  %46 = bitcast i32 %45 to <2 x half>, !dbg !19
  %47 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !19
  %48 = bitcast i32 %47 to <2 x half>, !dbg !19
  %49 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !19
  %50 = bitcast i32 %49 to <2 x half>, !dbg !19
  %51 = shufflevector <2 x half> %24, <2 x half> %26, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !20
  %52 = shufflevector <2 x half> %28, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !20
  %53 = shufflevector <8 x half> %51, <8 x half> %52, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !20
  %54 = shufflevector <2 x half> %28, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !20
  %55 = shufflevector <8 x half> %53, <8 x half> %54, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !20
  %56 = shufflevector <2 x half> %30, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !20
  %57 = shufflevector <8 x half> %55, <8 x half> %56, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !20
  %58 = shufflevector <2 x half> %30, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !20
  %59 = shufflevector <8 x half> %57, <8 x half> %58, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !20
  %60 = fpext <8 x half> %59 to <8 x float>, !dbg !20
  %61 = shufflevector <2 x half> %34, <2 x half> %36, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %62 = shufflevector <2 x half> %38, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %63 = shufflevector <8 x half> %61, <8 x half> %62, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !21
  %64 = shufflevector <2 x half> %38, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %65 = shufflevector <8 x half> %63, <8 x half> %64, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !21
  %66 = shufflevector <2 x half> %40, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %67 = shufflevector <8 x half> %65, <8 x half> %66, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !21
  %68 = shufflevector <2 x half> %40, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %69 = shufflevector <8 x half> %67, <8 x half> %68, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !21
  %70 = fpext <8 x half> %69 to <8 x float>, !dbg !21
  %71 = shufflevector <2 x half> %44, <2 x half> %46, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %72 = shufflevector <2 x half> %48, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %73 = shufflevector <8 x half> %71, <8 x half> %72, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !22
  %74 = shufflevector <2 x half> %48, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %75 = shufflevector <8 x half> %73, <8 x half> %74, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !22
  %76 = shufflevector <2 x half> %50, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %77 = shufflevector <8 x half> %75, <8 x half> %76, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !22
  %78 = shufflevector <2 x half> %50, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %79 = shufflevector <8 x half> %77, <8 x half> %78, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !22
  %80 = fpext <8 x half> %79 to <8 x float>, !dbg !22
  %81 = fadd <8 x float> %60, %70, !dbg !23
  %82 = fadd <8 x float> %81, %80, !dbg !24
  %83 = fmul <8 x float> %82, %82, !dbg !25
  %84 = extractelement <8 x float> %82, i64 0, !dbg !26
  %85 = fptrunc float %84 to half, !dbg !26
  %86 = extractelement <8 x float> %82, i64 1, !dbg !26
  %87 = fptrunc float %86 to half, !dbg !26
  %88 = extractelement <8 x float> %82, i64 2, !dbg !26
  %89 = fptrunc float %88 to half, !dbg !26
  %90 = extractelement <8 x float> %82, i64 3, !dbg !26
  %91 = fptrunc float %90 to half, !dbg !26
  %92 = extractelement <8 x float> %82, i64 4, !dbg !26
  %93 = fptrunc float %92 to half, !dbg !26
  %94 = extractelement <8 x float> %82, i64 5, !dbg !26
  %95 = fptrunc float %94 to half, !dbg !26
  %96 = extractelement <8 x float> %82, i64 6, !dbg !26
  %97 = fptrunc float %96 to half, !dbg !26
  %98 = extractelement <8 x float> %82, i64 7, !dbg !26
  %99 = fptrunc float %98 to half, !dbg !26
  %100 = insertelement <2 x half> poison, half %85, i64 0, !dbg !26
  %101 = insertelement <2 x half> %100, half %87, i64 1, !dbg !26
  %102 = bitcast <2 x half> %101 to i32, !dbg !26
  %103 = insertelement <2 x half> poison, half %89, i64 0, !dbg !26
  %104 = insertelement <2 x half> %103, half %91, i64 1, !dbg !26
  %105 = bitcast <2 x half> %104 to i32, !dbg !26
  %106 = insertelement <2 x half> poison, half %93, i64 0, !dbg !26
  %107 = insertelement <2 x half> %106, half %95, i64 1, !dbg !26
  %108 = bitcast <2 x half> %107 to i32, !dbg !26
  %109 = insertelement <2 x half> poison, half %97, i64 0, !dbg !26
  %110 = insertelement <2 x half> %109, half %99, i64 1, !dbg !26
  %111 = bitcast <2 x half> %110 to i32, !dbg !26
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %102, i32 %105, i32 %108, i32 %111, ptr addrspace(1) %41, i1 %11) #5, !dbg !26
  %112 = or disjoint i32 %16, 2048, !dbg !27
  %113 = sext i32 %112 to i64, !dbg !14
  %114 = getelementptr half, ptr addrspace(1) %2, i64 %113, !dbg !14
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %114, i1 %11) #5, !dbg !15
  %116 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !15
  %117 = bitcast i32 %116 to <2 x half>, !dbg !15
  %118 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !15
  %119 = bitcast i32 %118 to <2 x half>, !dbg !15
  %120 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !15
  %121 = bitcast i32 %120 to <2 x half>, !dbg !15
  %122 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !15
  %123 = bitcast i32 %122 to <2 x half>, !dbg !15
  %124 = getelementptr half, ptr addrspace(1) %3, i64 %113, !dbg !16
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %124, i1 %11) #5, !dbg !17
  %126 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !17
  %127 = bitcast i32 %126 to <2 x half>, !dbg !17
  %128 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !17
  %129 = bitcast i32 %128 to <2 x half>, !dbg !17
  %130 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !17
  %131 = bitcast i32 %130 to <2 x half>, !dbg !17
  %132 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !17
  %133 = bitcast i32 %132 to <2 x half>, !dbg !17
  %134 = getelementptr half, ptr addrspace(1) %0, i64 %113, !dbg !18
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %134, i1 %11) #5, !dbg !19
  %136 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !19
  %137 = bitcast i32 %136 to <2 x half>, !dbg !19
  %138 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !19
  %139 = bitcast i32 %138 to <2 x half>, !dbg !19
  %140 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !19
  %141 = bitcast i32 %140 to <2 x half>, !dbg !19
  %142 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !19
  %143 = bitcast i32 %142 to <2 x half>, !dbg !19
  %144 = shufflevector <2 x half> %117, <2 x half> %119, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !20
  %145 = shufflevector <2 x half> %121, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !20
  %146 = shufflevector <8 x half> %144, <8 x half> %145, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !20
  %147 = shufflevector <2 x half> %121, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !20
  %148 = shufflevector <8 x half> %146, <8 x half> %147, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !20
  %149 = shufflevector <2 x half> %123, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !20
  %150 = shufflevector <8 x half> %148, <8 x half> %149, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !20
  %151 = shufflevector <2 x half> %123, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !20
  %152 = shufflevector <8 x half> %150, <8 x half> %151, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !20
  %153 = fpext <8 x half> %152 to <8 x float>, !dbg !20
  %154 = shufflevector <2 x half> %127, <2 x half> %129, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %155 = shufflevector <2 x half> %131, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %156 = shufflevector <8 x half> %154, <8 x half> %155, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !21
  %157 = shufflevector <2 x half> %131, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %158 = shufflevector <8 x half> %156, <8 x half> %157, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !21
  %159 = shufflevector <2 x half> %133, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %160 = shufflevector <8 x half> %158, <8 x half> %159, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !21
  %161 = shufflevector <2 x half> %133, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !21
  %162 = shufflevector <8 x half> %160, <8 x half> %161, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !21
  %163 = fpext <8 x half> %162 to <8 x float>, !dbg !21
  %164 = shufflevector <2 x half> %137, <2 x half> %139, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %165 = shufflevector <2 x half> %141, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %166 = shufflevector <8 x half> %164, <8 x half> %165, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !22
  %167 = shufflevector <2 x half> %141, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %168 = shufflevector <8 x half> %166, <8 x half> %167, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !22
  %169 = shufflevector <2 x half> %143, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %170 = shufflevector <8 x half> %168, <8 x half> %169, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !22
  %171 = shufflevector <2 x half> %143, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !22
  %172 = shufflevector <8 x half> %170, <8 x half> %171, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !22
  %173 = fpext <8 x half> %172 to <8 x float>, !dbg !22
  %174 = fadd <8 x float> %153, %163, !dbg !23
  %175 = fadd <8 x float> %174, %173, !dbg !24
  %176 = fmul <8 x float> %175, %175, !dbg !25
  %177 = fadd <8 x float> %83, %176, !dbg !28
  %178 = select <8 x i1> %18, <8 x float> %177, <8 x float> zeroinitializer, !dbg !13
  %179 = extractelement <8 x float> %175, i64 0, !dbg !26
  %180 = fptrunc float %179 to half, !dbg !26
  %181 = extractelement <8 x float> %175, i64 1, !dbg !26
  %182 = fptrunc float %181 to half, !dbg !26
  %183 = extractelement <8 x float> %175, i64 2, !dbg !26
  %184 = fptrunc float %183 to half, !dbg !26
  %185 = extractelement <8 x float> %175, i64 3, !dbg !26
  %186 = fptrunc float %185 to half, !dbg !26
  %187 = extractelement <8 x float> %175, i64 4, !dbg !26
  %188 = fptrunc float %187 to half, !dbg !26
  %189 = extractelement <8 x float> %175, i64 5, !dbg !26
  %190 = fptrunc float %189 to half, !dbg !26
  %191 = extractelement <8 x float> %175, i64 6, !dbg !26
  %192 = fptrunc float %191 to half, !dbg !26
  %193 = extractelement <8 x float> %175, i64 7, !dbg !26
  %194 = fptrunc float %193 to half, !dbg !26
  %195 = insertelement <2 x half> poison, half %180, i64 0, !dbg !26
  %196 = insertelement <2 x half> %195, half %182, i64 1, !dbg !26
  %197 = bitcast <2 x half> %196 to i32, !dbg !26
  %198 = insertelement <2 x half> poison, half %184, i64 0, !dbg !26
  %199 = insertelement <2 x half> %198, half %186, i64 1, !dbg !26
  %200 = bitcast <2 x half> %199 to i32, !dbg !26
  %201 = insertelement <2 x half> poison, half %188, i64 0, !dbg !26
  %202 = insertelement <2 x half> %201, half %190, i64 1, !dbg !26
  %203 = bitcast <2 x half> %202 to i32, !dbg !26
  %204 = insertelement <2 x half> poison, half %192, i64 0, !dbg !26
  %205 = insertelement <2 x half> %204, half %194, i64 1, !dbg !26
  %206 = bitcast <2 x half> %205 to i32, !dbg !26
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %197, i32 %200, i32 %203, i32 %206, ptr addrspace(1) %134, i1 %11) #5, !dbg !26
  %207 = lshr i32 %12, 5, !dbg !11
  %shift = shufflevector <8 x float> %178, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %208 = fadd <8 x float> %178, %shift, !dbg !29
  %shift47 = shufflevector <8 x float> %178, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %209 = fadd <8 x float> %shift47, %208, !dbg !29
  %shift48 = shufflevector <8 x float> %178, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %210 = fadd <8 x float> %shift48, %209, !dbg !29
  %shift49 = shufflevector <8 x float> %178, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %211 = fadd <8 x float> %shift49, %210, !dbg !29
  %shift50 = shufflevector <8 x float> %178, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %212 = fadd <8 x float> %shift50, %211, !dbg !29
  %shift51 = shufflevector <8 x float> %178, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %213 = fadd <8 x float> %shift51, %212, !dbg !29
  %shift52 = shufflevector <8 x float> %178, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %214 = fadd <8 x float> %shift52, %213, !dbg !29
  %215 = extractelement <8 x float> %214, i64 0, !dbg !29
  %216 = bitcast float %215 to i32, !dbg !34
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 16, i32 31), !dbg !34
  %218 = bitcast i32 %217 to float, !dbg !34
  %219 = fadd float %215, %218, !dbg !29
  %220 = bitcast float %219 to i32, !dbg !34
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 8, i32 31), !dbg !34
  %222 = bitcast i32 %221 to float, !dbg !34
  %223 = fadd float %219, %222, !dbg !29
  %224 = bitcast float %223 to i32, !dbg !34
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 4, i32 31), !dbg !34
  %226 = bitcast i32 %225 to float, !dbg !34
  %227 = fadd float %223, %226, !dbg !29
  %228 = bitcast float %227 to i32, !dbg !34
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 2, i32 31), !dbg !34
  %230 = bitcast i32 %229 to float, !dbg !34
  %231 = fadd float %227, %230, !dbg !29
  %232 = bitcast float %231 to i32, !dbg !34
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 1, i32 31), !dbg !34
  %234 = bitcast i32 %233 to float, !dbg !34
  %235 = fadd float %231, %234, !dbg !29
  %236 = and i32 %207, 7, !dbg !34
  %237 = icmp eq i32 %19, 0, !dbg !34
  %238 = getelementptr float, ptr addrspace(3) @global_smem, i32 %236, !dbg !34
  %239 = bitcast float %235 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %239, i1 %237) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %240 = icmp slt i32 %12, 8, !dbg !34
  %241 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !34
  %242 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %241, i1 %240) #5, !dbg !34
  %243 = bitcast i32 %242 to float, !dbg !34
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 4, i32 31), !dbg !34
  %245 = bitcast i32 %244 to float, !dbg !34
  %246 = fadd float %243, %245, !dbg !29
  %247 = bitcast float %246 to i32, !dbg !34
  %248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 2, i32 31), !dbg !34
  %249 = bitcast i32 %248 to float, !dbg !34
  %250 = fadd float %246, %249, !dbg !29
  %251 = bitcast float %250 to i32, !dbg !34
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 1, i32 31), !dbg !34
  %253 = bitcast i32 %252 to float, !dbg !34
  %254 = fadd float %250, %253, !dbg !29
  %255 = and i32 %12, 7, !dbg !34
  %256 = icmp eq i32 %255, 0, !dbg !34
  %257 = and i1 %240, %256, !dbg !34
  %258 = bitcast float %254 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %258, i1 %257) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %259 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !34
  %260 = tail call float @llvm.nvvm.div.full(float %259, float 4.096000e+03), !dbg !35
  %261 = fadd float %260, 0x3EE4F8B580000000, !dbg !36
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i = icmp eq i32 %262, 0, !dbg !37
  br i1 %.not.i, label %265, label %263, !dbg !37

263:                                              ; preds = %9
  %264 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %261), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

265:                                              ; preds = %9
  %266 = tail call float @llvm.nvvm.rsqrt.approx.f(float %261), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

__nv_rsqrtf.exit:                                 ; preds = %263, %265
  %.0.i = phi float [ %264, %263 ], [ %266, %265 ], !dbg !37
  %267 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %271 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %272 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %273 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %274 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i23 = icmp eq i32 %274, 0, !dbg !37
  br i1 %.not.i23, label %277, label %275, !dbg !37

275:                                              ; preds = %__nv_rsqrtf.exit
  %276 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %261), !dbg !37
  br label %__nv_rsqrtf.exit25, !dbg !37

277:                                              ; preds = %__nv_rsqrtf.exit
  %278 = tail call float @llvm.nvvm.rsqrt.approx.f(float %261), !dbg !37
  br label %__nv_rsqrtf.exit25, !dbg !37

__nv_rsqrtf.exit25:                               ; preds = %275, %277
  %.0.i24 = phi float [ %276, %275 ], [ %278, %277 ], !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %279 = sext i32 %10 to i64, !dbg !39
  %280 = getelementptr float, ptr addrspace(1) %1, i64 %279, !dbg !39
  %281 = and i32 %12, 255, !dbg !40
  %282 = icmp eq i32 %281, 0, !dbg !40
  %283 = bitcast float %.0.i to i32, !dbg !40
  %284 = and i1 %282, %11, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %283, ptr addrspace(1) %280, i1 %284) #5, !dbg !40
  %285 = zext nneg i32 %14 to i64, !dbg !41
  %286 = getelementptr half, ptr addrspace(1) %4, i64 %285, !dbg !42
  %287 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %286, i1 true) #5, !dbg !43
  %288 = extractvalue { i32, i32, i32, i32 } %287, 0, !dbg !43
  %289 = bitcast i32 %288 to <2 x half>, !dbg !43
  %290 = extractvalue { i32, i32, i32, i32 } %287, 1, !dbg !43
  %291 = bitcast i32 %290 to <2 x half>, !dbg !43
  %292 = extractvalue { i32, i32, i32, i32 } %287, 2, !dbg !43
  %293 = bitcast i32 %292 to <2 x half>, !dbg !43
  %294 = extractvalue { i32, i32, i32, i32 } %287, 3, !dbg !43
  %295 = bitcast i32 %294 to <2 x half>, !dbg !43
  %296 = sext i32 %16 to i64, !dbg !44
  %297 = getelementptr half, ptr addrspace(1) %0, i64 %296, !dbg !44
  %298 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %297, i1 %11) #5, !dbg !45
  %299 = extractvalue { i32, i32, i32, i32 } %298, 0, !dbg !45
  %300 = bitcast i32 %299 to <2 x half>, !dbg !45
  %301 = extractvalue { i32, i32, i32, i32 } %298, 1, !dbg !45
  %302 = bitcast i32 %301 to <2 x half>, !dbg !45
  %303 = extractvalue { i32, i32, i32, i32 } %298, 2, !dbg !45
  %304 = bitcast i32 %303 to <2 x half>, !dbg !45
  %305 = extractvalue { i32, i32, i32, i32 } %298, 3, !dbg !45
  %306 = bitcast i32 %305 to <2 x half>, !dbg !45
  %307 = getelementptr half, ptr addrspace(1) %5, i64 %296, !dbg !46
  %308 = fpext <2 x half> %289 to <2 x float>, !dbg !47
  %309 = fpext <2 x half> %300 to <2 x float>, !dbg !48
  %310 = insertelement <2 x float> poison, float %.0.i24, i64 0, !dbg !49
  %311 = shufflevector <2 x float> %310, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %312 = fmul <2 x float> %311, %309, !dbg !49
  %313 = fmul <2 x float> %312, %308, !dbg !50
  %314 = fptrunc <2 x float> %313 to <2 x half>, !dbg !51
  %315 = fpext <2 x half> %291 to <2 x float>, !dbg !47
  %316 = fpext <2 x half> %302 to <2 x float>, !dbg !48
  %317 = fmul <2 x float> %311, %316, !dbg !49
  %318 = fmul <2 x float> %317, %315, !dbg !50
  %319 = fptrunc <2 x float> %318 to <2 x half>, !dbg !51
  %320 = fpext <2 x half> %293 to <2 x float>, !dbg !47
  %321 = fpext <2 x half> %304 to <2 x float>, !dbg !48
  %322 = fmul <2 x float> %311, %321, !dbg !49
  %323 = fmul <2 x float> %322, %320, !dbg !50
  %324 = fptrunc <2 x float> %323 to <2 x half>, !dbg !51
  %325 = fpext <2 x half> %295 to <2 x float>, !dbg !47
  %326 = fpext <2 x half> %306 to <2 x float>, !dbg !48
  %327 = fmul <2 x float> %311, %326, !dbg !49
  %328 = fmul <2 x float> %327, %325, !dbg !50
  %329 = fptrunc <2 x float> %328 to <2 x half>, !dbg !51
  %330 = bitcast <2 x half> %314 to i32, !dbg !51
  %331 = bitcast <2 x half> %319 to i32, !dbg !51
  %332 = bitcast <2 x half> %324 to i32, !dbg !51
  %333 = bitcast <2 x half> %329 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %330, i32 %331, i32 %332, i32 %333, ptr addrspace(1) %307, i1 %11) #5, !dbg !51
  %334 = or disjoint i64 %285, 2048, !dbg !52
  %335 = getelementptr half, ptr addrspace(1) %4, i64 %334, !dbg !42
  %336 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %335, i1 true) #5, !dbg !43
  %337 = extractvalue { i32, i32, i32, i32 } %336, 0, !dbg !43
  %338 = bitcast i32 %337 to <2 x half>, !dbg !43
  %339 = extractvalue { i32, i32, i32, i32 } %336, 1, !dbg !43
  %340 = bitcast i32 %339 to <2 x half>, !dbg !43
  %341 = extractvalue { i32, i32, i32, i32 } %336, 2, !dbg !43
  %342 = bitcast i32 %341 to <2 x half>, !dbg !43
  %343 = extractvalue { i32, i32, i32, i32 } %336, 3, !dbg !43
  %344 = bitcast i32 %343 to <2 x half>, !dbg !43
  %.reass.1 = or disjoint i32 %16, 2048
  %345 = sext i32 %.reass.1 to i64, !dbg !44
  %346 = getelementptr half, ptr addrspace(1) %0, i64 %345, !dbg !44
  %347 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %346, i1 %11) #5, !dbg !45
  %348 = extractvalue { i32, i32, i32, i32 } %347, 0, !dbg !45
  %349 = bitcast i32 %348 to <2 x half>, !dbg !45
  %350 = extractvalue { i32, i32, i32, i32 } %347, 1, !dbg !45
  %351 = bitcast i32 %350 to <2 x half>, !dbg !45
  %352 = extractvalue { i32, i32, i32, i32 } %347, 2, !dbg !45
  %353 = bitcast i32 %352 to <2 x half>, !dbg !45
  %354 = extractvalue { i32, i32, i32, i32 } %347, 3, !dbg !45
  %355 = bitcast i32 %354 to <2 x half>, !dbg !45
  %356 = getelementptr half, ptr addrspace(1) %5, i64 %345, !dbg !46
  %357 = fpext <2 x half> %338 to <2 x float>, !dbg !47
  %358 = fpext <2 x half> %349 to <2 x float>, !dbg !48
  %359 = fmul <2 x float> %311, %358, !dbg !49
  %360 = fmul <2 x float> %359, %357, !dbg !50
  %361 = fptrunc <2 x float> %360 to <2 x half>, !dbg !51
  %362 = fpext <2 x half> %340 to <2 x float>, !dbg !47
  %363 = fpext <2 x half> %351 to <2 x float>, !dbg !48
  %364 = fmul <2 x float> %311, %363, !dbg !49
  %365 = fmul <2 x float> %364, %362, !dbg !50
  %366 = fptrunc <2 x float> %365 to <2 x half>, !dbg !51
  %367 = fpext <2 x half> %342 to <2 x float>, !dbg !47
  %368 = fpext <2 x half> %353 to <2 x float>, !dbg !48
  %369 = fmul <2 x float> %311, %368, !dbg !49
  %370 = fmul <2 x float> %369, %367, !dbg !50
  %371 = fptrunc <2 x float> %370 to <2 x half>, !dbg !51
  %372 = fpext <2 x half> %344 to <2 x float>, !dbg !47
  %373 = fpext <2 x half> %355 to <2 x float>, !dbg !48
  %374 = fmul <2 x float> %311, %373, !dbg !49
  %375 = fmul <2 x float> %374, %372, !dbg !50
  %376 = fptrunc <2 x float> %375 to <2 x half>, !dbg !51
  %377 = bitcast <2 x half> %361 to i32, !dbg !51
  %378 = bitcast <2 x half> %366 to i32, !dbg !51
  %379 = bitcast <2 x half> %371 to i32, !dbg !51
  %380 = bitcast <2 x half> %376 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %377, i32 %378, i32 %379, i32 %380, ptr addrspace(1) %356, i1 %11) #5, !dbg !51
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjjwjnmyb5ylskx6e3eg4yueoaqwlte7kuhtcnu2a4ncpavggv5i.py", directory: "/tmp/torchinductor_root/jj")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 21, scope: !6)
!11 = !DILocation(line: 25, column: 37, scope: !6)
!12 = !DILocation(line: 35, column: 46, scope: !6)
!13 = !DILocation(line: 44, column: 48, scope: !6)
!14 = !DILocation(line: 35, column: 34, scope: !6)
!15 = !DILocation(line: 35, column: 51, scope: !6)
!16 = !DILocation(line: 36, column: 34, scope: !6)
!17 = !DILocation(line: 36, column: 51, scope: !6)
!18 = !DILocation(line: 37, column: 38, scope: !6)
!19 = !DILocation(line: 37, column: 55, scope: !6)
!20 = !DILocation(line: 35, column: 113, scope: !6)
!21 = !DILocation(line: 36, column: 113, scope: !6)
!22 = !DILocation(line: 37, column: 117, scope: !6)
!23 = !DILocation(line: 38, column: 22, scope: !6)
!24 = !DILocation(line: 39, column: 22, scope: !6)
!25 = !DILocation(line: 41, column: 22, scope: !6)
!26 = !DILocation(line: 45, column: 55, scope: !6)
!27 = !DILocation(line: 35, column: 41, scope: !6)
!28 = !DILocation(line: 43, column: 23, scope: !6)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !33)
!30 = distinct !DILexicalBlockFile(scope: !32, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!32 = distinct !DILexicalBlockFile(scope: !6, file: !31, discriminator: 0)
!33 = !DILocation(line: 46, column: 25, scope: !6)
!34 = !DILocation(line: 286, column: 36, scope: !32, inlinedAt: !33)
!35 = !DILocation(line: 48, column: 20, scope: !6)
!36 = !DILocation(line: 50, column: 20, scope: !6)
!37 = !DILocation(line: 51, column: 28, scope: !6)
!38 = !DILocation(line: 52, column: 4, scope: !6)
!39 = !DILocation(line: 53, column: 28, scope: !6)
!40 = !DILocation(line: 53, column: 40, scope: !6)
!41 = !DILocation(line: 54, column: 40, scope: !6)
!42 = !DILocation(line: 60, column: 35, scope: !6)
!43 = !DILocation(line: 60, column: 42, scope: !6)
!44 = !DILocation(line: 61, column: 39, scope: !6)
!45 = !DILocation(line: 61, column: 56, scope: !6)
!46 = !DILocation(line: 66, column: 29, scope: !6)
!47 = !DILocation(line: 60, column: 95, scope: !6)
!48 = !DILocation(line: 61, column: 118, scope: !6)
!49 = !DILocation(line: 63, column: 24, scope: !6)
!50 = !DILocation(line: 65, column: 24, scope: !6)
!51 = !DILocation(line: 66, column: 53, scope: !6)
!52 = !DILocation(line: 55, column: 31, scope: !6)
!53 = !DILocation(line: 54, column: 4, scope: !6)
