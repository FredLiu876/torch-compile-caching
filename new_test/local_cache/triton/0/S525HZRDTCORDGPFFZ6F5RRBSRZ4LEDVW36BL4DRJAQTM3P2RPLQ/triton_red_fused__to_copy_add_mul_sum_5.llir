; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_mul_sum_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 3, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = shl i32 %11, 2, !dbg !11
  %13 = and i32 %12, 4, !dbg !11
  %14 = or disjoint i32 %13, %10, !dbg !12
  %15 = lshr i32 %11, 1, !dbg !13
  %16 = and i32 %15, 63, !dbg !13
  %17 = icmp sgt i32 %6, 0, !dbg !14
  br i1 %17, label %.lr.ph, label %._crit_edge, !dbg !14

.lr.ph:                                           ; preds = %8, %.lr.ph
  %18 = phi i32 [ %65, %.lr.ph ], [ 0, %8 ]
  %19 = phi <4 x float> [ %64, %.lr.ph ], [ zeroinitializer, %8 ]
  %20 = or disjoint i32 %18, %16, !dbg !15
  %21 = icmp slt i32 %20, %6, !dbg !16
  %22 = shl i32 %20, 12, !dbg !17
  %23 = add i32 %14, %22, !dbg !18
  %24 = sext i32 %23 to i64, !dbg !19
  %25 = getelementptr half, ptr addrspace(1) %0, i64 %24, !dbg !19
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %25, i1 %21) #3, !dbg !20
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !20
  %28 = bitcast i32 %27 to <2 x half>, !dbg !20
  %29 = extractvalue { i32, i32 } %26, 1, !dbg !20
  %30 = bitcast i32 %29 to <2 x half>, !dbg !20
  %31 = getelementptr half, ptr addrspace(1) %1, i64 %24, !dbg !21
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %31, i1 %21) #3, !dbg !22
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !22
  %34 = bitcast i32 %33 to <2 x half>, !dbg !22
  %35 = extractvalue { i32, i32 } %32, 1, !dbg !22
  %36 = bitcast i32 %35 to <2 x half>, !dbg !22
  %37 = getelementptr half, ptr addrspace(1) %2, i64 %24, !dbg !23
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %37, i1 %21) #3, !dbg !24
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !24
  %40 = bitcast i32 %39 to <2 x half>, !dbg !24
  %41 = extractvalue { i32, i32 } %38, 1, !dbg !24
  %42 = bitcast i32 %41 to <2 x half>, !dbg !24
  %43 = sext i32 %20 to i64, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %3, i64 %43, !dbg !25
  %45 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %44, i1 %21) #3, !dbg !26
  %46 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %44, i1 %21) #3, !dbg !26
  %47 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %44, i1 %21) #3, !dbg !26
  %48 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %44, i1 %21) #3, !dbg !26
  %49 = shufflevector <2 x half> %28, <2 x half> %30, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !27
  %50 = fpext <4 x half> %49 to <4 x float>, !dbg !27
  %51 = shufflevector <2 x half> %34, <2 x half> %36, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !28
  %52 = fpext <4 x half> %51 to <4 x float>, !dbg !28
  %53 = shufflevector <2 x half> %40, <2 x half> %42, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !29
  %54 = fpext <4 x half> %53 to <4 x float>, !dbg !29
  %55 = fadd <4 x float> %50, %52, !dbg !30
  %56 = insertelement <4 x i32> poison, i32 %48, i64 0, !dbg !31
  %57 = bitcast <4 x i32> %56 to <4 x float>, !dbg !31
  %58 = shufflevector <4 x float> %57, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !31
  %59 = fmul <4 x float> %58, %54, !dbg !31
  %60 = fmul <4 x float> %55, %59, !dbg !32
  %61 = fadd <4 x float> %19, %60, !dbg !33
  %62 = insertelement <4 x i1> poison, i1 %21, i64 0, !dbg !34
  %63 = shufflevector <4 x i1> %62, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !34
  %64 = select <4 x i1> %63, <4 x float> %61, <4 x float> %19, !dbg !34
  %65 = add i32 %18, 64, !dbg !14
  %66 = icmp slt i32 %65, %6, !dbg !14
  br i1 %66, label %.lr.ph, label %._crit_edge, !dbg !14

._crit_edge:                                      ; preds = %.lr.ph, %8
  %67 = phi <4 x float> [ zeroinitializer, %8 ], [ %64, %.lr.ph ]
  %68 = lshr i32 %11, 5, !dbg !13
  %69 = and i32 %11, 30, !dbg !11
  %70 = and i32 %11, 7, !dbg !11
  %71 = or disjoint i32 %10, %70, !dbg !12
  %72 = extractelement <4 x float> %67, i64 0, !dbg !35
  %73 = bitcast float %72 to i32, !dbg !35
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 16, i32 31), !dbg !35
  %75 = bitcast i32 %74 to float, !dbg !35
  %76 = fadd float %72, %75, !dbg !39
  %77 = bitcast float %76 to i32, !dbg !35
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 8, i32 31), !dbg !35
  %79 = bitcast i32 %78 to float, !dbg !35
  %80 = fadd float %76, %79, !dbg !39
  %81 = bitcast float %80 to i32, !dbg !35
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 4, i32 31), !dbg !35
  %83 = bitcast i32 %82 to float, !dbg !35
  %84 = fadd float %80, %83, !dbg !39
  %85 = bitcast float %84 to i32, !dbg !35
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 2, i32 31), !dbg !35
  %87 = bitcast i32 %86 to float, !dbg !35
  %88 = fadd float %84, %87, !dbg !39
  %89 = extractelement <4 x float> %67, i64 1, !dbg !35
  %90 = bitcast float %89 to i32, !dbg !35
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 16, i32 31), !dbg !35
  %92 = bitcast i32 %91 to float, !dbg !35
  %93 = fadd float %89, %92, !dbg !39
  %94 = bitcast float %93 to i32, !dbg !35
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 8, i32 31), !dbg !35
  %96 = bitcast i32 %95 to float, !dbg !35
  %97 = fadd float %93, %96, !dbg !39
  %98 = bitcast float %97 to i32, !dbg !35
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 4, i32 31), !dbg !35
  %100 = bitcast i32 %99 to float, !dbg !35
  %101 = fadd float %97, %100, !dbg !39
  %102 = bitcast float %101 to i32, !dbg !35
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 2, i32 31), !dbg !35
  %104 = bitcast i32 %103 to float, !dbg !35
  %105 = fadd float %101, %104, !dbg !39
  %106 = extractelement <4 x float> %67, i64 2, !dbg !35
  %107 = bitcast float %106 to i32, !dbg !35
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 16, i32 31), !dbg !35
  %109 = bitcast i32 %108 to float, !dbg !35
  %110 = fadd float %106, %109, !dbg !39
  %111 = bitcast float %110 to i32, !dbg !35
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 8, i32 31), !dbg !35
  %113 = bitcast i32 %112 to float, !dbg !35
  %114 = fadd float %110, %113, !dbg !39
  %115 = bitcast float %114 to i32, !dbg !35
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 4, i32 31), !dbg !35
  %117 = bitcast i32 %116 to float, !dbg !35
  %118 = fadd float %114, %117, !dbg !39
  %119 = bitcast float %118 to i32, !dbg !35
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 2, i32 31), !dbg !35
  %121 = bitcast i32 %120 to float, !dbg !35
  %122 = fadd float %118, %121, !dbg !39
  %123 = extractelement <4 x float> %67, i64 3, !dbg !35
  %124 = bitcast float %123 to i32, !dbg !35
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 16, i32 31), !dbg !35
  %126 = bitcast i32 %125 to float, !dbg !35
  %127 = fadd float %123, %126, !dbg !39
  %128 = bitcast float %127 to i32, !dbg !35
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 8, i32 31), !dbg !35
  %130 = bitcast i32 %129 to float, !dbg !35
  %131 = fadd float %127, %130, !dbg !39
  %132 = bitcast float %131 to i32, !dbg !35
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 4, i32 31), !dbg !35
  %134 = bitcast i32 %133 to float, !dbg !35
  %135 = fadd float %131, %134, !dbg !39
  %136 = bitcast float %135 to i32, !dbg !35
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 2, i32 31), !dbg !35
  %138 = bitcast i32 %137 to float, !dbg !35
  %139 = fadd float %135, %138, !dbg !39
  %140 = and i32 %68, 3, !dbg !35
  %141 = icmp eq i32 %69, 0, !dbg !35
  %142 = shl nuw nsw i32 %13, 2, !dbg !35
  %143 = or disjoint i32 %142, %140, !dbg !35
  %144 = getelementptr float, ptr addrspace(3) @global_smem, i32 %143, !dbg !35
  %145 = bitcast float %88 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 %141) #3, !dbg !35
  %146 = or disjoint i32 %142, 4, !dbg !35
  %147 = or disjoint i32 %146, %140, !dbg !35
  %148 = getelementptr float, ptr addrspace(3) @global_smem, i32 %147, !dbg !35
  %149 = bitcast float %105 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %149, i1 %141) #3, !dbg !35
  %150 = or disjoint i32 %142, 8, !dbg !35
  %151 = or disjoint i32 %150, %140, !dbg !35
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i32 %151, !dbg !35
  %153 = bitcast float %122 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %153, i1 %141) #3, !dbg !35
  %154 = or disjoint i32 %142, 12, !dbg !35
  %155 = or disjoint i32 %154, %140, !dbg !35
  %156 = getelementptr float, ptr addrspace(3) @global_smem, i32 %155, !dbg !35
  %157 = bitcast float %139 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %157, i1 %141) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %158 = icmp slt i32 %11, 32, !dbg !35
  %159 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !35
  %160 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %159, i1 %158) #3, !dbg !35
  %161 = bitcast i32 %160 to float, !dbg !35
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 2, i32 31), !dbg !35
  %163 = bitcast i32 %162 to float, !dbg !35
  %164 = fadd float %161, %163, !dbg !39
  %165 = bitcast float %164 to i32, !dbg !35
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 1, i32 31), !dbg !35
  %167 = bitcast i32 %166 to float, !dbg !35
  %168 = fadd float %164, %167, !dbg !39
  %169 = and i32 %11, 3, !dbg !35
  %170 = icmp eq i32 %169, 0, !dbg !35
  %171 = and i1 %158, %170, !dbg !35
  %172 = bitcast float %168 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %172, i1 %171) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %173 = getelementptr float, ptr addrspace(3) @global_smem, i32 %142, !dbg !35
  %174 = load i32, ptr addrspace(3) %173, align 16, !dbg !35
  %175 = getelementptr float, ptr addrspace(3) @global_smem, i32 %146, !dbg !35
  %176 = load i32, ptr addrspace(3) %175, align 16, !dbg !35
  %177 = getelementptr float, ptr addrspace(3) @global_smem, i32 %150, !dbg !35
  %178 = load i32, ptr addrspace(3) %177, align 16, !dbg !35
  %179 = getelementptr float, ptr addrspace(3) @global_smem, i32 %154, !dbg !35
  %180 = load i32, ptr addrspace(3) %179, align 16, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %181 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %13, !dbg !41
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %181, i32 %174, i32 %176, i32 %178, i32 %180, i1 true) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %182 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %70, !dbg !41
  %183 = load float, ptr addrspace(3) %182, align 4, !dbg !41
  %184 = sext i32 %71 to i64, !dbg !42
  %185 = getelementptr half, ptr addrspace(1) %4, i64 %184, !dbg !42
  %186 = fptrunc float %183 to half, !dbg !41
  %187 = and i32 %11, 120, !dbg !41
  %188 = icmp eq i32 %187, 0, !dbg !41
  %189 = bitcast half %186 to i16, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %189, ptr addrspace(1) %185, i1 %188) #3, !dbg !41
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crbdf4vyauezdx6iqixg755sryxnoi3oifqxkxdy34s3u2w7snkb.py", directory: "/tmp/torchinductor_root/rb")
!4 = !{ptr @triton_red_fused__to_copy_add_mul_sum_5, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mul_sum_5", linkageName: "triton_red_fused__to_copy_add_mul_sum_5", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 37, scope: !6)
!14 = !DILocation(line: 29, column: 40, scope: !6)
!15 = !DILocation(line: 30, column: 31, scope: !6)
!16 = !DILocation(line: 31, column: 29, scope: !6)
!17 = !DILocation(line: 35, column: 44, scope: !6)
!18 = !DILocation(line: 35, column: 39, scope: !6)
!19 = !DILocation(line: 35, column: 34, scope: !6)
!20 = !DILocation(line: 35, column: 51, scope: !6)
!21 = !DILocation(line: 36, column: 34, scope: !6)
!22 = !DILocation(line: 36, column: 51, scope: !6)
!23 = !DILocation(line: 37, column: 34, scope: !6)
!24 = !DILocation(line: 37, column: 51, scope: !6)
!25 = !DILocation(line: 38, column: 34, scope: !6)
!26 = !DILocation(line: 38, column: 41, scope: !6)
!27 = !DILocation(line: 35, column: 105, scope: !6)
!28 = !DILocation(line: 36, column: 105, scope: !6)
!29 = !DILocation(line: 37, column: 105, scope: !6)
!30 = !DILocation(line: 39, column: 22, scope: !6)
!31 = !DILocation(line: 41, column: 22, scope: !6)
!32 = !DILocation(line: 43, column: 22, scope: !6)
!33 = !DILocation(line: 45, column: 25, scope: !6)
!34 = !DILocation(line: 46, column: 42, scope: !6)
!35 = !DILocation(line: 286, column: 36, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !6, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!38 = !DILocation(line: 47, column: 27, scope: !6)
!39 = !DILocation(line: 256, column: 15, scope: !40, inlinedAt: !38)
!40 = distinct !DILexicalBlockFile(scope: !36, file: !37, discriminator: 0)
!41 = !DILocation(line: 48, column: 37, scope: !6)
!42 = !DILocation(line: 48, column: 25, scope: !6)
!43 = !DILocation(line: 48, column: 4, scope: !6)
