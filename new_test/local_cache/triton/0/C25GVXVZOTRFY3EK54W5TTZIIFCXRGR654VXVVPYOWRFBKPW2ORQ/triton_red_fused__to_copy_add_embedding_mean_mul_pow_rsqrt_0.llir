; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py\00"
@assertMessage_0 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp4 < 128256\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !10 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %11 = icmp slt i32 %10, %6, !dbg !12
  %12 = sext i32 %10 to i64, !dbg !13
  %13 = getelementptr i64, ptr addrspace(1) %1, i64 %12, !dbg !13
  %14 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %15 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %16 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %17 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %18 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %23 = add i64 %22, 128256, !dbg !15
  %24 = icmp slt i64 %22, 0, !dbg !16
  %25 = select i1 %24, i64 %23, i64 %22, !dbg !17
  %26 = icmp ugt i64 %25, 128255, !dbg !18
  %.not2 = and i1 %11, %26, !dbg !19
  br i1 %.not2, label %27, label %28, !dbg !19

27:                                               ; preds = %9
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !19
  unreachable, !dbg !19

28:                                               ; preds = %9
  %29 = icmp slt i64 %21, 0, !dbg !16
  %30 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !20
  %31 = shl i32 %30, 3, !dbg !20
  %32 = and i32 %31, 504, !dbg !20
  %33 = or disjoint i32 %32, 3584, !dbg !20
  %34 = or disjoint i32 %32, 3072, !dbg !20
  %35 = or disjoint i32 %32, 2560, !dbg !20
  %36 = or disjoint i32 %32, 2048, !dbg !20
  %37 = or disjoint i32 %32, 1536, !dbg !20
  %38 = or disjoint i32 %32, 1024, !dbg !20
  %39 = or disjoint i32 %32, 512, !dbg !20
  %40 = lshr i32 %30, 5, !dbg !20
  %41 = and i32 %30, 31, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %42 = shl i64 %21, 12, !dbg !21
  %43 = add i64 %42, 525336576, !dbg !21
  %44 = select i1 %29, i64 %43, i64 %42, !dbg !21
  %45 = zext nneg i32 %32 to i64, !dbg !22
  %46 = zext nneg i32 %39 to i64, !dbg !22
  %47 = zext nneg i32 %38 to i64, !dbg !22
  %48 = zext nneg i32 %37 to i64, !dbg !22
  %49 = zext nneg i32 %36 to i64, !dbg !22
  %50 = zext nneg i32 %35 to i64, !dbg !22
  %51 = zext nneg i32 %34 to i64, !dbg !22
  %52 = zext nneg i32 %33 to i64, !dbg !22
  %53 = getelementptr half, ptr addrspace(1) %2, i64 %44, !dbg !23
  %54 = getelementptr half, ptr addrspace(1) %53, i64 %45, !dbg !23
  %55 = getelementptr half, ptr addrspace(1) %53, i64 %46, !dbg !23
  %56 = getelementptr half, ptr addrspace(1) %53, i64 %47, !dbg !23
  %57 = getelementptr half, ptr addrspace(1) %53, i64 %48, !dbg !23
  %58 = getelementptr half, ptr addrspace(1) %53, i64 %49, !dbg !23
  %59 = getelementptr half, ptr addrspace(1) %53, i64 %50, !dbg !23
  %60 = getelementptr half, ptr addrspace(1) %53, i64 %51, !dbg !23
  %61 = getelementptr half, ptr addrspace(1) %53, i64 %52, !dbg !23
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %54, i1 %11) #6, !dbg !24
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !24
  %64 = bitcast i32 %63 to <2 x half>, !dbg !24
  %65 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !24
  %66 = bitcast i32 %65 to <2 x half>, !dbg !24
  %67 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !24
  %68 = bitcast i32 %67 to <2 x half>, !dbg !24
  %69 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !24
  %70 = bitcast i32 %69 to <2 x half>, !dbg !24
  %71 = extractelement <2 x half> %64, i64 0, !dbg !24
  %72 = extractelement <2 x half> %64, i64 1, !dbg !24
  %73 = extractelement <2 x half> %66, i64 0, !dbg !24
  %74 = extractelement <2 x half> %66, i64 1, !dbg !24
  %75 = extractelement <2 x half> %68, i64 0, !dbg !24
  %76 = extractelement <2 x half> %68, i64 1, !dbg !24
  %77 = extractelement <2 x half> %70, i64 0, !dbg !24
  %78 = extractelement <2 x half> %70, i64 1, !dbg !24
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %55, i1 %11) #6, !dbg !24
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !24
  %81 = bitcast i32 %80 to <2 x half>, !dbg !24
  %82 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !24
  %83 = bitcast i32 %82 to <2 x half>, !dbg !24
  %84 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !24
  %85 = bitcast i32 %84 to <2 x half>, !dbg !24
  %86 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !24
  %87 = bitcast i32 %86 to <2 x half>, !dbg !24
  %88 = extractelement <2 x half> %81, i64 0, !dbg !24
  %89 = extractelement <2 x half> %81, i64 1, !dbg !24
  %90 = extractelement <2 x half> %83, i64 0, !dbg !24
  %91 = extractelement <2 x half> %83, i64 1, !dbg !24
  %92 = extractelement <2 x half> %85, i64 0, !dbg !24
  %93 = extractelement <2 x half> %85, i64 1, !dbg !24
  %94 = extractelement <2 x half> %87, i64 0, !dbg !24
  %95 = extractelement <2 x half> %87, i64 1, !dbg !24
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %56, i1 %11) #6, !dbg !24
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !24
  %98 = bitcast i32 %97 to <2 x half>, !dbg !24
  %99 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !24
  %100 = bitcast i32 %99 to <2 x half>, !dbg !24
  %101 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !24
  %102 = bitcast i32 %101 to <2 x half>, !dbg !24
  %103 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !24
  %104 = bitcast i32 %103 to <2 x half>, !dbg !24
  %105 = extractelement <2 x half> %98, i64 0, !dbg !24
  %106 = extractelement <2 x half> %98, i64 1, !dbg !24
  %107 = extractelement <2 x half> %100, i64 0, !dbg !24
  %108 = extractelement <2 x half> %100, i64 1, !dbg !24
  %109 = extractelement <2 x half> %102, i64 0, !dbg !24
  %110 = extractelement <2 x half> %102, i64 1, !dbg !24
  %111 = extractelement <2 x half> %104, i64 0, !dbg !24
  %112 = extractelement <2 x half> %104, i64 1, !dbg !24
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %57, i1 %11) #6, !dbg !24
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !24
  %115 = bitcast i32 %114 to <2 x half>, !dbg !24
  %116 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !24
  %117 = bitcast i32 %116 to <2 x half>, !dbg !24
  %118 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !24
  %119 = bitcast i32 %118 to <2 x half>, !dbg !24
  %120 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !24
  %121 = bitcast i32 %120 to <2 x half>, !dbg !24
  %122 = extractelement <2 x half> %115, i64 0, !dbg !24
  %123 = extractelement <2 x half> %115, i64 1, !dbg !24
  %124 = extractelement <2 x half> %117, i64 0, !dbg !24
  %125 = extractelement <2 x half> %117, i64 1, !dbg !24
  %126 = extractelement <2 x half> %119, i64 0, !dbg !24
  %127 = extractelement <2 x half> %119, i64 1, !dbg !24
  %128 = extractelement <2 x half> %121, i64 0, !dbg !24
  %129 = extractelement <2 x half> %121, i64 1, !dbg !24
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %58, i1 %11) #6, !dbg !24
  %131 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !24
  %132 = bitcast i32 %131 to <2 x half>, !dbg !24
  %133 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !24
  %134 = bitcast i32 %133 to <2 x half>, !dbg !24
  %135 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !24
  %136 = bitcast i32 %135 to <2 x half>, !dbg !24
  %137 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !24
  %138 = bitcast i32 %137 to <2 x half>, !dbg !24
  %139 = extractelement <2 x half> %132, i64 0, !dbg !24
  %140 = extractelement <2 x half> %132, i64 1, !dbg !24
  %141 = extractelement <2 x half> %134, i64 0, !dbg !24
  %142 = extractelement <2 x half> %134, i64 1, !dbg !24
  %143 = extractelement <2 x half> %136, i64 0, !dbg !24
  %144 = extractelement <2 x half> %136, i64 1, !dbg !24
  %145 = extractelement <2 x half> %138, i64 0, !dbg !24
  %146 = extractelement <2 x half> %138, i64 1, !dbg !24
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %59, i1 %11) #6, !dbg !24
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !24
  %149 = bitcast i32 %148 to <2 x half>, !dbg !24
  %150 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !24
  %151 = bitcast i32 %150 to <2 x half>, !dbg !24
  %152 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !24
  %153 = bitcast i32 %152 to <2 x half>, !dbg !24
  %154 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !24
  %155 = bitcast i32 %154 to <2 x half>, !dbg !24
  %156 = extractelement <2 x half> %149, i64 0, !dbg !24
  %157 = extractelement <2 x half> %149, i64 1, !dbg !24
  %158 = extractelement <2 x half> %151, i64 0, !dbg !24
  %159 = extractelement <2 x half> %151, i64 1, !dbg !24
  %160 = extractelement <2 x half> %153, i64 0, !dbg !24
  %161 = extractelement <2 x half> %153, i64 1, !dbg !24
  %162 = extractelement <2 x half> %155, i64 0, !dbg !24
  %163 = extractelement <2 x half> %155, i64 1, !dbg !24
  %164 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %60, i1 %11) #6, !dbg !24
  %165 = extractvalue { i32, i32, i32, i32 } %164, 0, !dbg !24
  %166 = bitcast i32 %165 to <2 x half>, !dbg !24
  %167 = extractvalue { i32, i32, i32, i32 } %164, 1, !dbg !24
  %168 = bitcast i32 %167 to <2 x half>, !dbg !24
  %169 = extractvalue { i32, i32, i32, i32 } %164, 2, !dbg !24
  %170 = bitcast i32 %169 to <2 x half>, !dbg !24
  %171 = extractvalue { i32, i32, i32, i32 } %164, 3, !dbg !24
  %172 = bitcast i32 %171 to <2 x half>, !dbg !24
  %173 = extractelement <2 x half> %166, i64 0, !dbg !24
  %174 = extractelement <2 x half> %166, i64 1, !dbg !24
  %175 = extractelement <2 x half> %168, i64 0, !dbg !24
  %176 = extractelement <2 x half> %168, i64 1, !dbg !24
  %177 = extractelement <2 x half> %170, i64 0, !dbg !24
  %178 = extractelement <2 x half> %170, i64 1, !dbg !24
  %179 = extractelement <2 x half> %172, i64 0, !dbg !24
  %180 = extractelement <2 x half> %172, i64 1, !dbg !24
  %181 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %61, i1 %11) #6, !dbg !24
  %182 = extractvalue { i32, i32, i32, i32 } %181, 0, !dbg !24
  %183 = bitcast i32 %182 to <2 x half>, !dbg !24
  %184 = extractvalue { i32, i32, i32, i32 } %181, 1, !dbg !24
  %185 = bitcast i32 %184 to <2 x half>, !dbg !24
  %186 = extractvalue { i32, i32, i32, i32 } %181, 2, !dbg !24
  %187 = bitcast i32 %186 to <2 x half>, !dbg !24
  %188 = extractvalue { i32, i32, i32, i32 } %181, 3, !dbg !24
  %189 = bitcast i32 %188 to <2 x half>, !dbg !24
  %190 = extractelement <2 x half> %183, i64 0, !dbg !24
  %191 = extractelement <2 x half> %183, i64 1, !dbg !24
  %192 = extractelement <2 x half> %185, i64 0, !dbg !24
  %193 = extractelement <2 x half> %185, i64 1, !dbg !24
  %194 = extractelement <2 x half> %187, i64 0, !dbg !24
  %195 = extractelement <2 x half> %187, i64 1, !dbg !24
  %196 = extractelement <2 x half> %189, i64 0, !dbg !24
  %197 = extractelement <2 x half> %189, i64 1, !dbg !24
  %198 = fpext half %71 to float, !dbg !25
  %199 = fpext half %72 to float, !dbg !25
  %200 = fpext half %73 to float, !dbg !25
  %201 = fpext half %74 to float, !dbg !25
  %202 = fpext half %75 to float, !dbg !25
  %203 = fpext half %76 to float, !dbg !25
  %204 = fpext half %77 to float, !dbg !25
  %205 = fpext half %78 to float, !dbg !25
  %206 = fpext half %88 to float, !dbg !25
  %207 = fpext half %89 to float, !dbg !25
  %208 = fpext half %90 to float, !dbg !25
  %209 = fpext half %91 to float, !dbg !25
  %210 = fpext half %92 to float, !dbg !25
  %211 = fpext half %93 to float, !dbg !25
  %212 = fpext half %94 to float, !dbg !25
  %213 = fpext half %95 to float, !dbg !25
  %214 = fpext half %105 to float, !dbg !25
  %215 = fpext half %106 to float, !dbg !25
  %216 = fpext half %107 to float, !dbg !25
  %217 = fpext half %108 to float, !dbg !25
  %218 = fpext half %109 to float, !dbg !25
  %219 = fpext half %110 to float, !dbg !25
  %220 = fpext half %111 to float, !dbg !25
  %221 = fpext half %112 to float, !dbg !25
  %222 = fpext half %122 to float, !dbg !25
  %223 = fpext half %123 to float, !dbg !25
  %224 = fpext half %124 to float, !dbg !25
  %225 = fpext half %125 to float, !dbg !25
  %226 = fpext half %126 to float, !dbg !25
  %227 = fpext half %127 to float, !dbg !25
  %228 = fpext half %128 to float, !dbg !25
  %229 = fpext half %129 to float, !dbg !25
  %230 = fpext half %139 to float, !dbg !25
  %231 = fpext half %140 to float, !dbg !25
  %232 = fpext half %141 to float, !dbg !25
  %233 = fpext half %142 to float, !dbg !25
  %234 = fpext half %143 to float, !dbg !25
  %235 = fpext half %144 to float, !dbg !25
  %236 = fpext half %145 to float, !dbg !25
  %237 = fpext half %146 to float, !dbg !25
  %238 = fpext half %156 to float, !dbg !25
  %239 = fpext half %157 to float, !dbg !25
  %240 = fpext half %158 to float, !dbg !25
  %241 = fpext half %159 to float, !dbg !25
  %242 = fpext half %160 to float, !dbg !25
  %243 = fpext half %161 to float, !dbg !25
  %244 = fpext half %162 to float, !dbg !25
  %245 = fpext half %163 to float, !dbg !25
  %246 = fpext half %173 to float, !dbg !25
  %247 = fpext half %174 to float, !dbg !25
  %248 = fpext half %175 to float, !dbg !25
  %249 = fpext half %176 to float, !dbg !25
  %250 = fpext half %177 to float, !dbg !25
  %251 = fpext half %178 to float, !dbg !25
  %252 = fpext half %179 to float, !dbg !25
  %253 = fpext half %180 to float, !dbg !25
  %254 = fpext half %190 to float, !dbg !25
  %255 = fpext half %191 to float, !dbg !25
  %256 = fpext half %192 to float, !dbg !25
  %257 = fpext half %193 to float, !dbg !25
  %258 = fpext half %194 to float, !dbg !25
  %259 = fpext half %195 to float, !dbg !25
  %260 = fpext half %196 to float, !dbg !25
  %261 = fpext half %197 to float, !dbg !25
  %262 = fmul float %198, %198, !dbg !26
  %263 = fmul float %199, %199, !dbg !26
  %264 = fmul float %200, %200, !dbg !26
  %265 = fmul float %201, %201, !dbg !26
  %266 = fmul float %202, %202, !dbg !26
  %267 = fmul float %203, %203, !dbg !26
  %268 = fmul float %204, %204, !dbg !26
  %269 = fmul float %205, %205, !dbg !26
  %270 = fmul float %206, %206, !dbg !26
  %271 = fmul float %207, %207, !dbg !26
  %272 = fmul float %208, %208, !dbg !26
  %273 = fmul float %209, %209, !dbg !26
  %274 = fmul float %210, %210, !dbg !26
  %275 = fmul float %211, %211, !dbg !26
  %276 = fmul float %212, %212, !dbg !26
  %277 = fmul float %213, %213, !dbg !26
  %278 = fmul float %214, %214, !dbg !26
  %279 = fmul float %215, %215, !dbg !26
  %280 = fmul float %216, %216, !dbg !26
  %281 = fmul float %217, %217, !dbg !26
  %282 = fmul float %218, %218, !dbg !26
  %283 = fmul float %219, %219, !dbg !26
  %284 = fmul float %220, %220, !dbg !26
  %285 = fmul float %221, %221, !dbg !26
  %286 = fmul float %222, %222, !dbg !26
  %287 = fmul float %223, %223, !dbg !26
  %288 = fmul float %224, %224, !dbg !26
  %289 = fmul float %225, %225, !dbg !26
  %290 = fmul float %226, %226, !dbg !26
  %291 = fmul float %227, %227, !dbg !26
  %292 = fmul float %228, %228, !dbg !26
  %293 = fmul float %229, %229, !dbg !26
  %294 = fmul float %230, %230, !dbg !26
  %295 = fmul float %231, %231, !dbg !26
  %296 = fmul float %232, %232, !dbg !26
  %297 = fmul float %233, %233, !dbg !26
  %298 = fmul float %234, %234, !dbg !26
  %299 = fmul float %235, %235, !dbg !26
  %300 = fmul float %236, %236, !dbg !26
  %301 = fmul float %237, %237, !dbg !26
  %302 = fmul float %238, %238, !dbg !26
  %303 = fmul float %239, %239, !dbg !26
  %304 = fmul float %240, %240, !dbg !26
  %305 = fmul float %241, %241, !dbg !26
  %306 = fmul float %242, %242, !dbg !26
  %307 = fmul float %243, %243, !dbg !26
  %308 = fmul float %244, %244, !dbg !26
  %309 = fmul float %245, %245, !dbg !26
  %310 = fmul float %246, %246, !dbg !26
  %311 = fmul float %247, %247, !dbg !26
  %312 = fmul float %248, %248, !dbg !26
  %313 = fmul float %249, %249, !dbg !26
  %314 = fmul float %250, %250, !dbg !26
  %315 = fmul float %251, %251, !dbg !26
  %316 = fmul float %252, %252, !dbg !26
  %317 = fmul float %253, %253, !dbg !26
  %318 = fmul float %254, %254, !dbg !26
  %319 = fmul float %255, %255, !dbg !26
  %320 = fmul float %256, %256, !dbg !26
  %321 = fmul float %257, %257, !dbg !26
  %322 = fmul float %258, %258, !dbg !26
  %323 = fmul float %259, %259, !dbg !26
  %324 = fmul float %260, %260, !dbg !26
  %325 = fmul float %261, %261, !dbg !26
  %326 = shl i32 %10, 12, !dbg !27
  %327 = or disjoint i32 %32, %326, !dbg !28
  %328 = or disjoint i32 %39, %326, !dbg !28
  %329 = or disjoint i32 %38, %326, !dbg !28
  %330 = or disjoint i32 %37, %326, !dbg !28
  %331 = or disjoint i32 %36, %326, !dbg !28
  %332 = or disjoint i32 %35, %326, !dbg !28
  %333 = or disjoint i32 %34, %326, !dbg !28
  %334 = or disjoint i32 %33, %326, !dbg !28
  %335 = sext i32 %327 to i64, !dbg !29
  %336 = getelementptr half, ptr addrspace(1) %4, i64 %335, !dbg !29
  %337 = sext i32 %328 to i64, !dbg !29
  %338 = getelementptr half, ptr addrspace(1) %4, i64 %337, !dbg !29
  %339 = sext i32 %329 to i64, !dbg !29
  %340 = getelementptr half, ptr addrspace(1) %4, i64 %339, !dbg !29
  %341 = sext i32 %330 to i64, !dbg !29
  %342 = getelementptr half, ptr addrspace(1) %4, i64 %341, !dbg !29
  %343 = sext i32 %331 to i64, !dbg !29
  %344 = getelementptr half, ptr addrspace(1) %4, i64 %343, !dbg !29
  %345 = sext i32 %332 to i64, !dbg !29
  %346 = getelementptr half, ptr addrspace(1) %4, i64 %345, !dbg !29
  %347 = sext i32 %333 to i64, !dbg !29
  %348 = getelementptr half, ptr addrspace(1) %4, i64 %347, !dbg !29
  %349 = sext i32 %334 to i64, !dbg !29
  %350 = getelementptr half, ptr addrspace(1) %4, i64 %349, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %63, i32 %65, i32 %67, i32 %69, ptr addrspace(1) %336, i1 %11) #6, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %80, i32 %82, i32 %84, i32 %86, ptr addrspace(1) %338, i1 %11) #6, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %97, i32 %99, i32 %101, i32 %103, ptr addrspace(1) %340, i1 %11) #6, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %114, i32 %116, i32 %118, i32 %120, ptr addrspace(1) %342, i1 %11) #6, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %131, i32 %133, i32 %135, i32 %137, ptr addrspace(1) %344, i1 %11) #6, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %148, i32 %150, i32 %152, i32 %154, ptr addrspace(1) %346, i1 %11) #6, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %165, i32 %167, i32 %169, i32 %171, ptr addrspace(1) %348, i1 %11) #6, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %182, i32 %184, i32 %186, i32 %188, ptr addrspace(1) %350, i1 %11) #6, !dbg !30
  %351 = fadd float %262, %263, !dbg !31
  %352 = fadd float %264, %351, !dbg !31
  %353 = fadd float %265, %352, !dbg !31
  %354 = fadd float %266, %353, !dbg !31
  %355 = fadd float %267, %354, !dbg !31
  %356 = fadd float %268, %355, !dbg !31
  %357 = fadd float %269, %356, !dbg !31
  %358 = fadd float %270, %357, !dbg !31
  %359 = fadd float %271, %358, !dbg !31
  %360 = fadd float %272, %359, !dbg !31
  %361 = fadd float %273, %360, !dbg !31
  %362 = fadd float %274, %361, !dbg !31
  %363 = fadd float %275, %362, !dbg !31
  %364 = fadd float %276, %363, !dbg !31
  %365 = fadd float %277, %364, !dbg !31
  %366 = fadd float %278, %365, !dbg !31
  %367 = fadd float %279, %366, !dbg !31
  %368 = fadd float %280, %367, !dbg !31
  %369 = fadd float %281, %368, !dbg !31
  %370 = fadd float %282, %369, !dbg !31
  %371 = fadd float %283, %370, !dbg !31
  %372 = fadd float %284, %371, !dbg !31
  %373 = fadd float %285, %372, !dbg !31
  %374 = fadd float %286, %373, !dbg !31
  %375 = fadd float %287, %374, !dbg !31
  %376 = fadd float %288, %375, !dbg !31
  %377 = fadd float %289, %376, !dbg !31
  %378 = fadd float %290, %377, !dbg !31
  %379 = fadd float %291, %378, !dbg !31
  %380 = fadd float %292, %379, !dbg !31
  %381 = fadd float %293, %380, !dbg !31
  %382 = fadd float %294, %381, !dbg !31
  %383 = fadd float %295, %382, !dbg !31
  %384 = fadd float %296, %383, !dbg !31
  %385 = fadd float %297, %384, !dbg !31
  %386 = fadd float %298, %385, !dbg !31
  %387 = fadd float %299, %386, !dbg !31
  %388 = fadd float %300, %387, !dbg !31
  %389 = fadd float %301, %388, !dbg !31
  %390 = fadd float %302, %389, !dbg !31
  %391 = fadd float %303, %390, !dbg !31
  %392 = fadd float %304, %391, !dbg !31
  %393 = fadd float %305, %392, !dbg !31
  %394 = fadd float %306, %393, !dbg !31
  %395 = fadd float %307, %394, !dbg !31
  %396 = fadd float %308, %395, !dbg !31
  %397 = fadd float %309, %396, !dbg !31
  %398 = fadd float %310, %397, !dbg !31
  %399 = fadd float %311, %398, !dbg !31
  %400 = fadd float %312, %399, !dbg !31
  %401 = fadd float %313, %400, !dbg !31
  %402 = fadd float %314, %401, !dbg !31
  %403 = fadd float %315, %402, !dbg !31
  %404 = fadd float %316, %403, !dbg !31
  %405 = fadd float %317, %404, !dbg !31
  %406 = fadd float %318, %405, !dbg !31
  %407 = fadd float %319, %406, !dbg !31
  %408 = fadd float %320, %407, !dbg !31
  %409 = fadd float %321, %408, !dbg !31
  %410 = fadd float %322, %409, !dbg !31
  %411 = fadd float %323, %410, !dbg !31
  %412 = fadd float %324, %411, !dbg !31
  %413 = fadd float %325, %412, !dbg !31
  %414 = select i1 %11, float %413, float 0.000000e+00, !dbg !31
  %415 = bitcast float %414 to i32, !dbg !36
  %416 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %415, i32 16, i32 31), !dbg !36
  %417 = bitcast i32 %416 to float, !dbg !36
  %418 = fadd float %414, %417, !dbg !31
  %419 = bitcast float %418 to i32, !dbg !36
  %420 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %419, i32 8, i32 31), !dbg !36
  %421 = bitcast i32 %420 to float, !dbg !36
  %422 = fadd float %418, %421, !dbg !31
  %423 = bitcast float %422 to i32, !dbg !36
  %424 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %423, i32 4, i32 31), !dbg !36
  %425 = bitcast i32 %424 to float, !dbg !36
  %426 = fadd float %422, %425, !dbg !31
  %427 = bitcast float %426 to i32, !dbg !36
  %428 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %427, i32 2, i32 31), !dbg !36
  %429 = bitcast i32 %428 to float, !dbg !36
  %430 = fadd float %426, %429, !dbg !31
  %431 = bitcast float %430 to i32, !dbg !36
  %432 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %431, i32 1, i32 31), !dbg !36
  %433 = bitcast i32 %432 to float, !dbg !36
  %434 = fadd float %430, %433, !dbg !31
  %435 = and i32 %40, 1, !dbg !36
  %436 = icmp eq i32 %41, 0, !dbg !36
  %437 = getelementptr float, ptr addrspace(3) @global_smem, i32 %435, !dbg !36
  %438 = bitcast float %434 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %437, <1 x i32> %438, i1 %436) #6, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %439 = icmp slt i32 %30, 2, !dbg !36
  %440 = getelementptr float, ptr addrspace(3) @global_smem, i32 %30, !dbg !36
  %441 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %440, i1 %439) #6, !dbg !36
  %442 = bitcast i32 %441 to float, !dbg !36
  %443 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %441, i32 1, i32 31), !dbg !36
  %444 = bitcast i32 %443 to float, !dbg !36
  %445 = fadd float %442, %444, !dbg !31
  %446 = and i32 %30, 1, !dbg !36
  %447 = icmp eq i32 %446, 0, !dbg !36
  %448 = and i1 %439, %447, !dbg !36
  %449 = bitcast float %445 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %440, <1 x i32> %449, i1 %448) #6, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %450 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !36
  %451 = tail call float @llvm.nvvm.div.full(float %450, float 4.096000e+03), !dbg !37
  %452 = fadd float %451, 0x3EE4F8B580000000, !dbg !38
  %453 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %.not.i = icmp eq i32 %453, 0, !dbg !39
  br i1 %.not.i, label %456, label %454, !dbg !39

454:                                              ; preds = %28
  %455 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %452), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

456:                                              ; preds = %28
  %457 = tail call float @llvm.nvvm.rsqrt.approx.f(float %452), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

__nv_rsqrtf.exit:                                 ; preds = %454, %456
  %.0.i = phi float [ %455, %454 ], [ %457, %456 ], !dbg !39
  %458 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %459 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %460 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %461 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %462 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %463 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %464 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %465 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %.not.i24 = icmp eq i32 %465, 0, !dbg !39
  br i1 %.not.i24, label %468, label %466, !dbg !39

466:                                              ; preds = %__nv_rsqrtf.exit
  %467 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %452), !dbg !39
  br label %__nv_rsqrtf.exit26, !dbg !39

468:                                              ; preds = %__nv_rsqrtf.exit
  %469 = tail call float @llvm.nvvm.rsqrt.approx.f(float %452), !dbg !39
  br label %__nv_rsqrtf.exit26, !dbg !39

__nv_rsqrtf.exit26:                               ; preds = %466, %468
  %.0.i25 = phi float [ %467, %466 ], [ %469, %468 ], !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %470 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !41
  %471 = and i32 %30, 63, !dbg !42
  %472 = icmp eq i32 %471, 0, !dbg !42
  %473 = bitcast float %.0.i to i32, !dbg !42
  %474 = and i1 %472, %11, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %473, ptr addrspace(1) %470, i1 %474) #6, !dbg !42
  %475 = getelementptr half, ptr addrspace(1) %3, i64 %45, !dbg !43
  %476 = getelementptr half, ptr addrspace(1) %3, i64 %46, !dbg !43
  %477 = getelementptr half, ptr addrspace(1) %3, i64 %47, !dbg !43
  %478 = getelementptr half, ptr addrspace(1) %3, i64 %48, !dbg !43
  %479 = getelementptr half, ptr addrspace(1) %3, i64 %49, !dbg !43
  %480 = getelementptr half, ptr addrspace(1) %3, i64 %50, !dbg !43
  %481 = getelementptr half, ptr addrspace(1) %3, i64 %51, !dbg !43
  %482 = getelementptr half, ptr addrspace(1) %3, i64 %52, !dbg !43
  %483 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %475, i1 true) #6, !dbg !44
  %484 = extractvalue { i32, i32, i32, i32 } %483, 0, !dbg !44
  %485 = bitcast i32 %484 to <2 x half>, !dbg !44
  %486 = extractvalue { i32, i32, i32, i32 } %483, 1, !dbg !44
  %487 = bitcast i32 %486 to <2 x half>, !dbg !44
  %488 = extractvalue { i32, i32, i32, i32 } %483, 2, !dbg !44
  %489 = bitcast i32 %488 to <2 x half>, !dbg !44
  %490 = extractvalue { i32, i32, i32, i32 } %483, 3, !dbg !44
  %491 = bitcast i32 %490 to <2 x half>, !dbg !44
  %492 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %476, i1 true) #6, !dbg !44
  %493 = extractvalue { i32, i32, i32, i32 } %492, 0, !dbg !44
  %494 = bitcast i32 %493 to <2 x half>, !dbg !44
  %495 = extractvalue { i32, i32, i32, i32 } %492, 1, !dbg !44
  %496 = bitcast i32 %495 to <2 x half>, !dbg !44
  %497 = extractvalue { i32, i32, i32, i32 } %492, 2, !dbg !44
  %498 = bitcast i32 %497 to <2 x half>, !dbg !44
  %499 = extractvalue { i32, i32, i32, i32 } %492, 3, !dbg !44
  %500 = bitcast i32 %499 to <2 x half>, !dbg !44
  %501 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %477, i1 true) #6, !dbg !44
  %502 = extractvalue { i32, i32, i32, i32 } %501, 0, !dbg !44
  %503 = bitcast i32 %502 to <2 x half>, !dbg !44
  %504 = extractvalue { i32, i32, i32, i32 } %501, 1, !dbg !44
  %505 = bitcast i32 %504 to <2 x half>, !dbg !44
  %506 = extractvalue { i32, i32, i32, i32 } %501, 2, !dbg !44
  %507 = bitcast i32 %506 to <2 x half>, !dbg !44
  %508 = extractvalue { i32, i32, i32, i32 } %501, 3, !dbg !44
  %509 = bitcast i32 %508 to <2 x half>, !dbg !44
  %510 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %478, i1 true) #6, !dbg !44
  %511 = extractvalue { i32, i32, i32, i32 } %510, 0, !dbg !44
  %512 = bitcast i32 %511 to <2 x half>, !dbg !44
  %513 = extractvalue { i32, i32, i32, i32 } %510, 1, !dbg !44
  %514 = bitcast i32 %513 to <2 x half>, !dbg !44
  %515 = extractvalue { i32, i32, i32, i32 } %510, 2, !dbg !44
  %516 = bitcast i32 %515 to <2 x half>, !dbg !44
  %517 = extractvalue { i32, i32, i32, i32 } %510, 3, !dbg !44
  %518 = bitcast i32 %517 to <2 x half>, !dbg !44
  %519 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %479, i1 true) #6, !dbg !44
  %520 = extractvalue { i32, i32, i32, i32 } %519, 0, !dbg !44
  %521 = bitcast i32 %520 to <2 x half>, !dbg !44
  %522 = extractvalue { i32, i32, i32, i32 } %519, 1, !dbg !44
  %523 = bitcast i32 %522 to <2 x half>, !dbg !44
  %524 = extractvalue { i32, i32, i32, i32 } %519, 2, !dbg !44
  %525 = bitcast i32 %524 to <2 x half>, !dbg !44
  %526 = extractvalue { i32, i32, i32, i32 } %519, 3, !dbg !44
  %527 = bitcast i32 %526 to <2 x half>, !dbg !44
  %528 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %480, i1 true) #6, !dbg !44
  %529 = extractvalue { i32, i32, i32, i32 } %528, 0, !dbg !44
  %530 = bitcast i32 %529 to <2 x half>, !dbg !44
  %531 = extractvalue { i32, i32, i32, i32 } %528, 1, !dbg !44
  %532 = bitcast i32 %531 to <2 x half>, !dbg !44
  %533 = extractvalue { i32, i32, i32, i32 } %528, 2, !dbg !44
  %534 = bitcast i32 %533 to <2 x half>, !dbg !44
  %535 = extractvalue { i32, i32, i32, i32 } %528, 3, !dbg !44
  %536 = bitcast i32 %535 to <2 x half>, !dbg !44
  %537 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %481, i1 true) #6, !dbg !44
  %538 = extractvalue { i32, i32, i32, i32 } %537, 0, !dbg !44
  %539 = bitcast i32 %538 to <2 x half>, !dbg !44
  %540 = extractvalue { i32, i32, i32, i32 } %537, 1, !dbg !44
  %541 = bitcast i32 %540 to <2 x half>, !dbg !44
  %542 = extractvalue { i32, i32, i32, i32 } %537, 2, !dbg !44
  %543 = bitcast i32 %542 to <2 x half>, !dbg !44
  %544 = extractvalue { i32, i32, i32, i32 } %537, 3, !dbg !44
  %545 = bitcast i32 %544 to <2 x half>, !dbg !44
  %546 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %482, i1 true) #6, !dbg !44
  %547 = extractvalue { i32, i32, i32, i32 } %546, 0, !dbg !44
  %548 = bitcast i32 %547 to <2 x half>, !dbg !44
  %549 = extractvalue { i32, i32, i32, i32 } %546, 1, !dbg !44
  %550 = bitcast i32 %549 to <2 x half>, !dbg !44
  %551 = extractvalue { i32, i32, i32, i32 } %546, 2, !dbg !44
  %552 = bitcast i32 %551 to <2 x half>, !dbg !44
  %553 = extractvalue { i32, i32, i32, i32 } %546, 3, !dbg !44
  %554 = bitcast i32 %553 to <2 x half>, !dbg !44
  %555 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %336, i1 %11) #6, !dbg !45
  %556 = extractvalue { i32, i32, i32, i32 } %555, 0, !dbg !45
  %557 = bitcast i32 %556 to <2 x half>, !dbg !45
  %558 = extractvalue { i32, i32, i32, i32 } %555, 1, !dbg !45
  %559 = bitcast i32 %558 to <2 x half>, !dbg !45
  %560 = extractvalue { i32, i32, i32, i32 } %555, 2, !dbg !45
  %561 = bitcast i32 %560 to <2 x half>, !dbg !45
  %562 = extractvalue { i32, i32, i32, i32 } %555, 3, !dbg !45
  %563 = bitcast i32 %562 to <2 x half>, !dbg !45
  %564 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %338, i1 %11) #6, !dbg !45
  %565 = extractvalue { i32, i32, i32, i32 } %564, 0, !dbg !45
  %566 = bitcast i32 %565 to <2 x half>, !dbg !45
  %567 = extractvalue { i32, i32, i32, i32 } %564, 1, !dbg !45
  %568 = bitcast i32 %567 to <2 x half>, !dbg !45
  %569 = extractvalue { i32, i32, i32, i32 } %564, 2, !dbg !45
  %570 = bitcast i32 %569 to <2 x half>, !dbg !45
  %571 = extractvalue { i32, i32, i32, i32 } %564, 3, !dbg !45
  %572 = bitcast i32 %571 to <2 x half>, !dbg !45
  %573 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %340, i1 %11) #6, !dbg !45
  %574 = extractvalue { i32, i32, i32, i32 } %573, 0, !dbg !45
  %575 = bitcast i32 %574 to <2 x half>, !dbg !45
  %576 = extractvalue { i32, i32, i32, i32 } %573, 1, !dbg !45
  %577 = bitcast i32 %576 to <2 x half>, !dbg !45
  %578 = extractvalue { i32, i32, i32, i32 } %573, 2, !dbg !45
  %579 = bitcast i32 %578 to <2 x half>, !dbg !45
  %580 = extractvalue { i32, i32, i32, i32 } %573, 3, !dbg !45
  %581 = bitcast i32 %580 to <2 x half>, !dbg !45
  %582 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %342, i1 %11) #6, !dbg !45
  %583 = extractvalue { i32, i32, i32, i32 } %582, 0, !dbg !45
  %584 = bitcast i32 %583 to <2 x half>, !dbg !45
  %585 = extractvalue { i32, i32, i32, i32 } %582, 1, !dbg !45
  %586 = bitcast i32 %585 to <2 x half>, !dbg !45
  %587 = extractvalue { i32, i32, i32, i32 } %582, 2, !dbg !45
  %588 = bitcast i32 %587 to <2 x half>, !dbg !45
  %589 = extractvalue { i32, i32, i32, i32 } %582, 3, !dbg !45
  %590 = bitcast i32 %589 to <2 x half>, !dbg !45
  %591 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %344, i1 %11) #6, !dbg !45
  %592 = extractvalue { i32, i32, i32, i32 } %591, 0, !dbg !45
  %593 = bitcast i32 %592 to <2 x half>, !dbg !45
  %594 = extractvalue { i32, i32, i32, i32 } %591, 1, !dbg !45
  %595 = bitcast i32 %594 to <2 x half>, !dbg !45
  %596 = extractvalue { i32, i32, i32, i32 } %591, 2, !dbg !45
  %597 = bitcast i32 %596 to <2 x half>, !dbg !45
  %598 = extractvalue { i32, i32, i32, i32 } %591, 3, !dbg !45
  %599 = bitcast i32 %598 to <2 x half>, !dbg !45
  %600 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %346, i1 %11) #6, !dbg !45
  %601 = extractvalue { i32, i32, i32, i32 } %600, 0, !dbg !45
  %602 = bitcast i32 %601 to <2 x half>, !dbg !45
  %603 = extractvalue { i32, i32, i32, i32 } %600, 1, !dbg !45
  %604 = bitcast i32 %603 to <2 x half>, !dbg !45
  %605 = extractvalue { i32, i32, i32, i32 } %600, 2, !dbg !45
  %606 = bitcast i32 %605 to <2 x half>, !dbg !45
  %607 = extractvalue { i32, i32, i32, i32 } %600, 3, !dbg !45
  %608 = bitcast i32 %607 to <2 x half>, !dbg !45
  %609 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %348, i1 %11) #6, !dbg !45
  %610 = extractvalue { i32, i32, i32, i32 } %609, 0, !dbg !45
  %611 = bitcast i32 %610 to <2 x half>, !dbg !45
  %612 = extractvalue { i32, i32, i32, i32 } %609, 1, !dbg !45
  %613 = bitcast i32 %612 to <2 x half>, !dbg !45
  %614 = extractvalue { i32, i32, i32, i32 } %609, 2, !dbg !45
  %615 = bitcast i32 %614 to <2 x half>, !dbg !45
  %616 = extractvalue { i32, i32, i32, i32 } %609, 3, !dbg !45
  %617 = bitcast i32 %616 to <2 x half>, !dbg !45
  %618 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %350, i1 %11) #6, !dbg !45
  %619 = extractvalue { i32, i32, i32, i32 } %618, 0, !dbg !45
  %620 = bitcast i32 %619 to <2 x half>, !dbg !45
  %621 = extractvalue { i32, i32, i32, i32 } %618, 1, !dbg !45
  %622 = bitcast i32 %621 to <2 x half>, !dbg !45
  %623 = extractvalue { i32, i32, i32, i32 } %618, 2, !dbg !45
  %624 = bitcast i32 %623 to <2 x half>, !dbg !45
  %625 = extractvalue { i32, i32, i32, i32 } %618, 3, !dbg !45
  %626 = bitcast i32 %625 to <2 x half>, !dbg !45
  %627 = getelementptr half, ptr addrspace(1) %5, i64 %335, !dbg !46
  %628 = getelementptr half, ptr addrspace(1) %5, i64 %337, !dbg !46
  %629 = getelementptr half, ptr addrspace(1) %5, i64 %339, !dbg !46
  %630 = getelementptr half, ptr addrspace(1) %5, i64 %341, !dbg !46
  %631 = getelementptr half, ptr addrspace(1) %5, i64 %343, !dbg !46
  %632 = getelementptr half, ptr addrspace(1) %5, i64 %345, !dbg !46
  %633 = getelementptr half, ptr addrspace(1) %5, i64 %347, !dbg !46
  %634 = getelementptr half, ptr addrspace(1) %5, i64 %349, !dbg !46
  %635 = fpext <2 x half> %485 to <2 x float>, !dbg !47
  %636 = fpext <2 x half> %557 to <2 x float>, !dbg !48
  %637 = insertelement <2 x float> poison, float %.0.i25, i64 0, !dbg !49
  %638 = shufflevector <2 x float> %637, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %639 = fmul <2 x float> %638, %636, !dbg !49
  %640 = fmul <2 x float> %639, %635, !dbg !50
  %641 = fptrunc <2 x float> %640 to <2 x half>, !dbg !51
  %642 = fpext <2 x half> %487 to <2 x float>, !dbg !47
  %643 = fpext <2 x half> %559 to <2 x float>, !dbg !48
  %644 = fmul <2 x float> %638, %643, !dbg !49
  %645 = fmul <2 x float> %644, %642, !dbg !50
  %646 = fptrunc <2 x float> %645 to <2 x half>, !dbg !51
  %647 = fpext <2 x half> %489 to <2 x float>, !dbg !47
  %648 = fpext <2 x half> %561 to <2 x float>, !dbg !48
  %649 = fmul <2 x float> %638, %648, !dbg !49
  %650 = fmul <2 x float> %649, %647, !dbg !50
  %651 = fptrunc <2 x float> %650 to <2 x half>, !dbg !51
  %652 = fpext <2 x half> %491 to <2 x float>, !dbg !47
  %653 = fpext <2 x half> %563 to <2 x float>, !dbg !48
  %654 = fmul <2 x float> %638, %653, !dbg !49
  %655 = fmul <2 x float> %654, %652, !dbg !50
  %656 = fptrunc <2 x float> %655 to <2 x half>, !dbg !51
  %657 = fpext <2 x half> %494 to <2 x float>, !dbg !47
  %658 = fpext <2 x half> %566 to <2 x float>, !dbg !48
  %659 = fmul <2 x float> %638, %658, !dbg !49
  %660 = fmul <2 x float> %659, %657, !dbg !50
  %661 = fptrunc <2 x float> %660 to <2 x half>, !dbg !51
  %662 = fpext <2 x half> %496 to <2 x float>, !dbg !47
  %663 = fpext <2 x half> %568 to <2 x float>, !dbg !48
  %664 = fmul <2 x float> %638, %663, !dbg !49
  %665 = fmul <2 x float> %664, %662, !dbg !50
  %666 = fptrunc <2 x float> %665 to <2 x half>, !dbg !51
  %667 = fpext <2 x half> %498 to <2 x float>, !dbg !47
  %668 = fpext <2 x half> %570 to <2 x float>, !dbg !48
  %669 = fmul <2 x float> %638, %668, !dbg !49
  %670 = fmul <2 x float> %669, %667, !dbg !50
  %671 = fptrunc <2 x float> %670 to <2 x half>, !dbg !51
  %672 = fpext <2 x half> %500 to <2 x float>, !dbg !47
  %673 = fpext <2 x half> %572 to <2 x float>, !dbg !48
  %674 = fmul <2 x float> %638, %673, !dbg !49
  %675 = fmul <2 x float> %674, %672, !dbg !50
  %676 = fptrunc <2 x float> %675 to <2 x half>, !dbg !51
  %677 = fpext <2 x half> %503 to <2 x float>, !dbg !47
  %678 = fpext <2 x half> %575 to <2 x float>, !dbg !48
  %679 = fmul <2 x float> %638, %678, !dbg !49
  %680 = fmul <2 x float> %679, %677, !dbg !50
  %681 = fptrunc <2 x float> %680 to <2 x half>, !dbg !51
  %682 = fpext <2 x half> %505 to <2 x float>, !dbg !47
  %683 = fpext <2 x half> %577 to <2 x float>, !dbg !48
  %684 = fmul <2 x float> %638, %683, !dbg !49
  %685 = fmul <2 x float> %684, %682, !dbg !50
  %686 = fptrunc <2 x float> %685 to <2 x half>, !dbg !51
  %687 = fpext <2 x half> %507 to <2 x float>, !dbg !47
  %688 = fpext <2 x half> %579 to <2 x float>, !dbg !48
  %689 = fmul <2 x float> %638, %688, !dbg !49
  %690 = fmul <2 x float> %689, %687, !dbg !50
  %691 = fptrunc <2 x float> %690 to <2 x half>, !dbg !51
  %692 = fpext <2 x half> %509 to <2 x float>, !dbg !47
  %693 = fpext <2 x half> %581 to <2 x float>, !dbg !48
  %694 = fmul <2 x float> %638, %693, !dbg !49
  %695 = fmul <2 x float> %694, %692, !dbg !50
  %696 = fptrunc <2 x float> %695 to <2 x half>, !dbg !51
  %697 = fpext <2 x half> %512 to <2 x float>, !dbg !47
  %698 = fpext <2 x half> %584 to <2 x float>, !dbg !48
  %699 = fmul <2 x float> %638, %698, !dbg !49
  %700 = fmul <2 x float> %699, %697, !dbg !50
  %701 = fptrunc <2 x float> %700 to <2 x half>, !dbg !51
  %702 = fpext <2 x half> %514 to <2 x float>, !dbg !47
  %703 = fpext <2 x half> %586 to <2 x float>, !dbg !48
  %704 = fmul <2 x float> %638, %703, !dbg !49
  %705 = fmul <2 x float> %704, %702, !dbg !50
  %706 = fptrunc <2 x float> %705 to <2 x half>, !dbg !51
  %707 = fpext <2 x half> %516 to <2 x float>, !dbg !47
  %708 = fpext <2 x half> %588 to <2 x float>, !dbg !48
  %709 = fmul <2 x float> %638, %708, !dbg !49
  %710 = fmul <2 x float> %709, %707, !dbg !50
  %711 = fptrunc <2 x float> %710 to <2 x half>, !dbg !51
  %712 = fpext <2 x half> %518 to <2 x float>, !dbg !47
  %713 = fpext <2 x half> %590 to <2 x float>, !dbg !48
  %714 = fmul <2 x float> %638, %713, !dbg !49
  %715 = fmul <2 x float> %714, %712, !dbg !50
  %716 = fptrunc <2 x float> %715 to <2 x half>, !dbg !51
  %717 = fpext <2 x half> %521 to <2 x float>, !dbg !47
  %718 = fpext <2 x half> %593 to <2 x float>, !dbg !48
  %719 = fmul <2 x float> %638, %718, !dbg !49
  %720 = fmul <2 x float> %719, %717, !dbg !50
  %721 = fptrunc <2 x float> %720 to <2 x half>, !dbg !51
  %722 = fpext <2 x half> %523 to <2 x float>, !dbg !47
  %723 = fpext <2 x half> %595 to <2 x float>, !dbg !48
  %724 = fmul <2 x float> %638, %723, !dbg !49
  %725 = fmul <2 x float> %724, %722, !dbg !50
  %726 = fptrunc <2 x float> %725 to <2 x half>, !dbg !51
  %727 = fpext <2 x half> %525 to <2 x float>, !dbg !47
  %728 = fpext <2 x half> %597 to <2 x float>, !dbg !48
  %729 = fmul <2 x float> %638, %728, !dbg !49
  %730 = fmul <2 x float> %729, %727, !dbg !50
  %731 = fptrunc <2 x float> %730 to <2 x half>, !dbg !51
  %732 = fpext <2 x half> %527 to <2 x float>, !dbg !47
  %733 = fpext <2 x half> %599 to <2 x float>, !dbg !48
  %734 = fmul <2 x float> %638, %733, !dbg !49
  %735 = fmul <2 x float> %734, %732, !dbg !50
  %736 = fptrunc <2 x float> %735 to <2 x half>, !dbg !51
  %737 = fpext <2 x half> %530 to <2 x float>, !dbg !47
  %738 = fpext <2 x half> %602 to <2 x float>, !dbg !48
  %739 = fmul <2 x float> %638, %738, !dbg !49
  %740 = fmul <2 x float> %739, %737, !dbg !50
  %741 = fptrunc <2 x float> %740 to <2 x half>, !dbg !51
  %742 = fpext <2 x half> %532 to <2 x float>, !dbg !47
  %743 = fpext <2 x half> %604 to <2 x float>, !dbg !48
  %744 = fmul <2 x float> %638, %743, !dbg !49
  %745 = fmul <2 x float> %744, %742, !dbg !50
  %746 = fptrunc <2 x float> %745 to <2 x half>, !dbg !51
  %747 = fpext <2 x half> %534 to <2 x float>, !dbg !47
  %748 = fpext <2 x half> %606 to <2 x float>, !dbg !48
  %749 = fmul <2 x float> %638, %748, !dbg !49
  %750 = fmul <2 x float> %749, %747, !dbg !50
  %751 = fptrunc <2 x float> %750 to <2 x half>, !dbg !51
  %752 = fpext <2 x half> %536 to <2 x float>, !dbg !47
  %753 = fpext <2 x half> %608 to <2 x float>, !dbg !48
  %754 = fmul <2 x float> %638, %753, !dbg !49
  %755 = fmul <2 x float> %754, %752, !dbg !50
  %756 = fptrunc <2 x float> %755 to <2 x half>, !dbg !51
  %757 = fpext <2 x half> %539 to <2 x float>, !dbg !47
  %758 = fpext <2 x half> %611 to <2 x float>, !dbg !48
  %759 = fmul <2 x float> %638, %758, !dbg !49
  %760 = fmul <2 x float> %759, %757, !dbg !50
  %761 = fptrunc <2 x float> %760 to <2 x half>, !dbg !51
  %762 = fpext <2 x half> %541 to <2 x float>, !dbg !47
  %763 = fpext <2 x half> %613 to <2 x float>, !dbg !48
  %764 = fmul <2 x float> %638, %763, !dbg !49
  %765 = fmul <2 x float> %764, %762, !dbg !50
  %766 = fptrunc <2 x float> %765 to <2 x half>, !dbg !51
  %767 = fpext <2 x half> %543 to <2 x float>, !dbg !47
  %768 = fpext <2 x half> %615 to <2 x float>, !dbg !48
  %769 = fmul <2 x float> %638, %768, !dbg !49
  %770 = fmul <2 x float> %769, %767, !dbg !50
  %771 = fptrunc <2 x float> %770 to <2 x half>, !dbg !51
  %772 = fpext <2 x half> %545 to <2 x float>, !dbg !47
  %773 = fpext <2 x half> %617 to <2 x float>, !dbg !48
  %774 = fmul <2 x float> %638, %773, !dbg !49
  %775 = fmul <2 x float> %774, %772, !dbg !50
  %776 = fptrunc <2 x float> %775 to <2 x half>, !dbg !51
  %777 = fpext <2 x half> %548 to <2 x float>, !dbg !47
  %778 = fpext <2 x half> %620 to <2 x float>, !dbg !48
  %779 = fmul <2 x float> %638, %778, !dbg !49
  %780 = fmul <2 x float> %779, %777, !dbg !50
  %781 = fptrunc <2 x float> %780 to <2 x half>, !dbg !51
  %782 = fpext <2 x half> %550 to <2 x float>, !dbg !47
  %783 = fpext <2 x half> %622 to <2 x float>, !dbg !48
  %784 = fmul <2 x float> %638, %783, !dbg !49
  %785 = fmul <2 x float> %784, %782, !dbg !50
  %786 = fptrunc <2 x float> %785 to <2 x half>, !dbg !51
  %787 = fpext <2 x half> %552 to <2 x float>, !dbg !47
  %788 = fpext <2 x half> %624 to <2 x float>, !dbg !48
  %789 = fmul <2 x float> %638, %788, !dbg !49
  %790 = fmul <2 x float> %789, %787, !dbg !50
  %791 = fptrunc <2 x float> %790 to <2 x half>, !dbg !51
  %792 = fpext <2 x half> %554 to <2 x float>, !dbg !47
  %793 = fpext <2 x half> %626 to <2 x float>, !dbg !48
  %794 = fmul <2 x float> %638, %793, !dbg !49
  %795 = fmul <2 x float> %794, %792, !dbg !50
  %796 = fptrunc <2 x float> %795 to <2 x half>, !dbg !51
  %797 = bitcast <2 x half> %641 to i32, !dbg !51
  %798 = bitcast <2 x half> %646 to i32, !dbg !51
  %799 = bitcast <2 x half> %651 to i32, !dbg !51
  %800 = bitcast <2 x half> %656 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %797, i32 %798, i32 %799, i32 %800, ptr addrspace(1) %627, i1 %11) #6, !dbg !51
  %801 = bitcast <2 x half> %661 to i32, !dbg !51
  %802 = bitcast <2 x half> %666 to i32, !dbg !51
  %803 = bitcast <2 x half> %671 to i32, !dbg !51
  %804 = bitcast <2 x half> %676 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %801, i32 %802, i32 %803, i32 %804, ptr addrspace(1) %628, i1 %11) #6, !dbg !51
  %805 = bitcast <2 x half> %681 to i32, !dbg !51
  %806 = bitcast <2 x half> %686 to i32, !dbg !51
  %807 = bitcast <2 x half> %691 to i32, !dbg !51
  %808 = bitcast <2 x half> %696 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %805, i32 %806, i32 %807, i32 %808, ptr addrspace(1) %629, i1 %11) #6, !dbg !51
  %809 = bitcast <2 x half> %701 to i32, !dbg !51
  %810 = bitcast <2 x half> %706 to i32, !dbg !51
  %811 = bitcast <2 x half> %711 to i32, !dbg !51
  %812 = bitcast <2 x half> %716 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %809, i32 %810, i32 %811, i32 %812, ptr addrspace(1) %630, i1 %11) #6, !dbg !51
  %813 = bitcast <2 x half> %721 to i32, !dbg !51
  %814 = bitcast <2 x half> %726 to i32, !dbg !51
  %815 = bitcast <2 x half> %731 to i32, !dbg !51
  %816 = bitcast <2 x half> %736 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %813, i32 %814, i32 %815, i32 %816, ptr addrspace(1) %631, i1 %11) #6, !dbg !51
  %817 = bitcast <2 x half> %741 to i32, !dbg !51
  %818 = bitcast <2 x half> %746 to i32, !dbg !51
  %819 = bitcast <2 x half> %751 to i32, !dbg !51
  %820 = bitcast <2 x half> %756 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %817, i32 %818, i32 %819, i32 %820, ptr addrspace(1) %632, i1 %11) #6, !dbg !51
  %821 = bitcast <2 x half> %761 to i32, !dbg !51
  %822 = bitcast <2 x half> %766 to i32, !dbg !51
  %823 = bitcast <2 x half> %771 to i32, !dbg !51
  %824 = bitcast <2 x half> %776 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %821, i32 %822, i32 %823, i32 %824, ptr addrspace(1) %633, i1 %11) #6, !dbg !51
  %825 = bitcast <2 x half> %781 to i32, !dbg !51
  %826 = bitcast <2 x half> %786 to i32, !dbg !51
  %827 = bitcast <2 x half> %791 to i32, !dbg !51
  %828 = bitcast <2 x half> %796 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %825, i32 %826, i32 %827, i32 %828, ptr addrspace(1) %634, i1 %11) #6, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py", directory: "/tmp/torchinductor_root/3k")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 22, column: 28, scope: !10)
!12 = !DILocation(line: 24, column: 21, scope: !10)
!13 = !DILocation(line: 28, column: 30, scope: !10)
!14 = !DILocation(line: 28, column: 35, scope: !10)
!15 = !DILocation(line: 37, column: 22, scope: !10)
!16 = !DILocation(line: 38, column: 22, scope: !10)
!17 = !DILocation(line: 39, column: 36, scope: !10)
!18 = !DILocation(line: 40, column: 41, scope: !10)
!19 = !DILocation(line: 40, column: 69, scope: !10)
!20 = !DILocation(line: 25, column: 37, scope: !10)
!21 = !DILocation(line: 41, column: 46, scope: !10)
!22 = !DILocation(line: 41, column: 41, scope: !10)
!23 = !DILocation(line: 41, column: 34, scope: !10)
!24 = !DILocation(line: 41, column: 53, scope: !10)
!25 = !DILocation(line: 41, column: 115, scope: !10)
!26 = !DILocation(line: 43, column: 22, scope: !10)
!27 = !DILocation(line: 47, column: 41, scope: !10)
!28 = !DILocation(line: 47, column: 36, scope: !10)
!29 = !DILocation(line: 47, column: 29, scope: !10)
!30 = !DILocation(line: 47, column: 52, scope: !10)
!31 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !35)
!32 = distinct !DILexicalBlockFile(scope: !34, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!34 = distinct !DILexicalBlockFile(scope: !10, file: !33, discriminator: 0)
!35 = !DILocation(line: 48, column: 27, scope: !10)
!36 = !DILocation(line: 286, column: 36, scope: !34, inlinedAt: !35)
!37 = !DILocation(line: 50, column: 21, scope: !10)
!38 = !DILocation(line: 52, column: 20, scope: !10)
!39 = !DILocation(line: 53, column: 28, scope: !10)
!40 = !DILocation(line: 54, column: 4, scope: !10)
!41 = !DILocation(line: 55, column: 28, scope: !10)
!42 = !DILocation(line: 55, column: 40, scope: !10)
!43 = !DILocation(line: 62, column: 35, scope: !10)
!44 = !DILocation(line: 62, column: 42, scope: !10)
!45 = !DILocation(line: 63, column: 53, scope: !10)
!46 = !DILocation(line: 68, column: 29, scope: !10)
!47 = !DILocation(line: 62, column: 95, scope: !10)
!48 = !DILocation(line: 63, column: 115, scope: !10)
!49 = !DILocation(line: 65, column: 24, scope: !10)
!50 = !DILocation(line: 67, column: 24, scope: !10)
!51 = !DILocation(line: 68, column: 53, scope: !10)
!52 = !DILocation(line: 56, column: 4, scope: !10)
