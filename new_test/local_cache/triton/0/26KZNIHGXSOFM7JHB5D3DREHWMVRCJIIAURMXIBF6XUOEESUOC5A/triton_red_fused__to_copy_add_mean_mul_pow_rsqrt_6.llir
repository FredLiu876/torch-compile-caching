; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = icmp slt i32 %9, %5, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 31, !dbg !11
  %13 = shl i32 %11, 3, !dbg !11
  %14 = and i32 %13, 2040, !dbg !11
  %15 = shl i32 %9, 12, !dbg !12
  %16 = or disjoint i32 %14, %15
  %17 = sext i32 %16 to i64, !dbg !13
  %18 = getelementptr half, ptr addrspace(1) %1, i64 %17, !dbg !13
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %18, i1 %10) #5, !dbg !14
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !14
  %21 = bitcast i32 %20 to <2 x half>, !dbg !14
  %22 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !14
  %23 = bitcast i32 %22 to <2 x half>, !dbg !14
  %24 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !14
  %25 = bitcast i32 %24 to <2 x half>, !dbg !14
  %26 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !14
  %27 = bitcast i32 %26 to <2 x half>, !dbg !14
  %28 = extractelement <2 x half> %21, i64 0, !dbg !14
  %29 = extractelement <2 x half> %21, i64 1, !dbg !14
  %30 = fpext half %28 to float, !dbg !15
  %31 = fpext half %29 to float, !dbg !15
  %32 = getelementptr half, ptr addrspace(1) %2, i64 %17, !dbg !16
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %32, i1 %10) #5, !dbg !17
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !17
  %35 = bitcast i32 %34 to <2 x half>, !dbg !17
  %36 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !17
  %37 = bitcast i32 %36 to <2 x half>, !dbg !17
  %38 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !17
  %39 = bitcast i32 %38 to <2 x half>, !dbg !17
  %40 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !17
  %41 = bitcast i32 %40 to <2 x half>, !dbg !17
  %42 = extractelement <2 x half> %35, i64 0, !dbg !17
  %43 = extractelement <2 x half> %35, i64 1, !dbg !17
  %44 = fpext half %42 to float, !dbg !18
  %45 = fpext half %43 to float, !dbg !18
  %46 = fadd float %30, %44, !dbg !19
  %47 = fadd float %31, %45, !dbg !19
  %48 = fmul float %46, %46, !dbg !20
  %49 = fmul float %47, %47, !dbg !20
  %50 = or disjoint i32 %16, 2048, !dbg !21
  %51 = sext i32 %50 to i64, !dbg !13
  %52 = getelementptr half, ptr addrspace(1) %1, i64 %51, !dbg !13
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %52, i1 %10) #5, !dbg !14
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !14
  %55 = bitcast i32 %54 to <2 x half>, !dbg !14
  %56 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !14
  %57 = bitcast i32 %56 to <2 x half>, !dbg !14
  %58 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !14
  %59 = bitcast i32 %58 to <2 x half>, !dbg !14
  %60 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !14
  %61 = bitcast i32 %60 to <2 x half>, !dbg !14
  %62 = extractelement <2 x half> %55, i64 0, !dbg !14
  %63 = extractelement <2 x half> %55, i64 1, !dbg !14
  %64 = fpext half %62 to float, !dbg !15
  %65 = fpext half %63 to float, !dbg !15
  %66 = getelementptr half, ptr addrspace(1) %2, i64 %51, !dbg !16
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %66, i1 %10) #5, !dbg !17
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !17
  %69 = bitcast i32 %68 to <2 x half>, !dbg !17
  %70 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !17
  %71 = bitcast i32 %70 to <2 x half>, !dbg !17
  %72 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !17
  %73 = bitcast i32 %72 to <2 x half>, !dbg !17
  %74 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !17
  %75 = bitcast i32 %74 to <2 x half>, !dbg !17
  %76 = extractelement <2 x half> %69, i64 0, !dbg !17
  %77 = extractelement <2 x half> %69, i64 1, !dbg !17
  %78 = fpext half %76 to float, !dbg !18
  %79 = fpext half %77 to float, !dbg !18
  %80 = fadd float %64, %78, !dbg !19
  %81 = fadd float %65, %79, !dbg !19
  %82 = fmul float %80, %80, !dbg !20
  %83 = fmul float %81, %81, !dbg !20
  %84 = fadd float %48, %82, !dbg !22
  %85 = fadd float %49, %83, !dbg !22
  %86 = fpext <2 x half> %23 to <2 x float>, !dbg !15
  %87 = fpext <2 x half> %37 to <2 x float>, !dbg !18
  %88 = fadd <2 x float> %86, %87, !dbg !19
  %89 = fmul <2 x float> %88, %88, !dbg !20
  %90 = fpext <2 x half> %57 to <2 x float>, !dbg !15
  %91 = fpext <2 x half> %71 to <2 x float>, !dbg !18
  %92 = fadd <2 x float> %90, %91, !dbg !19
  %93 = fmul <2 x float> %92, %92, !dbg !20
  %94 = fadd <2 x float> %89, %93, !dbg !22
  %95 = fpext <2 x half> %25 to <2 x float>, !dbg !15
  %96 = fpext <2 x half> %39 to <2 x float>, !dbg !18
  %97 = fadd <2 x float> %95, %96, !dbg !19
  %98 = fmul <2 x float> %97, %97, !dbg !20
  %99 = fpext <2 x half> %59 to <2 x float>, !dbg !15
  %100 = fpext <2 x half> %73 to <2 x float>, !dbg !18
  %101 = fadd <2 x float> %99, %100, !dbg !19
  %102 = fmul <2 x float> %101, %101, !dbg !20
  %103 = fadd <2 x float> %98, %102, !dbg !22
  %104 = fpext <2 x half> %27 to <2 x float>, !dbg !15
  %105 = fpext <2 x half> %41 to <2 x float>, !dbg !18
  %106 = fadd <2 x float> %104, %105, !dbg !19
  %107 = fmul <2 x float> %106, %106, !dbg !20
  %108 = fpext <2 x half> %61 to <2 x float>, !dbg !15
  %109 = fpext <2 x half> %75 to <2 x float>, !dbg !18
  %110 = fadd <2 x float> %108, %109, !dbg !19
  %111 = fmul <2 x float> %110, %110, !dbg !20
  %112 = fadd <2 x float> %107, %111, !dbg !22
  %113 = lshr i32 %11, 5, !dbg !11
  %114 = fadd float %84, %85, !dbg !23
  %115 = extractelement <2 x float> %94, i64 0, !dbg !23
  %116 = fadd float %115, %114, !dbg !23
  %117 = extractelement <2 x float> %94, i64 1, !dbg !23
  %118 = fadd float %117, %116, !dbg !23
  %119 = extractelement <2 x float> %103, i64 0, !dbg !23
  %120 = fadd float %119, %118, !dbg !23
  %121 = extractelement <2 x float> %103, i64 1, !dbg !23
  %122 = fadd float %121, %120, !dbg !23
  %123 = extractelement <2 x float> %112, i64 0, !dbg !23
  %124 = fadd float %123, %122, !dbg !23
  %125 = extractelement <2 x float> %112, i64 1, !dbg !23
  %126 = fadd float %125, %124, !dbg !23
  %127 = select i1 %10, float %126, float 0.000000e+00, !dbg !23
  %128 = bitcast float %127 to i32, !dbg !28
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 16, i32 31), !dbg !28
  %130 = bitcast i32 %129 to float, !dbg !28
  %131 = fadd float %127, %130, !dbg !23
  %132 = bitcast float %131 to i32, !dbg !28
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 8, i32 31), !dbg !28
  %134 = bitcast i32 %133 to float, !dbg !28
  %135 = fadd float %131, %134, !dbg !23
  %136 = bitcast float %135 to i32, !dbg !28
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 4, i32 31), !dbg !28
  %138 = bitcast i32 %137 to float, !dbg !28
  %139 = fadd float %135, %138, !dbg !23
  %140 = bitcast float %139 to i32, !dbg !28
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 2, i32 31), !dbg !28
  %142 = bitcast i32 %141 to float, !dbg !28
  %143 = fadd float %139, %142, !dbg !23
  %144 = bitcast float %143 to i32, !dbg !28
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 1, i32 31), !dbg !28
  %146 = bitcast i32 %145 to float, !dbg !28
  %147 = fadd float %143, %146, !dbg !23
  %148 = and i32 %113, 7, !dbg !28
  %149 = icmp eq i32 %12, 0, !dbg !28
  %150 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !28
  %151 = bitcast float %147 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 %149) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %152 = icmp slt i32 %11, 8, !dbg !28
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !28
  %154 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %153, i1 %152) #5, !dbg !28
  %155 = bitcast i32 %154 to float, !dbg !28
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 4, i32 31), !dbg !28
  %157 = bitcast i32 %156 to float, !dbg !28
  %158 = fadd float %155, %157, !dbg !23
  %159 = bitcast float %158 to i32, !dbg !28
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 2, i32 31), !dbg !28
  %161 = bitcast i32 %160 to float, !dbg !28
  %162 = fadd float %158, %161, !dbg !23
  %163 = bitcast float %162 to i32, !dbg !28
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 1, i32 31), !dbg !28
  %165 = bitcast i32 %164 to float, !dbg !28
  %166 = fadd float %162, %165, !dbg !23
  %167 = and i32 %11, 7, !dbg !28
  %168 = icmp eq i32 %167, 0, !dbg !28
  %169 = and i1 %152, %168, !dbg !28
  %170 = bitcast float %166 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %170, i1 %169) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %171 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !28
  %172 = tail call float @llvm.nvvm.div.full(float %171, float 4.096000e+03), !dbg !29
  %173 = fadd float %172, 0x3EE4F8B580000000, !dbg !30
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i = icmp eq i32 %174, 0, !dbg !31
  br i1 %.not.i, label %177, label %175, !dbg !31

175:                                              ; preds = %8
  %176 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %173), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

177:                                              ; preds = %8
  %178 = tail call float @llvm.nvvm.rsqrt.approx.f(float %173), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

__nv_rsqrtf.exit:                                 ; preds = %175, %177
  %.0.i = phi float [ %176, %175 ], [ %178, %177 ], !dbg !31
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i23 = icmp eq i32 %186, 0, !dbg !31
  br i1 %.not.i23, label %189, label %187, !dbg !31

187:                                              ; preds = %__nv_rsqrtf.exit
  %188 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %173), !dbg !31
  br label %__nv_rsqrtf.exit25, !dbg !31

189:                                              ; preds = %__nv_rsqrtf.exit
  %190 = tail call float @llvm.nvvm.rsqrt.approx.f(float %173), !dbg !31
  br label %__nv_rsqrtf.exit25, !dbg !31

__nv_rsqrtf.exit25:                               ; preds = %187, %189
  %.0.i24 = phi float [ %188, %187 ], [ %190, %189 ], !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %191 = sext i32 %9 to i64, !dbg !33
  %192 = getelementptr float, ptr addrspace(1) %0, i64 %191, !dbg !33
  %193 = and i32 %11, 255, !dbg !34
  %194 = icmp eq i32 %193, 0, !dbg !34
  %195 = bitcast float %.0.i to i32, !dbg !34
  %196 = and i1 %194, %10, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %195, ptr addrspace(1) %192, i1 %196) #5, !dbg !34
  %197 = zext nneg i32 %14 to i64, !dbg !35
  %198 = getelementptr half, ptr addrspace(1) %3, i64 %197, !dbg !36
  %199 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %198, i1 true) #5, !dbg !37
  %200 = extractvalue { i32, i32, i32, i32 } %199, 0, !dbg !37
  %201 = bitcast i32 %200 to <2 x half>, !dbg !37
  %202 = extractvalue { i32, i32, i32, i32 } %199, 1, !dbg !37
  %203 = bitcast i32 %202 to <2 x half>, !dbg !37
  %204 = extractvalue { i32, i32, i32, i32 } %199, 2, !dbg !37
  %205 = bitcast i32 %204 to <2 x half>, !dbg !37
  %206 = extractvalue { i32, i32, i32, i32 } %199, 3, !dbg !37
  %207 = bitcast i32 %206 to <2 x half>, !dbg !37
  %208 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %18, i1 %10) #5, !dbg !38
  %209 = extractvalue { i32, i32, i32, i32 } %208, 0, !dbg !38
  %210 = bitcast i32 %209 to <2 x half>, !dbg !38
  %211 = extractvalue { i32, i32, i32, i32 } %208, 1, !dbg !38
  %212 = bitcast i32 %211 to <2 x half>, !dbg !38
  %213 = extractvalue { i32, i32, i32, i32 } %208, 2, !dbg !38
  %214 = bitcast i32 %213 to <2 x half>, !dbg !38
  %215 = extractvalue { i32, i32, i32, i32 } %208, 3, !dbg !38
  %216 = bitcast i32 %215 to <2 x half>, !dbg !38
  %217 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %32, i1 %10) #5, !dbg !39
  %218 = extractvalue { i32, i32, i32, i32 } %217, 0, !dbg !39
  %219 = bitcast i32 %218 to <2 x half>, !dbg !39
  %220 = extractvalue { i32, i32, i32, i32 } %217, 1, !dbg !39
  %221 = bitcast i32 %220 to <2 x half>, !dbg !39
  %222 = extractvalue { i32, i32, i32, i32 } %217, 2, !dbg !39
  %223 = bitcast i32 %222 to <2 x half>, !dbg !39
  %224 = extractvalue { i32, i32, i32, i32 } %217, 3, !dbg !39
  %225 = bitcast i32 %224 to <2 x half>, !dbg !39
  %226 = getelementptr half, ptr addrspace(1) %4, i64 %17, !dbg !40
  %227 = fpext <2 x half> %201 to <2 x float>, !dbg !41
  %228 = fpext <2 x half> %210 to <2 x float>, !dbg !42
  %229 = fpext <2 x half> %219 to <2 x float>, !dbg !43
  %230 = fadd <2 x float> %228, %229, !dbg !44
  %231 = insertelement <2 x float> poison, float %.0.i24, i64 0, !dbg !45
  %232 = shufflevector <2 x float> %231, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !45
  %233 = fmul <2 x float> %232, %230, !dbg !45
  %234 = fmul <2 x float> %233, %227, !dbg !46
  %235 = fptrunc <2 x float> %234 to <2 x half>, !dbg !47
  %236 = fpext <2 x half> %203 to <2 x float>, !dbg !41
  %237 = fpext <2 x half> %212 to <2 x float>, !dbg !42
  %238 = fpext <2 x half> %221 to <2 x float>, !dbg !43
  %239 = fadd <2 x float> %237, %238, !dbg !44
  %240 = fmul <2 x float> %232, %239, !dbg !45
  %241 = fmul <2 x float> %240, %236, !dbg !46
  %242 = fptrunc <2 x float> %241 to <2 x half>, !dbg !47
  %243 = fpext <2 x half> %205 to <2 x float>, !dbg !41
  %244 = fpext <2 x half> %214 to <2 x float>, !dbg !42
  %245 = fpext <2 x half> %223 to <2 x float>, !dbg !43
  %246 = fadd <2 x float> %244, %245, !dbg !44
  %247 = fmul <2 x float> %232, %246, !dbg !45
  %248 = fmul <2 x float> %247, %243, !dbg !46
  %249 = fptrunc <2 x float> %248 to <2 x half>, !dbg !47
  %250 = fpext <2 x half> %207 to <2 x float>, !dbg !41
  %251 = fpext <2 x half> %216 to <2 x float>, !dbg !42
  %252 = fpext <2 x half> %225 to <2 x float>, !dbg !43
  %253 = fadd <2 x float> %251, %252, !dbg !44
  %254 = fmul <2 x float> %232, %253, !dbg !45
  %255 = fmul <2 x float> %254, %250, !dbg !46
  %256 = fptrunc <2 x float> %255 to <2 x half>, !dbg !47
  %257 = bitcast <2 x half> %235 to i32, !dbg !47
  %258 = bitcast <2 x half> %242 to i32, !dbg !47
  %259 = bitcast <2 x half> %249 to i32, !dbg !47
  %260 = bitcast <2 x half> %256 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %257, i32 %258, i32 %259, i32 %260, ptr addrspace(1) %226, i1 %10) #5, !dbg !47
  %261 = or disjoint i64 %197, 2048, !dbg !48
  %262 = getelementptr half, ptr addrspace(1) %3, i64 %261, !dbg !36
  %263 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %262, i1 true) #5, !dbg !37
  %264 = extractvalue { i32, i32, i32, i32 } %263, 0, !dbg !37
  %265 = bitcast i32 %264 to <2 x half>, !dbg !37
  %266 = extractvalue { i32, i32, i32, i32 } %263, 1, !dbg !37
  %267 = bitcast i32 %266 to <2 x half>, !dbg !37
  %268 = extractvalue { i32, i32, i32, i32 } %263, 2, !dbg !37
  %269 = bitcast i32 %268 to <2 x half>, !dbg !37
  %270 = extractvalue { i32, i32, i32, i32 } %263, 3, !dbg !37
  %271 = bitcast i32 %270 to <2 x half>, !dbg !37
  %272 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %52, i1 %10) #5, !dbg !38
  %273 = extractvalue { i32, i32, i32, i32 } %272, 0, !dbg !38
  %274 = bitcast i32 %273 to <2 x half>, !dbg !38
  %275 = extractvalue { i32, i32, i32, i32 } %272, 1, !dbg !38
  %276 = bitcast i32 %275 to <2 x half>, !dbg !38
  %277 = extractvalue { i32, i32, i32, i32 } %272, 2, !dbg !38
  %278 = bitcast i32 %277 to <2 x half>, !dbg !38
  %279 = extractvalue { i32, i32, i32, i32 } %272, 3, !dbg !38
  %280 = bitcast i32 %279 to <2 x half>, !dbg !38
  %281 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %66, i1 %10) #5, !dbg !39
  %282 = extractvalue { i32, i32, i32, i32 } %281, 0, !dbg !39
  %283 = bitcast i32 %282 to <2 x half>, !dbg !39
  %284 = extractvalue { i32, i32, i32, i32 } %281, 1, !dbg !39
  %285 = bitcast i32 %284 to <2 x half>, !dbg !39
  %286 = extractvalue { i32, i32, i32, i32 } %281, 2, !dbg !39
  %287 = bitcast i32 %286 to <2 x half>, !dbg !39
  %288 = extractvalue { i32, i32, i32, i32 } %281, 3, !dbg !39
  %289 = bitcast i32 %288 to <2 x half>, !dbg !39
  %290 = getelementptr half, ptr addrspace(1) %4, i64 %51, !dbg !40
  %291 = fpext <2 x half> %265 to <2 x float>, !dbg !41
  %292 = fpext <2 x half> %274 to <2 x float>, !dbg !42
  %293 = fpext <2 x half> %283 to <2 x float>, !dbg !43
  %294 = fadd <2 x float> %292, %293, !dbg !44
  %295 = fmul <2 x float> %232, %294, !dbg !45
  %296 = fmul <2 x float> %295, %291, !dbg !46
  %297 = fptrunc <2 x float> %296 to <2 x half>, !dbg !47
  %298 = fpext <2 x half> %267 to <2 x float>, !dbg !41
  %299 = fpext <2 x half> %276 to <2 x float>, !dbg !42
  %300 = fpext <2 x half> %285 to <2 x float>, !dbg !43
  %301 = fadd <2 x float> %299, %300, !dbg !44
  %302 = fmul <2 x float> %232, %301, !dbg !45
  %303 = fmul <2 x float> %302, %298, !dbg !46
  %304 = fptrunc <2 x float> %303 to <2 x half>, !dbg !47
  %305 = fpext <2 x half> %269 to <2 x float>, !dbg !41
  %306 = fpext <2 x half> %278 to <2 x float>, !dbg !42
  %307 = fpext <2 x half> %287 to <2 x float>, !dbg !43
  %308 = fadd <2 x float> %306, %307, !dbg !44
  %309 = fmul <2 x float> %232, %308, !dbg !45
  %310 = fmul <2 x float> %309, %305, !dbg !46
  %311 = fptrunc <2 x float> %310 to <2 x half>, !dbg !47
  %312 = fpext <2 x half> %271 to <2 x float>, !dbg !41
  %313 = fpext <2 x half> %280 to <2 x float>, !dbg !42
  %314 = fpext <2 x half> %289 to <2 x float>, !dbg !43
  %315 = fadd <2 x float> %313, %314, !dbg !44
  %316 = fmul <2 x float> %232, %315, !dbg !45
  %317 = fmul <2 x float> %316, %312, !dbg !46
  %318 = fptrunc <2 x float> %317 to <2 x half>, !dbg !47
  %319 = bitcast <2 x half> %297 to i32, !dbg !47
  %320 = bitcast <2 x half> %304 to i32, !dbg !47
  %321 = bitcast <2 x half> %311 to i32, !dbg !47
  %322 = bitcast <2 x half> %318 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %319, i32 %320, i32 %321, i32 %322, ptr addrspace(1) %290, i1 %10) #5, !dbg !47
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxdna3iuiarg5df5zltn5jik5bvuuyvpn2rygiz2q4ninczsg7t7.py", directory: "/tmp/torchinductor_root/xd")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 21, scope: !6)
!11 = !DILocation(line: 25, column: 37, scope: !6)
!12 = !DILocation(line: 35, column: 46, scope: !6)
!13 = !DILocation(line: 35, column: 34, scope: !6)
!14 = !DILocation(line: 35, column: 51, scope: !6)
!15 = !DILocation(line: 35, column: 112, scope: !6)
!16 = !DILocation(line: 36, column: 34, scope: !6)
!17 = !DILocation(line: 36, column: 51, scope: !6)
!18 = !DILocation(line: 36, column: 112, scope: !6)
!19 = !DILocation(line: 37, column: 22, scope: !6)
!20 = !DILocation(line: 39, column: 22, scope: !6)
!21 = !DILocation(line: 35, column: 41, scope: !6)
!22 = !DILocation(line: 41, column: 23, scope: !6)
!23 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!27 = !DILocation(line: 43, column: 25, scope: !6)
!28 = !DILocation(line: 286, column: 36, scope: !26, inlinedAt: !27)
!29 = !DILocation(line: 45, column: 19, scope: !6)
!30 = !DILocation(line: 47, column: 19, scope: !6)
!31 = !DILocation(line: 48, column: 28, scope: !6)
!32 = !DILocation(line: 49, column: 4, scope: !6)
!33 = !DILocation(line: 50, column: 28, scope: !6)
!34 = !DILocation(line: 50, column: 40, scope: !6)
!35 = !DILocation(line: 51, column: 40, scope: !6)
!36 = !DILocation(line: 57, column: 35, scope: !6)
!37 = !DILocation(line: 57, column: 42, scope: !6)
!38 = !DILocation(line: 58, column: 52, scope: !6)
!39 = !DILocation(line: 59, column: 52, scope: !6)
!40 = !DILocation(line: 65, column: 29, scope: !6)
!41 = !DILocation(line: 57, column: 95, scope: !6)
!42 = !DILocation(line: 58, column: 114, scope: !6)
!43 = !DILocation(line: 59, column: 114, scope: !6)
!44 = !DILocation(line: 60, column: 24, scope: !6)
!45 = !DILocation(line: 62, column: 24, scope: !6)
!46 = !DILocation(line: 64, column: 24, scope: !6)
!47 = !DILocation(line: 65, column: 53, scope: !6)
!48 = !DILocation(line: 52, column: 31, scope: !6)
!49 = !DILocation(line: 51, column: 4, scope: !6)
