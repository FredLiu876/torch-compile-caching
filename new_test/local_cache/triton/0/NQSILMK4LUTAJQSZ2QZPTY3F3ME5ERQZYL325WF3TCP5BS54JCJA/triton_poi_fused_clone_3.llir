; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_poi_fused_clone_3(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = shl i32 %7, 12, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = shl i32 %9, 3, !dbg !11
  %11 = and i32 %10, 1016, !dbg !11
  %12 = or disjoint i32 %11, %8, !dbg !12
  %13 = or disjoint i32 %12, 1024, !dbg !12
  %14 = or disjoint i32 %12, 2048, !dbg !12
  %15 = or disjoint i32 %12, 3072, !dbg !12
  %16 = sdiv i32 %12, 128, !dbg !13
  %17 = sdiv i32 %13, 128, !dbg !13
  %18 = sdiv i32 %14, 128, !dbg !13
  %19 = sdiv i32 %15, 128, !dbg !13
  %20 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !14
  %21 = insertelement <2 x i32> %20, i32 %12, i64 1, !dbg !14
  %22 = insertelement <2 x i32> <i32 poison, i32 128>, i32 %2, i64 0, !dbg !14
  %23 = srem <2 x i32> %21, %22, !dbg !14
  %24 = srem i32 %17, %2, !dbg !14
  %25 = srem i32 %18, %2, !dbg !14
  %26 = srem i32 %19, %2, !dbg !14
  %27 = sdiv i32 %12, %3, !dbg !15
  %28 = sdiv i32 %13, %3, !dbg !15
  %29 = sdiv i32 %14, %3, !dbg !15
  %30 = sdiv i32 %15, %3, !dbg !15
  %31 = shl i32 %27, 7, !dbg !16
  %32 = shl i32 %28, 7, !dbg !16
  %33 = shl i32 %29, 7, !dbg !16
  %34 = shl i32 %30, 7, !dbg !16
  %35 = extractelement <2 x i32> %23, i64 0, !dbg !17
  %36 = shl i32 %35, 10, !dbg !17
  %37 = shl i32 %24, 10, !dbg !17
  %38 = shl i32 %25, 10, !dbg !17
  %39 = shl i32 %26, 10, !dbg !17
  %40 = extractelement <2 x i32> %23, i64 1, !dbg !18
  %41 = add i32 %36, %40, !dbg !18
  %42 = add i32 %41, %31, !dbg !19
  %43 = add i32 %37, %40, !dbg !18
  %44 = add i32 %43, %32, !dbg !19
  %45 = add i32 %38, %40, !dbg !18
  %46 = add i32 %45, %33, !dbg !19
  %47 = add i32 %39, %40, !dbg !18
  %48 = add i32 %47, %34, !dbg !19
  %49 = sext i32 %42 to i64, !dbg !20
  %50 = getelementptr half, ptr addrspace(1) %0, i64 %49, !dbg !20
  %51 = sext i32 %44 to i64, !dbg !20
  %52 = getelementptr half, ptr addrspace(1) %0, i64 %51, !dbg !20
  %53 = sext i32 %46 to i64, !dbg !20
  %54 = getelementptr half, ptr addrspace(1) %0, i64 %53, !dbg !20
  %55 = sext i32 %48 to i64, !dbg !20
  %56 = getelementptr half, ptr addrspace(1) %0, i64 %55, !dbg !20
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %50) #1, !dbg !21
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !21
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !21
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !21
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !21
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %52) #1, !dbg !21
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !21
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !21
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !21
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !21
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %54) #1, !dbg !21
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !21
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !21
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !21
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !21
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l"(ptr addrspace(1) %56) #1, !dbg !21
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !21
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !21
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !21
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !21
  %77 = sext i32 %12 to i64, !dbg !22
  %78 = getelementptr half, ptr addrspace(1) %1, i64 %77, !dbg !22
  %79 = sext i32 %13 to i64, !dbg !22
  %80 = getelementptr half, ptr addrspace(1) %1, i64 %79, !dbg !22
  %81 = sext i32 %14 to i64, !dbg !22
  %82 = getelementptr half, ptr addrspace(1) %1, i64 %81, !dbg !22
  %83 = sext i32 %15 to i64, !dbg !22
  %84 = getelementptr half, ptr addrspace(1) %1, i64 %83, !dbg !22
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %58, i32 %59, i32 %60, i32 %61, ptr addrspace(1) %78) #1, !dbg !23
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %63, i32 %64, i32 %65, i32 %66, ptr addrspace(1) %80) #1, !dbg !23
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %68, i32 %69, i32 %70, i32 %71, ptr addrspace(1) %82) #1, !dbg !23
  tail call void asm sideeffect "st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l"(i32 %73, i32 %74, i32 %75, i32 %76, ptr addrspace(1) %84) #1, !dbg !23
  ret void, !dbg !24
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuomh3ofgkomnlkmhjmkvzwen2jxiis44ak5lub2pyxmj5x2lmhp.py", directory: "/tmp/torchinductor_root/uo")
!4 = !{ptr @triton_poi_fused_clone_3, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused_clone_3", linkageName: "triton_poi_fused_clone_3", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 19, column: 28, scope: !6)
!10 = !DILocation(line: 19, column: 33, scope: !6)
!11 = !DILocation(line: 20, column: 36, scope: !6)
!12 = !DILocation(line: 20, column: 23, scope: !6)
!13 = !DILocation(line: 23, column: 21, scope: !6)
!14 = !DILocation(line: 23, column: 28, scope: !6)
!15 = !DILocation(line: 24, column: 19, scope: !6)
!16 = !DILocation(line: 26, column: 39, scope: !6)
!17 = !DILocation(line: 26, column: 49, scope: !6)
!18 = !DILocation(line: 26, column: 35, scope: !6)
!19 = !DILocation(line: 26, column: 44, scope: !6)
!20 = !DILocation(line: 26, column: 30, scope: !6)
!21 = !DILocation(line: 26, column: 54, scope: !6)
!22 = !DILocation(line: 27, column: 25, scope: !6)
!23 = !DILocation(line: 27, column: 36, scope: !6)
!24 = !DILocation(line: 27, column: 4, scope: !6)
