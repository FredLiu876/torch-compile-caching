; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_mul_sum_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 6, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = shl i32 %10, 3, !dbg !11
  %12 = and i32 %11, 56, !dbg !11
  %13 = or disjoint i32 %12, %9, !dbg !12
  %14 = lshr i32 %10, 3, !dbg !13
  %15 = and i32 %14, 63, !dbg !13
  %16 = icmp sgt i32 %5, 0, !dbg !14
  br i1 %16, label %.lr.ph, label %._crit_edge, !dbg !14

.lr.ph:                                           ; preds = %7, %.lr.ph
  %17 = phi i32 [ %83, %.lr.ph ], [ 0, %7 ]
  %18 = phi <8 x float> [ %82, %.lr.ph ], [ zeroinitializer, %7 ]
  %19 = or disjoint i32 %17, %15, !dbg !15
  %20 = icmp slt i32 %19, %5, !dbg !16
  %21 = shl i32 %19, 12, !dbg !17
  %22 = add i32 %13, %21, !dbg !18
  %23 = sext i32 %22 to i64, !dbg !19
  %24 = getelementptr half, ptr addrspace(1) %0, i64 %23, !dbg !19
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %24, i1 %20) #3, !dbg !20
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !20
  %27 = bitcast i32 %26 to <2 x half>, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !20
  %29 = bitcast i32 %28 to <2 x half>, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !20
  %31 = bitcast i32 %30 to <2 x half>, !dbg !20
  %32 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !20
  %33 = bitcast i32 %32 to <2 x half>, !dbg !20
  %34 = getelementptr half, ptr addrspace(1) %1, i64 %23, !dbg !21
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %34, i1 %20) #3, !dbg !22
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !22
  %37 = bitcast i32 %36 to <2 x half>, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !22
  %39 = bitcast i32 %38 to <2 x half>, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !22
  %41 = bitcast i32 %40 to <2 x half>, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !22
  %43 = bitcast i32 %42 to <2 x half>, !dbg !22
  %44 = sext i32 %19 to i64, !dbg !23
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !23
  %46 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %45, i1 %20) #3, !dbg !24
  %47 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %45, i1 %20) #3, !dbg !24
  %48 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %45, i1 %20) #3, !dbg !24
  %49 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %45, i1 %20) #3, !dbg !24
  %50 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %45, i1 %20) #3, !dbg !24
  %51 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %45, i1 %20) #3, !dbg !24
  %52 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %45, i1 %20) #3, !dbg !24
  %53 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %45, i1 %20) #3, !dbg !24
  %54 = shufflevector <2 x half> %27, <2 x half> %29, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %55 = shufflevector <2 x half> %31, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %56 = shufflevector <8 x half> %54, <8 x half> %55, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !25
  %57 = shufflevector <2 x half> %31, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %58 = shufflevector <8 x half> %56, <8 x half> %57, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !25
  %59 = shufflevector <2 x half> %33, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %60 = shufflevector <8 x half> %58, <8 x half> %59, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !25
  %61 = shufflevector <2 x half> %33, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %62 = shufflevector <8 x half> %60, <8 x half> %61, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !25
  %63 = fpext <8 x half> %62 to <8 x float>, !dbg !25
  %64 = shufflevector <2 x half> %37, <2 x half> %39, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %65 = shufflevector <2 x half> %41, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %66 = shufflevector <8 x half> %64, <8 x half> %65, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !26
  %67 = shufflevector <2 x half> %41, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %68 = shufflevector <8 x half> %66, <8 x half> %67, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !26
  %69 = shufflevector <2 x half> %43, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %70 = shufflevector <8 x half> %68, <8 x half> %69, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !26
  %71 = shufflevector <2 x half> %43, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %72 = shufflevector <8 x half> %70, <8 x half> %71, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !26
  %73 = fpext <8 x half> %72 to <8 x float>, !dbg !26
  %74 = insertelement <8 x i32> poison, i32 %53, i64 0, !dbg !27
  %75 = bitcast <8 x i32> %74 to <8 x float>, !dbg !27
  %76 = shufflevector <8 x float> %75, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !27
  %77 = fmul <8 x float> %76, %73, !dbg !27
  %78 = fmul <8 x float> %77, %63, !dbg !28
  %79 = fadd <8 x float> %18, %78, !dbg !29
  %80 = insertelement <8 x i1> poison, i1 %20, i64 0, !dbg !30
  %81 = shufflevector <8 x i1> %80, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !30
  %82 = select <8 x i1> %81, <8 x float> %79, <8 x float> %18, !dbg !30
  %83 = add i32 %17, 64, !dbg !14
  %84 = icmp slt i32 %83, %5, !dbg !14
  br i1 %84, label %.lr.ph, label %._crit_edge, !dbg !14

._crit_edge:                                      ; preds = %.lr.ph, %7
  %85 = phi <8 x float> [ zeroinitializer, %7 ], [ %82, %.lr.ph ]
  %86 = lshr i32 %10, 5, !dbg !11
  %87 = and i32 %10, 63, !dbg !11
  %88 = or disjoint i32 %9, %87, !dbg !12
  %89 = and i32 %10, 24, !dbg !11
  %90 = or disjoint i32 %12, 4, !dbg !31
  %91 = extractelement <8 x float> %85, i64 0, !dbg !31
  %92 = bitcast float %91 to i32, !dbg !31
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 16, i32 31), !dbg !31
  %94 = bitcast i32 %93 to float, !dbg !31
  %95 = fadd float %91, %94, !dbg !35
  %96 = bitcast float %95 to i32, !dbg !31
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 8, i32 31), !dbg !31
  %98 = bitcast i32 %97 to float, !dbg !31
  %99 = fadd float %95, %98, !dbg !35
  %100 = extractelement <8 x float> %85, i64 1, !dbg !31
  %101 = bitcast float %100 to i32, !dbg !31
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 16, i32 31), !dbg !31
  %103 = bitcast i32 %102 to float, !dbg !31
  %104 = fadd float %100, %103, !dbg !35
  %105 = bitcast float %104 to i32, !dbg !31
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 8, i32 31), !dbg !31
  %107 = bitcast i32 %106 to float, !dbg !31
  %108 = fadd float %104, %107, !dbg !35
  %109 = extractelement <8 x float> %85, i64 2, !dbg !31
  %110 = bitcast float %109 to i32, !dbg !31
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 16, i32 31), !dbg !31
  %112 = bitcast i32 %111 to float, !dbg !31
  %113 = fadd float %109, %112, !dbg !35
  %114 = bitcast float %113 to i32, !dbg !31
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 8, i32 31), !dbg !31
  %116 = bitcast i32 %115 to float, !dbg !31
  %117 = fadd float %113, %116, !dbg !35
  %118 = extractelement <8 x float> %85, i64 3, !dbg !31
  %119 = bitcast float %118 to i32, !dbg !31
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 16, i32 31), !dbg !31
  %121 = bitcast i32 %120 to float, !dbg !31
  %122 = fadd float %118, %121, !dbg !35
  %123 = bitcast float %122 to i32, !dbg !31
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 8, i32 31), !dbg !31
  %125 = bitcast i32 %124 to float, !dbg !31
  %126 = fadd float %122, %125, !dbg !35
  %127 = extractelement <8 x float> %85, i64 4, !dbg !31
  %128 = bitcast float %127 to i32, !dbg !31
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 16, i32 31), !dbg !31
  %130 = bitcast i32 %129 to float, !dbg !31
  %131 = fadd float %127, %130, !dbg !35
  %132 = bitcast float %131 to i32, !dbg !31
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 8, i32 31), !dbg !31
  %134 = bitcast i32 %133 to float, !dbg !31
  %135 = fadd float %131, %134, !dbg !35
  %136 = extractelement <8 x float> %85, i64 5, !dbg !31
  %137 = bitcast float %136 to i32, !dbg !31
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 16, i32 31), !dbg !31
  %139 = bitcast i32 %138 to float, !dbg !31
  %140 = fadd float %136, %139, !dbg !35
  %141 = bitcast float %140 to i32, !dbg !31
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 8, i32 31), !dbg !31
  %143 = bitcast i32 %142 to float, !dbg !31
  %144 = fadd float %140, %143, !dbg !35
  %145 = extractelement <8 x float> %85, i64 6, !dbg !31
  %146 = bitcast float %145 to i32, !dbg !31
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 16, i32 31), !dbg !31
  %148 = bitcast i32 %147 to float, !dbg !31
  %149 = fadd float %145, %148, !dbg !35
  %150 = bitcast float %149 to i32, !dbg !31
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 8, i32 31), !dbg !31
  %152 = bitcast i32 %151 to float, !dbg !31
  %153 = fadd float %149, %152, !dbg !35
  %154 = extractelement <8 x float> %85, i64 7, !dbg !31
  %155 = bitcast float %154 to i32, !dbg !31
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 16, i32 31), !dbg !31
  %157 = bitcast i32 %156 to float, !dbg !31
  %158 = fadd float %154, %157, !dbg !35
  %159 = bitcast float %158 to i32, !dbg !31
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 8, i32 31), !dbg !31
  %161 = bitcast i32 %160 to float, !dbg !31
  %162 = fadd float %158, %161, !dbg !35
  %163 = and i32 %86, 15, !dbg !31
  %164 = icmp eq i32 %89, 0, !dbg !31
  %165 = shl nuw nsw i32 %12, 4, !dbg !31
  %166 = or disjoint i32 %165, %163, !dbg !31
  %167 = getelementptr float, ptr addrspace(3) @global_smem, i32 %166, !dbg !31
  %168 = bitcast float %99 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %168, i1 %164) #3, !dbg !31
  %169 = or disjoint i32 %165, 16, !dbg !31
  %170 = or disjoint i32 %169, %163, !dbg !31
  %171 = getelementptr float, ptr addrspace(3) @global_smem, i32 %170, !dbg !31
  %172 = bitcast float %108 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %171, <1 x i32> %172, i1 %164) #3, !dbg !31
  %173 = or disjoint i32 %165, 32, !dbg !31
  %174 = or disjoint i32 %173, %163, !dbg !31
  %175 = getelementptr float, ptr addrspace(3) @global_smem, i32 %174, !dbg !31
  %176 = bitcast float %117 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %175, <1 x i32> %176, i1 %164) #3, !dbg !31
  %177 = or disjoint i32 %165, 48, !dbg !31
  %178 = or disjoint i32 %177, %163, !dbg !31
  %179 = getelementptr float, ptr addrspace(3) @global_smem, i32 %178, !dbg !31
  %180 = bitcast float %126 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 %164) #3, !dbg !31
  %181 = shl nuw nsw i32 %90, 4, !dbg !31
  %182 = or disjoint i32 %181, %163, !dbg !31
  %183 = getelementptr float, ptr addrspace(3) @global_smem, i32 %182, !dbg !31
  %184 = bitcast float %135 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %183, <1 x i32> %184, i1 %164) #3, !dbg !31
  %185 = or disjoint i32 %165, 80, !dbg !31
  %186 = or disjoint i32 %185, %163, !dbg !31
  %187 = getelementptr float, ptr addrspace(3) @global_smem, i32 %186, !dbg !31
  %188 = bitcast float %144 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %188, i1 %164) #3, !dbg !31
  %189 = or disjoint i32 %165, 96, !dbg !31
  %190 = or disjoint i32 %189, %163, !dbg !31
  %191 = getelementptr float, ptr addrspace(3) @global_smem, i32 %190, !dbg !31
  %192 = bitcast float %153 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %192, i1 %164) #3, !dbg !31
  %193 = or disjoint i32 %165, 112, !dbg !31
  %194 = or disjoint i32 %193, %163, !dbg !31
  %195 = getelementptr float, ptr addrspace(3) @global_smem, i32 %194, !dbg !31
  %196 = bitcast float %162 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %196, i1 %164) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %197 = icmp slt i32 %10, 1024, !dbg !31
  %198 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !31
  %199 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %198, i1 %197) #3, !dbg !31
  %200 = bitcast i32 %199 to float, !dbg !31
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 8, i32 31), !dbg !31
  %202 = bitcast i32 %201 to float, !dbg !31
  %203 = fadd float %200, %202, !dbg !35
  %204 = bitcast float %203 to i32, !dbg !31
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 4, i32 31), !dbg !31
  %206 = bitcast i32 %205 to float, !dbg !31
  %207 = fadd float %203, %206, !dbg !35
  %208 = bitcast float %207 to i32, !dbg !31
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 2, i32 31), !dbg !31
  %210 = bitcast i32 %209 to float, !dbg !31
  %211 = fadd float %207, %210, !dbg !35
  %212 = bitcast float %211 to i32, !dbg !31
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 1, i32 31), !dbg !31
  %214 = bitcast i32 %213 to float, !dbg !31
  %215 = fadd float %211, %214, !dbg !35
  %216 = and i32 %10, 15, !dbg !31
  %217 = icmp eq i32 %216, 0, !dbg !31
  %218 = and i1 %197, %217, !dbg !31
  %219 = bitcast float %215 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %219, i1 %218) #3, !dbg !31
  %220 = getelementptr i8, ptr addrspace(3) %198, i32 2048, !dbg !31
  %221 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %220, i1 %197) #3, !dbg !31
  %222 = bitcast i32 %221 to float, !dbg !31
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 8, i32 31), !dbg !31
  %224 = bitcast i32 %223 to float, !dbg !31
  %225 = fadd float %222, %224, !dbg !35
  %226 = bitcast float %225 to i32, !dbg !31
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 4, i32 31), !dbg !31
  %228 = bitcast i32 %227 to float, !dbg !31
  %229 = fadd float %225, %228, !dbg !35
  %230 = bitcast float %229 to i32, !dbg !31
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 2, i32 31), !dbg !31
  %232 = bitcast i32 %231 to float, !dbg !31
  %233 = fadd float %229, %232, !dbg !35
  %234 = bitcast float %233 to i32, !dbg !31
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 1, i32 31), !dbg !31
  %236 = bitcast i32 %235 to float, !dbg !31
  %237 = fadd float %233, %236, !dbg !35
  %238 = bitcast float %237 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %238, i1 %218) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %239 = getelementptr float, ptr addrspace(3) @global_smem, i32 %165, !dbg !31
  %240 = load i32, ptr addrspace(3) %239, align 16, !dbg !31
  %241 = getelementptr float, ptr addrspace(3) @global_smem, i32 %169, !dbg !31
  %242 = load i32, ptr addrspace(3) %241, align 16, !dbg !31
  %243 = getelementptr float, ptr addrspace(3) @global_smem, i32 %173, !dbg !31
  %244 = load i32, ptr addrspace(3) %243, align 16, !dbg !31
  %245 = getelementptr float, ptr addrspace(3) @global_smem, i32 %177, !dbg !31
  %246 = load i32, ptr addrspace(3) %245, align 16, !dbg !31
  %247 = getelementptr float, ptr addrspace(3) @global_smem, i32 %181, !dbg !31
  %248 = load i32, ptr addrspace(3) %247, align 16, !dbg !31
  %249 = getelementptr float, ptr addrspace(3) @global_smem, i32 %185, !dbg !31
  %250 = load i32, ptr addrspace(3) %249, align 16, !dbg !31
  %251 = getelementptr float, ptr addrspace(3) @global_smem, i32 %189, !dbg !31
  %252 = load i32, ptr addrspace(3) %251, align 16, !dbg !31
  %253 = getelementptr float, ptr addrspace(3) @global_smem, i32 %193, !dbg !31
  %254 = load i32, ptr addrspace(3) %253, align 16, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %255 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %12, !dbg !37
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %255, i32 %240, i32 %242, i32 %244, i32 %246, i1 true) #3, !dbg !37
  %256 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %90, !dbg !37
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %256, i32 %248, i32 %250, i32 %252, i32 %254, i1 true) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %257 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %87, !dbg !37
  %258 = load float, ptr addrspace(3) %257, align 4, !dbg !37
  %259 = sext i32 %88 to i64, !dbg !38
  %260 = getelementptr half, ptr addrspace(1) %3, i64 %259, !dbg !38
  %261 = fptrunc float %258 to half, !dbg !37
  %262 = and i32 %10, 448, !dbg !37
  %263 = icmp eq i32 %262, 0, !dbg !37
  %264 = bitcast half %261 to i16, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %264, ptr addrspace(1) %260, i1 %263) #3, !dbg !37
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "co4nmxvvabannmoyltgvv474a5vyv6vjk2hrq3xz5okm532j7cpu.py", directory: "/tmp/torchinductor_root/o4")
!4 = !{ptr @triton_red_fused__to_copy_mul_sum_1, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_mul_sum_1", linkageName: "triton_red_fused__to_copy_mul_sum_1", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 37, scope: !6)
!14 = !DILocation(line: 29, column: 40, scope: !6)
!15 = !DILocation(line: 30, column: 31, scope: !6)
!16 = !DILocation(line: 31, column: 29, scope: !6)
!17 = !DILocation(line: 35, column: 44, scope: !6)
!18 = !DILocation(line: 35, column: 39, scope: !6)
!19 = !DILocation(line: 35, column: 34, scope: !6)
!20 = !DILocation(line: 35, column: 51, scope: !6)
!21 = !DILocation(line: 36, column: 34, scope: !6)
!22 = !DILocation(line: 36, column: 51, scope: !6)
!23 = !DILocation(line: 37, column: 34, scope: !6)
!24 = !DILocation(line: 37, column: 41, scope: !6)
!25 = !DILocation(line: 35, column: 105, scope: !6)
!26 = !DILocation(line: 36, column: 105, scope: !6)
!27 = !DILocation(line: 39, column: 22, scope: !6)
!28 = !DILocation(line: 41, column: 22, scope: !6)
!29 = !DILocation(line: 43, column: 23, scope: !6)
!30 = !DILocation(line: 44, column: 40, scope: !6)
!31 = !DILocation(line: 286, column: 36, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !6, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!34 = !DILocation(line: 45, column: 25, scope: !6)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !34)
!36 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!37 = !DILocation(line: 46, column: 36, scope: !6)
!38 = !DILocation(line: 46, column: 25, scope: !6)
!39 = !DILocation(line: 46, column: 4, scope: !6)
