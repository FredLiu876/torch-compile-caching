; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_div_mul_pow_sum_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = shl i32 %11, 3, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %14 = lshr i32 %13, 6, !dbg !11
  %15 = and i32 %14, 7, !dbg !11
  %16 = or disjoint i32 %15, %12, !dbg !12
  %17 = icmp slt i32 %16, %7, !dbg !13
  %18 = shl i32 %13, 3, !dbg !14
  %19 = and i32 %18, 504, !dbg !14
  %20 = and i32 %13, 511, !dbg !14
  %21 = shl i32 %16, 12, !dbg !15
  %22 = or disjoint i32 %21, %19
  %23 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %20
  %24 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %19
  %25 = or disjoint i32 %19, 4
  %26 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %25
  %27 = zext nneg i32 %20 to i64, !dbg !16
  %28 = getelementptr inbounds nuw i8, ptr addrspace(3) %24, i32 8
  %29 = getelementptr inbounds nuw i8, ptr addrspace(3) %26, i32 8
  %30 = insertelement <8 x i1> poison, i1 %17, i64 0, !dbg !17
  %31 = shufflevector <8 x i1> %30, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !17
  br label %32, !dbg !16

32:                                               ; preds = %10, %32
  %indvars.iv = phi i64 [ 0, %10 ], [ %indvars.iv.next, %32 ]
  %33 = phi <8 x float> [ zeroinitializer, %10 ], [ %129, %32 ]
  %34 = or disjoint i64 %indvars.iv, %27, !dbg !18
  %35 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !19
  %36 = or i32 %22, %35, !dbg !19
  %37 = sext i32 %36 to i64, !dbg !20
  %38 = getelementptr half, ptr addrspace(1) %1, i64 %37, !dbg !20
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %38, i1 %17) #3, !dbg !21
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !21
  %41 = bitcast i32 %40 to <2 x half>, !dbg !21
  %42 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !21
  %43 = bitcast i32 %42 to <2 x half>, !dbg !21
  %44 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !21
  %45 = bitcast i32 %44 to <2 x half>, !dbg !21
  %46 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !21
  %47 = bitcast i32 %46 to <2 x half>, !dbg !21
  %48 = getelementptr half, ptr addrspace(1) %2, i64 %37, !dbg !22
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %48, i1 %17) #3, !dbg !23
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !23
  %51 = bitcast i32 %50 to <2 x half>, !dbg !23
  %52 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !23
  %53 = bitcast i32 %52 to <2 x half>, !dbg !23
  %54 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !23
  %55 = bitcast i32 %54 to <2 x half>, !dbg !23
  %56 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !23
  %57 = bitcast i32 %56 to <2 x half>, !dbg !23
  %58 = getelementptr half, ptr addrspace(1) %3, i64 %34, !dbg !24
  %59 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %58, i1 true) #3, !dbg !25
  %60 = bitcast i16 %59 to half, !dbg !25
  %61 = fpext half %60 to float, !dbg !26
  %62 = getelementptr half, ptr addrspace(1) %4, i64 %37, !dbg !27
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %62, i1 %17) #3, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !28
  %65 = bitcast i32 %64 to <2 x half>, !dbg !28
  %66 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !28
  %67 = bitcast i32 %66 to <2 x half>, !dbg !28
  %68 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !28
  %69 = bitcast i32 %68 to <2 x half>, !dbg !28
  %70 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !28
  %71 = bitcast i32 %70 to <2 x half>, !dbg !28
  %72 = getelementptr half, ptr addrspace(1) %5, i64 %37, !dbg !29
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %72, i1 %17) #3, !dbg !30
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !30
  %75 = bitcast i32 %74 to <2 x half>, !dbg !30
  %76 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !30
  %77 = bitcast i32 %76 to <2 x half>, !dbg !30
  %78 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !30
  %79 = bitcast i32 %78 to <2 x half>, !dbg !30
  %80 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !30
  %81 = bitcast i32 %80 to <2 x half>, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %82 = bitcast float %61 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %23, <1 x i32> %82, i1 true) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %83 = shufflevector <2 x half> %41, <2 x half> %43, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %84 = shufflevector <2 x half> %45, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %85 = shufflevector <8 x half> %83, <8 x half> %84, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !32
  %86 = shufflevector <2 x half> %45, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %87 = shufflevector <8 x half> %85, <8 x half> %86, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !32
  %88 = shufflevector <2 x half> %47, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %89 = shufflevector <8 x half> %87, <8 x half> %88, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !32
  %90 = shufflevector <2 x half> %47, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %91 = shufflevector <8 x half> %89, <8 x half> %90, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !32
  %92 = fpext <8 x half> %91 to <8 x float>, !dbg !32
  %93 = shufflevector <2 x half> %51, <2 x half> %53, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %94 = shufflevector <2 x half> %55, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %95 = shufflevector <8 x half> %93, <8 x half> %94, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !33
  %96 = shufflevector <2 x half> %55, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %97 = shufflevector <8 x half> %95, <8 x half> %96, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !33
  %98 = shufflevector <2 x half> %57, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %99 = shufflevector <8 x half> %97, <8 x half> %98, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !33
  %100 = shufflevector <2 x half> %57, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %101 = shufflevector <8 x half> %99, <8 x half> %100, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !33
  %102 = fpext <8 x half> %101 to <8 x float>, !dbg !33
  %103 = shufflevector <2 x half> %65, <2 x half> %67, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %104 = shufflevector <2 x half> %69, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %105 = shufflevector <8 x half> %103, <8 x half> %104, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !34
  %106 = shufflevector <2 x half> %69, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %107 = shufflevector <8 x half> %105, <8 x half> %106, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !34
  %108 = shufflevector <2 x half> %71, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %109 = shufflevector <8 x half> %107, <8 x half> %108, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !34
  %110 = shufflevector <2 x half> %71, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %111 = shufflevector <8 x half> %109, <8 x half> %110, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !34
  %112 = fpext <8 x half> %111 to <8 x float>, !dbg !34
  %113 = shufflevector <2 x half> %75, <2 x half> %77, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %114 = shufflevector <2 x half> %79, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %115 = shufflevector <8 x half> %113, <8 x half> %114, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !35
  %116 = shufflevector <2 x half> %79, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %117 = shufflevector <8 x half> %115, <8 x half> %116, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !35
  %118 = shufflevector <2 x half> %81, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %119 = shufflevector <8 x half> %117, <8 x half> %118, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !35
  %120 = shufflevector <2 x half> %81, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %121 = shufflevector <8 x half> %119, <8 x half> %120, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !35
  %122 = fpext <8 x half> %121 to <8 x float>, !dbg !35
  %123 = fadd <8 x float> %92, %102, !dbg !36
  %124 = load <8 x float>, ptr addrspace(3) %24, align 16, !dbg !31
  %125 = fmul <8 x float> %123, %124, !dbg !31
  %126 = fadd <8 x float> %112, %122, !dbg !37
  %127 = fmul <8 x float> %126, %125, !dbg !38
  %128 = fadd <8 x float> %33, %127, !dbg !39
  %129 = select <8 x i1> %31, <8 x float> %128, <8 x float> %33, !dbg !17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !16
  %130 = icmp samesign ult i64 %indvars.iv, 3584, !dbg !16
  br i1 %130, label %32, label %131, !dbg !16

131:                                              ; preds = %32
  %132 = lshr i32 %13, 5, !dbg !11
  %133 = and i32 %13, 31, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %shift = shufflevector <8 x float> %129, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %134 = fadd <8 x float> %129, %shift, !dbg !44
  %shift47 = shufflevector <8 x float> %129, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %135 = fadd <8 x float> %shift47, %134, !dbg !44
  %shift48 = shufflevector <8 x float> %129, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %136 = fadd <8 x float> %shift48, %135, !dbg !44
  %shift49 = shufflevector <8 x float> %129, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %137 = fadd <8 x float> %shift49, %136, !dbg !44
  %shift50 = shufflevector <8 x float> %129, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %138 = fadd <8 x float> %shift50, %137, !dbg !44
  %shift51 = shufflevector <8 x float> %129, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %139 = fadd <8 x float> %shift51, %138, !dbg !44
  %shift52 = shufflevector <8 x float> %129, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !44
  %140 = fadd <8 x float> %shift52, %139, !dbg !44
  %141 = extractelement <8 x float> %140, i64 0, !dbg !44
  %142 = bitcast float %141 to i32, !dbg !40
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 16, i32 31), !dbg !40
  %144 = bitcast i32 %143 to float, !dbg !40
  %145 = fadd float %141, %144, !dbg !44
  %146 = bitcast float %145 to i32, !dbg !40
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 8, i32 31), !dbg !40
  %148 = bitcast i32 %147 to float, !dbg !40
  %149 = fadd float %145, %148, !dbg !44
  %150 = bitcast float %149 to i32, !dbg !40
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 4, i32 31), !dbg !40
  %152 = bitcast i32 %151 to float, !dbg !40
  %153 = fadd float %149, %152, !dbg !44
  %154 = bitcast float %153 to i32, !dbg !40
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 2, i32 31), !dbg !40
  %156 = bitcast i32 %155 to float, !dbg !40
  %157 = fadd float %153, %156, !dbg !44
  %158 = bitcast float %157 to i32, !dbg !40
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 1, i32 31), !dbg !40
  %160 = bitcast i32 %159 to float, !dbg !40
  %161 = fadd float %157, %160, !dbg !44
  %162 = and i32 %132, 1, !dbg !40
  %163 = icmp eq i32 %133, 0, !dbg !40
  %164 = shl nuw nsw i32 %15, 1, !dbg !40
  %165 = or disjoint i32 %164, %162, !dbg !40
  %166 = getelementptr float, ptr addrspace(3) @global_smem, i32 %165, !dbg !40
  %167 = bitcast float %161 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %166, <1 x i32> %167, i1 %163) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %168 = icmp slt i32 %13, 16, !dbg !40
  %169 = getelementptr float, ptr addrspace(3) @global_smem, i32 %13, !dbg !40
  %170 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %169, i1 %168) #3, !dbg !40
  %171 = bitcast i32 %170 to float, !dbg !40
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 1, i32 31), !dbg !40
  %173 = bitcast i32 %172 to float, !dbg !40
  %174 = fadd float %171, %173, !dbg !44
  %175 = and i32 %13, 1, !dbg !40
  %176 = icmp eq i32 %175, 0, !dbg !40
  %177 = and i1 %168, %176, !dbg !40
  %178 = bitcast float %174 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %178, i1 %177) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %179 = getelementptr float, ptr addrspace(3) @global_smem, i32 %164, !dbg !40
  %180 = load float, ptr addrspace(3) %179, align 8, !dbg !40
  %181 = sext i32 %16 to i64, !dbg !46
  %182 = getelementptr float, ptr addrspace(1) %6, i64 %181, !dbg !46
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 %17) #3, !dbg !47
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 %17) #3, !dbg !47
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 %17) #3, !dbg !47
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 %17) #3, !dbg !47
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 %17) #3, !dbg !47
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 %17) #3, !dbg !47
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 %17) #3, !dbg !47
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 %17) #3, !dbg !47
  %191 = bitcast i32 %190 to float, !dbg !47
  %192 = fmul float %180, -5.000000e-01, !dbg !48
  %193 = fmul float %191, %191, !dbg !49
  %194 = fmul float %193, %191, !dbg !50
  %195 = fmul float %192, %194, !dbg !51
  %196 = fmul float %195, 0x3F30000000000000, !dbg !52
  %197 = insertelement <2 x float> poison, float %196, i64 0, !dbg !53
  %198 = shufflevector <2 x float> %197, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %199 = insertelement <2 x float> poison, float %191, i64 0, !dbg !54
  %200 = shufflevector <2 x float> %199, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  br label %201, !dbg !55

201:                                              ; preds = %131, %201
  %indvars.iv25 = phi i64 [ 0, %131 ], [ %indvars.iv.next26, %201 ]
  %202 = or disjoint i64 %indvars.iv25, %27, !dbg !56
  %203 = trunc nuw nsw i64 %indvars.iv25 to i32, !dbg !57
  %204 = or i32 %22, %203, !dbg !57
  %205 = sext i32 %204 to i64, !dbg !58
  %206 = getelementptr half, ptr addrspace(1) %0, i64 %205, !dbg !58
  %207 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %206, i1 %17) #3, !dbg !59
  %208 = extractvalue { i32, i32, i32, i32 } %207, 0, !dbg !59
  %209 = bitcast i32 %208 to <2 x half>, !dbg !59
  %210 = extractvalue { i32, i32, i32, i32 } %207, 1, !dbg !59
  %211 = bitcast i32 %210 to <2 x half>, !dbg !59
  %212 = extractvalue { i32, i32, i32, i32 } %207, 2, !dbg !59
  %213 = bitcast i32 %212 to <2 x half>, !dbg !59
  %214 = extractvalue { i32, i32, i32, i32 } %207, 3, !dbg !59
  %215 = bitcast i32 %214 to <2 x half>, !dbg !59
  %216 = getelementptr half, ptr addrspace(1) %1, i64 %205, !dbg !60
  %217 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %216, i1 %17) #3, !dbg !61
  %218 = extractvalue { i32, i32, i32, i32 } %217, 0, !dbg !61
  %219 = bitcast i32 %218 to <2 x half>, !dbg !61
  %220 = extractvalue { i32, i32, i32, i32 } %217, 1, !dbg !61
  %221 = bitcast i32 %220 to <2 x half>, !dbg !61
  %222 = extractvalue { i32, i32, i32, i32 } %217, 2, !dbg !61
  %223 = bitcast i32 %222 to <2 x half>, !dbg !61
  %224 = extractvalue { i32, i32, i32, i32 } %217, 3, !dbg !61
  %225 = bitcast i32 %224 to <2 x half>, !dbg !61
  %226 = getelementptr half, ptr addrspace(1) %2, i64 %205, !dbg !62
  %227 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %226, i1 %17) #3, !dbg !63
  %228 = extractvalue { i32, i32, i32, i32 } %227, 0, !dbg !63
  %229 = bitcast i32 %228 to <2 x half>, !dbg !63
  %230 = extractvalue { i32, i32, i32, i32 } %227, 1, !dbg !63
  %231 = bitcast i32 %230 to <2 x half>, !dbg !63
  %232 = extractvalue { i32, i32, i32, i32 } %227, 2, !dbg !63
  %233 = bitcast i32 %232 to <2 x half>, !dbg !63
  %234 = extractvalue { i32, i32, i32, i32 } %227, 3, !dbg !63
  %235 = bitcast i32 %234 to <2 x half>, !dbg !63
  %236 = getelementptr half, ptr addrspace(1) %3, i64 %202, !dbg !64
  %237 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %236, i1 true) #3, !dbg !65
  %238 = bitcast i16 %237 to half, !dbg !65
  %239 = fpext half %238 to float, !dbg !66
  %240 = getelementptr half, ptr addrspace(1) %4, i64 %205, !dbg !67
  %241 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %240, i1 %17) #3, !dbg !68
  %242 = extractvalue { i32, i32, i32, i32 } %241, 0, !dbg !68
  %243 = bitcast i32 %242 to <2 x half>, !dbg !68
  %244 = extractvalue { i32, i32, i32, i32 } %241, 1, !dbg !68
  %245 = bitcast i32 %244 to <2 x half>, !dbg !68
  %246 = extractvalue { i32, i32, i32, i32 } %241, 2, !dbg !68
  %247 = bitcast i32 %246 to <2 x half>, !dbg !68
  %248 = extractvalue { i32, i32, i32, i32 } %241, 3, !dbg !68
  %249 = bitcast i32 %248 to <2 x half>, !dbg !68
  %250 = getelementptr half, ptr addrspace(1) %5, i64 %205, !dbg !69
  %251 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %250, i1 %17) #3, !dbg !70
  %252 = extractvalue { i32, i32, i32, i32 } %251, 0, !dbg !70
  %253 = bitcast i32 %252 to <2 x half>, !dbg !70
  %254 = extractvalue { i32, i32, i32, i32 } %251, 1, !dbg !70
  %255 = bitcast i32 %254 to <2 x half>, !dbg !70
  %256 = extractvalue { i32, i32, i32, i32 } %251, 2, !dbg !70
  %257 = bitcast i32 %256 to <2 x half>, !dbg !70
  %258 = extractvalue { i32, i32, i32, i32 } %251, 3, !dbg !70
  %259 = bitcast i32 %258 to <2 x half>, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %260 = bitcast float %239 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %23, <1 x i32> %260, i1 true) #3, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %261 = fpext <2 x half> %209 to <2 x float>, !dbg !71
  %262 = fpext <2 x half> %219 to <2 x float>, !dbg !72
  %263 = fpext <2 x half> %229 to <2 x float>, !dbg !73
  %264 = fpext <2 x half> %243 to <2 x float>, !dbg !74
  %265 = fpext <2 x half> %253 to <2 x float>, !dbg !75
  %266 = fadd <2 x float> %262, %263, !dbg !76
  %267 = load <2 x float>, ptr addrspace(3) %24, align 16, !dbg !54
  %268 = fmul <2 x float> %266, %267, !dbg !77
  %269 = fmul <2 x float> %268, %200, !dbg !54
  %270 = fadd <2 x float> %264, %265, !dbg !78
  %271 = fmul <2 x float> %270, splat (float 2.000000e+00), !dbg !79
  %272 = fmul <2 x float> %198, %271, !dbg !53
  %273 = fadd <2 x float> %269, %272, !dbg !80
  %274 = fadd <2 x float> %273, %261, !dbg !81
  %275 = fptrunc <2 x float> %274 to <2 x half>, !dbg !82
  %276 = fpext <2 x half> %211 to <2 x float>, !dbg !71
  %277 = fpext <2 x half> %221 to <2 x float>, !dbg !72
  %278 = fpext <2 x half> %231 to <2 x float>, !dbg !73
  %279 = fpext <2 x half> %245 to <2 x float>, !dbg !74
  %280 = fpext <2 x half> %255 to <2 x float>, !dbg !75
  %281 = fadd <2 x float> %277, %278, !dbg !76
  %282 = load <2 x float>, ptr addrspace(3) %28, align 8, !dbg !54
  %283 = fmul <2 x float> %281, %282, !dbg !77
  %284 = fmul <2 x float> %283, %200, !dbg !54
  %285 = fadd <2 x float> %279, %280, !dbg !78
  %286 = fmul <2 x float> %285, splat (float 2.000000e+00), !dbg !79
  %287 = fmul <2 x float> %198, %286, !dbg !53
  %288 = fadd <2 x float> %284, %287, !dbg !80
  %289 = fadd <2 x float> %288, %276, !dbg !81
  %290 = fptrunc <2 x float> %289 to <2 x half>, !dbg !82
  %291 = fpext <2 x half> %213 to <2 x float>, !dbg !71
  %292 = fpext <2 x half> %223 to <2 x float>, !dbg !72
  %293 = fpext <2 x half> %233 to <2 x float>, !dbg !73
  %294 = fpext <2 x half> %247 to <2 x float>, !dbg !74
  %295 = fpext <2 x half> %257 to <2 x float>, !dbg !75
  %296 = fadd <2 x float> %292, %293, !dbg !76
  %297 = load <2 x float>, ptr addrspace(3) %26, align 16, !dbg !54
  %298 = fmul <2 x float> %296, %297, !dbg !77
  %299 = fmul <2 x float> %298, %200, !dbg !54
  %300 = fadd <2 x float> %294, %295, !dbg !78
  %301 = fmul <2 x float> %300, splat (float 2.000000e+00), !dbg !79
  %302 = fmul <2 x float> %198, %301, !dbg !53
  %303 = fadd <2 x float> %302, %299, !dbg !80
  %304 = fadd <2 x float> %303, %291, !dbg !81
  %305 = fptrunc <2 x float> %304 to <2 x half>, !dbg !82
  %306 = fpext <2 x half> %215 to <2 x float>, !dbg !71
  %307 = fpext <2 x half> %225 to <2 x float>, !dbg !72
  %308 = fpext <2 x half> %235 to <2 x float>, !dbg !73
  %309 = fpext <2 x half> %249 to <2 x float>, !dbg !74
  %310 = fpext <2 x half> %259 to <2 x float>, !dbg !75
  %311 = fadd <2 x float> %307, %308, !dbg !76
  %312 = load <2 x float>, ptr addrspace(3) %29, align 8, !dbg !54
  %313 = fmul <2 x float> %311, %312, !dbg !77
  %314 = fmul <2 x float> %313, %200, !dbg !54
  %315 = fadd <2 x float> %309, %310, !dbg !78
  %316 = fmul <2 x float> %315, splat (float 2.000000e+00), !dbg !79
  %317 = fmul <2 x float> %198, %316, !dbg !53
  %318 = fadd <2 x float> %317, %314, !dbg !80
  %319 = fadd <2 x float> %318, %306, !dbg !81
  %320 = fptrunc <2 x float> %319 to <2 x half>, !dbg !82
  %321 = bitcast <2 x half> %275 to i32, !dbg !82
  %322 = bitcast <2 x half> %290 to i32, !dbg !82
  %323 = bitcast <2 x half> %305 to i32, !dbg !82
  %324 = bitcast <2 x half> %320 to i32, !dbg !82
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %321, i32 %322, i32 %323, i32 %324, ptr addrspace(1) %206, i1 %17) #3, !dbg !82
  %indvars.iv.next26 = add nuw nsw i64 %indvars.iv25, 512, !dbg !55
  %325 = icmp samesign ult i64 %indvars.iv25, 3584, !dbg !55
  br i1 %325, label %201, label %326, !dbg !55

326:                                              ; preds = %201
  ret void, !dbg !83
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmrcpn22n7aqmssksimp2qhymdkxk4k7d67b62tptel3w2u7lbdd.py", directory: "/tmp/torchinductor_root/mr")
!4 = !{ptr @triton_red_fused__to_copy_add_div_mul_pow_sum_12, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_mul_pow_sum_12", linkageName: "triton_red_fused__to_copy_add_div_mul_pow_sum_12", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 29, column: 40, scope: !6)
!17 = !DILocation(line: 48, column: 50, scope: !6)
!18 = !DILocation(line: 30, column: 31, scope: !6)
!19 = !DILocation(line: 35, column: 41, scope: !6)
!20 = !DILocation(line: 35, column: 34, scope: !6)
!21 = !DILocation(line: 35, column: 51, scope: !6)
!22 = !DILocation(line: 36, column: 34, scope: !6)
!23 = !DILocation(line: 36, column: 51, scope: !6)
!24 = !DILocation(line: 37, column: 34, scope: !6)
!25 = !DILocation(line: 37, column: 41, scope: !6)
!26 = !DILocation(line: 37, column: 94, scope: !6)
!27 = !DILocation(line: 38, column: 34, scope: !6)
!28 = !DILocation(line: 38, column: 51, scope: !6)
!29 = !DILocation(line: 39, column: 34, scope: !6)
!30 = !DILocation(line: 39, column: 51, scope: !6)
!31 = !DILocation(line: 41, column: 22, scope: !6)
!32 = !DILocation(line: 35, column: 112, scope: !6)
!33 = !DILocation(line: 36, column: 112, scope: !6)
!34 = !DILocation(line: 38, column: 112, scope: !6)
!35 = !DILocation(line: 39, column: 112, scope: !6)
!36 = !DILocation(line: 40, column: 22, scope: !6)
!37 = !DILocation(line: 43, column: 22, scope: !6)
!38 = !DILocation(line: 45, column: 23, scope: !6)
!39 = !DILocation(line: 47, column: 25, scope: !6)
!40 = !DILocation(line: 286, column: 36, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !6, file: !42, discriminator: 0)
!42 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!43 = !DILocation(line: 49, column: 27, scope: !6)
!44 = !DILocation(line: 256, column: 15, scope: !45, inlinedAt: !43)
!45 = distinct !DILexicalBlockFile(scope: !41, file: !42, discriminator: 0)
!46 = !DILocation(line: 50, column: 31, scope: !6)
!47 = !DILocation(line: 50, column: 36, scope: !6)
!48 = !DILocation(line: 68, column: 24, scope: !6)
!49 = !DILocation(line: 69, column: 24, scope: !6)
!50 = !DILocation(line: 70, column: 24, scope: !6)
!51 = !DILocation(line: 71, column: 24, scope: !6)
!52 = !DILocation(line: 73, column: 24, scope: !6)
!53 = !DILocation(line: 78, column: 24, scope: !6)
!54 = !DILocation(line: 66, column: 24, scope: !6)
!55 = !DILocation(line: 51, column: 40, scope: !6)
!56 = !DILocation(line: 52, column: 31, scope: !6)
!57 = !DILocation(line: 57, column: 46, scope: !6)
!58 = !DILocation(line: 57, column: 39, scope: !6)
!59 = !DILocation(line: 57, column: 56, scope: !6)
!60 = !DILocation(line: 58, column: 35, scope: !6)
!61 = !DILocation(line: 58, column: 52, scope: !6)
!62 = !DILocation(line: 59, column: 35, scope: !6)
!63 = !DILocation(line: 59, column: 52, scope: !6)
!64 = !DILocation(line: 60, column: 35, scope: !6)
!65 = !DILocation(line: 60, column: 42, scope: !6)
!66 = !DILocation(line: 60, column: 95, scope: !6)
!67 = !DILocation(line: 61, column: 35, scope: !6)
!68 = !DILocation(line: 61, column: 52, scope: !6)
!69 = !DILocation(line: 62, column: 35, scope: !6)
!70 = !DILocation(line: 62, column: 52, scope: !6)
!71 = !DILocation(line: 57, column: 118, scope: !6)
!72 = !DILocation(line: 58, column: 114, scope: !6)
!73 = !DILocation(line: 59, column: 114, scope: !6)
!74 = !DILocation(line: 61, column: 114, scope: !6)
!75 = !DILocation(line: 62, column: 114, scope: !6)
!76 = !DILocation(line: 63, column: 24, scope: !6)
!77 = !DILocation(line: 64, column: 24, scope: !6)
!78 = !DILocation(line: 74, column: 24, scope: !6)
!79 = !DILocation(line: 77, column: 24, scope: !6)
!80 = !DILocation(line: 79, column: 24, scope: !6)
!81 = !DILocation(line: 81, column: 24, scope: !6)
!82 = !DILocation(line: 82, column: 56, scope: !6)
!83 = !DILocation(line: 51, column: 4, scope: !6)
