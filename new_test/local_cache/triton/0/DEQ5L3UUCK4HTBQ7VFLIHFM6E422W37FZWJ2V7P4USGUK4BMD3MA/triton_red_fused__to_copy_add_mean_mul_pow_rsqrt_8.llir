; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = shl i32 %10, 6, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = and i32 %12, 64, !dbg !11
  %14 = lshr i32 %12, 1, !dbg !11
  %15 = and i32 %14, 63, !dbg !11
  %16 = or disjoint i32 %15, %11, !dbg !12
  %17 = icmp slt i32 %16, %6, !dbg !13
  %18 = shl i32 %12, 2, !dbg !14
  %19 = and i32 %18, 4, !dbg !14
  %20 = shl i32 %16, 12, !dbg !15
  %21 = or disjoint i32 %20, %19
  br label %22, !dbg !16

22:                                               ; preds = %9, %22
  %23 = phi float [ 0.000000e+00, %9 ], [ %59, %22 ]
  %24 = phi float [ 0.000000e+00, %9 ], [ %60, %22 ]
  %25 = phi float [ 0.000000e+00, %9 ], [ %73, %22 ]
  %26 = phi float [ 0.000000e+00, %9 ], [ %74, %22 ]
  %27 = phi i32 [ 0, %9 ], [ %78, %22 ]
  %28 = or i32 %21, %27, !dbg !17
  %29 = sext i32 %28 to i64, !dbg !18
  %30 = getelementptr half, ptr addrspace(1) %2, i64 %29, !dbg !18
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %30, i1 %17) #5, !dbg !19
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !19
  %33 = bitcast i32 %32 to <2 x half>, !dbg !19
  %34 = extractvalue { i32, i32 } %31, 1, !dbg !19
  %35 = bitcast i32 %34 to <2 x half>, !dbg !19
  %36 = getelementptr half, ptr addrspace(1) %3, i64 %29, !dbg !20
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %36, i1 %17) #5, !dbg !21
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !21
  %39 = bitcast i32 %38 to <2 x half>, !dbg !21
  %40 = extractvalue { i32, i32 } %37, 1, !dbg !21
  %41 = bitcast i32 %40 to <2 x half>, !dbg !21
  %42 = getelementptr half, ptr addrspace(1) %0, i64 %29, !dbg !22
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %42, i1 %17) #5, !dbg !23
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !23
  %45 = bitcast i32 %44 to <2 x half>, !dbg !23
  %46 = extractvalue { i32, i32 } %43, 1, !dbg !23
  %47 = bitcast i32 %46 to <2 x half>, !dbg !23
  %48 = fpext <2 x half> %33 to <2 x float>, !dbg !24
  %49 = fpext <2 x half> %39 to <2 x float>, !dbg !25
  %50 = fpext <2 x half> %45 to <2 x float>, !dbg !26
  %51 = fadd <2 x float> %48, %49, !dbg !27
  %52 = fadd <2 x float> %51, %50, !dbg !28
  %53 = fmul <2 x float> %52, %52, !dbg !29
  %54 = extractelement <2 x float> %53, i64 0, !dbg !29
  %55 = fmul <2 x float> %52, %52, !dbg !29
  %56 = extractelement <2 x float> %55, i64 1, !dbg !29
  %57 = fadd float %23, %54, !dbg !30
  %58 = fadd float %24, %56, !dbg !30
  %59 = select i1 %17, float %57, float %23, !dbg !31
  %60 = select i1 %17, float %58, float %24, !dbg !31
  %61 = fptrunc <2 x float> %52 to <2 x half>, !dbg !32
  %62 = fpext <2 x half> %35 to <2 x float>, !dbg !24
  %63 = fpext <2 x half> %41 to <2 x float>, !dbg !25
  %64 = fpext <2 x half> %47 to <2 x float>, !dbg !26
  %65 = fadd <2 x float> %62, %63, !dbg !27
  %66 = fadd <2 x float> %65, %64, !dbg !28
  %67 = fmul <2 x float> %66, %66, !dbg !29
  %68 = extractelement <2 x float> %67, i64 0, !dbg !29
  %69 = fmul <2 x float> %66, %66, !dbg !29
  %70 = extractelement <2 x float> %69, i64 1, !dbg !29
  %71 = fadd float %25, %68, !dbg !30
  %72 = fadd float %26, %70, !dbg !30
  %73 = select i1 %17, float %71, float %25, !dbg !31
  %74 = select i1 %17, float %72, float %26, !dbg !31
  %75 = fptrunc <2 x float> %66 to <2 x half>, !dbg !32
  %76 = bitcast <2 x half> %61 to i32, !dbg !32
  %77 = bitcast <2 x half> %75 to i32, !dbg !32
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %76, i32 %77, ptr addrspace(1) %42, i1 %17) #5, !dbg !32
  %78 = add nuw nsw i32 %27, 8, !dbg !16
  %79 = icmp samesign ult i32 %27, 4088, !dbg !16
  br i1 %79, label %22, label %80, !dbg !16

80:                                               ; preds = %22
  %81 = icmp eq i32 %13, 0, !dbg !11
  %82 = and i32 %12, 63, !dbg !11
  %83 = or disjoint i32 %11, %82, !dbg !12
  %84 = icmp slt i32 %83, %6, !dbg !13
  %85 = fadd float %59, %60, !dbg !33
  %86 = fadd float %73, %85, !dbg !33
  %87 = fadd float %74, %86, !dbg !33
  %88 = bitcast float %87 to i32, !dbg !38
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 1, i32 31), !dbg !38
  %90 = bitcast i32 %89 to float, !dbg !38
  %91 = fadd float %87, %90, !dbg !33
  %92 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %15, !dbg !39
  %93 = bitcast float %91 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %94 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %82, !dbg !39
  %95 = load float, ptr addrspace(3) %94, align 4, !dbg !39
  %96 = tail call float @llvm.nvvm.div.full(float %95, float 4.096000e+03), !dbg !40
  %97 = tail call float @llvm.nvvm.div.full(float %91, float 4.096000e+03), !dbg !40
  %98 = fadd float %96, 0x3EE4F8B580000000, !dbg !41
  %99 = fadd float %97, 0x3EE4F8B580000000, !dbg !41
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i = icmp eq i32 %100, 0, !dbg !39
  br i1 %.not.i, label %103, label %101, !dbg !39

101:                                              ; preds = %80
  %102 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %98), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

103:                                              ; preds = %80
  %104 = tail call float @llvm.nvvm.rsqrt.approx.f(float %98), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

__nv_rsqrtf.exit:                                 ; preds = %101, %103
  %.0.i = phi float [ %102, %101 ], [ %104, %103 ], !dbg !39
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i13 = icmp eq i32 %108, 0, !dbg !39
  br i1 %.not.i13, label %111, label %109, !dbg !39

109:                                              ; preds = %__nv_rsqrtf.exit
  %110 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %99), !dbg !39
  br label %__nv_rsqrtf.exit15, !dbg !39

111:                                              ; preds = %__nv_rsqrtf.exit
  %112 = tail call float @llvm.nvvm.rsqrt.approx.f(float %99), !dbg !39
  br label %__nv_rsqrtf.exit15, !dbg !39

__nv_rsqrtf.exit15:                               ; preds = %109, %111
  %.0.i14 = phi float [ %110, %109 ], [ %112, %111 ], !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %113 = sext i32 %83 to i64, !dbg !43
  %114 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !43
  %115 = bitcast float %.0.i to i32, !dbg !44
  %116 = and i1 %81, %84, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %115, ptr addrspace(1) %114, i1 %116) #5, !dbg !44
  %117 = zext nneg i32 %19 to i64, !dbg !45
  %118 = insertelement <2 x float> poison, float %.0.i14, i64 0, !dbg !46
  %119 = shufflevector <2 x float> %118, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !46
  br label %120, !dbg !45

120:                                              ; preds = %__nv_rsqrtf.exit15, %120
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit15 ], [ %indvars.iv.next, %120 ]
  %121 = or disjoint i64 %indvars.iv, %117, !dbg !47
  %122 = getelementptr half, ptr addrspace(1) %4, i64 %121, !dbg !48
  %123 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %122, i1 true) #5, !dbg !49
  %124 = extractvalue { i32, i32 } %123, 0, !dbg !49
  %125 = bitcast i32 %124 to <2 x half>, !dbg !49
  %126 = extractvalue { i32, i32 } %123, 1, !dbg !49
  %127 = bitcast i32 %126 to <2 x half>, !dbg !49
  %128 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %21, %128
  %129 = sext i32 %.reass to i64, !dbg !50
  %130 = getelementptr half, ptr addrspace(1) %0, i64 %129, !dbg !50
  %131 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %130, i1 %17) #5, !dbg !51
  %132 = extractvalue { i32, i32 } %131, 0, !dbg !51
  %133 = bitcast i32 %132 to <2 x half>, !dbg !51
  %134 = extractvalue { i32, i32 } %131, 1, !dbg !51
  %135 = bitcast i32 %134 to <2 x half>, !dbg !51
  %136 = getelementptr half, ptr addrspace(1) %5, i64 %129, !dbg !52
  %137 = fpext <2 x half> %125 to <2 x float>, !dbg !53
  %138 = fpext <2 x half> %133 to <2 x float>, !dbg !54
  %139 = fmul <2 x float> %119, %138, !dbg !46
  %140 = fmul <2 x float> %139, %137, !dbg !55
  %141 = fptrunc <2 x float> %140 to <2 x half>, !dbg !56
  %142 = fpext <2 x half> %127 to <2 x float>, !dbg !53
  %143 = fpext <2 x half> %135 to <2 x float>, !dbg !54
  %144 = fmul <2 x float> %119, %143, !dbg !46
  %145 = fmul <2 x float> %144, %142, !dbg !55
  %146 = fptrunc <2 x float> %145 to <2 x half>, !dbg !56
  %147 = bitcast <2 x half> %141 to i32, !dbg !56
  %148 = bitcast <2 x half> %146 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %147, i32 %148, ptr addrspace(1) %136, i1 %17) #5, !dbg !56
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !45
  %149 = icmp samesign ult i64 %indvars.iv, 4088, !dbg !45
  br i1 %149, label %120, label %150, !dbg !45

150:                                              ; preds = %120
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c77oi4n34co2lyl6w3uyrpu25nlsmz2qimbxcpjl3nsdatstbw7t.py", directory: "./local_cache/77")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 29, column: 40, scope: !6)
!17 = !DILocation(line: 35, column: 41, scope: !6)
!18 = !DILocation(line: 35, column: 34, scope: !6)
!19 = !DILocation(line: 35, column: 51, scope: !6)
!20 = !DILocation(line: 36, column: 34, scope: !6)
!21 = !DILocation(line: 36, column: 51, scope: !6)
!22 = !DILocation(line: 37, column: 38, scope: !6)
!23 = !DILocation(line: 37, column: 55, scope: !6)
!24 = !DILocation(line: 35, column: 113, scope: !6)
!25 = !DILocation(line: 36, column: 113, scope: !6)
!26 = !DILocation(line: 37, column: 117, scope: !6)
!27 = !DILocation(line: 38, column: 22, scope: !6)
!28 = !DILocation(line: 39, column: 22, scope: !6)
!29 = !DILocation(line: 41, column: 22, scope: !6)
!30 = !DILocation(line: 43, column: 23, scope: !6)
!31 = !DILocation(line: 44, column: 48, scope: !6)
!32 = !DILocation(line: 45, column: 55, scope: !6)
!33 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !37)
!34 = distinct !DILexicalBlockFile(scope: !36, file: !35, discriminator: 0)
!35 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!36 = distinct !DILexicalBlockFile(scope: !6, file: !35, discriminator: 0)
!37 = !DILocation(line: 46, column: 25, scope: !6)
!38 = !DILocation(line: 286, column: 36, scope: !36, inlinedAt: !37)
!39 = !DILocation(line: 51, column: 28, scope: !6)
!40 = !DILocation(line: 48, column: 20, scope: !6)
!41 = !DILocation(line: 50, column: 20, scope: !6)
!42 = !DILocation(line: 52, column: 4, scope: !6)
!43 = !DILocation(line: 53, column: 28, scope: !6)
!44 = !DILocation(line: 53, column: 40, scope: !6)
!45 = !DILocation(line: 54, column: 40, scope: !6)
!46 = !DILocation(line: 63, column: 24, scope: !6)
!47 = !DILocation(line: 55, column: 31, scope: !6)
!48 = !DILocation(line: 60, column: 35, scope: !6)
!49 = !DILocation(line: 60, column: 42, scope: !6)
!50 = !DILocation(line: 61, column: 39, scope: !6)
!51 = !DILocation(line: 61, column: 56, scope: !6)
!52 = !DILocation(line: 66, column: 29, scope: !6)
!53 = !DILocation(line: 60, column: 95, scope: !6)
!54 = !DILocation(line: 61, column: 118, scope: !6)
!55 = !DILocation(line: 65, column: 24, scope: !6)
!56 = !DILocation(line: 66, column: 53, scope: !6)
!57 = !DILocation(line: 54, column: 4, scope: !6)
