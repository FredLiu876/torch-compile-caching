; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = icmp slt i32 %10, %6, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = and i32 %12, 31, !dbg !11
  %14 = lshr i32 %12, 5, !dbg !11
  %15 = shl i32 %12, 3, !dbg !11
  %16 = and i32 %15, 2040, !dbg !11
  %17 = or disjoint i32 %16, 2048, !dbg !11
  %18 = shl i32 %10, 12, !dbg !12
  %19 = or disjoint i32 %16, %18, !dbg !13
  %20 = or disjoint i32 %17, %18, !dbg !13
  %21 = sext i32 %19 to i64, !dbg !14
  %22 = getelementptr half, ptr addrspace(1) %2, i64 %21, !dbg !14
  %23 = sext i32 %20 to i64, !dbg !14
  %24 = getelementptr half, ptr addrspace(1) %2, i64 %23, !dbg !14
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %22, i1 %11) #5, !dbg !15
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !15
  %27 = bitcast i32 %26 to <2 x half>, !dbg !15
  %28 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !15
  %29 = bitcast i32 %28 to <2 x half>, !dbg !15
  %30 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !15
  %31 = bitcast i32 %30 to <2 x half>, !dbg !15
  %32 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !15
  %33 = bitcast i32 %32 to <2 x half>, !dbg !15
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %24, i1 %11) #5, !dbg !15
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !15
  %36 = bitcast i32 %35 to <2 x half>, !dbg !15
  %37 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !15
  %38 = bitcast i32 %37 to <2 x half>, !dbg !15
  %39 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !15
  %40 = bitcast i32 %39 to <2 x half>, !dbg !15
  %41 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !15
  %42 = bitcast i32 %41 to <2 x half>, !dbg !15
  %43 = getelementptr half, ptr addrspace(1) %3, i64 %21, !dbg !16
  %44 = getelementptr half, ptr addrspace(1) %3, i64 %23, !dbg !16
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %43, i1 %11) #5, !dbg !17
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !17
  %47 = bitcast i32 %46 to <2 x half>, !dbg !17
  %48 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !17
  %49 = bitcast i32 %48 to <2 x half>, !dbg !17
  %50 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !17
  %51 = bitcast i32 %50 to <2 x half>, !dbg !17
  %52 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !17
  %53 = bitcast i32 %52 to <2 x half>, !dbg !17
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %44, i1 %11) #5, !dbg !17
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !17
  %56 = bitcast i32 %55 to <2 x half>, !dbg !17
  %57 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !17
  %58 = bitcast i32 %57 to <2 x half>, !dbg !17
  %59 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !17
  %60 = bitcast i32 %59 to <2 x half>, !dbg !17
  %61 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !17
  %62 = bitcast i32 %61 to <2 x half>, !dbg !17
  %63 = getelementptr half, ptr addrspace(1) %0, i64 %21, !dbg !18
  %64 = getelementptr half, ptr addrspace(1) %0, i64 %23, !dbg !18
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %63, i1 %11) #5, !dbg !19
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !19
  %67 = bitcast i32 %66 to <2 x half>, !dbg !19
  %68 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !19
  %69 = bitcast i32 %68 to <2 x half>, !dbg !19
  %70 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !19
  %71 = bitcast i32 %70 to <2 x half>, !dbg !19
  %72 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !19
  %73 = bitcast i32 %72 to <2 x half>, !dbg !19
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %64, i1 %11) #5, !dbg !19
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !19
  %76 = bitcast i32 %75 to <2 x half>, !dbg !19
  %77 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !19
  %78 = bitcast i32 %77 to <2 x half>, !dbg !19
  %79 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !19
  %80 = bitcast i32 %79 to <2 x half>, !dbg !19
  %81 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !19
  %82 = bitcast i32 %81 to <2 x half>, !dbg !19
  %83 = fpext <2 x half> %27 to <2 x float>, !dbg !20
  %84 = fpext <2 x half> %47 to <2 x float>, !dbg !21
  %85 = fpext <2 x half> %67 to <2 x float>, !dbg !22
  %86 = fadd <2 x float> %83, %84, !dbg !23
  %87 = fadd <2 x float> %86, %85, !dbg !24
  %88 = fmul <2 x float> %87, %87, !dbg !25
  %89 = fmul <2 x float> %87, %87, !dbg !25
  %90 = fptrunc <2 x float> %87 to <2 x half>, !dbg !26
  %91 = fpext <2 x half> %29 to <2 x float>, !dbg !20
  %92 = fpext <2 x half> %49 to <2 x float>, !dbg !21
  %93 = fpext <2 x half> %69 to <2 x float>, !dbg !22
  %94 = fadd <2 x float> %91, %92, !dbg !23
  %95 = fadd <2 x float> %94, %93, !dbg !24
  %96 = fmul <2 x float> %95, %95, !dbg !25
  %97 = fmul <2 x float> %95, %95, !dbg !25
  %98 = fptrunc <2 x float> %95 to <2 x half>, !dbg !26
  %99 = fpext <2 x half> %31 to <2 x float>, !dbg !20
  %100 = fpext <2 x half> %51 to <2 x float>, !dbg !21
  %101 = fpext <2 x half> %71 to <2 x float>, !dbg !22
  %102 = fadd <2 x float> %99, %100, !dbg !23
  %103 = fadd <2 x float> %102, %101, !dbg !24
  %104 = fmul <2 x float> %103, %103, !dbg !25
  %105 = fmul <2 x float> %103, %103, !dbg !25
  %106 = fptrunc <2 x float> %103 to <2 x half>, !dbg !26
  %107 = fpext <2 x half> %33 to <2 x float>, !dbg !20
  %108 = fpext <2 x half> %53 to <2 x float>, !dbg !21
  %109 = fpext <2 x half> %73 to <2 x float>, !dbg !22
  %110 = fadd <2 x float> %107, %108, !dbg !23
  %111 = fadd <2 x float> %110, %109, !dbg !24
  %112 = fmul <2 x float> %111, %111, !dbg !25
  %113 = fmul <2 x float> %111, %111, !dbg !25
  %114 = fptrunc <2 x float> %111 to <2 x half>, !dbg !26
  %115 = fpext <2 x half> %36 to <2 x float>, !dbg !20
  %116 = fpext <2 x half> %56 to <2 x float>, !dbg !21
  %117 = fpext <2 x half> %76 to <2 x float>, !dbg !22
  %118 = fadd <2 x float> %115, %116, !dbg !23
  %119 = fadd <2 x float> %118, %117, !dbg !24
  %120 = fmul <2 x float> %119, %119, !dbg !25
  %121 = fmul <2 x float> %119, %119, !dbg !25
  %122 = fptrunc <2 x float> %119 to <2 x half>, !dbg !26
  %123 = fpext <2 x half> %38 to <2 x float>, !dbg !20
  %124 = fpext <2 x half> %58 to <2 x float>, !dbg !21
  %125 = fpext <2 x half> %78 to <2 x float>, !dbg !22
  %126 = fadd <2 x float> %123, %124, !dbg !23
  %127 = fadd <2 x float> %126, %125, !dbg !24
  %128 = fmul <2 x float> %127, %127, !dbg !25
  %129 = fmul <2 x float> %127, %127, !dbg !25
  %130 = fptrunc <2 x float> %127 to <2 x half>, !dbg !26
  %131 = fpext <2 x half> %40 to <2 x float>, !dbg !20
  %132 = fpext <2 x half> %60 to <2 x float>, !dbg !21
  %133 = fpext <2 x half> %80 to <2 x float>, !dbg !22
  %134 = fadd <2 x float> %131, %132, !dbg !23
  %135 = fadd <2 x float> %134, %133, !dbg !24
  %136 = fmul <2 x float> %135, %135, !dbg !25
  %137 = fmul <2 x float> %135, %135, !dbg !25
  %138 = fptrunc <2 x float> %135 to <2 x half>, !dbg !26
  %139 = fpext <2 x half> %42 to <2 x float>, !dbg !20
  %140 = fpext <2 x half> %62 to <2 x float>, !dbg !21
  %141 = fpext <2 x half> %82 to <2 x float>, !dbg !22
  %142 = fadd <2 x float> %139, %140, !dbg !23
  %143 = fadd <2 x float> %142, %141, !dbg !24
  %144 = fmul <2 x float> %143, %143, !dbg !25
  %145 = fmul <2 x float> %143, %143, !dbg !25
  %146 = fptrunc <2 x float> %143 to <2 x half>, !dbg !26
  %147 = bitcast <2 x half> %90 to i32, !dbg !26
  %148 = bitcast <2 x half> %98 to i32, !dbg !26
  %149 = bitcast <2 x half> %106 to i32, !dbg !26
  %150 = bitcast <2 x half> %114 to i32, !dbg !26
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %147, i32 %148, i32 %149, i32 %150, ptr addrspace(1) %63, i1 %11) #5, !dbg !26
  %151 = bitcast <2 x half> %122 to i32, !dbg !26
  %152 = bitcast <2 x half> %130 to i32, !dbg !26
  %153 = bitcast <2 x half> %138 to i32, !dbg !26
  %154 = bitcast <2 x half> %146 to i32, !dbg !26
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %151, i32 %152, i32 %153, i32 %154, ptr addrspace(1) %64, i1 %11) #5, !dbg !26
  %shift = shufflevector <2 x float> %89, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %155 = fadd <2 x float> %88, %shift, !dbg !27
  %156 = fadd <2 x float> %96, %155, !dbg !27
  %shift25 = shufflevector <2 x float> %97, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %157 = fadd <2 x float> %shift25, %156, !dbg !27
  %158 = fadd <2 x float> %104, %157, !dbg !27
  %shift26 = shufflevector <2 x float> %105, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %159 = fadd <2 x float> %shift26, %158, !dbg !27
  %160 = fadd <2 x float> %112, %159, !dbg !27
  %shift27 = shufflevector <2 x float> %113, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %161 = fadd <2 x float> %shift27, %160, !dbg !27
  %162 = fadd <2 x float> %120, %161, !dbg !27
  %shift28 = shufflevector <2 x float> %121, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %163 = fadd <2 x float> %shift28, %162, !dbg !27
  %164 = fadd <2 x float> %128, %163, !dbg !27
  %shift29 = shufflevector <2 x float> %129, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %165 = fadd <2 x float> %shift29, %164, !dbg !27
  %166 = fadd <2 x float> %136, %165, !dbg !27
  %shift30 = shufflevector <2 x float> %137, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %167 = fadd <2 x float> %shift30, %166, !dbg !27
  %168 = fadd <2 x float> %144, %167, !dbg !27
  %shift31 = shufflevector <2 x float> %145, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %169 = fadd <2 x float> %shift31, %168, !dbg !27
  %170 = extractelement <2 x float> %169, i64 0, !dbg !27
  %171 = select i1 %11, float %170, float 0.000000e+00, !dbg !27
  %172 = bitcast float %171 to i32, !dbg !32
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 16, i32 31), !dbg !32
  %174 = bitcast i32 %173 to float, !dbg !32
  %175 = fadd float %171, %174, !dbg !27
  %176 = bitcast float %175 to i32, !dbg !32
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 8, i32 31), !dbg !32
  %178 = bitcast i32 %177 to float, !dbg !32
  %179 = fadd float %175, %178, !dbg !27
  %180 = bitcast float %179 to i32, !dbg !32
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 4, i32 31), !dbg !32
  %182 = bitcast i32 %181 to float, !dbg !32
  %183 = fadd float %179, %182, !dbg !27
  %184 = bitcast float %183 to i32, !dbg !32
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 2, i32 31), !dbg !32
  %186 = bitcast i32 %185 to float, !dbg !32
  %187 = fadd float %183, %186, !dbg !27
  %188 = bitcast float %187 to i32, !dbg !32
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 1, i32 31), !dbg !32
  %190 = bitcast i32 %189 to float, !dbg !32
  %191 = fadd float %187, %190, !dbg !27
  %192 = and i32 %14, 7, !dbg !32
  %193 = icmp eq i32 %13, 0, !dbg !32
  %194 = getelementptr float, ptr addrspace(3) @global_smem, i32 %192, !dbg !32
  %195 = bitcast float %191 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %195, i1 %193) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %196 = icmp slt i32 %12, 8, !dbg !32
  %197 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !32
  %198 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %197, i1 %196) #5, !dbg !32
  %199 = bitcast i32 %198 to float, !dbg !32
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 4, i32 31), !dbg !32
  %201 = bitcast i32 %200 to float, !dbg !32
  %202 = fadd float %199, %201, !dbg !27
  %203 = bitcast float %202 to i32, !dbg !32
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 2, i32 31), !dbg !32
  %205 = bitcast i32 %204 to float, !dbg !32
  %206 = fadd float %202, %205, !dbg !27
  %207 = bitcast float %206 to i32, !dbg !32
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 1, i32 31), !dbg !32
  %209 = bitcast i32 %208 to float, !dbg !32
  %210 = fadd float %206, %209, !dbg !27
  %211 = and i32 %12, 7, !dbg !32
  %212 = icmp eq i32 %211, 0, !dbg !32
  %213 = and i1 %196, %212, !dbg !32
  %214 = bitcast float %210 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %214, i1 %213) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %215 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !32
  %216 = tail call float @llvm.nvvm.div.full(float %215, float 4.096000e+03), !dbg !33
  %217 = fadd float %216, 0x3EE4F8B580000000, !dbg !34
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i = icmp eq i32 %218, 0, !dbg !35
  br i1 %.not.i, label %221, label %219, !dbg !35

219:                                              ; preds = %9
  %220 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %217), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

221:                                              ; preds = %9
  %222 = tail call float @llvm.nvvm.rsqrt.approx.f(float %217), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

__nv_rsqrtf.exit:                                 ; preds = %219, %221
  %.0.i = phi float [ %220, %219 ], [ %222, %221 ], !dbg !35
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %227 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i22 = icmp eq i32 %230, 0, !dbg !35
  br i1 %.not.i22, label %233, label %231, !dbg !35

231:                                              ; preds = %__nv_rsqrtf.exit
  %232 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %217), !dbg !35
  br label %__nv_rsqrtf.exit24, !dbg !35

233:                                              ; preds = %__nv_rsqrtf.exit
  %234 = tail call float @llvm.nvvm.rsqrt.approx.f(float %217), !dbg !35
  br label %__nv_rsqrtf.exit24, !dbg !35

__nv_rsqrtf.exit24:                               ; preds = %231, %233
  %.0.i23 = phi float [ %232, %231 ], [ %234, %233 ], !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %235 = sext i32 %10 to i64, !dbg !37
  %236 = getelementptr float, ptr addrspace(1) %1, i64 %235, !dbg !37
  %237 = and i32 %12, 255, !dbg !38
  %238 = icmp eq i32 %237, 0, !dbg !38
  %239 = bitcast float %.0.i to i32, !dbg !38
  %240 = and i1 %238, %11, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %239, ptr addrspace(1) %236, i1 %240) #5, !dbg !38
  %241 = zext nneg i32 %16 to i64, !dbg !39
  %242 = getelementptr half, ptr addrspace(1) %4, i64 %241, !dbg !39
  %243 = zext nneg i32 %17 to i64, !dbg !39
  %244 = getelementptr half, ptr addrspace(1) %4, i64 %243, !dbg !39
  %245 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %242, i1 true) #5, !dbg !40
  %246 = extractvalue { i32, i32, i32, i32 } %245, 0, !dbg !40
  %247 = bitcast i32 %246 to <2 x half>, !dbg !40
  %248 = extractvalue { i32, i32, i32, i32 } %245, 1, !dbg !40
  %249 = bitcast i32 %248 to <2 x half>, !dbg !40
  %250 = extractvalue { i32, i32, i32, i32 } %245, 2, !dbg !40
  %251 = bitcast i32 %250 to <2 x half>, !dbg !40
  %252 = extractvalue { i32, i32, i32, i32 } %245, 3, !dbg !40
  %253 = bitcast i32 %252 to <2 x half>, !dbg !40
  %254 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %244, i1 true) #5, !dbg !40
  %255 = extractvalue { i32, i32, i32, i32 } %254, 0, !dbg !40
  %256 = bitcast i32 %255 to <2 x half>, !dbg !40
  %257 = extractvalue { i32, i32, i32, i32 } %254, 1, !dbg !40
  %258 = bitcast i32 %257 to <2 x half>, !dbg !40
  %259 = extractvalue { i32, i32, i32, i32 } %254, 2, !dbg !40
  %260 = bitcast i32 %259 to <2 x half>, !dbg !40
  %261 = extractvalue { i32, i32, i32, i32 } %254, 3, !dbg !40
  %262 = bitcast i32 %261 to <2 x half>, !dbg !40
  %263 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %63, i1 %11) #5, !dbg !41
  %264 = extractvalue { i32, i32, i32, i32 } %263, 0, !dbg !41
  %265 = bitcast i32 %264 to <2 x half>, !dbg !41
  %266 = extractvalue { i32, i32, i32, i32 } %263, 1, !dbg !41
  %267 = bitcast i32 %266 to <2 x half>, !dbg !41
  %268 = extractvalue { i32, i32, i32, i32 } %263, 2, !dbg !41
  %269 = bitcast i32 %268 to <2 x half>, !dbg !41
  %270 = extractvalue { i32, i32, i32, i32 } %263, 3, !dbg !41
  %271 = bitcast i32 %270 to <2 x half>, !dbg !41
  %272 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %64, i1 %11) #5, !dbg !41
  %273 = extractvalue { i32, i32, i32, i32 } %272, 0, !dbg !41
  %274 = bitcast i32 %273 to <2 x half>, !dbg !41
  %275 = extractvalue { i32, i32, i32, i32 } %272, 1, !dbg !41
  %276 = bitcast i32 %275 to <2 x half>, !dbg !41
  %277 = extractvalue { i32, i32, i32, i32 } %272, 2, !dbg !41
  %278 = bitcast i32 %277 to <2 x half>, !dbg !41
  %279 = extractvalue { i32, i32, i32, i32 } %272, 3, !dbg !41
  %280 = bitcast i32 %279 to <2 x half>, !dbg !41
  %281 = getelementptr half, ptr addrspace(1) %5, i64 %21, !dbg !42
  %282 = getelementptr half, ptr addrspace(1) %5, i64 %23, !dbg !42
  %283 = fpext <2 x half> %247 to <2 x float>, !dbg !43
  %284 = fpext <2 x half> %265 to <2 x float>, !dbg !44
  %285 = insertelement <2 x float> poison, float %.0.i23, i64 0, !dbg !45
  %286 = shufflevector <2 x float> %285, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !45
  %287 = fmul <2 x float> %286, %284, !dbg !45
  %288 = fmul <2 x float> %287, %283, !dbg !46
  %289 = fptrunc <2 x float> %288 to <2 x half>, !dbg !47
  %290 = fpext <2 x half> %249 to <2 x float>, !dbg !43
  %291 = fpext <2 x half> %267 to <2 x float>, !dbg !44
  %292 = fmul <2 x float> %286, %291, !dbg !45
  %293 = fmul <2 x float> %292, %290, !dbg !46
  %294 = fptrunc <2 x float> %293 to <2 x half>, !dbg !47
  %295 = fpext <2 x half> %251 to <2 x float>, !dbg !43
  %296 = fpext <2 x half> %269 to <2 x float>, !dbg !44
  %297 = fmul <2 x float> %286, %296, !dbg !45
  %298 = fmul <2 x float> %297, %295, !dbg !46
  %299 = fptrunc <2 x float> %298 to <2 x half>, !dbg !47
  %300 = fpext <2 x half> %253 to <2 x float>, !dbg !43
  %301 = fpext <2 x half> %271 to <2 x float>, !dbg !44
  %302 = fmul <2 x float> %286, %301, !dbg !45
  %303 = fmul <2 x float> %302, %300, !dbg !46
  %304 = fptrunc <2 x float> %303 to <2 x half>, !dbg !47
  %305 = fpext <2 x half> %256 to <2 x float>, !dbg !43
  %306 = fpext <2 x half> %274 to <2 x float>, !dbg !44
  %307 = fmul <2 x float> %286, %306, !dbg !45
  %308 = fmul <2 x float> %307, %305, !dbg !46
  %309 = fptrunc <2 x float> %308 to <2 x half>, !dbg !47
  %310 = fpext <2 x half> %258 to <2 x float>, !dbg !43
  %311 = fpext <2 x half> %276 to <2 x float>, !dbg !44
  %312 = fmul <2 x float> %286, %311, !dbg !45
  %313 = fmul <2 x float> %312, %310, !dbg !46
  %314 = fptrunc <2 x float> %313 to <2 x half>, !dbg !47
  %315 = fpext <2 x half> %260 to <2 x float>, !dbg !43
  %316 = fpext <2 x half> %278 to <2 x float>, !dbg !44
  %317 = fmul <2 x float> %286, %316, !dbg !45
  %318 = fmul <2 x float> %317, %315, !dbg !46
  %319 = fptrunc <2 x float> %318 to <2 x half>, !dbg !47
  %320 = fpext <2 x half> %262 to <2 x float>, !dbg !43
  %321 = fpext <2 x half> %280 to <2 x float>, !dbg !44
  %322 = fmul <2 x float> %286, %321, !dbg !45
  %323 = fmul <2 x float> %322, %320, !dbg !46
  %324 = fptrunc <2 x float> %323 to <2 x half>, !dbg !47
  %325 = bitcast <2 x half> %289 to i32, !dbg !47
  %326 = bitcast <2 x half> %294 to i32, !dbg !47
  %327 = bitcast <2 x half> %299 to i32, !dbg !47
  %328 = bitcast <2 x half> %304 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %325, i32 %326, i32 %327, i32 %328, ptr addrspace(1) %281, i1 %11) #5, !dbg !47
  %329 = bitcast <2 x half> %309 to i32, !dbg !47
  %330 = bitcast <2 x half> %314 to i32, !dbg !47
  %331 = bitcast <2 x half> %319 to i32, !dbg !47
  %332 = bitcast <2 x half> %324 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %329, i32 %330, i32 %331, i32 %332, ptr addrspace(1) %282, i1 %11) #5, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjjwjnmyb5ylskx6e3eg4yueoaqwlte7kuhtcnu2a4ncpavggv5i.py", directory: "/tmp/torchinductor_root/jj")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 21, scope: !6)
!11 = !DILocation(line: 25, column: 37, scope: !6)
!12 = !DILocation(line: 35, column: 46, scope: !6)
!13 = !DILocation(line: 35, column: 41, scope: !6)
!14 = !DILocation(line: 35, column: 34, scope: !6)
!15 = !DILocation(line: 35, column: 51, scope: !6)
!16 = !DILocation(line: 36, column: 34, scope: !6)
!17 = !DILocation(line: 36, column: 51, scope: !6)
!18 = !DILocation(line: 37, column: 38, scope: !6)
!19 = !DILocation(line: 37, column: 55, scope: !6)
!20 = !DILocation(line: 35, column: 113, scope: !6)
!21 = !DILocation(line: 36, column: 113, scope: !6)
!22 = !DILocation(line: 37, column: 117, scope: !6)
!23 = !DILocation(line: 38, column: 22, scope: !6)
!24 = !DILocation(line: 39, column: 22, scope: !6)
!25 = !DILocation(line: 41, column: 22, scope: !6)
!26 = !DILocation(line: 45, column: 55, scope: !6)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!30 = distinct !DILexicalBlockFile(scope: !6, file: !29, discriminator: 0)
!31 = !DILocation(line: 46, column: 25, scope: !6)
!32 = !DILocation(line: 286, column: 36, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 48, column: 20, scope: !6)
!34 = !DILocation(line: 50, column: 20, scope: !6)
!35 = !DILocation(line: 51, column: 28, scope: !6)
!36 = !DILocation(line: 52, column: 4, scope: !6)
!37 = !DILocation(line: 53, column: 28, scope: !6)
!38 = !DILocation(line: 53, column: 40, scope: !6)
!39 = !DILocation(line: 60, column: 35, scope: !6)
!40 = !DILocation(line: 60, column: 42, scope: !6)
!41 = !DILocation(line: 61, column: 56, scope: !6)
!42 = !DILocation(line: 66, column: 29, scope: !6)
!43 = !DILocation(line: 60, column: 95, scope: !6)
!44 = !DILocation(line: 61, column: 118, scope: !6)
!45 = !DILocation(line: 63, column: 24, scope: !6)
!46 = !DILocation(line: 65, column: 24, scope: !6)
!47 = !DILocation(line: 66, column: 53, scope: !6)
!48 = !DILocation(line: 54, column: 4, scope: !6)
