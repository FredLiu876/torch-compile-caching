; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/yi/cyihme7t354xdekku5rks7waotqdnz3mpo47q3uhqjtr5ixrgolb.py\00"
@assertMessage_0 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp4 < 128256\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !10 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %11 = icmp slt i32 %10, %6, !dbg !12
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %13 = sext i32 %10 to i64, !dbg !14
  %14 = getelementptr i64, ptr addrspace(1) %1, i64 %13, !dbg !14
  %15 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 %11) #6, !dbg !15
  %16 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 %11) #6, !dbg !15
  %17 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 %11) #6, !dbg !15
  %18 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 %11) #6, !dbg !15
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 %11) #6, !dbg !15
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 %11) #6, !dbg !15
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 %11) #6, !dbg !15
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 %11) #6, !dbg !15
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 %11) #6, !dbg !15
  %24 = add i64 %23, 128256, !dbg !16
  %25 = icmp slt i64 %23, 0, !dbg !17
  %26 = select i1 %25, i64 %24, i64 %23, !dbg !18
  %27 = icmp ugt i64 %26, 128255, !dbg !19
  %.not3 = and i1 %11, %27, !dbg !20
  br i1 %.not3, label %154, label %.split.preheader, !dbg !21

.split.preheader:                                 ; preds = %9
  %28 = icmp slt i64 %22, 0, !dbg !17
  %29 = shl i64 %22, 12, !dbg !20
  %30 = add i64 %29, 525336576, !dbg !20
  %31 = select i1 %28, i64 %30, i64 %29, !dbg !20
  %32 = getelementptr half, ptr addrspace(1) %2, i64 %31
  %33 = shl i32 %12, 3, !dbg !13
  %34 = and i32 %33, 2040, !dbg !13
  %35 = shl i32 %10, 12, !dbg !22
  %invariant.op = or disjoint i32 %34, %35, !dbg !23
  %36 = lshr i32 %12, 5, !dbg !13
  %37 = and i32 %12, 31, !dbg !13
  %38 = zext nneg i32 %34 to i64, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %39 = getelementptr half, ptr addrspace(1) %32, i64 %38, !dbg !24
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %39, i1 %11) #6, !dbg !25
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !25
  %42 = bitcast i32 %41 to <2 x half>, !dbg !25
  %43 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !25
  %44 = bitcast i32 %43 to <2 x half>, !dbg !25
  %45 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !25
  %46 = bitcast i32 %45 to <2 x half>, !dbg !25
  %47 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !25
  %48 = bitcast i32 %47 to <2 x half>, !dbg !25
  %49 = extractelement <2 x half> %42, i64 0, !dbg !25
  %50 = extractelement <2 x half> %42, i64 1, !dbg !25
  %51 = fpext half %49 to float, !dbg !26
  %52 = fpext half %50 to float, !dbg !26
  %53 = fmul float %51, %51, !dbg !27
  %54 = fmul float %52, %52, !dbg !27
  %55 = sext i32 %invariant.op to i64, !dbg !28
  %56 = getelementptr half, ptr addrspace(1) %4, i64 %55, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %41, i32 %43, i32 %45, i32 %47, ptr addrspace(1) %56, i1 %11) #6, !dbg !29
  %57 = or disjoint i64 %38, 2048, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %58 = getelementptr half, ptr addrspace(1) %32, i64 %57, !dbg !24
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %58, i1 %11) #6, !dbg !25
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !25
  %61 = bitcast i32 %60 to <2 x half>, !dbg !25
  %62 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !25
  %63 = bitcast i32 %62 to <2 x half>, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !25
  %65 = bitcast i32 %64 to <2 x half>, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !25
  %67 = bitcast i32 %66 to <2 x half>, !dbg !25
  %68 = extractelement <2 x half> %61, i64 0, !dbg !25
  %69 = extractelement <2 x half> %61, i64 1, !dbg !25
  %70 = fpext half %68 to float, !dbg !26
  %71 = fpext half %69 to float, !dbg !26
  %72 = fmul float %70, %70, !dbg !27
  %73 = fmul float %71, %71, !dbg !27
  %74 = fadd float %53, %72, !dbg !31
  %75 = fadd float %54, %73, !dbg !31
  %76 = fpext <2 x half> %44 to <2 x float>, !dbg !26
  %77 = fmul <2 x float> %76, %76, !dbg !27
  %78 = fpext <2 x half> %63 to <2 x float>, !dbg !26
  %79 = fmul <2 x float> %78, %78, !dbg !27
  %80 = fadd <2 x float> %77, %79, !dbg !31
  %81 = fpext <2 x half> %46 to <2 x float>, !dbg !26
  %82 = fmul <2 x float> %81, %81, !dbg !27
  %83 = fpext <2 x half> %65 to <2 x float>, !dbg !26
  %84 = fmul <2 x float> %83, %83, !dbg !27
  %85 = fadd <2 x float> %82, %84, !dbg !31
  %86 = fpext <2 x half> %48 to <2 x float>, !dbg !26
  %87 = fmul <2 x float> %86, %86, !dbg !27
  %88 = fpext <2 x half> %67 to <2 x float>, !dbg !26
  %89 = fmul <2 x float> %88, %88, !dbg !27
  %90 = fadd <2 x float> %87, %89, !dbg !31
  %.reass.1 = or disjoint i32 %invariant.op, 2048
  %91 = sext i32 %.reass.1 to i64, !dbg !28
  %92 = getelementptr half, ptr addrspace(1) %4, i64 %91, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %60, i32 %62, i32 %64, i32 %66, ptr addrspace(1) %92, i1 %11) #6, !dbg !29
  %93 = fadd float %74, %75, !dbg !32
  %94 = extractelement <2 x float> %80, i64 0, !dbg !32
  %95 = fadd float %94, %93, !dbg !32
  %96 = extractelement <2 x float> %80, i64 1, !dbg !32
  %97 = fadd float %96, %95, !dbg !32
  %98 = extractelement <2 x float> %85, i64 0, !dbg !32
  %99 = fadd float %98, %97, !dbg !32
  %100 = extractelement <2 x float> %85, i64 1, !dbg !32
  %101 = fadd float %100, %99, !dbg !32
  %102 = extractelement <2 x float> %90, i64 0, !dbg !32
  %103 = fadd float %102, %101, !dbg !32
  %104 = extractelement <2 x float> %90, i64 1, !dbg !32
  %105 = fadd float %104, %103, !dbg !32
  %106 = select i1 %11, float %105, float 0.000000e+00, !dbg !32
  %107 = bitcast float %106 to i32, !dbg !37
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 16, i32 31), !dbg !37
  %109 = bitcast i32 %108 to float, !dbg !37
  %110 = fadd float %106, %109, !dbg !32
  %111 = bitcast float %110 to i32, !dbg !37
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 8, i32 31), !dbg !37
  %113 = bitcast i32 %112 to float, !dbg !37
  %114 = fadd float %110, %113, !dbg !32
  %115 = bitcast float %114 to i32, !dbg !37
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 4, i32 31), !dbg !37
  %117 = bitcast i32 %116 to float, !dbg !37
  %118 = fadd float %114, %117, !dbg !32
  %119 = bitcast float %118 to i32, !dbg !37
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 2, i32 31), !dbg !37
  %121 = bitcast i32 %120 to float, !dbg !37
  %122 = fadd float %118, %121, !dbg !32
  %123 = bitcast float %122 to i32, !dbg !37
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 1, i32 31), !dbg !37
  %125 = bitcast i32 %124 to float, !dbg !37
  %126 = fadd float %122, %125, !dbg !32
  %127 = and i32 %36, 7, !dbg !37
  %128 = icmp eq i32 %37, 0, !dbg !37
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i32 %127, !dbg !37
  %130 = bitcast float %126 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 %128) #6, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %131 = icmp slt i32 %12, 8, !dbg !37
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !37
  %133 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %132, i1 %131) #6, !dbg !37
  %134 = bitcast i32 %133 to float, !dbg !37
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 4, i32 31), !dbg !37
  %136 = bitcast i32 %135 to float, !dbg !37
  %137 = fadd float %134, %136, !dbg !32
  %138 = bitcast float %137 to i32, !dbg !37
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 2, i32 31), !dbg !37
  %140 = bitcast i32 %139 to float, !dbg !37
  %141 = fadd float %137, %140, !dbg !32
  %142 = bitcast float %141 to i32, !dbg !37
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 1, i32 31), !dbg !37
  %144 = bitcast i32 %143 to float, !dbg !37
  %145 = fadd float %141, %144, !dbg !32
  %146 = and i32 %12, 7, !dbg !37
  %147 = icmp eq i32 %146, 0, !dbg !37
  %148 = and i1 %131, %147, !dbg !37
  %149 = bitcast float %145 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %149, i1 %148) #6, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %150 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !37
  %151 = tail call float @llvm.nvvm.div.full(float %150, float 4.096000e+03), !dbg !38
  %152 = fadd float %151, 0x3EE4F8B580000000, !dbg !39
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %.not.i = icmp eq i32 %153, 0, !dbg !40
  br i1 %.not.i, label %157, label %155, !dbg !40

154:                                              ; preds = %9
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !21
  unreachable, !dbg !21

155:                                              ; preds = %.split.preheader
  %156 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %152), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

157:                                              ; preds = %.split.preheader
  %158 = tail call float @llvm.nvvm.rsqrt.approx.f(float %152), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

__nv_rsqrtf.exit:                                 ; preds = %155, %157
  %.0.i = phi float [ %156, %155 ], [ %158, %157 ], !dbg !40
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %.not.i25 = icmp eq i32 %166, 0, !dbg !40
  br i1 %.not.i25, label %169, label %167, !dbg !40

167:                                              ; preds = %__nv_rsqrtf.exit
  %168 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %152), !dbg !40
  br label %__nv_rsqrtf.exit27, !dbg !40

169:                                              ; preds = %__nv_rsqrtf.exit
  %170 = tail call float @llvm.nvvm.rsqrt.approx.f(float %152), !dbg !40
  br label %__nv_rsqrtf.exit27, !dbg !40

__nv_rsqrtf.exit27:                               ; preds = %167, %169
  %.0.i26 = phi float [ %168, %167 ], [ %170, %169 ], !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %171 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !42
  %172 = and i32 %12, 255, !dbg !43
  %173 = icmp eq i32 %172, 0, !dbg !43
  %174 = bitcast float %.0.i to i32, !dbg !43
  %175 = and i1 %173, %11, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %174, ptr addrspace(1) %171, i1 %175) #6, !dbg !43
  %176 = getelementptr half, ptr addrspace(1) %3, i64 %38, !dbg !44
  %177 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %176, i1 true) #6, !dbg !45
  %178 = extractvalue { i32, i32, i32, i32 } %177, 0, !dbg !45
  %179 = bitcast i32 %178 to <2 x half>, !dbg !45
  %180 = extractvalue { i32, i32, i32, i32 } %177, 1, !dbg !45
  %181 = bitcast i32 %180 to <2 x half>, !dbg !45
  %182 = extractvalue { i32, i32, i32, i32 } %177, 2, !dbg !45
  %183 = bitcast i32 %182 to <2 x half>, !dbg !45
  %184 = extractvalue { i32, i32, i32, i32 } %177, 3, !dbg !45
  %185 = bitcast i32 %184 to <2 x half>, !dbg !45
  %186 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %56, i1 %11) #6, !dbg !46
  %187 = extractvalue { i32, i32, i32, i32 } %186, 0, !dbg !46
  %188 = bitcast i32 %187 to <2 x half>, !dbg !46
  %189 = extractvalue { i32, i32, i32, i32 } %186, 1, !dbg !46
  %190 = bitcast i32 %189 to <2 x half>, !dbg !46
  %191 = extractvalue { i32, i32, i32, i32 } %186, 2, !dbg !46
  %192 = bitcast i32 %191 to <2 x half>, !dbg !46
  %193 = extractvalue { i32, i32, i32, i32 } %186, 3, !dbg !46
  %194 = bitcast i32 %193 to <2 x half>, !dbg !46
  %195 = getelementptr half, ptr addrspace(1) %5, i64 %55, !dbg !47
  %196 = fpext <2 x half> %179 to <2 x float>, !dbg !48
  %197 = fpext <2 x half> %188 to <2 x float>, !dbg !49
  %198 = insertelement <2 x float> poison, float %.0.i26, i64 0, !dbg !50
  %199 = shufflevector <2 x float> %198, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %200 = fmul <2 x float> %199, %197, !dbg !50
  %201 = fmul <2 x float> %200, %196, !dbg !51
  %202 = fptrunc <2 x float> %201 to <2 x half>, !dbg !52
  %203 = fpext <2 x half> %181 to <2 x float>, !dbg !48
  %204 = fpext <2 x half> %190 to <2 x float>, !dbg !49
  %205 = fmul <2 x float> %199, %204, !dbg !50
  %206 = fmul <2 x float> %205, %203, !dbg !51
  %207 = fptrunc <2 x float> %206 to <2 x half>, !dbg !52
  %208 = fpext <2 x half> %183 to <2 x float>, !dbg !48
  %209 = fpext <2 x half> %192 to <2 x float>, !dbg !49
  %210 = fmul <2 x float> %199, %209, !dbg !50
  %211 = fmul <2 x float> %210, %208, !dbg !51
  %212 = fptrunc <2 x float> %211 to <2 x half>, !dbg !52
  %213 = fpext <2 x half> %185 to <2 x float>, !dbg !48
  %214 = fpext <2 x half> %194 to <2 x float>, !dbg !49
  %215 = fmul <2 x float> %199, %214, !dbg !50
  %216 = fmul <2 x float> %215, %213, !dbg !51
  %217 = fptrunc <2 x float> %216 to <2 x half>, !dbg !52
  %218 = bitcast <2 x half> %202 to i32, !dbg !52
  %219 = bitcast <2 x half> %207 to i32, !dbg !52
  %220 = bitcast <2 x half> %212 to i32, !dbg !52
  %221 = bitcast <2 x half> %217 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %218, i32 %219, i32 %220, i32 %221, ptr addrspace(1) %195, i1 %11) #6, !dbg !52
  %222 = getelementptr half, ptr addrspace(1) %3, i64 %57, !dbg !44
  %223 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %222, i1 true) #6, !dbg !45
  %224 = extractvalue { i32, i32, i32, i32 } %223, 0, !dbg !45
  %225 = bitcast i32 %224 to <2 x half>, !dbg !45
  %226 = extractvalue { i32, i32, i32, i32 } %223, 1, !dbg !45
  %227 = bitcast i32 %226 to <2 x half>, !dbg !45
  %228 = extractvalue { i32, i32, i32, i32 } %223, 2, !dbg !45
  %229 = bitcast i32 %228 to <2 x half>, !dbg !45
  %230 = extractvalue { i32, i32, i32, i32 } %223, 3, !dbg !45
  %231 = bitcast i32 %230 to <2 x half>, !dbg !45
  %232 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %92, i1 %11) #6, !dbg !46
  %233 = extractvalue { i32, i32, i32, i32 } %232, 0, !dbg !46
  %234 = bitcast i32 %233 to <2 x half>, !dbg !46
  %235 = extractvalue { i32, i32, i32, i32 } %232, 1, !dbg !46
  %236 = bitcast i32 %235 to <2 x half>, !dbg !46
  %237 = extractvalue { i32, i32, i32, i32 } %232, 2, !dbg !46
  %238 = bitcast i32 %237 to <2 x half>, !dbg !46
  %239 = extractvalue { i32, i32, i32, i32 } %232, 3, !dbg !46
  %240 = bitcast i32 %239 to <2 x half>, !dbg !46
  %241 = getelementptr half, ptr addrspace(1) %5, i64 %91, !dbg !47
  %242 = fpext <2 x half> %225 to <2 x float>, !dbg !48
  %243 = fpext <2 x half> %234 to <2 x float>, !dbg !49
  %244 = fmul <2 x float> %199, %243, !dbg !50
  %245 = fmul <2 x float> %244, %242, !dbg !51
  %246 = fptrunc <2 x float> %245 to <2 x half>, !dbg !52
  %247 = fpext <2 x half> %227 to <2 x float>, !dbg !48
  %248 = fpext <2 x half> %236 to <2 x float>, !dbg !49
  %249 = fmul <2 x float> %199, %248, !dbg !50
  %250 = fmul <2 x float> %249, %247, !dbg !51
  %251 = fptrunc <2 x float> %250 to <2 x half>, !dbg !52
  %252 = fpext <2 x half> %229 to <2 x float>, !dbg !48
  %253 = fpext <2 x half> %238 to <2 x float>, !dbg !49
  %254 = fmul <2 x float> %199, %253, !dbg !50
  %255 = fmul <2 x float> %254, %252, !dbg !51
  %256 = fptrunc <2 x float> %255 to <2 x half>, !dbg !52
  %257 = fpext <2 x half> %231 to <2 x float>, !dbg !48
  %258 = fpext <2 x half> %240 to <2 x float>, !dbg !49
  %259 = fmul <2 x float> %199, %258, !dbg !50
  %260 = fmul <2 x float> %259, %257, !dbg !51
  %261 = fptrunc <2 x float> %260 to <2 x half>, !dbg !52
  %262 = bitcast <2 x half> %246 to i32, !dbg !52
  %263 = bitcast <2 x half> %251 to i32, !dbg !52
  %264 = bitcast <2 x half> %256 to i32, !dbg !52
  %265 = bitcast <2 x half> %261 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %262, i32 %263, i32 %264, i32 %265, ptr addrspace(1) %241, i1 %11) #6, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyihme7t354xdekku5rks7waotqdnz3mpo47q3uhqjtr5ixrgolb.py", directory: "/tmp/torchinductor_root/yi")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 22, column: 28, scope: !10)
!12 = !DILocation(line: 24, column: 21, scope: !10)
!13 = !DILocation(line: 25, column: 37, scope: !10)
!14 = !DILocation(line: 28, column: 30, scope: !10)
!15 = !DILocation(line: 28, column: 35, scope: !10)
!16 = !DILocation(line: 37, column: 22, scope: !10)
!17 = !DILocation(line: 38, column: 22, scope: !10)
!18 = !DILocation(line: 39, column: 36, scope: !10)
!19 = !DILocation(line: 40, column: 41, scope: !10)
!20 = !DILocation(line: 41, column: 46, scope: !10)
!21 = !DILocation(line: 40, column: 69, scope: !10)
!22 = !DILocation(line: 47, column: 41, scope: !10)
!23 = !DILocation(line: 30, column: 40, scope: !10)
!24 = !DILocation(line: 41, column: 34, scope: !10)
!25 = !DILocation(line: 41, column: 53, scope: !10)
!26 = !DILocation(line: 41, column: 115, scope: !10)
!27 = !DILocation(line: 43, column: 22, scope: !10)
!28 = !DILocation(line: 47, column: 29, scope: !10)
!29 = !DILocation(line: 47, column: 52, scope: !10)
!30 = !DILocation(line: 31, column: 31, scope: !10)
!31 = !DILocation(line: 45, column: 25, scope: !10)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !36)
!33 = distinct !DILexicalBlockFile(scope: !35, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!35 = distinct !DILexicalBlockFile(scope: !10, file: !34, discriminator: 0)
!36 = !DILocation(line: 48, column: 27, scope: !10)
!37 = !DILocation(line: 286, column: 36, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 50, column: 21, scope: !10)
!39 = !DILocation(line: 52, column: 20, scope: !10)
!40 = !DILocation(line: 53, column: 28, scope: !10)
!41 = !DILocation(line: 54, column: 4, scope: !10)
!42 = !DILocation(line: 55, column: 28, scope: !10)
!43 = !DILocation(line: 55, column: 40, scope: !10)
!44 = !DILocation(line: 62, column: 35, scope: !10)
!45 = !DILocation(line: 62, column: 42, scope: !10)
!46 = !DILocation(line: 63, column: 53, scope: !10)
!47 = !DILocation(line: 68, column: 29, scope: !10)
!48 = !DILocation(line: 62, column: 95, scope: !10)
!49 = !DILocation(line: 63, column: 115, scope: !10)
!50 = !DILocation(line: 65, column: 24, scope: !10)
!51 = !DILocation(line: 67, column: 24, scope: !10)
!52 = !DILocation(line: 68, column: 53, scope: !10)
!53 = !DILocation(line: 56, column: 4, scope: !10)
