; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_div_mul_pow_sum_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = shl i32 %11, 2, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %.lobit2 = lshr i32 %13, 4, !dbg !11
  %14 = and i32 %.lobit2, 3, !dbg !11
  %15 = or disjoint i32 %14, %12, !dbg !12
  %16 = icmp slt i32 %15, %7, !dbg !13
  %17 = shl i32 %13, 2, !dbg !14
  %18 = and i32 %17, 60, !dbg !14
  %19 = and i32 %13, 63, !dbg !14
  %20 = shl i32 %15, 12, !dbg !15
  %21 = or disjoint i32 %20, %18
  %22 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %19
  %23 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %18
  %24 = zext nneg i32 %19 to i64, !dbg !16
  %25 = getelementptr inbounds nuw i8, ptr addrspace(3) %23, i32 8
  %26 = insertelement <4 x i1> poison, i1 %16, i64 0, !dbg !17
  %27 = shufflevector <4 x i1> %26, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !17
  br label %28, !dbg !16

28:                                               ; preds = %10, %28
  %indvars.iv = phi i64 [ 0, %10 ], [ %indvars.iv.next, %28 ]
  %29 = phi <4 x float> [ zeroinitializer, %10 ], [ %77, %28 ]
  %30 = or disjoint i64 %indvars.iv, %24, !dbg !18
  %31 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !19
  %32 = or i32 %21, %31, !dbg !19
  %33 = sext i32 %32 to i64, !dbg !20
  %34 = getelementptr half, ptr addrspace(1) %1, i64 %33, !dbg !20
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %34, i1 %16) #3, !dbg !21
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !21
  %37 = bitcast i32 %36 to <2 x half>, !dbg !21
  %38 = extractvalue { i32, i32 } %35, 1, !dbg !21
  %39 = bitcast i32 %38 to <2 x half>, !dbg !21
  %40 = getelementptr half, ptr addrspace(1) %2, i64 %33, !dbg !22
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %40, i1 %16) #3, !dbg !23
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !23
  %43 = bitcast i32 %42 to <2 x half>, !dbg !23
  %44 = extractvalue { i32, i32 } %41, 1, !dbg !23
  %45 = bitcast i32 %44 to <2 x half>, !dbg !23
  %46 = getelementptr half, ptr addrspace(1) %3, i64 %33, !dbg !24
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %46, i1 %16) #3, !dbg !25
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !25
  %49 = bitcast i32 %48 to <2 x half>, !dbg !25
  %50 = extractvalue { i32, i32 } %47, 1, !dbg !25
  %51 = bitcast i32 %50 to <2 x half>, !dbg !25
  %52 = getelementptr half, ptr addrspace(1) %4, i64 %30, !dbg !26
  %53 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %52, i1 true) #3, !dbg !27
  %54 = bitcast i16 %53 to half, !dbg !27
  %55 = fpext half %54 to float, !dbg !28
  %56 = getelementptr half, ptr addrspace(1) %5, i64 %33, !dbg !29
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %56, i1 %16) #3, !dbg !30
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !30
  %59 = bitcast i32 %58 to <2 x half>, !dbg !30
  %60 = extractvalue { i32, i32 } %57, 1, !dbg !30
  %61 = bitcast i32 %60 to <2 x half>, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %62 = bitcast float %55 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %22, <1 x i32> %62, i1 true) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %63 = shufflevector <2 x half> %37, <2 x half> %39, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !32
  %64 = fpext <4 x half> %63 to <4 x float>, !dbg !32
  %65 = shufflevector <2 x half> %43, <2 x half> %45, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !33
  %66 = fpext <4 x half> %65 to <4 x float>, !dbg !33
  %67 = shufflevector <2 x half> %49, <2 x half> %51, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !34
  %68 = fpext <4 x half> %67 to <4 x float>, !dbg !34
  %69 = shufflevector <2 x half> %59, <2 x half> %61, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !35
  %70 = fpext <4 x half> %69 to <4 x float>, !dbg !35
  %71 = fadd <4 x float> %64, %66, !dbg !36
  %72 = fadd <4 x float> %71, %68, !dbg !37
  %73 = load <4 x float>, ptr addrspace(3) %23, align 16, !dbg !31
  %74 = fmul <4 x float> %72, %73, !dbg !31
  %75 = fmul <4 x float> %74, %70, !dbg !38
  %76 = fadd <4 x float> %29, %75, !dbg !39
  %77 = select <4 x i1> %27, <4 x float> %76, <4 x float> %29, !dbg !17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !16
  %78 = icmp samesign ult i64 %indvars.iv, 4032, !dbg !16
  br i1 %78, label %28, label %79, !dbg !16

79:                                               ; preds = %28
  %shift = shufflevector <4 x float> %77, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !40
  %80 = fadd <4 x float> %77, %shift, !dbg !40
  %shift24 = shufflevector <4 x float> %77, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !40
  %81 = fadd <4 x float> %shift24, %80, !dbg !40
  %shift25 = shufflevector <4 x float> %77, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !40
  %82 = fadd <4 x float> %shift25, %81, !dbg !40
  %83 = extractelement <4 x float> %82, i64 0, !dbg !40
  %84 = bitcast float %83 to i32, !dbg !45
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 8, i32 31), !dbg !45
  %86 = bitcast i32 %85 to float, !dbg !45
  %87 = fadd float %83, %86, !dbg !40
  %88 = bitcast float %87 to i32, !dbg !45
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 4, i32 31), !dbg !45
  %90 = bitcast i32 %89 to float, !dbg !45
  %91 = fadd float %87, %90, !dbg !40
  %92 = bitcast float %91 to i32, !dbg !45
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 2, i32 31), !dbg !45
  %94 = bitcast i32 %93 to float, !dbg !45
  %95 = fadd float %91, %94, !dbg !40
  %96 = bitcast float %95 to i32, !dbg !45
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 1, i32 31), !dbg !45
  %98 = bitcast i32 %97 to float, !dbg !45
  %99 = fadd float %95, %98, !dbg !40
  %100 = sext i32 %15 to i64, !dbg !46
  %101 = getelementptr float, ptr addrspace(1) %6, i64 %100, !dbg !46
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %16) #3, !dbg !47
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %16) #3, !dbg !47
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %16) #3, !dbg !47
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %16) #3, !dbg !47
  %106 = bitcast i32 %105 to float, !dbg !47
  %107 = fmul float %99, -5.000000e-01, !dbg !48
  %108 = fmul float %106, %106, !dbg !49
  %109 = fmul float %108, %106, !dbg !50
  %110 = fmul float %107, %109, !dbg !51
  %111 = fmul float %110, 0x3F30000000000000, !dbg !52
  %112 = insertelement <2 x float> poison, float %111, i64 0, !dbg !53
  %113 = shufflevector <2 x float> %112, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %114 = insertelement <2 x float> poison, float %106, i64 0, !dbg !54
  %115 = shufflevector <2 x float> %114, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  br label %116, !dbg !55

116:                                              ; preds = %79, %116
  %indvars.iv13 = phi i64 [ 0, %79 ], [ %indvars.iv.next14, %116 ]
  %117 = or disjoint i64 %indvars.iv13, %24, !dbg !56
  %118 = trunc nuw nsw i64 %indvars.iv13 to i32, !dbg !57
  %119 = or i32 %21, %118, !dbg !57
  %120 = sext i32 %119 to i64, !dbg !58
  %121 = getelementptr half, ptr addrspace(1) %0, i64 %120, !dbg !58
  %122 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %121, i1 %16) #3, !dbg !59
  %123 = extractvalue { i32, i32 } %122, 0, !dbg !59
  %124 = bitcast i32 %123 to <2 x half>, !dbg !59
  %125 = extractvalue { i32, i32 } %122, 1, !dbg !59
  %126 = bitcast i32 %125 to <2 x half>, !dbg !59
  %127 = getelementptr half, ptr addrspace(1) %1, i64 %120, !dbg !60
  %128 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %127, i1 %16) #3, !dbg !61
  %129 = extractvalue { i32, i32 } %128, 0, !dbg !61
  %130 = bitcast i32 %129 to <2 x half>, !dbg !61
  %131 = extractvalue { i32, i32 } %128, 1, !dbg !61
  %132 = bitcast i32 %131 to <2 x half>, !dbg !61
  %133 = getelementptr half, ptr addrspace(1) %2, i64 %120, !dbg !62
  %134 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %133, i1 %16) #3, !dbg !63
  %135 = extractvalue { i32, i32 } %134, 0, !dbg !63
  %136 = bitcast i32 %135 to <2 x half>, !dbg !63
  %137 = extractvalue { i32, i32 } %134, 1, !dbg !63
  %138 = bitcast i32 %137 to <2 x half>, !dbg !63
  %139 = getelementptr half, ptr addrspace(1) %3, i64 %120, !dbg !64
  %140 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %139, i1 %16) #3, !dbg !65
  %141 = extractvalue { i32, i32 } %140, 0, !dbg !65
  %142 = bitcast i32 %141 to <2 x half>, !dbg !65
  %143 = extractvalue { i32, i32 } %140, 1, !dbg !65
  %144 = bitcast i32 %143 to <2 x half>, !dbg !65
  %145 = getelementptr half, ptr addrspace(1) %4, i64 %117, !dbg !66
  %146 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %145, i1 true) #3, !dbg !67
  %147 = bitcast i16 %146 to half, !dbg !67
  %148 = fpext half %147 to float, !dbg !68
  %149 = getelementptr half, ptr addrspace(1) %5, i64 %120, !dbg !69
  %150 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %149, i1 %16) #3, !dbg !70
  %151 = extractvalue { i32, i32 } %150, 0, !dbg !70
  %152 = bitcast i32 %151 to <2 x half>, !dbg !70
  %153 = extractvalue { i32, i32 } %150, 1, !dbg !70
  %154 = bitcast i32 %153 to <2 x half>, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %155 = bitcast float %148 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %22, <1 x i32> %155, i1 true) #3, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %156 = fpext <2 x half> %124 to <2 x float>, !dbg !71
  %157 = fpext <2 x half> %130 to <2 x float>, !dbg !72
  %158 = fpext <2 x half> %136 to <2 x float>, !dbg !73
  %159 = fpext <2 x half> %142 to <2 x float>, !dbg !74
  %160 = fpext <2 x half> %152 to <2 x float>, !dbg !75
  %161 = fadd <2 x float> %157, %158, !dbg !76
  %162 = fadd <2 x float> %161, %159, !dbg !77
  %163 = load <2 x float>, ptr addrspace(3) %23, align 16, !dbg !54
  %164 = fmul <2 x float> %162, %163, !dbg !78
  %165 = fmul <2 x float> %164, %115, !dbg !54
  %166 = fmul <2 x float> %160, splat (float 2.000000e+00), !dbg !79
  %167 = fmul <2 x float> %113, %166, !dbg !53
  %168 = fadd <2 x float> %167, %165, !dbg !80
  %169 = fadd <2 x float> %168, %156, !dbg !81
  %170 = fptrunc <2 x float> %169 to <2 x half>, !dbg !82
  %171 = fpext <2 x half> %126 to <2 x float>, !dbg !71
  %172 = fpext <2 x half> %132 to <2 x float>, !dbg !72
  %173 = fpext <2 x half> %138 to <2 x float>, !dbg !73
  %174 = fpext <2 x half> %144 to <2 x float>, !dbg !74
  %175 = fpext <2 x half> %154 to <2 x float>, !dbg !75
  %176 = fadd <2 x float> %172, %173, !dbg !76
  %177 = fadd <2 x float> %176, %174, !dbg !77
  %178 = load <2 x float>, ptr addrspace(3) %25, align 8, !dbg !54
  %179 = fmul <2 x float> %177, %178, !dbg !78
  %180 = fmul <2 x float> %179, %115, !dbg !54
  %181 = fmul <2 x float> %175, splat (float 2.000000e+00), !dbg !79
  %182 = fmul <2 x float> %113, %181, !dbg !53
  %183 = fadd <2 x float> %182, %180, !dbg !80
  %184 = fadd <2 x float> %183, %171, !dbg !81
  %185 = fptrunc <2 x float> %184 to <2 x half>, !dbg !82
  %186 = bitcast <2 x half> %170 to i32, !dbg !82
  %187 = bitcast <2 x half> %185 to i32, !dbg !82
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %186, i32 %187, ptr addrspace(1) %121, i1 %16) #3, !dbg !82
  %indvars.iv.next14 = add nuw nsw i64 %indvars.iv13, 64, !dbg !55
  %188 = icmp samesign ult i64 %indvars.iv13, 4032, !dbg !55
  br i1 %188, label %116, label %189, !dbg !55

189:                                              ; preds = %116
  ret void, !dbg !83
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccs6agov6apf2a2jmdmjbgw3s6dcemdcmtagau4xvkq2rtwcynjt.py", directory: "/tmp/torchinductor_root/cs")
!4 = !{ptr @triton_red_fused__to_copy_add_div_mul_pow_sum_10, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_mul_pow_sum_10", linkageName: "triton_red_fused__to_copy_add_div_mul_pow_sum_10", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 29, column: 40, scope: !6)
!17 = !DILocation(line: 48, column: 50, scope: !6)
!18 = !DILocation(line: 30, column: 31, scope: !6)
!19 = !DILocation(line: 35, column: 41, scope: !6)
!20 = !DILocation(line: 35, column: 34, scope: !6)
!21 = !DILocation(line: 35, column: 51, scope: !6)
!22 = !DILocation(line: 36, column: 34, scope: !6)
!23 = !DILocation(line: 36, column: 51, scope: !6)
!24 = !DILocation(line: 37, column: 34, scope: !6)
!25 = !DILocation(line: 37, column: 51, scope: !6)
!26 = !DILocation(line: 38, column: 34, scope: !6)
!27 = !DILocation(line: 38, column: 41, scope: !6)
!28 = !DILocation(line: 38, column: 94, scope: !6)
!29 = !DILocation(line: 39, column: 34, scope: !6)
!30 = !DILocation(line: 39, column: 51, scope: !6)
!31 = !DILocation(line: 42, column: 22, scope: !6)
!32 = !DILocation(line: 35, column: 112, scope: !6)
!33 = !DILocation(line: 36, column: 112, scope: !6)
!34 = !DILocation(line: 37, column: 112, scope: !6)
!35 = !DILocation(line: 39, column: 112, scope: !6)
!36 = !DILocation(line: 40, column: 22, scope: !6)
!37 = !DILocation(line: 41, column: 22, scope: !6)
!38 = !DILocation(line: 45, column: 23, scope: !6)
!39 = !DILocation(line: 47, column: 25, scope: !6)
!40 = !DILocation(line: 256, column: 15, scope: !41, inlinedAt: !44)
!41 = distinct !DILexicalBlockFile(scope: !43, file: !42, discriminator: 0)
!42 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!43 = distinct !DILexicalBlockFile(scope: !6, file: !42, discriminator: 0)
!44 = !DILocation(line: 49, column: 27, scope: !6)
!45 = !DILocation(line: 286, column: 36, scope: !43, inlinedAt: !44)
!46 = !DILocation(line: 50, column: 31, scope: !6)
!47 = !DILocation(line: 50, column: 36, scope: !6)
!48 = !DILocation(line: 69, column: 24, scope: !6)
!49 = !DILocation(line: 70, column: 24, scope: !6)
!50 = !DILocation(line: 71, column: 24, scope: !6)
!51 = !DILocation(line: 72, column: 24, scope: !6)
!52 = !DILocation(line: 74, column: 24, scope: !6)
!53 = !DILocation(line: 78, column: 24, scope: !6)
!54 = !DILocation(line: 67, column: 24, scope: !6)
!55 = !DILocation(line: 51, column: 40, scope: !6)
!56 = !DILocation(line: 52, column: 31, scope: !6)
!57 = !DILocation(line: 57, column: 46, scope: !6)
!58 = !DILocation(line: 57, column: 39, scope: !6)
!59 = !DILocation(line: 57, column: 56, scope: !6)
!60 = !DILocation(line: 58, column: 35, scope: !6)
!61 = !DILocation(line: 58, column: 52, scope: !6)
!62 = !DILocation(line: 59, column: 35, scope: !6)
!63 = !DILocation(line: 59, column: 52, scope: !6)
!64 = !DILocation(line: 60, column: 35, scope: !6)
!65 = !DILocation(line: 60, column: 52, scope: !6)
!66 = !DILocation(line: 61, column: 35, scope: !6)
!67 = !DILocation(line: 61, column: 42, scope: !6)
!68 = !DILocation(line: 61, column: 95, scope: !6)
!69 = !DILocation(line: 62, column: 35, scope: !6)
!70 = !DILocation(line: 62, column: 52, scope: !6)
!71 = !DILocation(line: 57, column: 118, scope: !6)
!72 = !DILocation(line: 58, column: 114, scope: !6)
!73 = !DILocation(line: 59, column: 114, scope: !6)
!74 = !DILocation(line: 60, column: 114, scope: !6)
!75 = !DILocation(line: 62, column: 114, scope: !6)
!76 = !DILocation(line: 63, column: 24, scope: !6)
!77 = !DILocation(line: 64, column: 24, scope: !6)
!78 = !DILocation(line: 65, column: 24, scope: !6)
!79 = !DILocation(line: 77, column: 24, scope: !6)
!80 = !DILocation(line: 79, column: 24, scope: !6)
!81 = !DILocation(line: 81, column: 24, scope: !6)
!82 = !DILocation(line: 82, column: 56, scope: !6)
!83 = !DILocation(line: 51, column: 4, scope: !6)
