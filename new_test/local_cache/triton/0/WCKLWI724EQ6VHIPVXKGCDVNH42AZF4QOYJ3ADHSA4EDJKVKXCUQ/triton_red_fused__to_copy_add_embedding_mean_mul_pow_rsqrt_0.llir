; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/yi/cyihme7t354xdekku5rks7waotqdnz3mpo47q3uhqjtr5ixrgolb.py\00"
@assertMessage_0 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp4 < 128256\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !10 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %11 = icmp slt i32 %10, %6, !dbg !12
  %12 = sext i32 %10 to i64, !dbg !13
  %13 = getelementptr i64, ptr addrspace(1) %1, i64 %12, !dbg !13
  %14 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %15 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %16 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %17 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %18 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %19 = add i64 %18, 128256, !dbg !15
  %20 = icmp slt i64 %18, 0, !dbg !16
  %21 = select i1 %20, i64 %19, i64 %18, !dbg !17
  %22 = icmp ugt i64 %21, 128255, !dbg !18
  %.not2 = and i1 %11, %22, !dbg !19
  br i1 %.not2, label %23, label %24, !dbg !19

23:                                               ; preds = %9
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !19
  unreachable, !dbg !19

24:                                               ; preds = %9
  %25 = icmp slt i64 %17, 0, !dbg !16
  %26 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !20
  %27 = shl i32 %26, 2, !dbg !20
  %28 = and i32 %27, 4092, !dbg !20
  %29 = lshr i32 %26, 5, !dbg !20
  %30 = and i32 %26, 31, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %31 = shl i64 %17, 12, !dbg !21
  %32 = add i64 %31, 525336576, !dbg !21
  %33 = select i1 %25, i64 %32, i64 %31, !dbg !21
  %34 = zext nneg i32 %28 to i64, !dbg !22
  %35 = getelementptr half, ptr addrspace(1) %2, i64 %33, !dbg !23
  %36 = getelementptr half, ptr addrspace(1) %35, i64 %34, !dbg !23
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %36, i1 %11) #6, !dbg !24
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !24
  %39 = bitcast i32 %38 to <2 x half>, !dbg !24
  %40 = extractvalue { i32, i32 } %37, 1, !dbg !24
  %41 = bitcast i32 %40 to <2 x half>, !dbg !24
  %42 = extractelement <2 x half> %39, i64 0, !dbg !24
  %43 = extractelement <2 x half> %39, i64 1, !dbg !24
  %44 = extractelement <2 x half> %41, i64 0, !dbg !24
  %45 = extractelement <2 x half> %41, i64 1, !dbg !24
  %46 = fpext half %42 to float, !dbg !25
  %47 = fpext half %43 to float, !dbg !25
  %48 = fpext half %44 to float, !dbg !25
  %49 = fpext half %45 to float, !dbg !25
  %50 = fmul float %46, %46, !dbg !26
  %51 = fmul float %47, %47, !dbg !26
  %52 = fmul float %48, %48, !dbg !26
  %53 = fmul float %49, %49, !dbg !26
  %54 = shl i32 %10, 12, !dbg !27
  %55 = or disjoint i32 %28, %54, !dbg !28
  %56 = sext i32 %55 to i64, !dbg !29
  %57 = getelementptr half, ptr addrspace(1) %4, i64 %56, !dbg !29
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %38, i32 %40, ptr addrspace(1) %57, i1 %11) #6, !dbg !30
  %58 = fadd float %50, %51, !dbg !31
  %59 = fadd float %52, %58, !dbg !31
  %60 = fadd float %53, %59, !dbg !31
  %61 = select i1 %11, float %60, float 0.000000e+00, !dbg !31
  %62 = bitcast float %61 to i32, !dbg !36
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 16, i32 31), !dbg !36
  %64 = bitcast i32 %63 to float, !dbg !36
  %65 = fadd float %61, %64, !dbg !31
  %66 = bitcast float %65 to i32, !dbg !36
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 8, i32 31), !dbg !36
  %68 = bitcast i32 %67 to float, !dbg !36
  %69 = fadd float %65, %68, !dbg !31
  %70 = bitcast float %69 to i32, !dbg !36
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 4, i32 31), !dbg !36
  %72 = bitcast i32 %71 to float, !dbg !36
  %73 = fadd float %69, %72, !dbg !31
  %74 = bitcast float %73 to i32, !dbg !36
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 2, i32 31), !dbg !36
  %76 = bitcast i32 %75 to float, !dbg !36
  %77 = fadd float %73, %76, !dbg !31
  %78 = bitcast float %77 to i32, !dbg !36
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 1, i32 31), !dbg !36
  %80 = bitcast i32 %79 to float, !dbg !36
  %81 = fadd float %77, %80, !dbg !31
  %82 = and i32 %29, 31, !dbg !36
  %83 = icmp eq i32 %30, 0, !dbg !36
  %84 = getelementptr float, ptr addrspace(3) @global_smem, i32 %82, !dbg !36
  %85 = bitcast float %81 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %85, i1 %83) #6, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %86 = icmp slt i32 %26, 32, !dbg !36
  %87 = getelementptr float, ptr addrspace(3) @global_smem, i32 %26, !dbg !36
  %88 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %87, i1 %86) #6, !dbg !36
  %89 = bitcast i32 %88 to float, !dbg !36
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 16, i32 31), !dbg !36
  %91 = bitcast i32 %90 to float, !dbg !36
  %92 = fadd float %89, %91, !dbg !31
  %93 = bitcast float %92 to i32, !dbg !36
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 8, i32 31), !dbg !36
  %95 = bitcast i32 %94 to float, !dbg !36
  %96 = fadd float %92, %95, !dbg !31
  %97 = bitcast float %96 to i32, !dbg !36
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 4, i32 31), !dbg !36
  %99 = bitcast i32 %98 to float, !dbg !36
  %100 = fadd float %96, %99, !dbg !31
  %101 = bitcast float %100 to i32, !dbg !36
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 2, i32 31), !dbg !36
  %103 = bitcast i32 %102 to float, !dbg !36
  %104 = fadd float %100, %103, !dbg !31
  %105 = bitcast float %104 to i32, !dbg !36
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 1, i32 31), !dbg !36
  %107 = bitcast i32 %106 to float, !dbg !36
  %108 = fadd float %104, %107, !dbg !31
  %109 = and i1 %86, %83, !dbg !36
  %110 = bitcast float %108 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %110, i1 %109) #6, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %111 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !36
  %112 = tail call float @llvm.nvvm.div.full(float %111, float 4.096000e+03), !dbg !37
  %113 = fadd float %112, 0x3EE4F8B580000000, !dbg !38
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %.not.i = icmp eq i32 %114, 0, !dbg !39
  br i1 %.not.i, label %117, label %115, !dbg !39

115:                                              ; preds = %24
  %116 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %113), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

117:                                              ; preds = %24
  %118 = tail call float @llvm.nvvm.rsqrt.approx.f(float %113), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

__nv_rsqrtf.exit:                                 ; preds = %115, %117
  %.0.i = phi float [ %116, %115 ], [ %118, %117 ], !dbg !39
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %.not.i12 = icmp eq i32 %122, 0, !dbg !39
  br i1 %.not.i12, label %125, label %123, !dbg !39

123:                                              ; preds = %__nv_rsqrtf.exit
  %124 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %113), !dbg !39
  br label %__nv_rsqrtf.exit14, !dbg !39

125:                                              ; preds = %__nv_rsqrtf.exit
  %126 = tail call float @llvm.nvvm.rsqrt.approx.f(float %113), !dbg !39
  br label %__nv_rsqrtf.exit14, !dbg !39

__nv_rsqrtf.exit14:                               ; preds = %123, %125
  %.0.i13 = phi float [ %124, %123 ], [ %126, %125 ], !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !41
  %128 = and i32 %26, 1023, !dbg !42
  %129 = icmp eq i32 %128, 0, !dbg !42
  %130 = bitcast float %.0.i to i32, !dbg !42
  %131 = and i1 %129, %11, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %130, ptr addrspace(1) %127, i1 %131) #6, !dbg !42
  %132 = getelementptr half, ptr addrspace(1) %3, i64 %34, !dbg !43
  %133 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %132, i1 true) #6, !dbg !44
  %134 = extractvalue { i32, i32 } %133, 0, !dbg !44
  %135 = bitcast i32 %134 to <2 x half>, !dbg !44
  %136 = extractvalue { i32, i32 } %133, 1, !dbg !44
  %137 = bitcast i32 %136 to <2 x half>, !dbg !44
  %138 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %57, i1 %11) #6, !dbg !45
  %139 = extractvalue { i32, i32 } %138, 0, !dbg !45
  %140 = bitcast i32 %139 to <2 x half>, !dbg !45
  %141 = extractvalue { i32, i32 } %138, 1, !dbg !45
  %142 = bitcast i32 %141 to <2 x half>, !dbg !45
  %143 = getelementptr half, ptr addrspace(1) %5, i64 %56, !dbg !46
  %144 = fpext <2 x half> %135 to <2 x float>, !dbg !47
  %145 = fpext <2 x half> %140 to <2 x float>, !dbg !48
  %146 = insertelement <2 x float> poison, float %.0.i13, i64 0, !dbg !49
  %147 = shufflevector <2 x float> %146, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %148 = fmul <2 x float> %147, %145, !dbg !49
  %149 = fmul <2 x float> %148, %144, !dbg !50
  %150 = fptrunc <2 x float> %149 to <2 x half>, !dbg !51
  %151 = fpext <2 x half> %137 to <2 x float>, !dbg !47
  %152 = fpext <2 x half> %142 to <2 x float>, !dbg !48
  %153 = fmul <2 x float> %147, %152, !dbg !49
  %154 = fmul <2 x float> %153, %151, !dbg !50
  %155 = fptrunc <2 x float> %154 to <2 x half>, !dbg !51
  %156 = bitcast <2 x half> %150 to i32, !dbg !51
  %157 = bitcast <2 x half> %155 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %156, i32 %157, ptr addrspace(1) %143, i1 %11) #6, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyihme7t354xdekku5rks7waotqdnz3mpo47q3uhqjtr5ixrgolb.py", directory: "/tmp/torchinductor_root/yi")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 22, column: 28, scope: !10)
!12 = !DILocation(line: 24, column: 21, scope: !10)
!13 = !DILocation(line: 28, column: 30, scope: !10)
!14 = !DILocation(line: 28, column: 35, scope: !10)
!15 = !DILocation(line: 37, column: 22, scope: !10)
!16 = !DILocation(line: 38, column: 22, scope: !10)
!17 = !DILocation(line: 39, column: 36, scope: !10)
!18 = !DILocation(line: 40, column: 41, scope: !10)
!19 = !DILocation(line: 40, column: 69, scope: !10)
!20 = !DILocation(line: 25, column: 37, scope: !10)
!21 = !DILocation(line: 41, column: 46, scope: !10)
!22 = !DILocation(line: 41, column: 41, scope: !10)
!23 = !DILocation(line: 41, column: 34, scope: !10)
!24 = !DILocation(line: 41, column: 53, scope: !10)
!25 = !DILocation(line: 41, column: 115, scope: !10)
!26 = !DILocation(line: 43, column: 22, scope: !10)
!27 = !DILocation(line: 47, column: 41, scope: !10)
!28 = !DILocation(line: 47, column: 36, scope: !10)
!29 = !DILocation(line: 47, column: 29, scope: !10)
!30 = !DILocation(line: 47, column: 52, scope: !10)
!31 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !35)
!32 = distinct !DILexicalBlockFile(scope: !34, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!34 = distinct !DILexicalBlockFile(scope: !10, file: !33, discriminator: 0)
!35 = !DILocation(line: 48, column: 27, scope: !10)
!36 = !DILocation(line: 286, column: 36, scope: !34, inlinedAt: !35)
!37 = !DILocation(line: 50, column: 21, scope: !10)
!38 = !DILocation(line: 52, column: 20, scope: !10)
!39 = !DILocation(line: 53, column: 28, scope: !10)
!40 = !DILocation(line: 54, column: 4, scope: !10)
!41 = !DILocation(line: 55, column: 28, scope: !10)
!42 = !DILocation(line: 55, column: 40, scope: !10)
!43 = !DILocation(line: 62, column: 35, scope: !10)
!44 = !DILocation(line: 62, column: 42, scope: !10)
!45 = !DILocation(line: 63, column: 53, scope: !10)
!46 = !DILocation(line: 68, column: 29, scope: !10)
!47 = !DILocation(line: 62, column: 95, scope: !10)
!48 = !DILocation(line: 63, column: 115, scope: !10)
!49 = !DILocation(line: 65, column: 24, scope: !10)
!50 = !DILocation(line: 67, column: 24, scope: !10)
!51 = !DILocation(line: 68, column: 53, scope: !10)
!52 = !DILocation(line: 56, column: 4, scope: !10)
