; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_red_fused__to_copy_add_div_mul_pow_sum_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = shl i32 %10, 6, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = lshr i32 %12, 3, !dbg !11
  %14 = and i32 %13, 63, !dbg !11
  %15 = or disjoint i32 %14, %11, !dbg !12
  %16 = icmp slt i32 %15, %6, !dbg !13
  %17 = shl i32 %12, 3, !dbg !14
  %18 = and i32 %17, 56, !dbg !14
  %19 = shl i32 %15, 12, !dbg !15
  %invariant.op = or disjoint i32 %18, %19, !dbg !16
  %20 = zext nneg i32 %18 to i64, !dbg !16
  %21 = insertelement <8 x i1> poison, i1 %16, i64 0, !dbg !17
  %22 = shufflevector <8 x i1> %21, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !17
  br label %23, !dbg !16

23:                                               ; preds = %9, %23
  %indvars.iv = phi i64 [ 0, %9 ], [ %indvars.iv.next, %23 ]
  %24 = phi <8 x float> [ zeroinitializer, %9 ], [ %112, %23 ]
  %25 = or disjoint i64 %indvars.iv, %20, !dbg !18
  %26 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %26
  %27 = sext i32 %.reass to i64, !dbg !19
  %28 = getelementptr half, ptr addrspace(1) %1, i64 %27, !dbg !19
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %28, i1 %16) #2, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !20
  %31 = bitcast i32 %30 to <2 x half>, !dbg !20
  %32 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !20
  %33 = bitcast i32 %32 to <2 x half>, !dbg !20
  %34 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !20
  %35 = bitcast i32 %34 to <2 x half>, !dbg !20
  %36 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !20
  %37 = bitcast i32 %36 to <2 x half>, !dbg !20
  %38 = getelementptr half, ptr addrspace(1) %2, i64 %27, !dbg !21
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %38, i1 %16) #2, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !22
  %41 = bitcast i32 %40 to <2 x half>, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !22
  %43 = bitcast i32 %42 to <2 x half>, !dbg !22
  %44 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !22
  %45 = bitcast i32 %44 to <2 x half>, !dbg !22
  %46 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !22
  %47 = bitcast i32 %46 to <2 x half>, !dbg !22
  %48 = getelementptr half, ptr addrspace(1) %3, i64 %25, !dbg !23
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %48, i1 true) #2, !dbg !24
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !24
  %51 = bitcast i32 %50 to <2 x half>, !dbg !24
  %52 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !24
  %53 = bitcast i32 %52 to <2 x half>, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !24
  %55 = bitcast i32 %54 to <2 x half>, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !24
  %57 = bitcast i32 %56 to <2 x half>, !dbg !24
  %58 = getelementptr half, ptr addrspace(1) %4, i64 %27, !dbg !25
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %58, i1 %16) #2, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !26
  %61 = bitcast i32 %60 to <2 x half>, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !26
  %63 = bitcast i32 %62 to <2 x half>, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !26
  %65 = bitcast i32 %64 to <2 x half>, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !26
  %67 = bitcast i32 %66 to <2 x half>, !dbg !26
  %68 = shufflevector <2 x half> %31, <2 x half> %33, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %69 = shufflevector <2 x half> %35, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %70 = shufflevector <8 x half> %68, <8 x half> %69, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !27
  %71 = shufflevector <2 x half> %35, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %72 = shufflevector <8 x half> %70, <8 x half> %71, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !27
  %73 = shufflevector <2 x half> %37, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %74 = shufflevector <8 x half> %72, <8 x half> %73, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !27
  %75 = shufflevector <2 x half> %37, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %76 = shufflevector <8 x half> %74, <8 x half> %75, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !27
  %77 = fpext <8 x half> %76 to <8 x float>, !dbg !27
  %78 = shufflevector <2 x half> %41, <2 x half> %43, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %79 = shufflevector <2 x half> %45, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %80 = shufflevector <8 x half> %78, <8 x half> %79, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !28
  %81 = shufflevector <2 x half> %45, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %82 = shufflevector <8 x half> %80, <8 x half> %81, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !28
  %83 = shufflevector <2 x half> %47, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %84 = shufflevector <8 x half> %82, <8 x half> %83, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !28
  %85 = shufflevector <2 x half> %47, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %86 = shufflevector <8 x half> %84, <8 x half> %85, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !28
  %87 = fpext <8 x half> %86 to <8 x float>, !dbg !28
  %88 = shufflevector <2 x half> %51, <2 x half> %53, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %89 = shufflevector <2 x half> %55, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %90 = shufflevector <8 x half> %88, <8 x half> %89, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !29
  %91 = shufflevector <2 x half> %55, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %92 = shufflevector <8 x half> %90, <8 x half> %91, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !29
  %93 = shufflevector <2 x half> %57, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %94 = shufflevector <8 x half> %92, <8 x half> %93, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !29
  %95 = shufflevector <2 x half> %57, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %96 = shufflevector <8 x half> %94, <8 x half> %95, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !29
  %97 = fpext <8 x half> %96 to <8 x float>, !dbg !29
  %98 = shufflevector <2 x half> %61, <2 x half> %63, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %99 = shufflevector <2 x half> %65, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %100 = shufflevector <8 x half> %98, <8 x half> %99, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !30
  %101 = shufflevector <2 x half> %65, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %102 = shufflevector <8 x half> %100, <8 x half> %101, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !30
  %103 = shufflevector <2 x half> %67, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %104 = shufflevector <8 x half> %102, <8 x half> %103, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !30
  %105 = shufflevector <2 x half> %67, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %106 = shufflevector <8 x half> %104, <8 x half> %105, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !30
  %107 = fpext <8 x half> %106 to <8 x float>, !dbg !30
  %108 = fadd <8 x float> %77, %87, !dbg !31
  %109 = fmul <8 x float> %108, %97, !dbg !32
  %110 = fmul <8 x float> %109, %107, !dbg !33
  %111 = fadd <8 x float> %24, %110, !dbg !34
  %112 = select <8 x i1> %22, <8 x float> %111, <8 x float> %24, !dbg !17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !16
  %113 = icmp samesign ult i64 %indvars.iv, 4032, !dbg !16
  br i1 %113, label %23, label %114, !dbg !16

114:                                              ; preds = %23
  %shift = shufflevector <8 x float> %112, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %115 = fadd <8 x float> %112, %shift, !dbg !35
  %shift27 = shufflevector <8 x float> %112, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %116 = fadd <8 x float> %shift27, %115, !dbg !35
  %shift28 = shufflevector <8 x float> %112, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %117 = fadd <8 x float> %shift28, %116, !dbg !35
  %shift29 = shufflevector <8 x float> %112, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %118 = fadd <8 x float> %shift29, %117, !dbg !35
  %shift30 = shufflevector <8 x float> %112, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %119 = fadd <8 x float> %shift30, %118, !dbg !35
  %shift31 = shufflevector <8 x float> %112, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %120 = fadd <8 x float> %shift31, %119, !dbg !35
  %shift32 = shufflevector <8 x float> %112, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %121 = fadd <8 x float> %shift32, %120, !dbg !35
  %122 = extractelement <8 x float> %121, i64 0, !dbg !35
  %123 = bitcast float %122 to i32, !dbg !40
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 4, i32 31), !dbg !40
  %125 = bitcast i32 %124 to float, !dbg !40
  %126 = fadd float %122, %125, !dbg !35
  %127 = bitcast float %126 to i32, !dbg !40
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 2, i32 31), !dbg !40
  %129 = bitcast i32 %128 to float, !dbg !40
  %130 = fadd float %126, %129, !dbg !35
  %131 = bitcast float %130 to i32, !dbg !40
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 1, i32 31), !dbg !40
  %133 = bitcast i32 %132 to float, !dbg !40
  %134 = fadd float %130, %133, !dbg !35
  %135 = sext i32 %15 to i64, !dbg !41
  %136 = getelementptr float, ptr addrspace(1) %5, i64 %135, !dbg !41
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %16) #2, !dbg !42
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %16) #2, !dbg !42
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %16) #2, !dbg !42
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %16) #2, !dbg !42
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %16) #2, !dbg !42
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %16) #2, !dbg !42
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %16) #2, !dbg !42
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %16) #2, !dbg !42
  %145 = bitcast i32 %144 to float, !dbg !42
  %146 = fmul float %134, -5.000000e-01, !dbg !43
  %147 = fmul float %145, %145, !dbg !44
  %148 = fmul float %147, %145, !dbg !45
  %149 = fmul float %146, %148, !dbg !46
  %150 = fmul float %149, 0x3F30000000000000, !dbg !47
  %151 = insertelement <2 x float> poison, float %145, i64 0, !dbg !48
  %152 = shufflevector <2 x float> %151, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !48
  %153 = insertelement <2 x float> poison, float %150, i64 0, !dbg !49
  %154 = shufflevector <2 x float> %153, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  br label %155, !dbg !50

155:                                              ; preds = %114, %155
  %indvars.iv11 = phi i64 [ 0, %114 ], [ %indvars.iv.next12, %155 ]
  %156 = or disjoint i64 %indvars.iv11, %20, !dbg !51
  %157 = trunc nuw nsw i64 %indvars.iv11 to i32
  %.reass3 = or i32 %invariant.op, %157
  %158 = sext i32 %.reass3 to i64, !dbg !52
  %159 = getelementptr half, ptr addrspace(1) %0, i64 %158, !dbg !52
  %160 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %159, i1 %16) #2, !dbg !53
  %161 = extractvalue { i32, i32, i32, i32 } %160, 0, !dbg !53
  %162 = bitcast i32 %161 to <2 x half>, !dbg !53
  %163 = extractvalue { i32, i32, i32, i32 } %160, 1, !dbg !53
  %164 = bitcast i32 %163 to <2 x half>, !dbg !53
  %165 = extractvalue { i32, i32, i32, i32 } %160, 2, !dbg !53
  %166 = bitcast i32 %165 to <2 x half>, !dbg !53
  %167 = extractvalue { i32, i32, i32, i32 } %160, 3, !dbg !53
  %168 = bitcast i32 %167 to <2 x half>, !dbg !53
  %169 = getelementptr half, ptr addrspace(1) %1, i64 %158, !dbg !54
  %170 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %169, i1 %16) #2, !dbg !55
  %171 = extractvalue { i32, i32, i32, i32 } %170, 0, !dbg !55
  %172 = bitcast i32 %171 to <2 x half>, !dbg !55
  %173 = extractvalue { i32, i32, i32, i32 } %170, 1, !dbg !55
  %174 = bitcast i32 %173 to <2 x half>, !dbg !55
  %175 = extractvalue { i32, i32, i32, i32 } %170, 2, !dbg !55
  %176 = bitcast i32 %175 to <2 x half>, !dbg !55
  %177 = extractvalue { i32, i32, i32, i32 } %170, 3, !dbg !55
  %178 = bitcast i32 %177 to <2 x half>, !dbg !55
  %179 = getelementptr half, ptr addrspace(1) %2, i64 %158, !dbg !56
  %180 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %179, i1 %16) #2, !dbg !57
  %181 = extractvalue { i32, i32, i32, i32 } %180, 0, !dbg !57
  %182 = bitcast i32 %181 to <2 x half>, !dbg !57
  %183 = extractvalue { i32, i32, i32, i32 } %180, 1, !dbg !57
  %184 = bitcast i32 %183 to <2 x half>, !dbg !57
  %185 = extractvalue { i32, i32, i32, i32 } %180, 2, !dbg !57
  %186 = bitcast i32 %185 to <2 x half>, !dbg !57
  %187 = extractvalue { i32, i32, i32, i32 } %180, 3, !dbg !57
  %188 = bitcast i32 %187 to <2 x half>, !dbg !57
  %189 = getelementptr half, ptr addrspace(1) %3, i64 %156, !dbg !58
  %190 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %189, i1 true) #2, !dbg !59
  %191 = extractvalue { i32, i32, i32, i32 } %190, 0, !dbg !59
  %192 = bitcast i32 %191 to <2 x half>, !dbg !59
  %193 = extractvalue { i32, i32, i32, i32 } %190, 1, !dbg !59
  %194 = bitcast i32 %193 to <2 x half>, !dbg !59
  %195 = extractvalue { i32, i32, i32, i32 } %190, 2, !dbg !59
  %196 = bitcast i32 %195 to <2 x half>, !dbg !59
  %197 = extractvalue { i32, i32, i32, i32 } %190, 3, !dbg !59
  %198 = bitcast i32 %197 to <2 x half>, !dbg !59
  %199 = getelementptr half, ptr addrspace(1) %4, i64 %158, !dbg !60
  %200 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %199, i1 %16) #2, !dbg !61
  %201 = extractvalue { i32, i32, i32, i32 } %200, 0, !dbg !61
  %202 = bitcast i32 %201 to <2 x half>, !dbg !61
  %203 = extractvalue { i32, i32, i32, i32 } %200, 1, !dbg !61
  %204 = bitcast i32 %203 to <2 x half>, !dbg !61
  %205 = extractvalue { i32, i32, i32, i32 } %200, 2, !dbg !61
  %206 = bitcast i32 %205 to <2 x half>, !dbg !61
  %207 = extractvalue { i32, i32, i32, i32 } %200, 3, !dbg !61
  %208 = bitcast i32 %207 to <2 x half>, !dbg !61
  %209 = fpext <2 x half> %162 to <2 x float>, !dbg !62
  %210 = fpext <2 x half> %172 to <2 x float>, !dbg !63
  %211 = fpext <2 x half> %182 to <2 x float>, !dbg !64
  %212 = fpext <2 x half> %192 to <2 x float>, !dbg !65
  %213 = fpext <2 x half> %202 to <2 x float>, !dbg !66
  %214 = fadd <2 x float> %210, %211, !dbg !67
  %215 = fmul <2 x float> %214, %212, !dbg !68
  %216 = fmul <2 x float> %215, %152, !dbg !48
  %217 = fmul <2 x float> %213, splat (float 2.000000e+00), !dbg !69
  %218 = fmul <2 x float> %154, %217, !dbg !49
  %219 = fadd <2 x float> %216, %218, !dbg !70
  %220 = fadd <2 x float> %219, %209, !dbg !71
  %221 = fptrunc <2 x float> %220 to <2 x half>, !dbg !72
  %222 = fpext <2 x half> %164 to <2 x float>, !dbg !62
  %223 = fpext <2 x half> %174 to <2 x float>, !dbg !63
  %224 = fpext <2 x half> %184 to <2 x float>, !dbg !64
  %225 = fpext <2 x half> %194 to <2 x float>, !dbg !65
  %226 = fpext <2 x half> %204 to <2 x float>, !dbg !66
  %227 = fadd <2 x float> %223, %224, !dbg !67
  %228 = fmul <2 x float> %227, %225, !dbg !68
  %229 = fmul <2 x float> %228, %152, !dbg !48
  %230 = fmul <2 x float> %226, splat (float 2.000000e+00), !dbg !69
  %231 = fmul <2 x float> %154, %230, !dbg !49
  %232 = fadd <2 x float> %229, %231, !dbg !70
  %233 = fadd <2 x float> %232, %222, !dbg !71
  %234 = fptrunc <2 x float> %233 to <2 x half>, !dbg !72
  %235 = fpext <2 x half> %166 to <2 x float>, !dbg !62
  %236 = fpext <2 x half> %176 to <2 x float>, !dbg !63
  %237 = fpext <2 x half> %186 to <2 x float>, !dbg !64
  %238 = fpext <2 x half> %196 to <2 x float>, !dbg !65
  %239 = fpext <2 x half> %206 to <2 x float>, !dbg !66
  %240 = fadd <2 x float> %236, %237, !dbg !67
  %241 = fmul <2 x float> %240, %238, !dbg !68
  %242 = fmul <2 x float> %241, %152, !dbg !48
  %243 = fmul <2 x float> %239, splat (float 2.000000e+00), !dbg !69
  %244 = fmul <2 x float> %154, %243, !dbg !49
  %245 = fadd <2 x float> %242, %244, !dbg !70
  %246 = fadd <2 x float> %245, %235, !dbg !71
  %247 = fptrunc <2 x float> %246 to <2 x half>, !dbg !72
  %248 = fpext <2 x half> %168 to <2 x float>, !dbg !62
  %249 = fpext <2 x half> %178 to <2 x float>, !dbg !63
  %250 = fpext <2 x half> %188 to <2 x float>, !dbg !64
  %251 = fpext <2 x half> %198 to <2 x float>, !dbg !65
  %252 = fpext <2 x half> %208 to <2 x float>, !dbg !66
  %253 = fadd <2 x float> %249, %250, !dbg !67
  %254 = fmul <2 x float> %253, %251, !dbg !68
  %255 = fmul <2 x float> %254, %152, !dbg !48
  %256 = fmul <2 x float> %252, splat (float 2.000000e+00), !dbg !69
  %257 = fmul <2 x float> %154, %256, !dbg !49
  %258 = fadd <2 x float> %255, %257, !dbg !70
  %259 = fadd <2 x float> %258, %248, !dbg !71
  %260 = fptrunc <2 x float> %259 to <2 x half>, !dbg !72
  %261 = bitcast <2 x half> %221 to i32, !dbg !72
  %262 = bitcast <2 x half> %234 to i32, !dbg !72
  %263 = bitcast <2 x half> %247 to i32, !dbg !72
  %264 = bitcast <2 x half> %260 to i32, !dbg !72
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %261, i32 %262, i32 %263, i32 %264, ptr addrspace(1) %159, i1 %16) #2, !dbg !72
  %indvars.iv.next12 = add nuw nsw i64 %indvars.iv11, 64, !dbg !50
  %265 = icmp samesign ult i64 %indvars.iv11, 4032, !dbg !50
  br i1 %265, label %155, label %266, !dbg !50

266:                                              ; preds = %155
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjwsbuhbra2efptdjgfhieilyoqbtzcnj6zivbmmeofuaj63ntgo.py", directory: "/tmp/torchinductor_root/jw")
!4 = !{ptr @triton_red_fused__to_copy_add_div_mul_pow_sum_4, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_mul_pow_sum_4", linkageName: "triton_red_fused__to_copy_add_div_mul_pow_sum_4", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 29, column: 40, scope: !6)
!17 = !DILocation(line: 46, column: 50, scope: !6)
!18 = !DILocation(line: 30, column: 31, scope: !6)
!19 = !DILocation(line: 35, column: 34, scope: !6)
!20 = !DILocation(line: 35, column: 51, scope: !6)
!21 = !DILocation(line: 36, column: 34, scope: !6)
!22 = !DILocation(line: 36, column: 51, scope: !6)
!23 = !DILocation(line: 37, column: 34, scope: !6)
!24 = !DILocation(line: 37, column: 41, scope: !6)
!25 = !DILocation(line: 38, column: 34, scope: !6)
!26 = !DILocation(line: 38, column: 51, scope: !6)
!27 = !DILocation(line: 35, column: 112, scope: !6)
!28 = !DILocation(line: 36, column: 112, scope: !6)
!29 = !DILocation(line: 37, column: 94, scope: !6)
!30 = !DILocation(line: 38, column: 112, scope: !6)
!31 = !DILocation(line: 39, column: 22, scope: !6)
!32 = !DILocation(line: 40, column: 22, scope: !6)
!33 = !DILocation(line: 43, column: 22, scope: !6)
!34 = !DILocation(line: 45, column: 25, scope: !6)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !39)
!36 = distinct !DILexicalBlockFile(scope: !38, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!38 = distinct !DILexicalBlockFile(scope: !6, file: !37, discriminator: 0)
!39 = !DILocation(line: 47, column: 27, scope: !6)
!40 = !DILocation(line: 286, column: 36, scope: !38, inlinedAt: !39)
!41 = !DILocation(line: 48, column: 31, scope: !6)
!42 = !DILocation(line: 48, column: 36, scope: !6)
!43 = !DILocation(line: 65, column: 24, scope: !6)
!44 = !DILocation(line: 66, column: 24, scope: !6)
!45 = !DILocation(line: 67, column: 24, scope: !6)
!46 = !DILocation(line: 68, column: 24, scope: !6)
!47 = !DILocation(line: 70, column: 24, scope: !6)
!48 = !DILocation(line: 63, column: 24, scope: !6)
!49 = !DILocation(line: 74, column: 24, scope: !6)
!50 = !DILocation(line: 49, column: 40, scope: !6)
!51 = !DILocation(line: 50, column: 31, scope: !6)
!52 = !DILocation(line: 55, column: 39, scope: !6)
!53 = !DILocation(line: 55, column: 56, scope: !6)
!54 = !DILocation(line: 56, column: 35, scope: !6)
!55 = !DILocation(line: 56, column: 52, scope: !6)
!56 = !DILocation(line: 57, column: 35, scope: !6)
!57 = !DILocation(line: 57, column: 52, scope: !6)
!58 = !DILocation(line: 58, column: 35, scope: !6)
!59 = !DILocation(line: 58, column: 42, scope: !6)
!60 = !DILocation(line: 59, column: 35, scope: !6)
!61 = !DILocation(line: 59, column: 52, scope: !6)
!62 = !DILocation(line: 55, column: 118, scope: !6)
!63 = !DILocation(line: 56, column: 114, scope: !6)
!64 = !DILocation(line: 57, column: 114, scope: !6)
!65 = !DILocation(line: 58, column: 95, scope: !6)
!66 = !DILocation(line: 59, column: 114, scope: !6)
!67 = !DILocation(line: 60, column: 24, scope: !6)
!68 = !DILocation(line: 61, column: 24, scope: !6)
!69 = !DILocation(line: 73, column: 24, scope: !6)
!70 = !DILocation(line: 75, column: 24, scope: !6)
!71 = !DILocation(line: 77, column: 24, scope: !6)
!72 = !DILocation(line: 78, column: 56, scope: !6)
!73 = !DILocation(line: 49, column: 4, scope: !6)
