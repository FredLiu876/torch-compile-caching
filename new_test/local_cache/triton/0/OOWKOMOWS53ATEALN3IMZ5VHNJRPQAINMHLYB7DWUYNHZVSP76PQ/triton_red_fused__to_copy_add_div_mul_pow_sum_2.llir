; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_red_fused__to_copy_add_div_mul_pow_sum_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 6, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = lshr i32 %10, 3, !dbg !11
  %12 = and i32 %11, 63, !dbg !11
  %13 = or disjoint i32 %12, %9, !dbg !12
  %14 = icmp slt i32 %13, %4, !dbg !13
  %15 = shl i32 %10, 3, !dbg !14
  %16 = and i32 %15, 56, !dbg !14
  %17 = shl i32 %13, 12, !dbg !15
  %invariant.op = or disjoint i32 %16, %17, !dbg !16
  %18 = zext nneg i32 %16 to i64, !dbg !16
  %19 = insertelement <8 x i1> poison, i1 %14, i64 0, !dbg !17
  %20 = shufflevector <8 x i1> %19, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !17
  br label %21, !dbg !16

21:                                               ; preds = %7, %21
  %indvars.iv = phi i64 [ 0, %7 ], [ %indvars.iv.next, %21 ]
  %22 = phi <8 x float> [ zeroinitializer, %7 ], [ %89, %21 ]
  %23 = or disjoint i64 %indvars.iv, %18, !dbg !18
  %24 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %24
  %25 = sext i32 %.reass to i64, !dbg !19
  %26 = getelementptr half, ptr addrspace(1) %0, i64 %25, !dbg !19
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %26, i1 %14) #2, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !20
  %29 = bitcast i32 %28 to <2 x half>, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !20
  %31 = bitcast i32 %30 to <2 x half>, !dbg !20
  %32 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !20
  %33 = bitcast i32 %32 to <2 x half>, !dbg !20
  %34 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !20
  %35 = bitcast i32 %34 to <2 x half>, !dbg !20
  %36 = getelementptr half, ptr addrspace(1) %1, i64 %23, !dbg !21
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %36, i1 true) #2, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !22
  %39 = bitcast i32 %38 to <2 x half>, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !22
  %41 = bitcast i32 %40 to <2 x half>, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !22
  %43 = bitcast i32 %42 to <2 x half>, !dbg !22
  %44 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !22
  %45 = bitcast i32 %44 to <2 x half>, !dbg !22
  %46 = getelementptr half, ptr addrspace(1) %2, i64 %25, !dbg !23
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %46, i1 %14) #2, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !24
  %49 = bitcast i32 %48 to <2 x half>, !dbg !24
  %50 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !24
  %51 = bitcast i32 %50 to <2 x half>, !dbg !24
  %52 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !24
  %53 = bitcast i32 %52 to <2 x half>, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !24
  %55 = bitcast i32 %54 to <2 x half>, !dbg !24
  %56 = shufflevector <2 x half> %29, <2 x half> %31, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %57 = shufflevector <2 x half> %33, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %58 = shufflevector <8 x half> %56, <8 x half> %57, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !25
  %59 = shufflevector <2 x half> %33, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %60 = shufflevector <8 x half> %58, <8 x half> %59, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !25
  %61 = shufflevector <2 x half> %35, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %62 = shufflevector <8 x half> %60, <8 x half> %61, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !25
  %63 = shufflevector <2 x half> %35, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %64 = shufflevector <8 x half> %62, <8 x half> %63, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !25
  %65 = fpext <8 x half> %64 to <8 x float>, !dbg !25
  %66 = shufflevector <2 x half> %39, <2 x half> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %67 = shufflevector <2 x half> %43, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %68 = shufflevector <8 x half> %66, <8 x half> %67, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !26
  %69 = shufflevector <2 x half> %43, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %70 = shufflevector <8 x half> %68, <8 x half> %69, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !26
  %71 = shufflevector <2 x half> %45, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %72 = shufflevector <8 x half> %70, <8 x half> %71, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !26
  %73 = shufflevector <2 x half> %45, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %74 = shufflevector <8 x half> %72, <8 x half> %73, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !26
  %75 = fpext <8 x half> %74 to <8 x float>, !dbg !26
  %76 = shufflevector <2 x half> %49, <2 x half> %51, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %77 = shufflevector <2 x half> %53, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %78 = shufflevector <8 x half> %76, <8 x half> %77, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !27
  %79 = shufflevector <2 x half> %53, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %80 = shufflevector <8 x half> %78, <8 x half> %79, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !27
  %81 = shufflevector <2 x half> %55, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %82 = shufflevector <8 x half> %80, <8 x half> %81, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !27
  %83 = shufflevector <2 x half> %55, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %84 = shufflevector <8 x half> %82, <8 x half> %83, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !27
  %85 = fpext <8 x half> %84 to <8 x float>, !dbg !27
  %86 = fmul <8 x float> %65, %75, !dbg !28
  %87 = fmul <8 x float> %86, %85, !dbg !29
  %88 = fadd <8 x float> %22, %87, !dbg !30
  %89 = select <8 x i1> %20, <8 x float> %88, <8 x float> %22, !dbg !17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !16
  %90 = icmp samesign ult i64 %indvars.iv, 4032, !dbg !16
  br i1 %90, label %21, label %91, !dbg !16

91:                                               ; preds = %21
  %shift = shufflevector <8 x float> %89, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %92 = fadd <8 x float> %89, %shift, !dbg !31
  %shift27 = shufflevector <8 x float> %89, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %93 = fadd <8 x float> %shift27, %92, !dbg !31
  %shift28 = shufflevector <8 x float> %89, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %94 = fadd <8 x float> %shift28, %93, !dbg !31
  %shift29 = shufflevector <8 x float> %89, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %95 = fadd <8 x float> %shift29, %94, !dbg !31
  %shift30 = shufflevector <8 x float> %89, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %96 = fadd <8 x float> %shift30, %95, !dbg !31
  %shift31 = shufflevector <8 x float> %89, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %97 = fadd <8 x float> %shift31, %96, !dbg !31
  %shift32 = shufflevector <8 x float> %89, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %98 = fadd <8 x float> %shift32, %97, !dbg !31
  %99 = extractelement <8 x float> %98, i64 0, !dbg !31
  %100 = bitcast float %99 to i32, !dbg !36
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 4, i32 31), !dbg !36
  %102 = bitcast i32 %101 to float, !dbg !36
  %103 = fadd float %99, %102, !dbg !31
  %104 = bitcast float %103 to i32, !dbg !36
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 2, i32 31), !dbg !36
  %106 = bitcast i32 %105 to float, !dbg !36
  %107 = fadd float %103, %106, !dbg !31
  %108 = bitcast float %107 to i32, !dbg !36
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 1, i32 31), !dbg !36
  %110 = bitcast i32 %109 to float, !dbg !36
  %111 = fadd float %107, %110, !dbg !31
  %112 = sext i32 %13 to i64, !dbg !37
  %113 = getelementptr float, ptr addrspace(1) %3, i64 %112, !dbg !37
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %14) #2, !dbg !38
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %14) #2, !dbg !38
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %14) #2, !dbg !38
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %14) #2, !dbg !38
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %14) #2, !dbg !38
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %14) #2, !dbg !38
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %14) #2, !dbg !38
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %14) #2, !dbg !38
  %122 = bitcast i32 %121 to float, !dbg !38
  %123 = fmul float %111, -5.000000e-01, !dbg !39
  %124 = fmul float %122, %122, !dbg !40
  %125 = fmul float %124, %122, !dbg !41
  %126 = fmul float %123, %125, !dbg !42
  %127 = fmul float %126, 0x3F30000000000000, !dbg !43
  %128 = insertelement <2 x float> poison, float %122, i64 0, !dbg !44
  %129 = shufflevector <2 x float> %128, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !44
  %130 = insertelement <2 x float> poison, float %127, i64 0, !dbg !45
  %131 = shufflevector <2 x float> %130, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !45
  br label %132, !dbg !46

132:                                              ; preds = %91, %132
  %indvars.iv11 = phi i64 [ 0, %91 ], [ %indvars.iv.next12, %132 ]
  %133 = or disjoint i64 %indvars.iv11, %18, !dbg !47
  %134 = trunc nuw nsw i64 %indvars.iv11 to i32
  %.reass3 = or i32 %invariant.op, %134
  %135 = sext i32 %.reass3 to i64, !dbg !48
  %136 = getelementptr half, ptr addrspace(1) %0, i64 %135, !dbg !48
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %136, i1 %14) #2, !dbg !49
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !49
  %139 = bitcast i32 %138 to <2 x half>, !dbg !49
  %140 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !49
  %141 = bitcast i32 %140 to <2 x half>, !dbg !49
  %142 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !49
  %143 = bitcast i32 %142 to <2 x half>, !dbg !49
  %144 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !49
  %145 = bitcast i32 %144 to <2 x half>, !dbg !49
  %146 = getelementptr half, ptr addrspace(1) %1, i64 %133, !dbg !50
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %146, i1 true) #2, !dbg !51
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !51
  %149 = bitcast i32 %148 to <2 x half>, !dbg !51
  %150 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !51
  %151 = bitcast i32 %150 to <2 x half>, !dbg !51
  %152 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !51
  %153 = bitcast i32 %152 to <2 x half>, !dbg !51
  %154 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !51
  %155 = bitcast i32 %154 to <2 x half>, !dbg !51
  %156 = getelementptr half, ptr addrspace(1) %2, i64 %135, !dbg !52
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %156, i1 %14) #2, !dbg !53
  %158 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !53
  %159 = bitcast i32 %158 to <2 x half>, !dbg !53
  %160 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !53
  %161 = bitcast i32 %160 to <2 x half>, !dbg !53
  %162 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !53
  %163 = bitcast i32 %162 to <2 x half>, !dbg !53
  %164 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !53
  %165 = bitcast i32 %164 to <2 x half>, !dbg !53
  %166 = fpext <2 x half> %139 to <2 x float>, !dbg !54
  %167 = fpext <2 x half> %149 to <2 x float>, !dbg !55
  %168 = fpext <2 x half> %159 to <2 x float>, !dbg !56
  %169 = fmul <2 x float> %166, %167, !dbg !57
  %170 = fmul <2 x float> %169, %129, !dbg !44
  %171 = fmul <2 x float> %168, splat (float 2.000000e+00), !dbg !58
  %172 = fmul <2 x float> %131, %171, !dbg !45
  %173 = fadd <2 x float> %170, %172, !dbg !59
  %174 = fptrunc <2 x float> %173 to <2 x half>, !dbg !60
  %175 = fpext <2 x half> %141 to <2 x float>, !dbg !54
  %176 = fpext <2 x half> %151 to <2 x float>, !dbg !55
  %177 = fpext <2 x half> %161 to <2 x float>, !dbg !56
  %178 = fmul <2 x float> %175, %176, !dbg !57
  %179 = fmul <2 x float> %178, %129, !dbg !44
  %180 = fmul <2 x float> %177, splat (float 2.000000e+00), !dbg !58
  %181 = fmul <2 x float> %131, %180, !dbg !45
  %182 = fadd <2 x float> %179, %181, !dbg !59
  %183 = fptrunc <2 x float> %182 to <2 x half>, !dbg !60
  %184 = fpext <2 x half> %143 to <2 x float>, !dbg !54
  %185 = fpext <2 x half> %153 to <2 x float>, !dbg !55
  %186 = fpext <2 x half> %163 to <2 x float>, !dbg !56
  %187 = fmul <2 x float> %184, %185, !dbg !57
  %188 = fmul <2 x float> %187, %129, !dbg !44
  %189 = fmul <2 x float> %186, splat (float 2.000000e+00), !dbg !58
  %190 = fmul <2 x float> %131, %189, !dbg !45
  %191 = fadd <2 x float> %188, %190, !dbg !59
  %192 = fptrunc <2 x float> %191 to <2 x half>, !dbg !60
  %193 = fpext <2 x half> %145 to <2 x float>, !dbg !54
  %194 = fpext <2 x half> %155 to <2 x float>, !dbg !55
  %195 = fpext <2 x half> %165 to <2 x float>, !dbg !56
  %196 = fmul <2 x float> %193, %194, !dbg !57
  %197 = fmul <2 x float> %196, %129, !dbg !44
  %198 = fmul <2 x float> %195, splat (float 2.000000e+00), !dbg !58
  %199 = fmul <2 x float> %131, %198, !dbg !45
  %200 = fadd <2 x float> %197, %199, !dbg !59
  %201 = fptrunc <2 x float> %200 to <2 x half>, !dbg !60
  %202 = bitcast <2 x half> %174 to i32, !dbg !60
  %203 = bitcast <2 x half> %183 to i32, !dbg !60
  %204 = bitcast <2 x half> %192 to i32, !dbg !60
  %205 = bitcast <2 x half> %201 to i32, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %202, i32 %203, i32 %204, i32 %205, ptr addrspace(1) %136, i1 %14) #2, !dbg !60
  %indvars.iv.next12 = add nuw nsw i64 %indvars.iv11, 64, !dbg !46
  %206 = icmp samesign ult i64 %indvars.iv11, 4032, !dbg !46
  br i1 %206, label %132, label %207, !dbg !46

207:                                              ; preds = %132
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py", directory: "/tmp/torchinductor_root/zm")
!4 = !{ptr @triton_red_fused__to_copy_add_div_mul_pow_sum_2, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_mul_pow_sum_2", linkageName: "triton_red_fused__to_copy_add_div_mul_pow_sum_2", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 50, scope: !6)
!16 = !DILocation(line: 29, column: 40, scope: !6)
!17 = !DILocation(line: 44, column: 48, scope: !6)
!18 = !DILocation(line: 30, column: 31, scope: !6)
!19 = !DILocation(line: 35, column: 38, scope: !6)
!20 = !DILocation(line: 35, column: 55, scope: !6)
!21 = !DILocation(line: 36, column: 34, scope: !6)
!22 = !DILocation(line: 36, column: 41, scope: !6)
!23 = !DILocation(line: 37, column: 34, scope: !6)
!24 = !DILocation(line: 37, column: 51, scope: !6)
!25 = !DILocation(line: 35, column: 116, scope: !6)
!26 = !DILocation(line: 36, column: 94, scope: !6)
!27 = !DILocation(line: 37, column: 112, scope: !6)
!28 = !DILocation(line: 38, column: 22, scope: !6)
!29 = !DILocation(line: 41, column: 22, scope: !6)
!30 = !DILocation(line: 43, column: 23, scope: !6)
!31 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !35)
!32 = distinct !DILexicalBlockFile(scope: !34, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!34 = distinct !DILexicalBlockFile(scope: !6, file: !33, discriminator: 0)
!35 = !DILocation(line: 45, column: 25, scope: !6)
!36 = !DILocation(line: 286, column: 36, scope: !34, inlinedAt: !35)
!37 = !DILocation(line: 46, column: 31, scope: !6)
!38 = !DILocation(line: 46, column: 36, scope: !6)
!39 = !DILocation(line: 60, column: 23, scope: !6)
!40 = !DILocation(line: 61, column: 24, scope: !6)
!41 = !DILocation(line: 62, column: 24, scope: !6)
!42 = !DILocation(line: 63, column: 24, scope: !6)
!43 = !DILocation(line: 65, column: 24, scope: !6)
!44 = !DILocation(line: 58, column: 24, scope: !6)
!45 = !DILocation(line: 69, column: 24, scope: !6)
!46 = !DILocation(line: 47, column: 40, scope: !6)
!47 = !DILocation(line: 48, column: 31, scope: !6)
!48 = !DILocation(line: 53, column: 39, scope: !6)
!49 = !DILocation(line: 53, column: 56, scope: !6)
!50 = !DILocation(line: 54, column: 35, scope: !6)
!51 = !DILocation(line: 54, column: 42, scope: !6)
!52 = !DILocation(line: 55, column: 35, scope: !6)
!53 = !DILocation(line: 55, column: 52, scope: !6)
!54 = !DILocation(line: 53, column: 118, scope: !6)
!55 = !DILocation(line: 54, column: 95, scope: !6)
!56 = !DILocation(line: 55, column: 114, scope: !6)
!57 = !DILocation(line: 56, column: 24, scope: !6)
!58 = !DILocation(line: 68, column: 24, scope: !6)
!59 = !DILocation(line: 70, column: 24, scope: !6)
!60 = !DILocation(line: 72, column: 56, scope: !6)
!61 = !DILocation(line: 47, column: 4, scope: !6)
