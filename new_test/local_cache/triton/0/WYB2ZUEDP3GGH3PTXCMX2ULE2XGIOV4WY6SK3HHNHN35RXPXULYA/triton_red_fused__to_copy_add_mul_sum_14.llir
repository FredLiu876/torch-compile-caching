; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_mul_sum_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11, i32 %12, ptr addrspace(1) readnone captures(none) %13) local_unnamed_addr !dbg !6 {
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %16 = shl i32 %15, 6, !dbg !10
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %18 = and i32 %17, 63, !dbg !11
  %19 = or disjoint i32 %16, %18, !dbg !12
  %20 = lshr i32 %17, 6, !dbg !13
  %21 = and i32 %20, 3, !dbg !13
  %22 = icmp sgt i32 %12, 0, !dbg !14
  br i1 %22, label %.lr.ph, label %._crit_edge, !dbg !14

.lr.ph:                                           ; preds = %14, %.lr.ph
  %23 = phi float [ %79, %.lr.ph ], [ 0.000000e+00, %14 ]
  %24 = phi float [ %72, %.lr.ph ], [ 0.000000e+00, %14 ]
  %25 = phi i32 [ %80, %.lr.ph ], [ 0, %14 ]
  %26 = or disjoint i32 %25, %21, !dbg !15
  %27 = icmp slt i32 %26, %12, !dbg !16
  %28 = shl i32 %26, 12, !dbg !17
  %29 = add i32 %28, %19, !dbg !18
  %30 = sext i32 %29 to i64, !dbg !19
  %31 = getelementptr half, ptr addrspace(1) %0, i64 %30, !dbg !19
  %32 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %31, i1 %27) #3, !dbg !20
  %33 = getelementptr half, ptr addrspace(1) %1, i64 %30, !dbg !21
  %34 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %33, i1 %27) #3, !dbg !22
  %35 = getelementptr half, ptr addrspace(1) %2, i64 %30, !dbg !23
  %36 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %35, i1 %27) #3, !dbg !24
  %37 = getelementptr half, ptr addrspace(1) %3, i64 %30, !dbg !25
  %38 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %37, i1 %27) #3, !dbg !26
  %39 = sext i32 %26 to i64, !dbg !27
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !27
  %41 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %40, i1 %27) #3, !dbg !28
  %42 = bitcast i32 %41 to float, !dbg !28
  %43 = getelementptr half, ptr addrspace(1) %5, i64 %30, !dbg !29
  %44 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %43, i1 %27) #3, !dbg !30
  %45 = bitcast i16 %44 to half, !dbg !30
  %46 = fpext half %45 to float, !dbg !31
  %47 = getelementptr half, ptr addrspace(1) %6, i64 %30, !dbg !32
  %48 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %47, i1 %27) #3, !dbg !33
  %49 = bitcast i16 %48 to half, !dbg !33
  %50 = fpext half %49 to float, !dbg !34
  %51 = getelementptr half, ptr addrspace(1) %7, i64 %30, !dbg !35
  %52 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %51, i1 %27) #3, !dbg !36
  %53 = bitcast i16 %52 to half, !dbg !36
  %54 = fpext half %53 to float, !dbg !37
  %55 = getelementptr float, ptr addrspace(1) %8, i64 %39, !dbg !38
  %56 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %55, i1 %27) #3, !dbg !39
  %57 = bitcast i32 %56 to float, !dbg !39
  %58 = insertelement <2 x i16> poison, i16 %32, i64 0, !dbg !20
  %59 = insertelement <2 x i16> %58, i16 %36, i64 1, !dbg !20
  %60 = bitcast <2 x i16> %59 to <2 x half>, !dbg !20
  %61 = fpext <2 x half> %60 to <2 x float>, !dbg !40
  %62 = insertelement <2 x i16> poison, i16 %34, i64 0, !dbg !22
  %63 = insertelement <2 x i16> %62, i16 %38, i64 1, !dbg !22
  %64 = bitcast <2 x i16> %63 to <2 x half>, !dbg !22
  %65 = fpext <2 x half> %64 to <2 x float>, !dbg !41
  %66 = fadd <2 x float> %61, %65, !dbg !42
  %67 = extractelement <2 x float> %66, i64 1, !dbg !43
  %68 = fmul float %67, %42, !dbg !43
  %69 = extractelement <2 x float> %66, i64 0, !dbg !44
  %70 = fmul float %69, %68, !dbg !44
  %71 = fadd float %24, %70, !dbg !45
  %72 = select i1 %27, float %71, float %24, !dbg !46
  %73 = fadd float %46, %50, !dbg !47
  %74 = fadd float %73, %54, !dbg !48
  %75 = extractelement <2 x float> %61, i64 1, !dbg !49
  %76 = fmul float %75, %57, !dbg !49
  %77 = fmul float %74, %76, !dbg !50
  %78 = fadd float %23, %77, !dbg !51
  %79 = select i1 %27, float %78, float %23, !dbg !52
  %80 = add i32 %25, 4, !dbg !14
  %81 = icmp slt i32 %80, %12, !dbg !14
  br i1 %81, label %.lr.ph, label %._crit_edge.loopexit, !dbg !14

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %82 = bitcast float %72 to <1 x i32>, !dbg !53
  %83 = bitcast float %79 to <1 x i32>, !dbg !57
  br label %._crit_edge, !dbg !53

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %14
  %.lcssa2 = phi <1 x i32> [ zeroinitializer, %14 ], [ %82, %._crit_edge.loopexit ]
  %.lcssa = phi <1 x i32> [ zeroinitializer, %14 ], [ %83, %._crit_edge.loopexit ]
  %84 = shl nuw nsw i32 %18, 2, !dbg !53
  %85 = or disjoint i32 %84, %21, !dbg !53
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i32 %85, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %.lcssa2, i1 true) #3, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %87 = icmp slt i32 %17, 256, !dbg !53
  %88 = getelementptr float, ptr addrspace(3) @global_smem, i32 %17, !dbg !53
  %89 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %88, i1 %87) #3, !dbg !53
  %90 = bitcast i32 %89 to float, !dbg !53
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 2, i32 31), !dbg !53
  %92 = bitcast i32 %91 to float, !dbg !53
  %93 = fadd float %90, %92, !dbg !59
  %94 = bitcast float %93 to i32, !dbg !53
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 1, i32 31), !dbg !53
  %96 = bitcast i32 %95 to float, !dbg !53
  %97 = fadd float %93, %96, !dbg !59
  %98 = and i32 %17, 3, !dbg !53
  %99 = icmp eq i32 %98, 0, !dbg !53
  %100 = and i1 %87, %99, !dbg !53
  %101 = bitcast float %97 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %101, i1 %100) #3, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %102 = getelementptr float, ptr addrspace(3) @global_smem, i32 %84, !dbg !53
  %103 = load float, ptr addrspace(3) %102, align 16, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %.lcssa, i1 true) #3, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %104 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %88, i1 %87) #3, !dbg !57
  %105 = bitcast i32 %104 to float, !dbg !57
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 2, i32 31), !dbg !57
  %107 = bitcast i32 %106 to float, !dbg !57
  %108 = fadd float %105, %107, !dbg !61
  %109 = bitcast float %108 to i32, !dbg !57
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 1, i32 31), !dbg !57
  %111 = bitcast i32 %110 to float, !dbg !57
  %112 = fadd float %108, %111, !dbg !61
  %113 = bitcast float %112 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %113, i1 %100) #3, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %114 = load float, ptr addrspace(3) %102, align 16, !dbg !57
  %115 = sext i32 %19 to i64, !dbg !62
  %116 = getelementptr half, ptr addrspace(1) %9, i64 %115, !dbg !62
  %117 = fptrunc float %103 to half, !dbg !63
  %118 = and i32 %17, 192, !dbg !63
  %119 = icmp eq i32 %118, 0, !dbg !63
  %120 = bitcast half %117 to i16, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %120, ptr addrspace(1) %116, i1 %119) #3, !dbg !63
  %121 = getelementptr half, ptr addrspace(1) %10, i64 %115, !dbg !64
  %122 = fptrunc float %114 to half, !dbg !65
  %123 = bitcast half %122 to i16, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %123, ptr addrspace(1) %121, i1 %119) #3, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cghfemwp5je4gtzbsncc3ktqr4kitawxmdiwtkz7ekfqatqqwhde.py", directory: "/tmp/torchinductor_root/gh")
!4 = !{ptr @triton_red_fused__to_copy_add_mul_sum_14, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mul_sum_14", linkageName: "triton_red_fused__to_copy_add_mul_sum_14", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 37, scope: !6)
!14 = !DILocation(line: 30, column: 40, scope: !6)
!15 = !DILocation(line: 31, column: 31, scope: !6)
!16 = !DILocation(line: 32, column: 29, scope: !6)
!17 = !DILocation(line: 36, column: 44, scope: !6)
!18 = !DILocation(line: 36, column: 39, scope: !6)
!19 = !DILocation(line: 36, column: 34, scope: !6)
!20 = !DILocation(line: 36, column: 51, scope: !6)
!21 = !DILocation(line: 37, column: 34, scope: !6)
!22 = !DILocation(line: 37, column: 51, scope: !6)
!23 = !DILocation(line: 38, column: 34, scope: !6)
!24 = !DILocation(line: 38, column: 51, scope: !6)
!25 = !DILocation(line: 39, column: 34, scope: !6)
!26 = !DILocation(line: 39, column: 51, scope: !6)
!27 = !DILocation(line: 40, column: 34, scope: !6)
!28 = !DILocation(line: 40, column: 41, scope: !6)
!29 = !DILocation(line: 41, column: 35, scope: !6)
!30 = !DILocation(line: 41, column: 52, scope: !6)
!31 = !DILocation(line: 41, column: 106, scope: !6)
!32 = !DILocation(line: 42, column: 35, scope: !6)
!33 = !DILocation(line: 42, column: 52, scope: !6)
!34 = !DILocation(line: 42, column: 106, scope: !6)
!35 = !DILocation(line: 43, column: 35, scope: !6)
!36 = !DILocation(line: 43, column: 52, scope: !6)
!37 = !DILocation(line: 43, column: 106, scope: !6)
!38 = !DILocation(line: 44, column: 35, scope: !6)
!39 = !DILocation(line: 44, column: 42, scope: !6)
!40 = !DILocation(line: 36, column: 105, scope: !6)
!41 = !DILocation(line: 37, column: 105, scope: !6)
!42 = !DILocation(line: 45, column: 22, scope: !6)
!43 = !DILocation(line: 48, column: 22, scope: !6)
!44 = !DILocation(line: 50, column: 23, scope: !6)
!45 = !DILocation(line: 52, column: 25, scope: !6)
!46 = !DILocation(line: 53, column: 42, scope: !6)
!47 = !DILocation(line: 54, column: 24, scope: !6)
!48 = !DILocation(line: 55, column: 24, scope: !6)
!49 = !DILocation(line: 57, column: 24, scope: !6)
!50 = !DILocation(line: 59, column: 24, scope: !6)
!51 = !DILocation(line: 61, column: 25, scope: !6)
!52 = !DILocation(line: 62, column: 42, scope: !6)
!53 = !DILocation(line: 286, column: 36, scope: !54, inlinedAt: !56)
!54 = distinct !DILexicalBlockFile(scope: !6, file: !55, discriminator: 0)
!55 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!56 = !DILocation(line: 63, column: 27, scope: !6)
!57 = !DILocation(line: 286, column: 36, scope: !54, inlinedAt: !58)
!58 = !DILocation(line: 64, column: 27, scope: !6)
!59 = !DILocation(line: 256, column: 15, scope: !60, inlinedAt: !56)
!60 = distinct !DILexicalBlockFile(scope: !54, file: !55, discriminator: 0)
!61 = !DILocation(line: 256, column: 15, scope: !60, inlinedAt: !58)
!62 = !DILocation(line: 65, column: 25, scope: !6)
!63 = !DILocation(line: 65, column: 37, scope: !6)
!64 = !DILocation(line: 66, column: 25, scope: !6)
!65 = !DILocation(line: 66, column: 37, scope: !6)
!66 = !DILocation(line: 66, column: 4, scope: !6)
