; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [73 x i8] c"./local_cache/yi/cyihme7t354xdekku5rks7waotqdnz3mpo47q3uhqjtr5ixrgolb.py\00"
@assertMessage_0 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp4 < 128256\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !10 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %11 = icmp slt i32 %10, %6, !dbg !12
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %13 = sext i32 %10 to i64, !dbg !14
  %14 = getelementptr i64, ptr addrspace(1) %1, i64 %13, !dbg !14
  %15 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 %11) #6, !dbg !15
  %16 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 %11) #6, !dbg !15
  %17 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 %11) #6, !dbg !15
  %18 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 %11) #6, !dbg !15
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %14, i1 %11) #6, !dbg !15
  %20 = add i64 %19, 128256, !dbg !16
  %21 = icmp slt i64 %19, 0, !dbg !17
  %22 = select i1 %21, i64 %20, i64 %19, !dbg !18
  %23 = icmp ugt i64 %22, 128255, !dbg !19
  %.not3 = and i1 %11, %23, !dbg !20
  br i1 %.not3, label %120, label %.split.preheader, !dbg !21

.split.preheader:                                 ; preds = %9
  %24 = icmp slt i64 %18, 0, !dbg !17
  %25 = shl i64 %18, 12, !dbg !20
  %26 = add i64 %25, 525336576, !dbg !20
  %27 = select i1 %24, i64 %26, i64 %25, !dbg !20
  %28 = getelementptr half, ptr addrspace(1) %2, i64 %27
  %29 = shl i32 %12, 2, !dbg !13
  %30 = and i32 %29, 2044, !dbg !13
  %31 = shl i32 %10, 12, !dbg !22
  %invariant.op = or disjoint i32 %30, %31, !dbg !23
  %32 = lshr i32 %12, 5, !dbg !13
  %33 = and i32 %12, 31, !dbg !13
  %34 = zext nneg i32 %30 to i64, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %35 = getelementptr half, ptr addrspace(1) %28, i64 %34, !dbg !24
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %35, i1 %11) #6, !dbg !25
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !25
  %38 = bitcast i32 %37 to <2 x half>, !dbg !25
  %39 = extractvalue { i32, i32 } %36, 1, !dbg !25
  %40 = bitcast i32 %39 to <2 x half>, !dbg !25
  %41 = sext i32 %invariant.op to i64, !dbg !26
  %42 = getelementptr half, ptr addrspace(1) %4, i64 %41, !dbg !26
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %37, i32 %39, ptr addrspace(1) %42, i1 %11) #6, !dbg !27
  %43 = or disjoint i64 %34, 2048, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %44 = getelementptr half, ptr addrspace(1) %28, i64 %43, !dbg !24
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %44, i1 %11) #6, !dbg !25
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !25
  %47 = bitcast i32 %46 to <2 x half>, !dbg !25
  %48 = extractvalue { i32, i32 } %45, 1, !dbg !25
  %49 = bitcast i32 %48 to <2 x half>, !dbg !25
  %50 = fpext <2 x half> %38 to <2 x float>, !dbg !29
  %51 = fmul <2 x float> %50, %50, !dbg !30
  %52 = fpext <2 x half> %47 to <2 x float>, !dbg !29
  %53 = fmul <2 x float> %52, %52, !dbg !30
  %54 = fadd <2 x float> %51, %53, !dbg !31
  %55 = fpext <2 x half> %40 to <2 x float>, !dbg !29
  %56 = fmul <2 x float> %55, %55, !dbg !30
  %57 = fpext <2 x half> %49 to <2 x float>, !dbg !29
  %58 = fmul <2 x float> %57, %57, !dbg !30
  %59 = fadd <2 x float> %56, %58, !dbg !31
  %.reass.1 = or disjoint i32 %invariant.op, 2048
  %60 = sext i32 %.reass.1 to i64, !dbg !26
  %61 = getelementptr half, ptr addrspace(1) %4, i64 %60, !dbg !26
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %46, i32 %48, ptr addrspace(1) %61, i1 %11) #6, !dbg !27
  %shift = shufflevector <2 x float> %54, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !32
  %62 = fadd <2 x float> %54, %shift, !dbg !32
  %63 = fadd <2 x float> %59, %62, !dbg !32
  %shift22 = shufflevector <2 x float> %59, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !32
  %64 = fadd <2 x float> %shift22, %63, !dbg !32
  %65 = extractelement <2 x float> %64, i64 0, !dbg !32
  %66 = select i1 %11, float %65, float 0.000000e+00, !dbg !32
  %67 = bitcast float %66 to i32, !dbg !37
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 16, i32 31), !dbg !37
  %69 = bitcast i32 %68 to float, !dbg !37
  %70 = fadd float %66, %69, !dbg !32
  %71 = bitcast float %70 to i32, !dbg !37
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 8, i32 31), !dbg !37
  %73 = bitcast i32 %72 to float, !dbg !37
  %74 = fadd float %70, %73, !dbg !32
  %75 = bitcast float %74 to i32, !dbg !37
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 4, i32 31), !dbg !37
  %77 = bitcast i32 %76 to float, !dbg !37
  %78 = fadd float %74, %77, !dbg !32
  %79 = bitcast float %78 to i32, !dbg !37
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 2, i32 31), !dbg !37
  %81 = bitcast i32 %80 to float, !dbg !37
  %82 = fadd float %78, %81, !dbg !32
  %83 = bitcast float %82 to i32, !dbg !37
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 1, i32 31), !dbg !37
  %85 = bitcast i32 %84 to float, !dbg !37
  %86 = fadd float %82, %85, !dbg !32
  %87 = and i32 %32, 15, !dbg !37
  %88 = icmp eq i32 %33, 0, !dbg !37
  %89 = zext nneg i32 %87 to i64, !dbg !37
  %90 = getelementptr float, ptr addrspace(3) @global_smem, i64 %89, !dbg !37
  %91 = bitcast float %86 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 %88) #6, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %92 = icmp slt i32 %12, 16, !dbg !37
  %93 = sext i32 %12 to i64, !dbg !37
  %94 = getelementptr float, ptr addrspace(3) @global_smem, i64 %93, !dbg !37
  %95 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %94, i1 %92) #6, !dbg !37
  %96 = bitcast i32 %95 to float, !dbg !37
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 8, i32 31), !dbg !37
  %98 = bitcast i32 %97 to float, !dbg !37
  %99 = fadd float %96, %98, !dbg !32
  %100 = bitcast float %99 to i32, !dbg !37
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 4, i32 31), !dbg !37
  %102 = bitcast i32 %101 to float, !dbg !37
  %103 = fadd float %99, %102, !dbg !32
  %104 = bitcast float %103 to i32, !dbg !37
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 2, i32 31), !dbg !37
  %106 = bitcast i32 %105 to float, !dbg !37
  %107 = fadd float %103, %106, !dbg !32
  %108 = bitcast float %107 to i32, !dbg !37
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 1, i32 31), !dbg !37
  %110 = bitcast i32 %109 to float, !dbg !37
  %111 = fadd float %107, %110, !dbg !32
  %112 = and i32 %12, 15, !dbg !37
  %113 = icmp eq i32 %112, 0, !dbg !37
  %114 = and i1 %92, %113, !dbg !37
  %115 = bitcast float %111 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %115, i1 %114) #6, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %116 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !37
  %117 = tail call float @llvm.nvvm.div.full(float %116, float 4.096000e+03), !dbg !38
  %118 = fadd float %117, 0x3EE4F8B580000000, !dbg !39
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %.not.i = icmp eq i32 %119, 0, !dbg !40
  br i1 %.not.i, label %123, label %121, !dbg !40

120:                                              ; preds = %9
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !21
  unreachable, !dbg !21

121:                                              ; preds = %.split.preheader
  %122 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %118), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

123:                                              ; preds = %.split.preheader
  %124 = tail call float @llvm.nvvm.rsqrt.approx.f(float %118), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

__nv_rsqrtf.exit:                                 ; preds = %121, %123
  %.0.i = phi float [ %122, %121 ], [ %124, %123 ], !dbg !40
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %.not.i13 = icmp eq i32 %128, 0, !dbg !40
  br i1 %.not.i13, label %131, label %129, !dbg !40

129:                                              ; preds = %__nv_rsqrtf.exit
  %130 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %118), !dbg !40
  br label %__nv_rsqrtf.exit15, !dbg !40

131:                                              ; preds = %__nv_rsqrtf.exit
  %132 = tail call float @llvm.nvvm.rsqrt.approx.f(float %118), !dbg !40
  br label %__nv_rsqrtf.exit15, !dbg !40

__nv_rsqrtf.exit15:                               ; preds = %129, %131
  %.0.i14 = phi float [ %130, %129 ], [ %132, %131 ], !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !42
  %134 = and i32 %12, 511, !dbg !43
  %135 = icmp eq i32 %134, 0, !dbg !43
  %136 = bitcast float %.0.i to i32, !dbg !43
  %137 = and i1 %135, %11, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %136, ptr addrspace(1) %133, i1 %137) #6, !dbg !43
  %138 = getelementptr half, ptr addrspace(1) %3, i64 %34, !dbg !44
  %139 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %138, i1 true) #6, !dbg !45
  %140 = extractvalue { i32, i32 } %139, 0, !dbg !45
  %141 = bitcast i32 %140 to <2 x half>, !dbg !45
  %142 = extractvalue { i32, i32 } %139, 1, !dbg !45
  %143 = bitcast i32 %142 to <2 x half>, !dbg !45
  %144 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %42, i1 %11) #6, !dbg !46
  %145 = extractvalue { i32, i32 } %144, 0, !dbg !46
  %146 = bitcast i32 %145 to <2 x half>, !dbg !46
  %147 = extractvalue { i32, i32 } %144, 1, !dbg !46
  %148 = bitcast i32 %147 to <2 x half>, !dbg !46
  %149 = getelementptr half, ptr addrspace(1) %5, i64 %41, !dbg !47
  %150 = fpext <2 x half> %141 to <2 x float>, !dbg !48
  %151 = fpext <2 x half> %146 to <2 x float>, !dbg !49
  %152 = insertelement <2 x float> poison, float %.0.i14, i64 0, !dbg !50
  %153 = shufflevector <2 x float> %152, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %154 = fmul <2 x float> %153, %151, !dbg !50
  %155 = fmul <2 x float> %154, %150, !dbg !51
  %156 = fptrunc <2 x float> %155 to <2 x half>, !dbg !52
  %157 = fpext <2 x half> %143 to <2 x float>, !dbg !48
  %158 = fpext <2 x half> %148 to <2 x float>, !dbg !49
  %159 = fmul <2 x float> %153, %158, !dbg !50
  %160 = fmul <2 x float> %159, %157, !dbg !51
  %161 = fptrunc <2 x float> %160 to <2 x half>, !dbg !52
  %162 = bitcast <2 x half> %156 to i32, !dbg !52
  %163 = bitcast <2 x half> %161 to i32, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %149, i1 %11) #6, !dbg !52
  %164 = getelementptr half, ptr addrspace(1) %3, i64 %43, !dbg !44
  %165 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %164, i1 true) #6, !dbg !45
  %166 = extractvalue { i32, i32 } %165, 0, !dbg !45
  %167 = bitcast i32 %166 to <2 x half>, !dbg !45
  %168 = extractvalue { i32, i32 } %165, 1, !dbg !45
  %169 = bitcast i32 %168 to <2 x half>, !dbg !45
  %170 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %61, i1 %11) #6, !dbg !46
  %171 = extractvalue { i32, i32 } %170, 0, !dbg !46
  %172 = bitcast i32 %171 to <2 x half>, !dbg !46
  %173 = extractvalue { i32, i32 } %170, 1, !dbg !46
  %174 = bitcast i32 %173 to <2 x half>, !dbg !46
  %175 = getelementptr half, ptr addrspace(1) %5, i64 %60, !dbg !47
  %176 = fpext <2 x half> %167 to <2 x float>, !dbg !48
  %177 = fpext <2 x half> %172 to <2 x float>, !dbg !49
  %178 = fmul <2 x float> %153, %177, !dbg !50
  %179 = fmul <2 x float> %178, %176, !dbg !51
  %180 = fptrunc <2 x float> %179 to <2 x half>, !dbg !52
  %181 = fpext <2 x half> %169 to <2 x float>, !dbg !48
  %182 = fpext <2 x half> %174 to <2 x float>, !dbg !49
  %183 = fmul <2 x float> %153, %182, !dbg !50
  %184 = fmul <2 x float> %183, %181, !dbg !51
  %185 = fptrunc <2 x float> %184 to <2 x half>, !dbg !52
  %186 = bitcast <2 x half> %180 to i32, !dbg !52
  %187 = bitcast <2 x half> %185 to i32, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %186, i32 %187, ptr addrspace(1) %175, i1 %11) #6, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyihme7t354xdekku5rks7waotqdnz3mpo47q3uhqjtr5ixrgolb.py", directory: "./local_cache/yi")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 22, column: 28, scope: !10)
!12 = !DILocation(line: 24, column: 21, scope: !10)
!13 = !DILocation(line: 25, column: 37, scope: !10)
!14 = !DILocation(line: 28, column: 30, scope: !10)
!15 = !DILocation(line: 28, column: 35, scope: !10)
!16 = !DILocation(line: 37, column: 22, scope: !10)
!17 = !DILocation(line: 38, column: 22, scope: !10)
!18 = !DILocation(line: 39, column: 36, scope: !10)
!19 = !DILocation(line: 40, column: 41, scope: !10)
!20 = !DILocation(line: 41, column: 46, scope: !10)
!21 = !DILocation(line: 40, column: 69, scope: !10)
!22 = !DILocation(line: 47, column: 41, scope: !10)
!23 = !DILocation(line: 30, column: 40, scope: !10)
!24 = !DILocation(line: 41, column: 34, scope: !10)
!25 = !DILocation(line: 41, column: 53, scope: !10)
!26 = !DILocation(line: 47, column: 29, scope: !10)
!27 = !DILocation(line: 47, column: 52, scope: !10)
!28 = !DILocation(line: 31, column: 31, scope: !10)
!29 = !DILocation(line: 41, column: 115, scope: !10)
!30 = !DILocation(line: 43, column: 22, scope: !10)
!31 = !DILocation(line: 45, column: 25, scope: !10)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !36)
!33 = distinct !DILexicalBlockFile(scope: !35, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!35 = distinct !DILexicalBlockFile(scope: !10, file: !34, discriminator: 0)
!36 = !DILocation(line: 48, column: 27, scope: !10)
!37 = !DILocation(line: 286, column: 36, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 50, column: 21, scope: !10)
!39 = !DILocation(line: 52, column: 20, scope: !10)
!40 = !DILocation(line: 53, column: 28, scope: !10)
!41 = !DILocation(line: 54, column: 4, scope: !10)
!42 = !DILocation(line: 55, column: 28, scope: !10)
!43 = !DILocation(line: 55, column: 40, scope: !10)
!44 = !DILocation(line: 62, column: 35, scope: !10)
!45 = !DILocation(line: 62, column: 42, scope: !10)
!46 = !DILocation(line: 63, column: 53, scope: !10)
!47 = !DILocation(line: 68, column: 29, scope: !10)
!48 = !DILocation(line: 62, column: 95, scope: !10)
!49 = !DILocation(line: 63, column: 115, scope: !10)
!50 = !DILocation(line: 65, column: 24, scope: !10)
!51 = !DILocation(line: 67, column: 24, scope: !10)
!52 = !DILocation(line: 68, column: 53, scope: !10)
!53 = !DILocation(line: 56, column: 4, scope: !10)
