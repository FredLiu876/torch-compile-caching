; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_mul_sum_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11, i32 %12, ptr addrspace(1) readnone captures(none) %13) local_unnamed_addr !dbg !6 {
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %17 = and i32 %16, 63, !dbg !10
  %18 = icmp sgt i32 %12, 0, !dbg !11
  br i1 %18, label %.lr.ph, label %._crit_edge, !dbg !11

.lr.ph:                                           ; preds = %14, %.lr.ph
  %19 = phi float [ %75, %.lr.ph ], [ 0.000000e+00, %14 ]
  %20 = phi float [ %68, %.lr.ph ], [ 0.000000e+00, %14 ]
  %21 = phi i32 [ %76, %.lr.ph ], [ 0, %14 ]
  %22 = or disjoint i32 %21, %17, !dbg !12
  %23 = icmp slt i32 %22, %12, !dbg !13
  %24 = shl i32 %22, 12, !dbg !14
  %25 = add i32 %24, %15, !dbg !15
  %26 = sext i32 %25 to i64, !dbg !16
  %27 = getelementptr half, ptr addrspace(1) %0, i64 %26, !dbg !16
  %28 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %27, i1 %23) #3, !dbg !17
  %29 = getelementptr half, ptr addrspace(1) %1, i64 %26, !dbg !18
  %30 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %29, i1 %23) #3, !dbg !19
  %31 = getelementptr half, ptr addrspace(1) %2, i64 %26, !dbg !20
  %32 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %31, i1 %23) #3, !dbg !21
  %33 = getelementptr half, ptr addrspace(1) %3, i64 %26, !dbg !22
  %34 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %33, i1 %23) #3, !dbg !23
  %35 = sext i32 %22 to i64, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %36, i1 %23) #3, !dbg !25
  %38 = bitcast i32 %37 to float, !dbg !25
  %39 = getelementptr half, ptr addrspace(1) %5, i64 %26, !dbg !26
  %40 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %39, i1 %23) #3, !dbg !27
  %41 = bitcast i16 %40 to half, !dbg !27
  %42 = fpext half %41 to float, !dbg !28
  %43 = getelementptr half, ptr addrspace(1) %6, i64 %26, !dbg !29
  %44 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %43, i1 %23) #3, !dbg !30
  %45 = bitcast i16 %44 to half, !dbg !30
  %46 = fpext half %45 to float, !dbg !31
  %47 = getelementptr half, ptr addrspace(1) %7, i64 %26, !dbg !32
  %48 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %47, i1 %23) #3, !dbg !33
  %49 = bitcast i16 %48 to half, !dbg !33
  %50 = fpext half %49 to float, !dbg !34
  %51 = getelementptr float, ptr addrspace(1) %8, i64 %35, !dbg !35
  %52 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %51, i1 %23) #3, !dbg !36
  %53 = bitcast i32 %52 to float, !dbg !36
  %54 = insertelement <2 x i16> poison, i16 %28, i64 0, !dbg !17
  %55 = insertelement <2 x i16> %54, i16 %32, i64 1, !dbg !17
  %56 = bitcast <2 x i16> %55 to <2 x half>, !dbg !17
  %57 = fpext <2 x half> %56 to <2 x float>, !dbg !37
  %58 = insertelement <2 x i16> poison, i16 %30, i64 0, !dbg !19
  %59 = insertelement <2 x i16> %58, i16 %34, i64 1, !dbg !19
  %60 = bitcast <2 x i16> %59 to <2 x half>, !dbg !19
  %61 = fpext <2 x half> %60 to <2 x float>, !dbg !38
  %62 = fadd <2 x float> %57, %61, !dbg !39
  %63 = extractelement <2 x float> %62, i64 1, !dbg !40
  %64 = fmul float %63, %38, !dbg !40
  %65 = extractelement <2 x float> %62, i64 0, !dbg !41
  %66 = fmul float %65, %64, !dbg !41
  %67 = fadd float %20, %66, !dbg !42
  %68 = select i1 %23, float %67, float %20, !dbg !43
  %69 = fadd float %42, %46, !dbg !44
  %70 = fadd float %69, %50, !dbg !45
  %71 = extractelement <2 x float> %57, i64 1, !dbg !46
  %72 = fmul float %71, %53, !dbg !46
  %73 = fmul float %70, %72, !dbg !47
  %74 = fadd float %19, %73, !dbg !48
  %75 = select i1 %23, float %74, float %19, !dbg !49
  %76 = add i32 %21, 64, !dbg !11
  %77 = icmp slt i32 %76, %12, !dbg !11
  br i1 %77, label %.lr.ph, label %._crit_edge, !dbg !11

._crit_edge:                                      ; preds = %.lr.ph, %14
  %.lcssa2 = phi float [ 0.000000e+00, %14 ], [ %68, %.lr.ph ], !dbg !50
  %.lcssa = phi float [ 0.000000e+00, %14 ], [ %75, %.lr.ph ], !dbg !51
  %78 = lshr i32 %16, 5, !dbg !10
  %79 = and i32 %16, 31, !dbg !10
  %80 = bitcast float %.lcssa2 to i32, !dbg !52
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 16, i32 31), !dbg !52
  %82 = bitcast i32 %81 to float, !dbg !52
  %83 = fadd float %.lcssa2, %82, !dbg !56
  %84 = bitcast float %83 to i32, !dbg !52
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 8, i32 31), !dbg !52
  %86 = bitcast i32 %85 to float, !dbg !52
  %87 = fadd float %83, %86, !dbg !56
  %88 = bitcast float %87 to i32, !dbg !52
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 4, i32 31), !dbg !52
  %90 = bitcast i32 %89 to float, !dbg !52
  %91 = fadd float %87, %90, !dbg !56
  %92 = bitcast float %91 to i32, !dbg !52
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 2, i32 31), !dbg !52
  %94 = bitcast i32 %93 to float, !dbg !52
  %95 = fadd float %91, %94, !dbg !56
  %96 = bitcast float %95 to i32, !dbg !52
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 1, i32 31), !dbg !52
  %98 = bitcast i32 %97 to float, !dbg !52
  %99 = fadd float %95, %98, !dbg !56
  %100 = and i32 %78, 1, !dbg !52
  %101 = icmp eq i32 %79, 0, !dbg !52
  %102 = getelementptr float, ptr addrspace(3) @global_smem, i32 %100, !dbg !52
  %103 = bitcast float %99 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 %101) #3, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %104 = icmp slt i32 %16, 2, !dbg !52
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i32 %16, !dbg !52
  %106 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %105, i1 %104) #3, !dbg !52
  %107 = bitcast i32 %106 to float, !dbg !52
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 1, i32 31), !dbg !52
  %109 = bitcast i32 %108 to float, !dbg !52
  %110 = fadd float %107, %109, !dbg !56
  %111 = and i32 %16, 1, !dbg !52
  %112 = icmp eq i32 %111, 0, !dbg !52
  %113 = and i1 %104, %112, !dbg !52
  %114 = bitcast float %110 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %114, i1 %113) #3, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %115 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %116 = bitcast float %.lcssa to i32, !dbg !58
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 16, i32 31), !dbg !58
  %118 = bitcast i32 %117 to float, !dbg !58
  %119 = fadd float %.lcssa, %118, !dbg !60
  %120 = bitcast float %119 to i32, !dbg !58
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 8, i32 31), !dbg !58
  %122 = bitcast i32 %121 to float, !dbg !58
  %123 = fadd float %119, %122, !dbg !60
  %124 = bitcast float %123 to i32, !dbg !58
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 4, i32 31), !dbg !58
  %126 = bitcast i32 %125 to float, !dbg !58
  %127 = fadd float %123, %126, !dbg !60
  %128 = bitcast float %127 to i32, !dbg !58
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 2, i32 31), !dbg !58
  %130 = bitcast i32 %129 to float, !dbg !58
  %131 = fadd float %127, %130, !dbg !60
  %132 = bitcast float %131 to i32, !dbg !58
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 1, i32 31), !dbg !58
  %134 = bitcast i32 %133 to float, !dbg !58
  %135 = fadd float %131, %134, !dbg !60
  %136 = bitcast float %135 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %136, i1 %101) #3, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %137 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %105, i1 %104) #3, !dbg !58
  %138 = bitcast i32 %137 to float, !dbg !58
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 1, i32 31), !dbg !58
  %140 = bitcast i32 %139 to float, !dbg !58
  %141 = fadd float %138, %140, !dbg !60
  %142 = bitcast float %141 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %142, i1 %113) #3, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %143 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !58
  %144 = sext i32 %15 to i64, !dbg !61
  %145 = getelementptr half, ptr addrspace(1) %9, i64 %144, !dbg !61
  %146 = fptrunc float %115 to half, !dbg !62
  %147 = icmp eq i32 %17, 0, !dbg !62
  %148 = bitcast half %146 to i16, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %148, ptr addrspace(1) %145, i1 %147) #3, !dbg !62
  %149 = getelementptr half, ptr addrspace(1) %10, i64 %144, !dbg !63
  %150 = fptrunc float %143 to half, !dbg !64
  %151 = bitcast half %150 to i16, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %151, ptr addrspace(1) %149, i1 %147) #3, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cz4raaxbxby7dltdikbrpmyoxvbaywto5wc2t7rus6zhnzkqrtmy.py", directory: "/tmp/torchinductor_root/z4")
!4 = !{ptr @triton_red_fused__to_copy_add_mul_sum_14, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mul_sum_14", linkageName: "triton_red_fused__to_copy_add_mul_sum_14", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 25, column: 37, scope: !6)
!11 = !DILocation(line: 30, column: 40, scope: !6)
!12 = !DILocation(line: 31, column: 31, scope: !6)
!13 = !DILocation(line: 32, column: 29, scope: !6)
!14 = !DILocation(line: 36, column: 44, scope: !6)
!15 = !DILocation(line: 36, column: 39, scope: !6)
!16 = !DILocation(line: 36, column: 34, scope: !6)
!17 = !DILocation(line: 36, column: 51, scope: !6)
!18 = !DILocation(line: 37, column: 34, scope: !6)
!19 = !DILocation(line: 37, column: 51, scope: !6)
!20 = !DILocation(line: 38, column: 34, scope: !6)
!21 = !DILocation(line: 38, column: 51, scope: !6)
!22 = !DILocation(line: 39, column: 34, scope: !6)
!23 = !DILocation(line: 39, column: 51, scope: !6)
!24 = !DILocation(line: 40, column: 34, scope: !6)
!25 = !DILocation(line: 40, column: 41, scope: !6)
!26 = !DILocation(line: 41, column: 35, scope: !6)
!27 = !DILocation(line: 41, column: 52, scope: !6)
!28 = !DILocation(line: 41, column: 106, scope: !6)
!29 = !DILocation(line: 42, column: 35, scope: !6)
!30 = !DILocation(line: 42, column: 52, scope: !6)
!31 = !DILocation(line: 42, column: 106, scope: !6)
!32 = !DILocation(line: 43, column: 35, scope: !6)
!33 = !DILocation(line: 43, column: 52, scope: !6)
!34 = !DILocation(line: 43, column: 106, scope: !6)
!35 = !DILocation(line: 44, column: 35, scope: !6)
!36 = !DILocation(line: 44, column: 42, scope: !6)
!37 = !DILocation(line: 36, column: 105, scope: !6)
!38 = !DILocation(line: 37, column: 105, scope: !6)
!39 = !DILocation(line: 45, column: 22, scope: !6)
!40 = !DILocation(line: 48, column: 22, scope: !6)
!41 = !DILocation(line: 50, column: 23, scope: !6)
!42 = !DILocation(line: 52, column: 25, scope: !6)
!43 = !DILocation(line: 53, column: 42, scope: !6)
!44 = !DILocation(line: 54, column: 24, scope: !6)
!45 = !DILocation(line: 55, column: 24, scope: !6)
!46 = !DILocation(line: 57, column: 24, scope: !6)
!47 = !DILocation(line: 59, column: 24, scope: !6)
!48 = !DILocation(line: 61, column: 25, scope: !6)
!49 = !DILocation(line: 62, column: 42, scope: !6)
!50 = !DILocation(line: 28, column: 44, scope: !6)
!51 = !DILocation(line: 29, column: 44, scope: !6)
!52 = !DILocation(line: 286, column: 36, scope: !53, inlinedAt: !55)
!53 = distinct !DILexicalBlockFile(scope: !6, file: !54, discriminator: 0)
!54 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!55 = !DILocation(line: 63, column: 27, scope: !6)
!56 = !DILocation(line: 256, column: 15, scope: !57, inlinedAt: !55)
!57 = distinct !DILexicalBlockFile(scope: !53, file: !54, discriminator: 0)
!58 = !DILocation(line: 286, column: 36, scope: !53, inlinedAt: !59)
!59 = !DILocation(line: 64, column: 27, scope: !6)
!60 = !DILocation(line: 256, column: 15, scope: !57, inlinedAt: !59)
!61 = !DILocation(line: 65, column: 25, scope: !6)
!62 = !DILocation(line: 65, column: 37, scope: !6)
!63 = !DILocation(line: 66, column: 25, scope: !6)
!64 = !DILocation(line: 66, column: 37, scope: !6)
!65 = !DILocation(line: 66, column: 4, scope: !6)
