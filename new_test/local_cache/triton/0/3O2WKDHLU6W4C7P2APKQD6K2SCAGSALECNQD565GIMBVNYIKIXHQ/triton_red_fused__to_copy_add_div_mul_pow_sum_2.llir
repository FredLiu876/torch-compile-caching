; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_red_fused__to_copy_add_div_mul_pow_sum_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 2, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = lshr i32 %10, 2, !dbg !11
  %12 = and i32 %11, 3, !dbg !11
  %13 = or disjoint i32 %12, %9, !dbg !12
  %14 = icmp slt i32 %13, %4, !dbg !13
  %.fr = freeze i1 %14
  %15 = and i32 %10, 3, !dbg !14
  %16 = shl i32 %13, 12, !dbg !15
  %invariant.op = or disjoint i32 %15, %16, !dbg !16
  %17 = zext nneg i32 %15 to i64, !dbg !16
  br i1 %.fr, label %.split.us, label %.split

.split.us:                                        ; preds = %7, %.split.us
  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %.split.us ], [ 0, %7 ]
  %18 = phi float [ %36, %.split.us ], [ 0.000000e+00, %7 ]
  %19 = or disjoint i64 %indvars.iv7, %17, !dbg !17
  %20 = trunc nuw nsw i64 %indvars.iv7 to i32
  %.reass.us = or i32 %invariant.op, %20
  %21 = sext i32 %.reass.us to i64, !dbg !18
  %22 = getelementptr half, ptr addrspace(1) %0, i64 %21, !dbg !18
  %23 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %22, i1 true) #2, !dbg !19
  %24 = bitcast i16 %23 to half, !dbg !19
  %25 = fpext half %24 to float, !dbg !20
  %26 = getelementptr half, ptr addrspace(1) %1, i64 %19, !dbg !21
  %27 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %26, i1 true) #2, !dbg !22
  %28 = bitcast i16 %27 to half, !dbg !22
  %29 = fpext half %28 to float, !dbg !23
  %30 = getelementptr half, ptr addrspace(1) %2, i64 %21, !dbg !24
  %31 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %30, i1 true) #2, !dbg !25
  %32 = bitcast i16 %31 to half, !dbg !25
  %33 = fpext half %32 to float, !dbg !26
  %34 = fmul float %25, %29, !dbg !27
  %35 = fmul float %34, %33, !dbg !28
  %36 = fadd float %18, %35, !dbg !29
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 4, !dbg !16
  %37 = icmp samesign ult i64 %indvars.iv7, 4092, !dbg !16
  br i1 %37, label %.split.us, label %.split3.us, !dbg !16

.split:                                           ; preds = %7, %.split
  %indvars.iv = phi i64 [ %indvars.iv.next, %.split ], [ 0, %7 ]
  %38 = or disjoint i64 %indvars.iv, %17, !dbg !17
  %39 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %39
  %40 = sext i32 %.reass to i64, !dbg !18
  %41 = getelementptr half, ptr addrspace(1) %0, i64 %40, !dbg !18
  %42 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %41, i1 false) #2, !dbg !19
  %43 = getelementptr half, ptr addrspace(1) %1, i64 %38, !dbg !21
  %44 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %43, i1 true) #2, !dbg !22
  %45 = getelementptr half, ptr addrspace(1) %2, i64 %40, !dbg !24
  %46 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %45, i1 false) #2, !dbg !25
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !16
  %47 = icmp samesign ult i64 %indvars.iv, 4092, !dbg !16
  br i1 %47, label %.split, label %.split3.us, !dbg !16

.split3.us:                                       ; preds = %.split, %.split.us
  %.us-phi = phi float [ %36, %.split.us ], [ 0.000000e+00, %.split ], !dbg !30
  %48 = bitcast float %.us-phi to i32, !dbg !30
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 2, i32 31), !dbg !30
  %50 = bitcast i32 %49 to float, !dbg !30
  %51 = fadd float %.us-phi, %50, !dbg !34
  %52 = bitcast float %51 to i32, !dbg !30
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 1, i32 31), !dbg !30
  %54 = bitcast i32 %53 to float, !dbg !30
  %55 = fadd float %51, %54, !dbg !34
  %56 = sext i32 %13 to i64, !dbg !36
  %57 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !36
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %.fr) #2, !dbg !37
  %59 = bitcast i32 %58 to float, !dbg !37
  %60 = fmul float %55, 5.000000e-01, !dbg !38
  %61 = fmul float %59, %59, !dbg !39
  %62 = fmul float %61, %59, !dbg !40
  %63 = fmul float %60, %62, !dbg !41
  %64 = fmul float %63, 0x3F30000000000000, !dbg !42
  %65 = and i32 %10, 240
  %66 = icmp eq i32 %65, 0
  %67 = and i1 %66, %.fr
  %68 = insertelement <2 x float> poison, float %59, i64 0, !dbg !43
  %69 = insertelement <2 x float> %68, float %64, i64 1, !dbg !43
  br label %70, !dbg !44

70:                                               ; preds = %.split3.us, %70
  %indvars.iv9 = phi i64 [ 0, %.split3.us ], [ %indvars.iv.next10, %70 ]
  %71 = or disjoint i64 %indvars.iv9, %17, !dbg !45
  %72 = trunc nuw nsw i64 %indvars.iv9 to i32
  %.reass5 = or i32 %invariant.op, %72
  %73 = sext i32 %.reass5 to i64, !dbg !46
  %74 = getelementptr half, ptr addrspace(1) %0, i64 %73, !dbg !46
  %75 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %74, i1 %.fr) #2, !dbg !47
  %76 = getelementptr half, ptr addrspace(1) %1, i64 %71, !dbg !48
  %77 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %76, i1 true) #2, !dbg !49
  %78 = bitcast i16 %77 to half, !dbg !49
  %79 = fpext half %78 to float, !dbg !50
  %80 = getelementptr half, ptr addrspace(1) %2, i64 %73, !dbg !51
  %81 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %80, i1 %.fr) #2, !dbg !52
  %82 = insertelement <2 x i16> poison, i16 %75, i64 0, !dbg !47
  %83 = insertelement <2 x i16> %82, i16 %81, i64 1, !dbg !47
  %84 = bitcast <2 x i16> %83 to <2 x half>, !dbg !47
  %85 = fpext <2 x half> %84 to <2 x float>, !dbg !53
  %86 = insertelement <2 x float> <float poison, float 2.000000e+00>, float %79, i64 0, !dbg !54
  %87 = fmul <2 x float> %86, %85, !dbg !54
  %88 = fmul <2 x float> %87, %69, !dbg !43
  %shift = shufflevector <2 x float> %88, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !55
  %89 = fsub <2 x float> %88, %shift, !dbg !55
  %90 = extractelement <2 x float> %89, i64 0, !dbg !55
  %91 = fptrunc float %90 to half, !dbg !56
  %92 = bitcast half %91 to i16, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %92, ptr addrspace(1) %74, i1 %67) #2, !dbg !56
  %indvars.iv.next10 = add nuw nsw i64 %indvars.iv9, 4, !dbg !44
  %93 = icmp samesign ult i64 %indvars.iv9, 4092, !dbg !44
  br i1 %93, label %70, label %94, !dbg !44

94:                                               ; preds = %70
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6dfi5krguusrox3zkmtwd6w5h4h7dbj756re5gbfvoizvxxionr.py", directory: "/tmp/torchinductor_root/6d")
!4 = !{ptr @triton_red_fused__to_copy_add_div_mul_pow_sum_2, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_mul_pow_sum_2", linkageName: "triton_red_fused__to_copy_add_div_mul_pow_sum_2", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 50, scope: !6)
!16 = !DILocation(line: 29, column: 40, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 35, column: 38, scope: !6)
!19 = !DILocation(line: 35, column: 55, scope: !6)
!20 = !DILocation(line: 35, column: 116, scope: !6)
!21 = !DILocation(line: 36, column: 34, scope: !6)
!22 = !DILocation(line: 36, column: 41, scope: !6)
!23 = !DILocation(line: 36, column: 94, scope: !6)
!24 = !DILocation(line: 37, column: 34, scope: !6)
!25 = !DILocation(line: 37, column: 51, scope: !6)
!26 = !DILocation(line: 37, column: 112, scope: !6)
!27 = !DILocation(line: 38, column: 22, scope: !6)
!28 = !DILocation(line: 41, column: 22, scope: !6)
!29 = !DILocation(line: 43, column: 23, scope: !6)
!30 = !DILocation(line: 286, column: 36, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !6, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!33 = !DILocation(line: 45, column: 25, scope: !6)
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !33)
!35 = distinct !DILexicalBlockFile(scope: !31, file: !32, discriminator: 0)
!36 = !DILocation(line: 46, column: 31, scope: !6)
!37 = !DILocation(line: 46, column: 36, scope: !6)
!38 = !DILocation(line: 60, column: 23, scope: !6)
!39 = !DILocation(line: 61, column: 24, scope: !6)
!40 = !DILocation(line: 62, column: 24, scope: !6)
!41 = !DILocation(line: 63, column: 24, scope: !6)
!42 = !DILocation(line: 65, column: 24, scope: !6)
!43 = !DILocation(line: 58, column: 24, scope: !6)
!44 = !DILocation(line: 47, column: 40, scope: !6)
!45 = !DILocation(line: 48, column: 31, scope: !6)
!46 = !DILocation(line: 53, column: 39, scope: !6)
!47 = !DILocation(line: 53, column: 56, scope: !6)
!48 = !DILocation(line: 54, column: 35, scope: !6)
!49 = !DILocation(line: 54, column: 42, scope: !6)
!50 = !DILocation(line: 54, column: 95, scope: !6)
!51 = !DILocation(line: 55, column: 35, scope: !6)
!52 = !DILocation(line: 55, column: 52, scope: !6)
!53 = !DILocation(line: 53, column: 118, scope: !6)
!54 = !DILocation(line: 56, column: 24, scope: !6)
!55 = !DILocation(line: 70, column: 24, scope: !6)
!56 = !DILocation(line: 72, column: 56, scope: !6)
!57 = !DILocation(line: 47, column: 4, scope: !6)
