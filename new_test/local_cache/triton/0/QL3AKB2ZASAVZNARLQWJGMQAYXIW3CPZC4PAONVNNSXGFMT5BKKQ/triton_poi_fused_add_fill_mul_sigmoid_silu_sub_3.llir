; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_poi_fused_add_fill_mul_sigmoid_silu_sub_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = shl i32 %7, 10, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = shl i32 %9, 3, !dbg !11
  %11 = and i32 %10, 1016, !dbg !11
  %12 = or disjoint i32 %11, %8, !dbg !12
  %13 = icmp slt i32 %12, %4, !dbg !13
  %14 = sext i32 %12 to i64, !dbg !14
  %15 = getelementptr half, ptr addrspace(1) %1, i64 %14, !dbg !14
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %15, i1 %13) #2, !dbg !15
  %17 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !15
  %18 = bitcast i32 %17 to <2 x half>, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !15
  %20 = bitcast i32 %19 to <2 x half>, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !15
  %22 = bitcast i32 %21 to <2 x half>, !dbg !15
  %23 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !15
  %24 = bitcast i32 %23 to <2 x half>, !dbg !15
  %25 = getelementptr half, ptr addrspace(1) %2, i64 %14, !dbg !16
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 %13) #2, !dbg !17
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !17
  %28 = bitcast i32 %27 to <2 x half>, !dbg !17
  %29 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !17
  %30 = bitcast i32 %29 to <2 x half>, !dbg !17
  %31 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !17
  %32 = bitcast i32 %31 to <2 x half>, !dbg !17
  %33 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !17
  %34 = bitcast i32 %33 to <2 x half>, !dbg !17
  %35 = getelementptr half, ptr addrspace(1) %0, i64 %14, !dbg !18
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %13) #2, !dbg !19
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !19
  %38 = bitcast i32 %37 to <2 x half>, !dbg !19
  %39 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !19
  %40 = bitcast i32 %39 to <2 x half>, !dbg !19
  %41 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !19
  %42 = bitcast i32 %41 to <2 x half>, !dbg !19
  %43 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !19
  %44 = bitcast i32 %43 to <2 x half>, !dbg !19
  %45 = getelementptr half, ptr addrspace(1) %3, i64 %14, !dbg !20
  %46 = fpext <2 x half> %18 to <2 x float>, !dbg !21
  %47 = fpext <2 x half> %28 to <2 x float>, !dbg !22
  %48 = extractelement <2 x float> %47, i64 0, !dbg !23
  %49 = fsub float 0.000000e+00, %48, !dbg !23
  %50 = extractelement <2 x float> %47, i64 1, !dbg !23
  %51 = fsub float 0.000000e+00, %50, !dbg !23
  %52 = fmul float %49, 0x3FF7154760000000, !dbg !27
  %53 = tail call float @llvm.nvvm.ex2.approx.f(float %52), !dbg !27
  %54 = fmul float %51, 0x3FF7154760000000, !dbg !27
  %55 = tail call float @llvm.nvvm.ex2.approx.f(float %54), !dbg !27
  %56 = fadd float %53, 1.000000e+00, !dbg !28
  %57 = fadd float %55, 1.000000e+00, !dbg !28
  %58 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %56), !dbg !29
  %59 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %57), !dbg !29
  %60 = insertelement <2 x float> poison, float %58, i64 0, !dbg !30
  %61 = insertelement <2 x float> %60, float %59, i64 1, !dbg !30
  %62 = fmul <2 x float> %61, %47, !dbg !30
  %63 = fmul <2 x float> %62, %46, !dbg !31
  %64 = fptrunc <2 x float> %63 to <2 x half>, !dbg !32
  %65 = fpext <2 x half> %20 to <2 x float>, !dbg !21
  %66 = fpext <2 x half> %30 to <2 x float>, !dbg !22
  %67 = extractelement <2 x float> %66, i64 0, !dbg !23
  %68 = fsub float 0.000000e+00, %67, !dbg !23
  %69 = extractelement <2 x float> %66, i64 1, !dbg !23
  %70 = fsub float 0.000000e+00, %69, !dbg !23
  %71 = fmul float %68, 0x3FF7154760000000, !dbg !27
  %72 = tail call float @llvm.nvvm.ex2.approx.f(float %71), !dbg !27
  %73 = fmul float %70, 0x3FF7154760000000, !dbg !27
  %74 = tail call float @llvm.nvvm.ex2.approx.f(float %73), !dbg !27
  %75 = fadd float %72, 1.000000e+00, !dbg !28
  %76 = fadd float %74, 1.000000e+00, !dbg !28
  %77 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %75), !dbg !29
  %78 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %76), !dbg !29
  %79 = insertelement <2 x float> poison, float %77, i64 0, !dbg !30
  %80 = insertelement <2 x float> %79, float %78, i64 1, !dbg !30
  %81 = fmul <2 x float> %80, %66, !dbg !30
  %82 = fmul <2 x float> %81, %65, !dbg !31
  %83 = fptrunc <2 x float> %82 to <2 x half>, !dbg !32
  %84 = fpext <2 x half> %22 to <2 x float>, !dbg !21
  %85 = fpext <2 x half> %32 to <2 x float>, !dbg !22
  %86 = extractelement <2 x float> %85, i64 0, !dbg !23
  %87 = fsub float 0.000000e+00, %86, !dbg !23
  %88 = extractelement <2 x float> %85, i64 1, !dbg !23
  %89 = fsub float 0.000000e+00, %88, !dbg !23
  %90 = fmul float %87, 0x3FF7154760000000, !dbg !27
  %91 = tail call float @llvm.nvvm.ex2.approx.f(float %90), !dbg !27
  %92 = fmul float %89, 0x3FF7154760000000, !dbg !27
  %93 = tail call float @llvm.nvvm.ex2.approx.f(float %92), !dbg !27
  %94 = fadd float %91, 1.000000e+00, !dbg !28
  %95 = fadd float %93, 1.000000e+00, !dbg !28
  %96 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %94), !dbg !29
  %97 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %95), !dbg !29
  %98 = insertelement <2 x float> poison, float %96, i64 0, !dbg !30
  %99 = insertelement <2 x float> %98, float %97, i64 1, !dbg !30
  %100 = fmul <2 x float> %99, %85, !dbg !30
  %101 = fmul <2 x float> %100, %84, !dbg !31
  %102 = fptrunc <2 x float> %101 to <2 x half>, !dbg !32
  %103 = fpext <2 x half> %24 to <2 x float>, !dbg !21
  %104 = fpext <2 x half> %34 to <2 x float>, !dbg !22
  %105 = extractelement <2 x float> %104, i64 0, !dbg !23
  %106 = fsub float 0.000000e+00, %105, !dbg !23
  %107 = extractelement <2 x float> %104, i64 1, !dbg !23
  %108 = fsub float 0.000000e+00, %107, !dbg !23
  %109 = fmul float %106, 0x3FF7154760000000, !dbg !27
  %110 = tail call float @llvm.nvvm.ex2.approx.f(float %109), !dbg !27
  %111 = fmul float %108, 0x3FF7154760000000, !dbg !27
  %112 = tail call float @llvm.nvvm.ex2.approx.f(float %111), !dbg !27
  %113 = fadd float %110, 1.000000e+00, !dbg !28
  %114 = fadd float %112, 1.000000e+00, !dbg !28
  %115 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %113), !dbg !29
  %116 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %114), !dbg !29
  %117 = insertelement <2 x float> poison, float %115, i64 0, !dbg !30
  %118 = insertelement <2 x float> %117, float %116, i64 1, !dbg !30
  %119 = fmul <2 x float> %118, %104, !dbg !30
  %120 = fmul <2 x float> %119, %103, !dbg !31
  %121 = fptrunc <2 x float> %120 to <2 x half>, !dbg !32
  %122 = bitcast <2 x half> %64 to i32, !dbg !32
  %123 = bitcast <2 x half> %83 to i32, !dbg !32
  %124 = bitcast <2 x half> %102 to i32, !dbg !32
  %125 = bitcast <2 x half> %121 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %122, i32 %123, i32 %124, i32 %125, ptr addrspace(1) %45, i1 %13) #2, !dbg !32
  %126 = fpext <2 x half> %38 to <2 x float>, !dbg !33
  %127 = fmul <2 x float> %46, %126, !dbg !34
  %128 = fsub <2 x float> splat (float 1.000000e+00), %61, !dbg !35
  %129 = fmul <2 x float> %128, %47, !dbg !36
  %130 = fadd <2 x float> %129, splat (float 1.000000e+00), !dbg !37
  %131 = fmul <2 x float> %61, %130, !dbg !38
  %132 = fmul <2 x float> %127, %131, !dbg !39
  %133 = fptrunc <2 x float> %132 to <2 x half>, !dbg !40
  %134 = fpext <2 x half> %40 to <2 x float>, !dbg !33
  %135 = fmul <2 x float> %65, %134, !dbg !34
  %136 = fsub <2 x float> splat (float 1.000000e+00), %80, !dbg !35
  %137 = fmul <2 x float> %136, %66, !dbg !36
  %138 = fadd <2 x float> %137, splat (float 1.000000e+00), !dbg !37
  %139 = fmul <2 x float> %80, %138, !dbg !38
  %140 = fmul <2 x float> %135, %139, !dbg !39
  %141 = fptrunc <2 x float> %140 to <2 x half>, !dbg !40
  %142 = fpext <2 x half> %42 to <2 x float>, !dbg !33
  %143 = fmul <2 x float> %84, %142, !dbg !34
  %144 = fsub <2 x float> splat (float 1.000000e+00), %99, !dbg !35
  %145 = fmul <2 x float> %144, %85, !dbg !36
  %146 = fadd <2 x float> %145, splat (float 1.000000e+00), !dbg !37
  %147 = fmul <2 x float> %99, %146, !dbg !38
  %148 = fmul <2 x float> %143, %147, !dbg !39
  %149 = fptrunc <2 x float> %148 to <2 x half>, !dbg !40
  %150 = fpext <2 x half> %44 to <2 x float>, !dbg !33
  %151 = fmul <2 x float> %103, %150, !dbg !34
  %152 = fsub <2 x float> splat (float 1.000000e+00), %118, !dbg !35
  %153 = fmul <2 x float> %152, %104, !dbg !36
  %154 = fadd <2 x float> %153, splat (float 1.000000e+00), !dbg !37
  %155 = fmul <2 x float> %118, %154, !dbg !38
  %156 = fmul <2 x float> %151, %155, !dbg !39
  %157 = fptrunc <2 x float> %156 to <2 x half>, !dbg !40
  %158 = bitcast <2 x half> %133 to i32, !dbg !40
  %159 = bitcast <2 x half> %141 to i32, !dbg !40
  %160 = bitcast <2 x half> %149 to i32, !dbg !40
  %161 = bitcast <2 x half> %157 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %158, i32 %159, i32 %160, i32 %161, ptr addrspace(1) %35, i1 %13) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c25zto3bpakzialbbzf332iaee3f5cfznczrhechel2kb3r33rob.py", directory: "/tmp/torchinductor_root/25")
!4 = !{ptr @triton_poi_fused_add_fill_mul_sigmoid_silu_sub_3, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused_add_fill_mul_sigmoid_silu_sub_3", linkageName: "triton_poi_fused_add_fill_mul_sigmoid_silu_sub_3", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 19, column: 28, scope: !6)
!10 = !DILocation(line: 19, column: 33, scope: !6)
!11 = !DILocation(line: 20, column: 36, scope: !6)
!12 = !DILocation(line: 20, column: 23, scope: !6)
!13 = !DILocation(line: 21, column: 21, scope: !6)
!14 = !DILocation(line: 23, column: 30, scope: !6)
!15 = !DILocation(line: 23, column: 35, scope: !6)
!16 = !DILocation(line: 24, column: 30, scope: !6)
!17 = !DILocation(line: 24, column: 35, scope: !6)
!18 = !DILocation(line: 25, column: 34, scope: !6)
!19 = !DILocation(line: 25, column: 39, scope: !6)
!20 = !DILocation(line: 39, column: 25, scope: !6)
!21 = !DILocation(line: 23, column: 45, scope: !6)
!22 = !DILocation(line: 24, column: 45, scope: !6)
!23 = !DILocation(line: 47, column: 30, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!26 = !DILocation(line: 27, column: 22, scope: !6)
!27 = !DILocation(line: 47, column: 29, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 47, column: 20, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 47, column: 16, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 28, column: 18, scope: !6)
!31 = !DILocation(line: 30, column: 18, scope: !6)
!32 = !DILocation(line: 39, column: 36, scope: !6)
!33 = !DILocation(line: 25, column: 49, scope: !6)
!34 = !DILocation(line: 31, column: 18, scope: !6)
!35 = !DILocation(line: 34, column: 20, scope: !6)
!36 = !DILocation(line: 35, column: 19, scope: !6)
!37 = !DILocation(line: 36, column: 20, scope: !6)
!38 = !DILocation(line: 37, column: 19, scope: !6)
!39 = !DILocation(line: 38, column: 19, scope: !6)
!40 = !DILocation(line: 40, column: 40, scope: !6)
!41 = !DILocation(line: 40, column: 4, scope: !6)
