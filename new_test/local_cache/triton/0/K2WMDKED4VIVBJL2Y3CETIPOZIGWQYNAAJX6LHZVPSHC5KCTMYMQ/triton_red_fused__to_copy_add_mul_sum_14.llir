; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_mul_sum_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11, i32 %12, ptr addrspace(1) readnone captures(none) %13) local_unnamed_addr !dbg !6 {
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %16 = shl i32 %15, 6, !dbg !10
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %18 = shl i32 %17, 3, !dbg !11
  %19 = and i32 %18, 56, !dbg !11
  %20 = or disjoint i32 %19, %16, !dbg !12
  %21 = lshr i32 %17, 3, !dbg !13
  %22 = and i32 %21, 63, !dbg !13
  %23 = icmp sgt i32 %12, 0, !dbg !14
  br i1 %23, label %.lr.ph, label %._crit_edge, !dbg !14

.lr.ph:                                           ; preds = %14, %.lr.ph
  %24 = phi i32 [ %211, %.lr.ph ], [ 0, %14 ]
  %25 = phi <16 x float> [ %210, %.lr.ph ], [ zeroinitializer, %14 ]
  %26 = or disjoint i32 %24, %22, !dbg !15
  %27 = icmp slt i32 %26, %12, !dbg !16
  %28 = shl i32 %26, 12, !dbg !17
  %29 = add i32 %20, %28, !dbg !18
  %30 = sext i32 %29 to i64, !dbg !19
  %31 = getelementptr half, ptr addrspace(1) %0, i64 %30, !dbg !19
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %31, i1 %27) #3, !dbg !20
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !20
  %34 = bitcast i32 %33 to <2 x half>, !dbg !20
  %35 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !20
  %36 = bitcast i32 %35 to <2 x half>, !dbg !20
  %37 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !20
  %38 = bitcast i32 %37 to <2 x half>, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !20
  %40 = bitcast i32 %39 to <2 x half>, !dbg !20
  %41 = getelementptr half, ptr addrspace(1) %1, i64 %30, !dbg !21
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %41, i1 %27) #3, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !22
  %44 = bitcast i32 %43 to <2 x half>, !dbg !22
  %45 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !22
  %46 = bitcast i32 %45 to <2 x half>, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !22
  %48 = bitcast i32 %47 to <2 x half>, !dbg !22
  %49 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !22
  %50 = bitcast i32 %49 to <2 x half>, !dbg !22
  %51 = getelementptr half, ptr addrspace(1) %2, i64 %30, !dbg !23
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %51, i1 %27) #3, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !24
  %54 = bitcast i32 %53 to <2 x half>, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !24
  %56 = bitcast i32 %55 to <2 x half>, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !24
  %58 = bitcast i32 %57 to <2 x half>, !dbg !24
  %59 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !24
  %60 = bitcast i32 %59 to <2 x half>, !dbg !24
  %61 = getelementptr half, ptr addrspace(1) %3, i64 %30, !dbg !25
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %61, i1 %27) #3, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !26
  %64 = bitcast i32 %63 to <2 x half>, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !26
  %66 = bitcast i32 %65 to <2 x half>, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !26
  %68 = bitcast i32 %67 to <2 x half>, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !26
  %70 = bitcast i32 %69 to <2 x half>, !dbg !26
  %71 = sext i32 %26 to i64, !dbg !27
  %72 = getelementptr float, ptr addrspace(1) %4, i64 %71, !dbg !27
  %73 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %72, i1 %27) #3, !dbg !28
  %74 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %72, i1 %27) #3, !dbg !28
  %75 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %72, i1 %27) #3, !dbg !28
  %76 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %72, i1 %27) #3, !dbg !28
  %77 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %72, i1 %27) #3, !dbg !28
  %78 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %72, i1 %27) #3, !dbg !28
  %79 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %72, i1 %27) #3, !dbg !28
  %80 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %72, i1 %27) #3, !dbg !28
  %81 = getelementptr half, ptr addrspace(1) %5, i64 %30, !dbg !29
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %81, i1 %27) #3, !dbg !30
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !30
  %84 = bitcast i32 %83 to <2 x half>, !dbg !30
  %85 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !30
  %86 = bitcast i32 %85 to <2 x half>, !dbg !30
  %87 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !30
  %88 = bitcast i32 %87 to <2 x half>, !dbg !30
  %89 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !30
  %90 = bitcast i32 %89 to <2 x half>, !dbg !30
  %91 = getelementptr half, ptr addrspace(1) %6, i64 %30, !dbg !31
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %91, i1 %27) #3, !dbg !32
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !32
  %94 = bitcast i32 %93 to <2 x half>, !dbg !32
  %95 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !32
  %96 = bitcast i32 %95 to <2 x half>, !dbg !32
  %97 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !32
  %98 = bitcast i32 %97 to <2 x half>, !dbg !32
  %99 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !32
  %100 = bitcast i32 %99 to <2 x half>, !dbg !32
  %101 = getelementptr half, ptr addrspace(1) %7, i64 %30, !dbg !33
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %101, i1 %27) #3, !dbg !34
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !34
  %104 = bitcast i32 %103 to <2 x half>, !dbg !34
  %105 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !34
  %106 = bitcast i32 %105 to <2 x half>, !dbg !34
  %107 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !34
  %108 = bitcast i32 %107 to <2 x half>, !dbg !34
  %109 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !34
  %110 = bitcast i32 %109 to <2 x half>, !dbg !34
  %111 = getelementptr float, ptr addrspace(1) %8, i64 %71, !dbg !35
  %112 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %111, i1 %27) #3, !dbg !36
  %113 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %111, i1 %27) #3, !dbg !36
  %114 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %111, i1 %27) #3, !dbg !36
  %115 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %111, i1 %27) #3, !dbg !36
  %116 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %111, i1 %27) #3, !dbg !36
  %117 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %111, i1 %27) #3, !dbg !36
  %118 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %111, i1 %27) #3, !dbg !36
  %119 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %111, i1 %27) #3, !dbg !36
  %120 = shufflevector <2 x half> %34, <2 x half> %36, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %121 = shufflevector <2 x half> %38, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %122 = shufflevector <8 x half> %120, <8 x half> %121, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !37
  %123 = shufflevector <2 x half> %38, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %124 = shufflevector <8 x half> %122, <8 x half> %123, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !37
  %125 = shufflevector <2 x half> %40, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %126 = shufflevector <8 x half> %124, <8 x half> %125, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !37
  %127 = shufflevector <2 x half> %40, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %128 = shufflevector <8 x half> %126, <8 x half> %127, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !37
  %129 = fpext <8 x half> %128 to <8 x float>, !dbg !37
  %130 = shufflevector <2 x half> %54, <2 x half> %56, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %131 = shufflevector <2 x half> %58, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %132 = shufflevector <8 x half> %130, <8 x half> %131, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !38
  %133 = shufflevector <2 x half> %58, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %134 = shufflevector <8 x half> %132, <8 x half> %133, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !38
  %135 = shufflevector <2 x half> %60, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %136 = shufflevector <8 x half> %134, <8 x half> %135, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !38
  %137 = shufflevector <2 x half> %60, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %138 = shufflevector <8 x half> %136, <8 x half> %137, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !38
  %139 = fpext <8 x half> %138 to <8 x float>, !dbg !38
  %140 = shufflevector <2 x half> %64, <2 x half> %66, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %141 = shufflevector <2 x half> %68, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %142 = shufflevector <8 x half> %140, <8 x half> %141, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !39
  %143 = shufflevector <2 x half> %68, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %144 = shufflevector <8 x half> %142, <8 x half> %143, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !39
  %145 = shufflevector <2 x half> %70, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %146 = shufflevector <8 x half> %144, <8 x half> %145, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !39
  %147 = shufflevector <2 x half> %70, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %148 = shufflevector <8 x half> %146, <8 x half> %147, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !39
  %149 = fpext <8 x half> %148 to <8 x float>, !dbg !39
  %150 = shufflevector <2 x half> %84, <2 x half> %86, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !40
  %151 = shufflevector <2 x half> %88, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !40
  %152 = shufflevector <8 x half> %150, <8 x half> %151, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !40
  %153 = shufflevector <2 x half> %88, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !40
  %154 = shufflevector <8 x half> %152, <8 x half> %153, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !40
  %155 = shufflevector <2 x half> %90, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !40
  %156 = shufflevector <8 x half> %154, <8 x half> %155, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !40
  %157 = shufflevector <2 x half> %90, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !40
  %158 = shufflevector <8 x half> %156, <8 x half> %157, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !40
  %159 = fpext <8 x half> %158 to <8 x float>, !dbg !40
  %160 = shufflevector <2 x half> %94, <2 x half> %96, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %161 = shufflevector <2 x half> %98, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %162 = shufflevector <8 x half> %160, <8 x half> %161, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !41
  %163 = shufflevector <2 x half> %98, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %164 = shufflevector <8 x half> %162, <8 x half> %163, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !41
  %165 = shufflevector <2 x half> %100, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %166 = shufflevector <8 x half> %164, <8 x half> %165, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !41
  %167 = shufflevector <2 x half> %100, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %168 = shufflevector <8 x half> %166, <8 x half> %167, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !41
  %169 = fpext <8 x half> %168 to <8 x float>, !dbg !41
  %170 = shufflevector <2 x half> %44, <2 x half> %46, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %171 = shufflevector <2 x half> %48, <2 x half> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %172 = shufflevector <16 x half> %170, <16 x half> %171, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %173 = shufflevector <2 x half> %48, <2 x half> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %174 = shufflevector <16 x half> %172, <16 x half> %173, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %175 = shufflevector <2 x half> %50, <2 x half> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %176 = shufflevector <16 x half> %174, <16 x half> %175, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %177 = shufflevector <2 x half> %50, <2 x half> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %178 = shufflevector <16 x half> %176, <16 x half> %177, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %179 = shufflevector <2 x half> %104, <2 x half> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %180 = shufflevector <16 x half> %178, <16 x half> %179, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %181 = shufflevector <2 x half> %104, <2 x half> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %182 = shufflevector <16 x half> %180, <16 x half> %181, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %183 = shufflevector <2 x half> %106, <2 x half> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %184 = shufflevector <16 x half> %182, <16 x half> %183, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 16, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %185 = shufflevector <2 x half> %106, <2 x half> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %186 = shufflevector <16 x half> %184, <16 x half> %185, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 17, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %187 = shufflevector <2 x half> %108, <2 x half> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %188 = shufflevector <16 x half> %186, <16 x half> %187, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 poison, i32 poison, i32 poison>, !dbg !42
  %189 = shufflevector <2 x half> %108, <2 x half> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %190 = shufflevector <16 x half> %188, <16 x half> %189, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 17, i32 poison, i32 poison>, !dbg !42
  %191 = shufflevector <2 x half> %110, <2 x half> poison, <16 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %192 = shufflevector <16 x half> %190, <16 x half> %191, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 16, i32 poison>, !dbg !42
  %193 = shufflevector <2 x half> %110, <2 x half> poison, <16 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !42
  %194 = shufflevector <16 x half> %192, <16 x half> %193, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 17>, !dbg !42
  %195 = fpext <16 x half> %194 to <16 x float>, !dbg !42
  %196 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !28
  %197 = insertelement <2 x i32> %196, i32 %119, i64 1, !dbg !28
  %198 = bitcast <2 x i32> %197 to <2 x float>, !dbg !28
  %199 = shufflevector <2 x float> %198, <2 x float> poison, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, !dbg !28
  %200 = fadd <8 x float> %139, %149, !dbg !43
  %201 = fadd <8 x float> %159, %169, !dbg !44
  %202 = shufflevector <8 x float> %129, <8 x float> %201, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !45
  %203 = fadd <16 x float> %202, %195, !dbg !45
  %204 = shufflevector <8 x float> %200, <8 x float> %139, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !46
  %205 = fmul <16 x float> %204, %199, !dbg !46
  %206 = fmul <16 x float> %203, %205, !dbg !47
  %207 = fadd <16 x float> %25, %206, !dbg !48
  %208 = insertelement <16 x i1> poison, i1 %27, i64 0, !dbg !49
  %209 = shufflevector <16 x i1> %208, <16 x i1> poison, <16 x i32> zeroinitializer, !dbg !49
  %210 = select <16 x i1> %209, <16 x float> %207, <16 x float> %25, !dbg !49
  %211 = add i32 %24, 64, !dbg !14
  %212 = icmp slt i32 %211, %12, !dbg !14
  br i1 %212, label %.lr.ph, label %._crit_edge, !dbg !14

._crit_edge:                                      ; preds = %.lr.ph, %14
  %213 = phi <16 x float> [ zeroinitializer, %14 ], [ %210, %.lr.ph ]
  %214 = lshr i32 %17, 5, !dbg !11
  %215 = and i32 %17, 63, !dbg !11
  %216 = or disjoint i32 %16, %215, !dbg !12
  %217 = and i32 %17, 24, !dbg !11
  %218 = or disjoint i32 %19, 4, !dbg !50
  %219 = extractelement <16 x float> %213, i64 0, !dbg !50
  %220 = bitcast float %219 to i32, !dbg !50
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 16, i32 31), !dbg !50
  %222 = bitcast i32 %221 to float, !dbg !50
  %223 = fadd float %219, %222, !dbg !54
  %224 = bitcast float %223 to i32, !dbg !50
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 8, i32 31), !dbg !50
  %226 = bitcast i32 %225 to float, !dbg !50
  %227 = fadd float %223, %226, !dbg !54
  %228 = extractelement <16 x float> %213, i64 1, !dbg !50
  %229 = bitcast float %228 to i32, !dbg !50
  %230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %229, i32 16, i32 31), !dbg !50
  %231 = bitcast i32 %230 to float, !dbg !50
  %232 = fadd float %228, %231, !dbg !54
  %233 = bitcast float %232 to i32, !dbg !50
  %234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 8, i32 31), !dbg !50
  %235 = bitcast i32 %234 to float, !dbg !50
  %236 = fadd float %232, %235, !dbg !54
  %237 = extractelement <16 x float> %213, i64 2, !dbg !50
  %238 = bitcast float %237 to i32, !dbg !50
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 16, i32 31), !dbg !50
  %240 = bitcast i32 %239 to float, !dbg !50
  %241 = fadd float %237, %240, !dbg !54
  %242 = bitcast float %241 to i32, !dbg !50
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 8, i32 31), !dbg !50
  %244 = bitcast i32 %243 to float, !dbg !50
  %245 = fadd float %241, %244, !dbg !54
  %246 = extractelement <16 x float> %213, i64 3, !dbg !50
  %247 = bitcast float %246 to i32, !dbg !50
  %248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 16, i32 31), !dbg !50
  %249 = bitcast i32 %248 to float, !dbg !50
  %250 = fadd float %246, %249, !dbg !54
  %251 = bitcast float %250 to i32, !dbg !50
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 8, i32 31), !dbg !50
  %253 = bitcast i32 %252 to float, !dbg !50
  %254 = fadd float %250, %253, !dbg !54
  %255 = extractelement <16 x float> %213, i64 4, !dbg !50
  %256 = bitcast float %255 to i32, !dbg !50
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 16, i32 31), !dbg !50
  %258 = bitcast i32 %257 to float, !dbg !50
  %259 = fadd float %255, %258, !dbg !54
  %260 = bitcast float %259 to i32, !dbg !50
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 8, i32 31), !dbg !50
  %262 = bitcast i32 %261 to float, !dbg !50
  %263 = fadd float %259, %262, !dbg !54
  %264 = extractelement <16 x float> %213, i64 5, !dbg !50
  %265 = bitcast float %264 to i32, !dbg !50
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 16, i32 31), !dbg !50
  %267 = bitcast i32 %266 to float, !dbg !50
  %268 = fadd float %264, %267, !dbg !54
  %269 = bitcast float %268 to i32, !dbg !50
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 8, i32 31), !dbg !50
  %271 = bitcast i32 %270 to float, !dbg !50
  %272 = fadd float %268, %271, !dbg !54
  %273 = extractelement <16 x float> %213, i64 6, !dbg !50
  %274 = bitcast float %273 to i32, !dbg !50
  %275 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %274, i32 16, i32 31), !dbg !50
  %276 = bitcast i32 %275 to float, !dbg !50
  %277 = fadd float %273, %276, !dbg !54
  %278 = bitcast float %277 to i32, !dbg !50
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 8, i32 31), !dbg !50
  %280 = bitcast i32 %279 to float, !dbg !50
  %281 = fadd float %277, %280, !dbg !54
  %282 = extractelement <16 x float> %213, i64 7, !dbg !50
  %283 = bitcast float %282 to i32, !dbg !50
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 16, i32 31), !dbg !50
  %285 = bitcast i32 %284 to float, !dbg !50
  %286 = fadd float %282, %285, !dbg !54
  %287 = bitcast float %286 to i32, !dbg !50
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 8, i32 31), !dbg !50
  %289 = bitcast i32 %288 to float, !dbg !50
  %290 = fadd float %286, %289, !dbg !54
  %291 = and i32 %214, 15, !dbg !50
  %292 = icmp eq i32 %217, 0, !dbg !50
  %293 = shl nuw nsw i32 %19, 4, !dbg !50
  %294 = or disjoint i32 %293, %291, !dbg !50
  %295 = getelementptr float, ptr addrspace(3) @global_smem, i32 %294, !dbg !50
  %296 = bitcast float %227 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %295, <1 x i32> %296, i1 %292) #3, !dbg !50
  %297 = or disjoint i32 %293, 16, !dbg !50
  %298 = or disjoint i32 %297, %291, !dbg !50
  %299 = getelementptr float, ptr addrspace(3) @global_smem, i32 %298, !dbg !50
  %300 = bitcast float %236 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %299, <1 x i32> %300, i1 %292) #3, !dbg !50
  %301 = or disjoint i32 %293, 32, !dbg !50
  %302 = or disjoint i32 %301, %291, !dbg !50
  %303 = getelementptr float, ptr addrspace(3) @global_smem, i32 %302, !dbg !50
  %304 = bitcast float %245 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %304, i1 %292) #3, !dbg !50
  %305 = or disjoint i32 %293, 48, !dbg !50
  %306 = or disjoint i32 %305, %291, !dbg !50
  %307 = getelementptr float, ptr addrspace(3) @global_smem, i32 %306, !dbg !50
  %308 = bitcast float %254 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %307, <1 x i32> %308, i1 %292) #3, !dbg !50
  %309 = shl nuw nsw i32 %218, 4, !dbg !50
  %310 = or disjoint i32 %309, %291, !dbg !50
  %311 = getelementptr float, ptr addrspace(3) @global_smem, i32 %310, !dbg !50
  %312 = bitcast float %263 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %312, i1 %292) #3, !dbg !50
  %313 = or disjoint i32 %293, 80, !dbg !50
  %314 = or disjoint i32 %313, %291, !dbg !50
  %315 = getelementptr float, ptr addrspace(3) @global_smem, i32 %314, !dbg !50
  %316 = bitcast float %272 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %315, <1 x i32> %316, i1 %292) #3, !dbg !50
  %317 = or disjoint i32 %293, 96, !dbg !50
  %318 = or disjoint i32 %317, %291, !dbg !50
  %319 = getelementptr float, ptr addrspace(3) @global_smem, i32 %318, !dbg !50
  %320 = bitcast float %281 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %319, <1 x i32> %320, i1 %292) #3, !dbg !50
  %321 = or disjoint i32 %293, 112, !dbg !50
  %322 = or disjoint i32 %321, %291, !dbg !50
  %323 = getelementptr float, ptr addrspace(3) @global_smem, i32 %322, !dbg !50
  %324 = bitcast float %290 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %323, <1 x i32> %324, i1 %292) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %325 = icmp slt i32 %17, 1024, !dbg !50
  %326 = getelementptr float, ptr addrspace(3) @global_smem, i32 %17, !dbg !50
  %327 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %326, i1 %325) #3, !dbg !50
  %328 = bitcast i32 %327 to float, !dbg !50
  %329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %327, i32 8, i32 31), !dbg !50
  %330 = bitcast i32 %329 to float, !dbg !50
  %331 = fadd float %328, %330, !dbg !54
  %332 = bitcast float %331 to i32, !dbg !50
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 4, i32 31), !dbg !50
  %334 = bitcast i32 %333 to float, !dbg !50
  %335 = fadd float %331, %334, !dbg !54
  %336 = bitcast float %335 to i32, !dbg !50
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %336, i32 2, i32 31), !dbg !50
  %338 = bitcast i32 %337 to float, !dbg !50
  %339 = fadd float %335, %338, !dbg !54
  %340 = bitcast float %339 to i32, !dbg !50
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 1, i32 31), !dbg !50
  %342 = bitcast i32 %341 to float, !dbg !50
  %343 = fadd float %339, %342, !dbg !54
  %344 = and i32 %17, 15, !dbg !50
  %345 = icmp eq i32 %344, 0, !dbg !50
  %346 = and i1 %325, %345, !dbg !50
  %347 = bitcast float %343 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %326, <1 x i32> %347, i1 %346) #3, !dbg !50
  %348 = getelementptr i8, ptr addrspace(3) %326, i32 2048, !dbg !50
  %349 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %348, i1 %325) #3, !dbg !50
  %350 = bitcast i32 %349 to float, !dbg !50
  %351 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %349, i32 8, i32 31), !dbg !50
  %352 = bitcast i32 %351 to float, !dbg !50
  %353 = fadd float %350, %352, !dbg !54
  %354 = bitcast float %353 to i32, !dbg !50
  %355 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %354, i32 4, i32 31), !dbg !50
  %356 = bitcast i32 %355 to float, !dbg !50
  %357 = fadd float %353, %356, !dbg !54
  %358 = bitcast float %357 to i32, !dbg !50
  %359 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %358, i32 2, i32 31), !dbg !50
  %360 = bitcast i32 %359 to float, !dbg !50
  %361 = fadd float %357, %360, !dbg !54
  %362 = bitcast float %361 to i32, !dbg !50
  %363 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %362, i32 1, i32 31), !dbg !50
  %364 = bitcast i32 %363 to float, !dbg !50
  %365 = fadd float %361, %364, !dbg !54
  %366 = bitcast float %365 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %348, <1 x i32> %366, i1 %346) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %367 = getelementptr float, ptr addrspace(3) @global_smem, i32 %293, !dbg !50
  %368 = load i32, ptr addrspace(3) %367, align 16, !dbg !50
  %369 = getelementptr float, ptr addrspace(3) @global_smem, i32 %297, !dbg !50
  %370 = load i32, ptr addrspace(3) %369, align 16, !dbg !50
  %371 = getelementptr float, ptr addrspace(3) @global_smem, i32 %301, !dbg !50
  %372 = load i32, ptr addrspace(3) %371, align 16, !dbg !50
  %373 = getelementptr float, ptr addrspace(3) @global_smem, i32 %305, !dbg !50
  %374 = load i32, ptr addrspace(3) %373, align 16, !dbg !50
  %375 = getelementptr float, ptr addrspace(3) @global_smem, i32 %309, !dbg !50
  %376 = load i32, ptr addrspace(3) %375, align 16, !dbg !50
  %377 = getelementptr float, ptr addrspace(3) @global_smem, i32 %313, !dbg !50
  %378 = load i32, ptr addrspace(3) %377, align 16, !dbg !50
  %379 = getelementptr float, ptr addrspace(3) @global_smem, i32 %317, !dbg !50
  %380 = load i32, ptr addrspace(3) %379, align 16, !dbg !50
  %381 = getelementptr float, ptr addrspace(3) @global_smem, i32 %321, !dbg !50
  %382 = load i32, ptr addrspace(3) %381, align 16, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %383 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %19, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %383, i32 %368, i32 %370, i32 %372, i32 %374, i1 true) #3, !dbg !56
  %384 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %218, !dbg !56
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %384, i32 %376, i32 %378, i32 %380, i32 %382, i1 true) #3, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %385 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %215, !dbg !56
  %386 = load float, ptr addrspace(3) %385, align 4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %387 = extractelement <16 x float> %213, i64 8, !dbg !57
  %388 = bitcast float %387 to i32, !dbg !57
  %389 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %388, i32 16, i32 31), !dbg !57
  %390 = bitcast i32 %389 to float, !dbg !57
  %391 = fadd float %387, %390, !dbg !59
  %392 = bitcast float %391 to i32, !dbg !57
  %393 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %392, i32 8, i32 31), !dbg !57
  %394 = bitcast i32 %393 to float, !dbg !57
  %395 = fadd float %391, %394, !dbg !59
  %396 = extractelement <16 x float> %213, i64 9, !dbg !57
  %397 = bitcast float %396 to i32, !dbg !57
  %398 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %397, i32 16, i32 31), !dbg !57
  %399 = bitcast i32 %398 to float, !dbg !57
  %400 = fadd float %396, %399, !dbg !59
  %401 = bitcast float %400 to i32, !dbg !57
  %402 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %401, i32 8, i32 31), !dbg !57
  %403 = bitcast i32 %402 to float, !dbg !57
  %404 = fadd float %400, %403, !dbg !59
  %405 = extractelement <16 x float> %213, i64 10, !dbg !57
  %406 = bitcast float %405 to i32, !dbg !57
  %407 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %406, i32 16, i32 31), !dbg !57
  %408 = bitcast i32 %407 to float, !dbg !57
  %409 = fadd float %405, %408, !dbg !59
  %410 = bitcast float %409 to i32, !dbg !57
  %411 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %410, i32 8, i32 31), !dbg !57
  %412 = bitcast i32 %411 to float, !dbg !57
  %413 = fadd float %409, %412, !dbg !59
  %414 = extractelement <16 x float> %213, i64 11, !dbg !57
  %415 = bitcast float %414 to i32, !dbg !57
  %416 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %415, i32 16, i32 31), !dbg !57
  %417 = bitcast i32 %416 to float, !dbg !57
  %418 = fadd float %414, %417, !dbg !59
  %419 = bitcast float %418 to i32, !dbg !57
  %420 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %419, i32 8, i32 31), !dbg !57
  %421 = bitcast i32 %420 to float, !dbg !57
  %422 = fadd float %418, %421, !dbg !59
  %423 = extractelement <16 x float> %213, i64 12, !dbg !57
  %424 = bitcast float %423 to i32, !dbg !57
  %425 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %424, i32 16, i32 31), !dbg !57
  %426 = bitcast i32 %425 to float, !dbg !57
  %427 = fadd float %423, %426, !dbg !59
  %428 = bitcast float %427 to i32, !dbg !57
  %429 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %428, i32 8, i32 31), !dbg !57
  %430 = bitcast i32 %429 to float, !dbg !57
  %431 = fadd float %427, %430, !dbg !59
  %432 = extractelement <16 x float> %213, i64 13, !dbg !57
  %433 = bitcast float %432 to i32, !dbg !57
  %434 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %433, i32 16, i32 31), !dbg !57
  %435 = bitcast i32 %434 to float, !dbg !57
  %436 = fadd float %432, %435, !dbg !59
  %437 = bitcast float %436 to i32, !dbg !57
  %438 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %437, i32 8, i32 31), !dbg !57
  %439 = bitcast i32 %438 to float, !dbg !57
  %440 = fadd float %436, %439, !dbg !59
  %441 = extractelement <16 x float> %213, i64 14, !dbg !57
  %442 = bitcast float %441 to i32, !dbg !57
  %443 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %442, i32 16, i32 31), !dbg !57
  %444 = bitcast i32 %443 to float, !dbg !57
  %445 = fadd float %441, %444, !dbg !59
  %446 = bitcast float %445 to i32, !dbg !57
  %447 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %446, i32 8, i32 31), !dbg !57
  %448 = bitcast i32 %447 to float, !dbg !57
  %449 = fadd float %445, %448, !dbg !59
  %450 = extractelement <16 x float> %213, i64 15, !dbg !57
  %451 = bitcast float %450 to i32, !dbg !57
  %452 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %451, i32 16, i32 31), !dbg !57
  %453 = bitcast i32 %452 to float, !dbg !57
  %454 = fadd float %450, %453, !dbg !59
  %455 = bitcast float %454 to i32, !dbg !57
  %456 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %455, i32 8, i32 31), !dbg !57
  %457 = bitcast i32 %456 to float, !dbg !57
  %458 = fadd float %454, %457, !dbg !59
  %459 = bitcast float %395 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %295, <1 x i32> %459, i1 %292) #3, !dbg !57
  %460 = bitcast float %404 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %299, <1 x i32> %460, i1 %292) #3, !dbg !57
  %461 = bitcast float %413 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %461, i1 %292) #3, !dbg !57
  %462 = bitcast float %422 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %307, <1 x i32> %462, i1 %292) #3, !dbg !57
  %463 = bitcast float %431 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %463, i1 %292) #3, !dbg !57
  %464 = bitcast float %440 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %315, <1 x i32> %464, i1 %292) #3, !dbg !57
  %465 = bitcast float %449 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %319, <1 x i32> %465, i1 %292) #3, !dbg !57
  %466 = bitcast float %458 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %323, <1 x i32> %466, i1 %292) #3, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %467 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %326, i1 %325) #3, !dbg !57
  %468 = bitcast i32 %467 to float, !dbg !57
  %469 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %467, i32 8, i32 31), !dbg !57
  %470 = bitcast i32 %469 to float, !dbg !57
  %471 = fadd float %468, %470, !dbg !59
  %472 = bitcast float %471 to i32, !dbg !57
  %473 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %472, i32 4, i32 31), !dbg !57
  %474 = bitcast i32 %473 to float, !dbg !57
  %475 = fadd float %471, %474, !dbg !59
  %476 = bitcast float %475 to i32, !dbg !57
  %477 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %476, i32 2, i32 31), !dbg !57
  %478 = bitcast i32 %477 to float, !dbg !57
  %479 = fadd float %475, %478, !dbg !59
  %480 = bitcast float %479 to i32, !dbg !57
  %481 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %480, i32 1, i32 31), !dbg !57
  %482 = bitcast i32 %481 to float, !dbg !57
  %483 = fadd float %479, %482, !dbg !59
  %484 = bitcast float %483 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %326, <1 x i32> %484, i1 %346) #3, !dbg !57
  %485 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %348, i1 %325) #3, !dbg !57
  %486 = bitcast i32 %485 to float, !dbg !57
  %487 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %485, i32 8, i32 31), !dbg !57
  %488 = bitcast i32 %487 to float, !dbg !57
  %489 = fadd float %486, %488, !dbg !59
  %490 = bitcast float %489 to i32, !dbg !57
  %491 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %490, i32 4, i32 31), !dbg !57
  %492 = bitcast i32 %491 to float, !dbg !57
  %493 = fadd float %489, %492, !dbg !59
  %494 = bitcast float %493 to i32, !dbg !57
  %495 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %494, i32 2, i32 31), !dbg !57
  %496 = bitcast i32 %495 to float, !dbg !57
  %497 = fadd float %493, %496, !dbg !59
  %498 = bitcast float %497 to i32, !dbg !57
  %499 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %498, i32 1, i32 31), !dbg !57
  %500 = bitcast i32 %499 to float, !dbg !57
  %501 = fadd float %497, %500, !dbg !59
  %502 = bitcast float %501 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %348, <1 x i32> %502, i1 %346) #3, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %503 = load i32, ptr addrspace(3) %367, align 16, !dbg !57
  %504 = load i32, ptr addrspace(3) %369, align 16, !dbg !57
  %505 = load i32, ptr addrspace(3) %371, align 16, !dbg !57
  %506 = load i32, ptr addrspace(3) %373, align 16, !dbg !57
  %507 = load i32, ptr addrspace(3) %375, align 16, !dbg !57
  %508 = load i32, ptr addrspace(3) %377, align 16, !dbg !57
  %509 = load i32, ptr addrspace(3) %379, align 16, !dbg !57
  %510 = load i32, ptr addrspace(3) %381, align 16, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %383, i32 %503, i32 %504, i32 %505, i32 %506, i1 true) #3, !dbg !60
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %384, i32 %507, i32 %508, i32 %509, i32 %510, i1 true) #3, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %511 = load float, ptr addrspace(3) %385, align 4, !dbg !60
  %512 = sext i32 %216 to i64, !dbg !61
  %513 = getelementptr half, ptr addrspace(1) %9, i64 %512, !dbg !61
  %514 = fptrunc float %386 to half, !dbg !56
  %515 = and i32 %17, 448, !dbg !56
  %516 = icmp eq i32 %515, 0, !dbg !56
  %517 = bitcast half %514 to i16, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %517, ptr addrspace(1) %513, i1 %516) #3, !dbg !56
  %518 = getelementptr half, ptr addrspace(1) %10, i64 %512, !dbg !62
  %519 = fptrunc float %511 to half, !dbg !60
  %520 = bitcast half %519 to i16, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %520, ptr addrspace(1) %518, i1 %516) #3, !dbg !60
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cz4raaxbxby7dltdikbrpmyoxvbaywto5wc2t7rus6zhnzkqrtmy.py", directory: "/tmp/torchinductor_root/z4")
!4 = !{ptr @triton_red_fused__to_copy_add_mul_sum_14, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mul_sum_14", linkageName: "triton_red_fused__to_copy_add_mul_sum_14", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 37, scope: !6)
!14 = !DILocation(line: 30, column: 40, scope: !6)
!15 = !DILocation(line: 31, column: 31, scope: !6)
!16 = !DILocation(line: 32, column: 29, scope: !6)
!17 = !DILocation(line: 36, column: 44, scope: !6)
!18 = !DILocation(line: 36, column: 39, scope: !6)
!19 = !DILocation(line: 36, column: 34, scope: !6)
!20 = !DILocation(line: 36, column: 51, scope: !6)
!21 = !DILocation(line: 37, column: 34, scope: !6)
!22 = !DILocation(line: 37, column: 51, scope: !6)
!23 = !DILocation(line: 38, column: 34, scope: !6)
!24 = !DILocation(line: 38, column: 51, scope: !6)
!25 = !DILocation(line: 39, column: 34, scope: !6)
!26 = !DILocation(line: 39, column: 51, scope: !6)
!27 = !DILocation(line: 40, column: 34, scope: !6)
!28 = !DILocation(line: 40, column: 41, scope: !6)
!29 = !DILocation(line: 41, column: 35, scope: !6)
!30 = !DILocation(line: 41, column: 52, scope: !6)
!31 = !DILocation(line: 42, column: 35, scope: !6)
!32 = !DILocation(line: 42, column: 52, scope: !6)
!33 = !DILocation(line: 43, column: 35, scope: !6)
!34 = !DILocation(line: 43, column: 52, scope: !6)
!35 = !DILocation(line: 44, column: 35, scope: !6)
!36 = !DILocation(line: 44, column: 42, scope: !6)
!37 = !DILocation(line: 36, column: 105, scope: !6)
!38 = !DILocation(line: 38, column: 105, scope: !6)
!39 = !DILocation(line: 39, column: 105, scope: !6)
!40 = !DILocation(line: 41, column: 106, scope: !6)
!41 = !DILocation(line: 42, column: 106, scope: !6)
!42 = !DILocation(line: 37, column: 105, scope: !6)
!43 = !DILocation(line: 46, column: 22, scope: !6)
!44 = !DILocation(line: 54, column: 24, scope: !6)
!45 = !DILocation(line: 45, column: 22, scope: !6)
!46 = !DILocation(line: 48, column: 22, scope: !6)
!47 = !DILocation(line: 50, column: 23, scope: !6)
!48 = !DILocation(line: 52, column: 25, scope: !6)
!49 = !DILocation(line: 53, column: 42, scope: !6)
!50 = !DILocation(line: 286, column: 36, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !6, file: !52, discriminator: 0)
!52 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!53 = !DILocation(line: 63, column: 27, scope: !6)
!54 = !DILocation(line: 256, column: 15, scope: !55, inlinedAt: !53)
!55 = distinct !DILexicalBlockFile(scope: !51, file: !52, discriminator: 0)
!56 = !DILocation(line: 65, column: 37, scope: !6)
!57 = !DILocation(line: 286, column: 36, scope: !51, inlinedAt: !58)
!58 = !DILocation(line: 64, column: 27, scope: !6)
!59 = !DILocation(line: 256, column: 15, scope: !55, inlinedAt: !58)
!60 = !DILocation(line: 66, column: 37, scope: !6)
!61 = !DILocation(line: 65, column: 25, scope: !6)
!62 = !DILocation(line: 66, column: 25, scope: !6)
!63 = !DILocation(line: 66, column: 4, scope: !6)
