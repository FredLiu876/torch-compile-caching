; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 6, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 64, !dbg !11
  %13 = lshr i32 %11, 1, !dbg !11
  %14 = and i32 %13, 63, !dbg !11
  %15 = or disjoint i32 %14, %10, !dbg !12
  %16 = icmp slt i32 %15, %5, !dbg !13
  %17 = shl i32 %11, 2, !dbg !14
  %18 = and i32 %17, 4, !dbg !14
  %19 = shl i32 %15, 12, !dbg !15
  %20 = or disjoint i32 %19, %18
  br label %21, !dbg !16

21:                                               ; preds = %8, %21
  %22 = phi float [ 0.000000e+00, %8 ], [ %50, %21 ]
  %23 = phi float [ 0.000000e+00, %8 ], [ %51, %21 ]
  %24 = phi float [ 0.000000e+00, %8 ], [ %62, %21 ]
  %25 = phi float [ 0.000000e+00, %8 ], [ %63, %21 ]
  %26 = phi i32 [ 0, %8 ], [ %67, %21 ]
  %27 = or i32 %20, %26, !dbg !17
  %28 = sext i32 %27 to i64, !dbg !18
  %29 = getelementptr half, ptr addrspace(1) %2, i64 %28, !dbg !18
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %29, i1 %16) #5, !dbg !19
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !19
  %32 = bitcast i32 %31 to <2 x half>, !dbg !19
  %33 = extractvalue { i32, i32 } %30, 1, !dbg !19
  %34 = bitcast i32 %33 to <2 x half>, !dbg !19
  %35 = getelementptr half, ptr addrspace(1) %0, i64 %28, !dbg !20
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %35, i1 %16) #5, !dbg !21
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !21
  %38 = bitcast i32 %37 to <2 x half>, !dbg !21
  %39 = extractvalue { i32, i32 } %36, 1, !dbg !21
  %40 = bitcast i32 %39 to <2 x half>, !dbg !21
  %41 = fpext <2 x half> %32 to <2 x float>, !dbg !22
  %42 = fpext <2 x half> %38 to <2 x float>, !dbg !23
  %43 = fadd <2 x float> %41, %42, !dbg !24
  %44 = fmul <2 x float> %43, %43, !dbg !25
  %45 = extractelement <2 x float> %44, i64 0, !dbg !25
  %46 = fmul <2 x float> %43, %43, !dbg !25
  %47 = extractelement <2 x float> %46, i64 1, !dbg !25
  %48 = fadd float %22, %45, !dbg !26
  %49 = fadd float %23, %47, !dbg !26
  %50 = select i1 %16, float %48, float %22, !dbg !27
  %51 = select i1 %16, float %49, float %23, !dbg !27
  %52 = fptrunc <2 x float> %43 to <2 x half>, !dbg !28
  %53 = fpext <2 x half> %34 to <2 x float>, !dbg !22
  %54 = fpext <2 x half> %40 to <2 x float>, !dbg !23
  %55 = fadd <2 x float> %53, %54, !dbg !24
  %56 = fmul <2 x float> %55, %55, !dbg !25
  %57 = extractelement <2 x float> %56, i64 0, !dbg !25
  %58 = fmul <2 x float> %55, %55, !dbg !25
  %59 = extractelement <2 x float> %58, i64 1, !dbg !25
  %60 = fadd float %24, %57, !dbg !26
  %61 = fadd float %25, %59, !dbg !26
  %62 = select i1 %16, float %60, float %24, !dbg !27
  %63 = select i1 %16, float %61, float %25, !dbg !27
  %64 = fptrunc <2 x float> %55 to <2 x half>, !dbg !28
  %65 = bitcast <2 x half> %52 to i32, !dbg !28
  %66 = bitcast <2 x half> %64 to i32, !dbg !28
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %65, i32 %66, ptr addrspace(1) %35, i1 %16) #5, !dbg !28
  %67 = add nuw nsw i32 %26, 8, !dbg !16
  %68 = icmp samesign ult i32 %26, 4088, !dbg !16
  br i1 %68, label %21, label %69, !dbg !16

69:                                               ; preds = %21
  %70 = icmp eq i32 %12, 0, !dbg !11
  %71 = and i32 %11, 63, !dbg !11
  %72 = or disjoint i32 %10, %71, !dbg !12
  %73 = icmp slt i32 %72, %5, !dbg !13
  %74 = fadd float %50, %51, !dbg !29
  %75 = fadd float %62, %74, !dbg !29
  %76 = fadd float %63, %75, !dbg !29
  %77 = bitcast float %76 to i32, !dbg !34
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 1, i32 31), !dbg !34
  %79 = bitcast i32 %78 to float, !dbg !34
  %80 = fadd float %76, %79, !dbg !29
  %81 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %14, !dbg !35
  %82 = bitcast float %80 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 true) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %83 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %71, !dbg !35
  %84 = load float, ptr addrspace(3) %83, align 4, !dbg !35
  %85 = tail call float @llvm.nvvm.div.full(float %84, float 4.096000e+03), !dbg !36
  %86 = tail call float @llvm.nvvm.div.full(float %80, float 4.096000e+03), !dbg !36
  %87 = fadd float %85, 0x3EE4F8B580000000, !dbg !37
  %88 = fadd float %86, 0x3EE4F8B580000000, !dbg !37
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i = icmp eq i32 %89, 0, !dbg !35
  br i1 %.not.i, label %92, label %90, !dbg !35

90:                                               ; preds = %69
  %91 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %87), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

92:                                               ; preds = %69
  %93 = tail call float @llvm.nvvm.rsqrt.approx.f(float %87), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

__nv_rsqrtf.exit:                                 ; preds = %90, %92
  %.0.i = phi float [ %91, %90 ], [ %93, %92 ], !dbg !35
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i13 = icmp eq i32 %97, 0, !dbg !35
  br i1 %.not.i13, label %100, label %98, !dbg !35

98:                                               ; preds = %__nv_rsqrtf.exit
  %99 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %88), !dbg !35
  br label %__nv_rsqrtf.exit15, !dbg !35

100:                                              ; preds = %__nv_rsqrtf.exit
  %101 = tail call float @llvm.nvvm.rsqrt.approx.f(float %88), !dbg !35
  br label %__nv_rsqrtf.exit15, !dbg !35

__nv_rsqrtf.exit15:                               ; preds = %98, %100
  %.0.i14 = phi float [ %99, %98 ], [ %101, %100 ], !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %102 = sext i32 %72 to i64, !dbg !39
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %102, !dbg !39
  %104 = bitcast float %.0.i to i32, !dbg !40
  %105 = and i1 %70, %73, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %104, ptr addrspace(1) %103, i1 %105) #5, !dbg !40
  %106 = zext nneg i32 %18 to i64, !dbg !41
  %107 = insertelement <2 x float> poison, float %.0.i14, i64 0, !dbg !42
  %108 = shufflevector <2 x float> %107, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !42
  br label %109, !dbg !41

109:                                              ; preds = %__nv_rsqrtf.exit15, %109
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit15 ], [ %indvars.iv.next, %109 ]
  %110 = or disjoint i64 %indvars.iv, %106, !dbg !43
  %111 = getelementptr half, ptr addrspace(1) %3, i64 %110, !dbg !44
  %112 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %111, i1 true) #5, !dbg !45
  %113 = extractvalue { i32, i32 } %112, 0, !dbg !45
  %114 = bitcast i32 %113 to <2 x half>, !dbg !45
  %115 = extractvalue { i32, i32 } %112, 1, !dbg !45
  %116 = bitcast i32 %115 to <2 x half>, !dbg !45
  %117 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %20, %117
  %118 = sext i32 %.reass to i64, !dbg !46
  %119 = getelementptr half, ptr addrspace(1) %0, i64 %118, !dbg !46
  %120 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %119, i1 %16) #5, !dbg !47
  %121 = extractvalue { i32, i32 } %120, 0, !dbg !47
  %122 = bitcast i32 %121 to <2 x half>, !dbg !47
  %123 = extractvalue { i32, i32 } %120, 1, !dbg !47
  %124 = bitcast i32 %123 to <2 x half>, !dbg !47
  %125 = getelementptr half, ptr addrspace(1) %4, i64 %118, !dbg !48
  %126 = fpext <2 x half> %114 to <2 x float>, !dbg !49
  %127 = fpext <2 x half> %122 to <2 x float>, !dbg !50
  %128 = fmul <2 x float> %108, %127, !dbg !42
  %129 = fmul <2 x float> %128, %126, !dbg !51
  %130 = fptrunc <2 x float> %129 to <2 x half>, !dbg !52
  %131 = fpext <2 x half> %116 to <2 x float>, !dbg !49
  %132 = fpext <2 x half> %124 to <2 x float>, !dbg !50
  %133 = fmul <2 x float> %108, %132, !dbg !42
  %134 = fmul <2 x float> %133, %131, !dbg !51
  %135 = fptrunc <2 x float> %134 to <2 x half>, !dbg !52
  %136 = bitcast <2 x half> %130 to i32, !dbg !52
  %137 = bitcast <2 x half> %135 to i32, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %136, i32 %137, ptr addrspace(1) %125, i1 %16) #5, !dbg !52
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !41
  %138 = icmp samesign ult i64 %indvars.iv, 4088, !dbg !41
  br i1 %138, label %109, label %139, !dbg !41

139:                                              ; preds = %109
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clyhrh4d6xaqs2dxaqhwkhrgdrw7d6mkpbykg5u5uxw52daopsjs.py", directory: "./local_cache/ly")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 29, column: 40, scope: !6)
!17 = !DILocation(line: 35, column: 41, scope: !6)
!18 = !DILocation(line: 35, column: 34, scope: !6)
!19 = !DILocation(line: 35, column: 51, scope: !6)
!20 = !DILocation(line: 36, column: 38, scope: !6)
!21 = !DILocation(line: 36, column: 55, scope: !6)
!22 = !DILocation(line: 35, column: 113, scope: !6)
!23 = !DILocation(line: 36, column: 117, scope: !6)
!24 = !DILocation(line: 37, column: 22, scope: !6)
!25 = !DILocation(line: 39, column: 22, scope: !6)
!26 = !DILocation(line: 41, column: 23, scope: !6)
!27 = !DILocation(line: 42, column: 48, scope: !6)
!28 = !DILocation(line: 43, column: 55, scope: !6)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !33)
!30 = distinct !DILexicalBlockFile(scope: !32, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!32 = distinct !DILexicalBlockFile(scope: !6, file: !31, discriminator: 0)
!33 = !DILocation(line: 44, column: 25, scope: !6)
!34 = !DILocation(line: 286, column: 36, scope: !32, inlinedAt: !33)
!35 = !DILocation(line: 49, column: 28, scope: !6)
!36 = !DILocation(line: 46, column: 19, scope: !6)
!37 = !DILocation(line: 48, column: 19, scope: !6)
!38 = !DILocation(line: 50, column: 4, scope: !6)
!39 = !DILocation(line: 51, column: 28, scope: !6)
!40 = !DILocation(line: 51, column: 40, scope: !6)
!41 = !DILocation(line: 52, column: 40, scope: !6)
!42 = !DILocation(line: 61, column: 24, scope: !6)
!43 = !DILocation(line: 53, column: 31, scope: !6)
!44 = !DILocation(line: 58, column: 35, scope: !6)
!45 = !DILocation(line: 58, column: 42, scope: !6)
!46 = !DILocation(line: 59, column: 39, scope: !6)
!47 = !DILocation(line: 59, column: 56, scope: !6)
!48 = !DILocation(line: 64, column: 29, scope: !6)
!49 = !DILocation(line: 58, column: 95, scope: !6)
!50 = !DILocation(line: 59, column: 118, scope: !6)
!51 = !DILocation(line: 63, column: 24, scope: !6)
!52 = !DILocation(line: 64, column: 53, scope: !6)
!53 = !DILocation(line: 52, column: 4, scope: !6)
