; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = icmp slt i32 %9, %5, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 31, !dbg !11
  %13 = lshr i32 %11, 5, !dbg !11
  %14 = shl i32 %11, 3, !dbg !11
  %15 = and i32 %14, 2040, !dbg !11
  %16 = or disjoint i32 %15, 2048, !dbg !11
  %17 = shl i32 %9, 12, !dbg !12
  %18 = or disjoint i32 %15, %17, !dbg !13
  %19 = or disjoint i32 %16, %17, !dbg !13
  %20 = sext i32 %18 to i64, !dbg !14
  %21 = getelementptr half, ptr addrspace(1) %2, i64 %20, !dbg !14
  %22 = sext i32 %19 to i64, !dbg !14
  %23 = getelementptr half, ptr addrspace(1) %2, i64 %22, !dbg !14
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %21, i1 %10) #5, !dbg !15
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !15
  %26 = bitcast i32 %25 to <2 x half>, !dbg !15
  %27 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !15
  %28 = bitcast i32 %27 to <2 x half>, !dbg !15
  %29 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !15
  %30 = bitcast i32 %29 to <2 x half>, !dbg !15
  %31 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !15
  %32 = bitcast i32 %31 to <2 x half>, !dbg !15
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %23, i1 %10) #5, !dbg !15
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !15
  %35 = bitcast i32 %34 to <2 x half>, !dbg !15
  %36 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !15
  %37 = bitcast i32 %36 to <2 x half>, !dbg !15
  %38 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !15
  %39 = bitcast i32 %38 to <2 x half>, !dbg !15
  %40 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !15
  %41 = bitcast i32 %40 to <2 x half>, !dbg !15
  %42 = getelementptr half, ptr addrspace(1) %0, i64 %20, !dbg !16
  %43 = getelementptr half, ptr addrspace(1) %0, i64 %22, !dbg !16
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %42, i1 %10) #5, !dbg !17
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !17
  %46 = bitcast i32 %45 to <2 x half>, !dbg !17
  %47 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !17
  %48 = bitcast i32 %47 to <2 x half>, !dbg !17
  %49 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !17
  %50 = bitcast i32 %49 to <2 x half>, !dbg !17
  %51 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !17
  %52 = bitcast i32 %51 to <2 x half>, !dbg !17
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %43, i1 %10) #5, !dbg !17
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !17
  %55 = bitcast i32 %54 to <2 x half>, !dbg !17
  %56 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !17
  %57 = bitcast i32 %56 to <2 x half>, !dbg !17
  %58 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !17
  %59 = bitcast i32 %58 to <2 x half>, !dbg !17
  %60 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !17
  %61 = bitcast i32 %60 to <2 x half>, !dbg !17
  %62 = fpext <2 x half> %26 to <2 x float>, !dbg !18
  %63 = fpext <2 x half> %46 to <2 x float>, !dbg !19
  %64 = fadd <2 x float> %62, %63, !dbg !20
  %65 = fmul <2 x float> %64, %64, !dbg !21
  %66 = fmul <2 x float> %64, %64, !dbg !21
  %67 = fptrunc <2 x float> %64 to <2 x half>, !dbg !22
  %68 = fpext <2 x half> %28 to <2 x float>, !dbg !18
  %69 = fpext <2 x half> %48 to <2 x float>, !dbg !19
  %70 = fadd <2 x float> %68, %69, !dbg !20
  %71 = fmul <2 x float> %70, %70, !dbg !21
  %72 = fmul <2 x float> %70, %70, !dbg !21
  %73 = fptrunc <2 x float> %70 to <2 x half>, !dbg !22
  %74 = fpext <2 x half> %30 to <2 x float>, !dbg !18
  %75 = fpext <2 x half> %50 to <2 x float>, !dbg !19
  %76 = fadd <2 x float> %74, %75, !dbg !20
  %77 = fmul <2 x float> %76, %76, !dbg !21
  %78 = fmul <2 x float> %76, %76, !dbg !21
  %79 = fptrunc <2 x float> %76 to <2 x half>, !dbg !22
  %80 = fpext <2 x half> %32 to <2 x float>, !dbg !18
  %81 = fpext <2 x half> %52 to <2 x float>, !dbg !19
  %82 = fadd <2 x float> %80, %81, !dbg !20
  %83 = fmul <2 x float> %82, %82, !dbg !21
  %84 = fmul <2 x float> %82, %82, !dbg !21
  %85 = fptrunc <2 x float> %82 to <2 x half>, !dbg !22
  %86 = fpext <2 x half> %35 to <2 x float>, !dbg !18
  %87 = fpext <2 x half> %55 to <2 x float>, !dbg !19
  %88 = fadd <2 x float> %86, %87, !dbg !20
  %89 = fmul <2 x float> %88, %88, !dbg !21
  %90 = fmul <2 x float> %88, %88, !dbg !21
  %91 = fptrunc <2 x float> %88 to <2 x half>, !dbg !22
  %92 = fpext <2 x half> %37 to <2 x float>, !dbg !18
  %93 = fpext <2 x half> %57 to <2 x float>, !dbg !19
  %94 = fadd <2 x float> %92, %93, !dbg !20
  %95 = fmul <2 x float> %94, %94, !dbg !21
  %96 = fmul <2 x float> %94, %94, !dbg !21
  %97 = fptrunc <2 x float> %94 to <2 x half>, !dbg !22
  %98 = fpext <2 x half> %39 to <2 x float>, !dbg !18
  %99 = fpext <2 x half> %59 to <2 x float>, !dbg !19
  %100 = fadd <2 x float> %98, %99, !dbg !20
  %101 = fmul <2 x float> %100, %100, !dbg !21
  %102 = fmul <2 x float> %100, %100, !dbg !21
  %103 = fptrunc <2 x float> %100 to <2 x half>, !dbg !22
  %104 = fpext <2 x half> %41 to <2 x float>, !dbg !18
  %105 = fpext <2 x half> %61 to <2 x float>, !dbg !19
  %106 = fadd <2 x float> %104, %105, !dbg !20
  %107 = fmul <2 x float> %106, %106, !dbg !21
  %108 = fmul <2 x float> %106, %106, !dbg !21
  %109 = fptrunc <2 x float> %106 to <2 x half>, !dbg !22
  %110 = bitcast <2 x half> %67 to i32, !dbg !22
  %111 = bitcast <2 x half> %73 to i32, !dbg !22
  %112 = bitcast <2 x half> %79 to i32, !dbg !22
  %113 = bitcast <2 x half> %85 to i32, !dbg !22
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %110, i32 %111, i32 %112, i32 %113, ptr addrspace(1) %42, i1 %10) #5, !dbg !22
  %114 = bitcast <2 x half> %91 to i32, !dbg !22
  %115 = bitcast <2 x half> %97 to i32, !dbg !22
  %116 = bitcast <2 x half> %103 to i32, !dbg !22
  %117 = bitcast <2 x half> %109 to i32, !dbg !22
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %114, i32 %115, i32 %116, i32 %117, ptr addrspace(1) %43, i1 %10) #5, !dbg !22
  %shift = shufflevector <2 x float> %66, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !23
  %118 = fadd <2 x float> %65, %shift, !dbg !23
  %119 = fadd <2 x float> %71, %118, !dbg !23
  %shift25 = shufflevector <2 x float> %72, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !23
  %120 = fadd <2 x float> %shift25, %119, !dbg !23
  %121 = fadd <2 x float> %77, %120, !dbg !23
  %shift26 = shufflevector <2 x float> %78, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !23
  %122 = fadd <2 x float> %shift26, %121, !dbg !23
  %123 = fadd <2 x float> %83, %122, !dbg !23
  %shift27 = shufflevector <2 x float> %84, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !23
  %124 = fadd <2 x float> %shift27, %123, !dbg !23
  %125 = fadd <2 x float> %89, %124, !dbg !23
  %shift28 = shufflevector <2 x float> %90, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !23
  %126 = fadd <2 x float> %shift28, %125, !dbg !23
  %127 = fadd <2 x float> %95, %126, !dbg !23
  %shift29 = shufflevector <2 x float> %96, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !23
  %128 = fadd <2 x float> %shift29, %127, !dbg !23
  %129 = fadd <2 x float> %101, %128, !dbg !23
  %shift30 = shufflevector <2 x float> %102, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !23
  %130 = fadd <2 x float> %shift30, %129, !dbg !23
  %131 = fadd <2 x float> %107, %130, !dbg !23
  %shift31 = shufflevector <2 x float> %108, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !23
  %132 = fadd <2 x float> %shift31, %131, !dbg !23
  %133 = extractelement <2 x float> %132, i64 0, !dbg !23
  %134 = select i1 %10, float %133, float 0.000000e+00, !dbg !23
  %135 = bitcast float %134 to i32, !dbg !28
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 16, i32 31), !dbg !28
  %137 = bitcast i32 %136 to float, !dbg !28
  %138 = fadd float %134, %137, !dbg !23
  %139 = bitcast float %138 to i32, !dbg !28
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 8, i32 31), !dbg !28
  %141 = bitcast i32 %140 to float, !dbg !28
  %142 = fadd float %138, %141, !dbg !23
  %143 = bitcast float %142 to i32, !dbg !28
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 4, i32 31), !dbg !28
  %145 = bitcast i32 %144 to float, !dbg !28
  %146 = fadd float %142, %145, !dbg !23
  %147 = bitcast float %146 to i32, !dbg !28
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 2, i32 31), !dbg !28
  %149 = bitcast i32 %148 to float, !dbg !28
  %150 = fadd float %146, %149, !dbg !23
  %151 = bitcast float %150 to i32, !dbg !28
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 1, i32 31), !dbg !28
  %153 = bitcast i32 %152 to float, !dbg !28
  %154 = fadd float %150, %153, !dbg !23
  %155 = and i32 %13, 7, !dbg !28
  %156 = icmp eq i32 %12, 0, !dbg !28
  %157 = getelementptr float, ptr addrspace(3) @global_smem, i32 %155, !dbg !28
  %158 = bitcast float %154 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %158, i1 %156) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %159 = icmp slt i32 %11, 8, !dbg !28
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !28
  %161 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %160, i1 %159) #5, !dbg !28
  %162 = bitcast i32 %161 to float, !dbg !28
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 4, i32 31), !dbg !28
  %164 = bitcast i32 %163 to float, !dbg !28
  %165 = fadd float %162, %164, !dbg !23
  %166 = bitcast float %165 to i32, !dbg !28
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 2, i32 31), !dbg !28
  %168 = bitcast i32 %167 to float, !dbg !28
  %169 = fadd float %165, %168, !dbg !23
  %170 = bitcast float %169 to i32, !dbg !28
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 1, i32 31), !dbg !28
  %172 = bitcast i32 %171 to float, !dbg !28
  %173 = fadd float %169, %172, !dbg !23
  %174 = and i32 %11, 7, !dbg !28
  %175 = icmp eq i32 %174, 0, !dbg !28
  %176 = and i1 %159, %175, !dbg !28
  %177 = bitcast float %173 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %177, i1 %176) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %178 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !28
  %179 = tail call float @llvm.nvvm.div.full(float %178, float 4.096000e+03), !dbg !29
  %180 = fadd float %179, 0x3EE4F8B580000000, !dbg !30
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i = icmp eq i32 %181, 0, !dbg !31
  br i1 %.not.i, label %184, label %182, !dbg !31

182:                                              ; preds = %8
  %183 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %180), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

184:                                              ; preds = %8
  %185 = tail call float @llvm.nvvm.rsqrt.approx.f(float %180), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

__nv_rsqrtf.exit:                                 ; preds = %182, %184
  %.0.i = phi float [ %183, %182 ], [ %185, %184 ], !dbg !31
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i22 = icmp eq i32 %193, 0, !dbg !31
  br i1 %.not.i22, label %196, label %194, !dbg !31

194:                                              ; preds = %__nv_rsqrtf.exit
  %195 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %180), !dbg !31
  br label %__nv_rsqrtf.exit24, !dbg !31

196:                                              ; preds = %__nv_rsqrtf.exit
  %197 = tail call float @llvm.nvvm.rsqrt.approx.f(float %180), !dbg !31
  br label %__nv_rsqrtf.exit24, !dbg !31

__nv_rsqrtf.exit24:                               ; preds = %194, %196
  %.0.i23 = phi float [ %195, %194 ], [ %197, %196 ], !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %198 = sext i32 %9 to i64, !dbg !33
  %199 = getelementptr float, ptr addrspace(1) %1, i64 %198, !dbg !33
  %200 = and i32 %11, 255, !dbg !34
  %201 = icmp eq i32 %200, 0, !dbg !34
  %202 = bitcast float %.0.i to i32, !dbg !34
  %203 = and i1 %201, %10, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %202, ptr addrspace(1) %199, i1 %203) #5, !dbg !34
  %204 = zext nneg i32 %15 to i64, !dbg !35
  %205 = getelementptr half, ptr addrspace(1) %3, i64 %204, !dbg !35
  %206 = zext nneg i32 %16 to i64, !dbg !35
  %207 = getelementptr half, ptr addrspace(1) %3, i64 %206, !dbg !35
  %208 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %205, i1 true) #5, !dbg !36
  %209 = extractvalue { i32, i32, i32, i32 } %208, 0, !dbg !36
  %210 = bitcast i32 %209 to <2 x half>, !dbg !36
  %211 = extractvalue { i32, i32, i32, i32 } %208, 1, !dbg !36
  %212 = bitcast i32 %211 to <2 x half>, !dbg !36
  %213 = extractvalue { i32, i32, i32, i32 } %208, 2, !dbg !36
  %214 = bitcast i32 %213 to <2 x half>, !dbg !36
  %215 = extractvalue { i32, i32, i32, i32 } %208, 3, !dbg !36
  %216 = bitcast i32 %215 to <2 x half>, !dbg !36
  %217 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %207, i1 true) #5, !dbg !36
  %218 = extractvalue { i32, i32, i32, i32 } %217, 0, !dbg !36
  %219 = bitcast i32 %218 to <2 x half>, !dbg !36
  %220 = extractvalue { i32, i32, i32, i32 } %217, 1, !dbg !36
  %221 = bitcast i32 %220 to <2 x half>, !dbg !36
  %222 = extractvalue { i32, i32, i32, i32 } %217, 2, !dbg !36
  %223 = bitcast i32 %222 to <2 x half>, !dbg !36
  %224 = extractvalue { i32, i32, i32, i32 } %217, 3, !dbg !36
  %225 = bitcast i32 %224 to <2 x half>, !dbg !36
  %226 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %42, i1 %10) #5, !dbg !37
  %227 = extractvalue { i32, i32, i32, i32 } %226, 0, !dbg !37
  %228 = bitcast i32 %227 to <2 x half>, !dbg !37
  %229 = extractvalue { i32, i32, i32, i32 } %226, 1, !dbg !37
  %230 = bitcast i32 %229 to <2 x half>, !dbg !37
  %231 = extractvalue { i32, i32, i32, i32 } %226, 2, !dbg !37
  %232 = bitcast i32 %231 to <2 x half>, !dbg !37
  %233 = extractvalue { i32, i32, i32, i32 } %226, 3, !dbg !37
  %234 = bitcast i32 %233 to <2 x half>, !dbg !37
  %235 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %43, i1 %10) #5, !dbg !37
  %236 = extractvalue { i32, i32, i32, i32 } %235, 0, !dbg !37
  %237 = bitcast i32 %236 to <2 x half>, !dbg !37
  %238 = extractvalue { i32, i32, i32, i32 } %235, 1, !dbg !37
  %239 = bitcast i32 %238 to <2 x half>, !dbg !37
  %240 = extractvalue { i32, i32, i32, i32 } %235, 2, !dbg !37
  %241 = bitcast i32 %240 to <2 x half>, !dbg !37
  %242 = extractvalue { i32, i32, i32, i32 } %235, 3, !dbg !37
  %243 = bitcast i32 %242 to <2 x half>, !dbg !37
  %244 = getelementptr half, ptr addrspace(1) %4, i64 %20, !dbg !38
  %245 = getelementptr half, ptr addrspace(1) %4, i64 %22, !dbg !38
  %246 = fpext <2 x half> %210 to <2 x float>, !dbg !39
  %247 = fpext <2 x half> %228 to <2 x float>, !dbg !40
  %248 = insertelement <2 x float> poison, float %.0.i23, i64 0, !dbg !41
  %249 = shufflevector <2 x float> %248, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !41
  %250 = fmul <2 x float> %249, %247, !dbg !41
  %251 = fmul <2 x float> %250, %246, !dbg !42
  %252 = fptrunc <2 x float> %251 to <2 x half>, !dbg !43
  %253 = fpext <2 x half> %212 to <2 x float>, !dbg !39
  %254 = fpext <2 x half> %230 to <2 x float>, !dbg !40
  %255 = fmul <2 x float> %249, %254, !dbg !41
  %256 = fmul <2 x float> %255, %253, !dbg !42
  %257 = fptrunc <2 x float> %256 to <2 x half>, !dbg !43
  %258 = fpext <2 x half> %214 to <2 x float>, !dbg !39
  %259 = fpext <2 x half> %232 to <2 x float>, !dbg !40
  %260 = fmul <2 x float> %249, %259, !dbg !41
  %261 = fmul <2 x float> %260, %258, !dbg !42
  %262 = fptrunc <2 x float> %261 to <2 x half>, !dbg !43
  %263 = fpext <2 x half> %216 to <2 x float>, !dbg !39
  %264 = fpext <2 x half> %234 to <2 x float>, !dbg !40
  %265 = fmul <2 x float> %249, %264, !dbg !41
  %266 = fmul <2 x float> %265, %263, !dbg !42
  %267 = fptrunc <2 x float> %266 to <2 x half>, !dbg !43
  %268 = fpext <2 x half> %219 to <2 x float>, !dbg !39
  %269 = fpext <2 x half> %237 to <2 x float>, !dbg !40
  %270 = fmul <2 x float> %249, %269, !dbg !41
  %271 = fmul <2 x float> %270, %268, !dbg !42
  %272 = fptrunc <2 x float> %271 to <2 x half>, !dbg !43
  %273 = fpext <2 x half> %221 to <2 x float>, !dbg !39
  %274 = fpext <2 x half> %239 to <2 x float>, !dbg !40
  %275 = fmul <2 x float> %249, %274, !dbg !41
  %276 = fmul <2 x float> %275, %273, !dbg !42
  %277 = fptrunc <2 x float> %276 to <2 x half>, !dbg !43
  %278 = fpext <2 x half> %223 to <2 x float>, !dbg !39
  %279 = fpext <2 x half> %241 to <2 x float>, !dbg !40
  %280 = fmul <2 x float> %249, %279, !dbg !41
  %281 = fmul <2 x float> %280, %278, !dbg !42
  %282 = fptrunc <2 x float> %281 to <2 x half>, !dbg !43
  %283 = fpext <2 x half> %225 to <2 x float>, !dbg !39
  %284 = fpext <2 x half> %243 to <2 x float>, !dbg !40
  %285 = fmul <2 x float> %249, %284, !dbg !41
  %286 = fmul <2 x float> %285, %283, !dbg !42
  %287 = fptrunc <2 x float> %286 to <2 x half>, !dbg !43
  %288 = bitcast <2 x half> %252 to i32, !dbg !43
  %289 = bitcast <2 x half> %257 to i32, !dbg !43
  %290 = bitcast <2 x half> %262 to i32, !dbg !43
  %291 = bitcast <2 x half> %267 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %288, i32 %289, i32 %290, i32 %291, ptr addrspace(1) %244, i1 %10) #5, !dbg !43
  %292 = bitcast <2 x half> %272 to i32, !dbg !43
  %293 = bitcast <2 x half> %277 to i32, !dbg !43
  %294 = bitcast <2 x half> %282 to i32, !dbg !43
  %295 = bitcast <2 x half> %287 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %292, i32 %293, i32 %294, i32 %295, ptr addrspace(1) %245, i1 %10) #5, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6w7ysj4hzbjrc3ky2bllh4hizall6zebpysmidywv3kv2zvm2ex.py", directory: "/tmp/torchinductor_root/6w")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 21, scope: !6)
!11 = !DILocation(line: 25, column: 37, scope: !6)
!12 = !DILocation(line: 35, column: 46, scope: !6)
!13 = !DILocation(line: 35, column: 41, scope: !6)
!14 = !DILocation(line: 35, column: 34, scope: !6)
!15 = !DILocation(line: 35, column: 51, scope: !6)
!16 = !DILocation(line: 36, column: 38, scope: !6)
!17 = !DILocation(line: 36, column: 55, scope: !6)
!18 = !DILocation(line: 35, column: 113, scope: !6)
!19 = !DILocation(line: 36, column: 117, scope: !6)
!20 = !DILocation(line: 37, column: 22, scope: !6)
!21 = !DILocation(line: 39, column: 22, scope: !6)
!22 = !DILocation(line: 43, column: 55, scope: !6)
!23 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !6, file: !25, discriminator: 0)
!27 = !DILocation(line: 44, column: 25, scope: !6)
!28 = !DILocation(line: 286, column: 36, scope: !26, inlinedAt: !27)
!29 = !DILocation(line: 46, column: 19, scope: !6)
!30 = !DILocation(line: 48, column: 19, scope: !6)
!31 = !DILocation(line: 49, column: 28, scope: !6)
!32 = !DILocation(line: 50, column: 4, scope: !6)
!33 = !DILocation(line: 51, column: 28, scope: !6)
!34 = !DILocation(line: 51, column: 40, scope: !6)
!35 = !DILocation(line: 58, column: 35, scope: !6)
!36 = !DILocation(line: 58, column: 42, scope: !6)
!37 = !DILocation(line: 59, column: 56, scope: !6)
!38 = !DILocation(line: 64, column: 29, scope: !6)
!39 = !DILocation(line: 58, column: 95, scope: !6)
!40 = !DILocation(line: 59, column: 118, scope: !6)
!41 = !DILocation(line: 61, column: 24, scope: !6)
!42 = !DILocation(line: 63, column: 24, scope: !6)
!43 = !DILocation(line: 64, column: 53, scope: !6)
!44 = !DILocation(line: 52, column: 4, scope: !6)
