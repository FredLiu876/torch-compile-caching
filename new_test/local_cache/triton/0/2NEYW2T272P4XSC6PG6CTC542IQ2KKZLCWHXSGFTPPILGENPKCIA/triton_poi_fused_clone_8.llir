; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@__cudart_i2opi_f = internal unnamed_addr addrspace(1) constant [6 x i32] [i32 1011060801, i32 -614296167, i32 -181084736, i32 -64530479, i32 1313084713, i32 -1560706194], align 4

define ptx_kernel void @triton_poi_fused_clone_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %result.i.i.i.i1 = alloca [7 x i32], align 4
  %result.i.i.i.i = alloca [7 x i32], align 4
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 8, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = shl i32 %10, 1, !dbg !11
  %12 = and i32 %11, 254, !dbg !11
  %13 = or disjoint i32 %12, %9, !dbg !12
  %14 = or disjoint i32 %13, 1, !dbg !12
  %15 = icmp slt i32 %13, %5, !dbg !13
  %16 = sdiv i32 %13, 128, !dbg !14
  %17 = mul i32 %16, 128, !dbg !15
  %.decomposed = sub i32 %13, %17, !dbg !15
  %18 = srem i32 %14, 128, !dbg !15
  %19 = sdiv i32 %13, 1024, !dbg !16
  %20 = shl i32 %16, 9, !dbg !17
  %21 = add i32 %20, %.decomposed, !dbg !18
  %22 = sext i32 %21 to i64, !dbg !19
  %23 = getelementptr half, ptr addrspace(1) %1, i64 %22, !dbg !19
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %15) #4, !dbg !20
  %25 = add i32 %21, 128, !dbg !21
  %26 = sext i32 %25 to i64, !dbg !22
  %27 = getelementptr half, ptr addrspace(1) %1, i64 %26, !dbg !22
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %15) #4, !dbg !23
  %29 = add i32 %21, 256, !dbg !24
  %30 = sext i32 %29 to i64, !dbg !25
  %31 = getelementptr half, ptr addrspace(1) %1, i64 %30, !dbg !25
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %15) #4, !dbg !26
  %33 = add i32 %21, 384, !dbg !27
  %34 = sext i32 %33 to i64, !dbg !28
  %35 = getelementptr half, ptr addrspace(1) %1, i64 %34, !dbg !28
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %15) #4, !dbg !29
  %.lhs.trunc = trunc nsw i32 %.decomposed to i8, !dbg !30
  %37 = srem i8 %.lhs.trunc, 64, !dbg !30
  %.sext = sext i8 %37 to i32, !dbg !30
  %.lhs.trunc56 = trunc nsw i32 %18 to i8, !dbg !30
  %38 = srem i8 %.lhs.trunc56, 64, !dbg !30
  %.sext57 = sext i8 %38 to i32, !dbg !30
  %39 = mul i32 %4, %.sext, !dbg !31
  %40 = mul i32 %4, %.sext57, !dbg !31
  %41 = add i32 %39, %19, !dbg !32
  %42 = add i32 %40, %19, !dbg !32
  %43 = sext i32 %41 to i64, !dbg !33
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !33
  %45 = sext i32 %42 to i64, !dbg !33
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !33
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %15) #4, !dbg !34
  %48 = bitcast i32 %47 to float, !dbg !34
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %15) #4, !dbg !34
  %50 = bitcast i32 %49 to float, !dbg !34
  %51 = icmp sgt i32 %.decomposed, 63, !dbg !35
  %52 = add i32 %13, -64, !dbg !36
  %53 = sext i32 %52 to i64, !dbg !37
  %54 = getelementptr half, ptr addrspace(1) %0, i64 %53, !dbg !37
  %55 = and i1 %51, %15, !dbg !38
  %56 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %54, i1 %55) #4, !dbg !39
  %57 = icmp slt i32 %.decomposed, 64, !dbg !40
  %58 = add i32 %13, 64, !dbg !41
  %59 = sext i32 %58 to i64, !dbg !42
  %60 = getelementptr half, ptr addrspace(1) %0, i64 %59, !dbg !42
  %61 = and i1 %57, %15, !dbg !43
  %62 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %60, i1 %61) #4, !dbg !44
  call void @llvm.lifetime.start.p0(i64 28, ptr nonnull %result.i.i.i.i), !dbg !45
  %63 = fmul float %48, 0x3FE45F3060000000, !dbg !45
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i = icmp eq i32 %64, 0, !dbg !45
  %65 = tail call i32 @llvm.nvvm.f2i.rn.ftz(float %63) #4, !dbg !45
  %66 = tail call i32 @llvm.nvvm.f2i.rn(float %63) #4, !dbg !45
  %.01.i = select i1 %.not.i, i32 %66, i32 %65, !dbg !45
  %67 = sitofp i32 %.01.i to float, !dbg !45
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not15.i = icmp eq i32 %68, 0, !dbg !45
  %69 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %67, float 0xBFF921FB40000000, float %48) #4, !dbg !45
  %70 = tail call float @llvm.nvvm.fma.rn.f(float %67, float 0xBFF921FB40000000, float %48) #4, !dbg !45
  %.02.i = select i1 %.not15.i, float %70, float %69, !dbg !45
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not16.i = icmp eq i32 %71, 0, !dbg !45
  %72 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %67, float 0xBE74442D00000000, float %.02.i) #4, !dbg !45
  %73 = tail call float @llvm.nvvm.fma.rn.f(float %67, float 0xBE74442D00000000, float %.02.i) #4, !dbg !45
  %.03.i = select i1 %.not16.i, float %73, float %72, !dbg !45
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not17.i = icmp eq i32 %74, 0, !dbg !45
  %75 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %67, float 0xBCF84698A0000000, float %.03.i) #4, !dbg !45
  %76 = tail call float @llvm.nvvm.fma.rn.f(float %67, float 0xBCF84698A0000000, float %.03.i) #4, !dbg !45
  %.04.i = select i1 %.not17.i, float %76, float %75, !dbg !45
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not18.i = icmp eq i32 %77, 0, !dbg !45
  %78 = tail call float @llvm.nvvm.fabs.ftz.f(float %48) #4, !dbg !45
  %79 = tail call float @llvm.nvvm.fabs.f(float %48) #4, !dbg !45
  %.06.i = select i1 %.not18.i, float %79, float %78, !dbg !45
  %80 = fcmp ult float %.06.i, 1.056150e+05, !dbg !45
  br i1 %80, label %__internal_trig_reduction_kernel.exit.i.i, label %__nv_isinff.exit.i.i.i, !dbg !45

__nv_isinff.exit.i.i.i:                           ; preds = %7
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not19.i = icmp eq i32 %81, 0, !dbg !45
  %.07.i = select i1 %.not19.i, float %79, float %78, !dbg !45
  %82 = fcmp oeq float %.07.i, 0x7FF0000000000000, !dbg !45
  br i1 %82, label %__nv_fmul_rn.exit.i.i.i, label %86, !dbg !45

__nv_fmul_rn.exit.i.i.i:                          ; preds = %__nv_isinff.exit.i.i.i
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not27.i = icmp eq i32 %83, 0, !dbg !45
  %84 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %48, float 0.000000e+00) #4, !dbg !45
  %85 = tail call float @llvm.nvvm.mul.rn.f(float %48, float 0.000000e+00) #4, !dbg !45
  %.08.i = select i1 %.not27.i, float %85, float %84, !dbg !45
  br label %__internal_trig_reduction_kernel.exit.i.i, !dbg !45

86:                                               ; preds = %__nv_isinff.exit.i.i.i
  %87 = lshr i32 %47, 23, !dbg !45
  %88 = and i32 %87, 224, !dbg !45
  %89 = add nsw i32 %88, -128, !dbg !45
  %90 = shl i32 %47, 8, !dbg !45
  %91 = or i32 %90, -2147483648, !dbg !45
  %92 = lshr exact i32 %89, 5, !dbg !45
  br label %93, !dbg !45

93:                                               ; preds = %86, %93
  %indvars.iv = phi i64 [ 0, %86 ], [ %indvars.iv.next, %93 ]
  %hi.i.i.i.0.i58 = phi i32 [ 0, %86 ], [ %98, %93 ]
  %94 = getelementptr inbounds nuw [6 x i32], ptr addrspace(1) @__cudart_i2opi_f, i64 0, i64 %indvars.iv, !dbg !45
  %95 = load i32, ptr addrspace(1) %94, align 4, !dbg !45
  %96 = tail call { i32, i32 } asm "{\0A\09mad.lo.cc.u32   $0, $2, $3, $4;\0A\09madc.hi.u32     $1, $2, $3,  0;\0A\09}", "=r,=r,r,r,r"(i32 %95, i32 %91, i32 %hi.i.i.i.0.i58) #5, !dbg !45, !srcloc !46
  %97 = extractvalue { i32, i32 } %96, 0, !dbg !45
  %98 = extractvalue { i32, i32 } %96, 1, !dbg !45
  %99 = getelementptr inbounds nuw [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %indvars.iv, !dbg !45
  store i32 %97, ptr %99, align 4, !dbg !45
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !45
  %exitcond.not = icmp eq i64 %indvars.iv.next, 6, !dbg !45
  br i1 %exitcond.not, label %100, label %93, !dbg !45, !llvm.loop !47

100:                                              ; preds = %93
  %101 = getelementptr inbounds nuw i8, ptr %result.i.i.i.i, i64 24, !dbg !45
  store i32 %98, ptr %101, align 4, !dbg !45
  %102 = sub nsw i32 6, %92, !dbg !45
  %103 = sext i32 %102 to i64, !dbg !45
  %104 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %103, !dbg !45
  %105 = load i32, ptr %104, align 4, !dbg !45
  %106 = sub nsw i32 5, %92, !dbg !45
  %107 = sext i32 %106 to i64, !dbg !45
  %108 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %107, !dbg !45
  %109 = load i32, ptr %108, align 4, !dbg !45
  %110 = freeze i32 %109, !dbg !45
  %111 = and i32 %47, 260046848, !dbg !45
  %.not20.i = icmp eq i32 %111, 0, !dbg !45
  br i1 %.not20.i, label %__internal_trig_reduction_slowpath.exit.i.i.i, label %112, !dbg !45

112:                                              ; preds = %100
  %113 = sub nsw i32 4, %92, !dbg !45
  %114 = sext i32 %113 to i64, !dbg !45
  %115 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %114, !dbg !45
  %116 = load i32, ptr %115, align 4, !dbg !45
  %117 = tail call i32 @llvm.fshl.i32(i32 %110, i32 %116, i32 %87), !dbg !45
  br label %__internal_trig_reduction_slowpath.exit.i.i.i, !dbg !45

__internal_trig_reduction_slowpath.exit.i.i.i:    ; preds = %112, %100
  %lo.i.i.i.0.i = phi i32 [ %117, %112 ], [ %110, %100 ], !dbg !45
  %118 = tail call i32 @llvm.fshl.i32(i32 %105, i32 %110, i32 %87), !dbg !45
  %119 = lshr i32 %118, 30, !dbg !45
  %120 = tail call i32 @llvm.fshl.i32(i32 %118, i32 %lo.i.i.i.0.i, i32 2), !dbg !45
  %121 = shl i32 %lo.i.i.i.0.i, 2, !dbg !45
  %122 = lshr i32 %120, 31, !dbg !45
  %123 = add nuw nsw i32 %122, %119, !dbg !45
  %124 = sub nsw i32 0, %123, !dbg !45
  %.not2123.i = icmp slt i32 %47, 0, !dbg !45
  %spec.select.i = select i1 %.not2123.i, i32 %124, i32 %123, !dbg !45
  %125 = xor i32 %120, %47, !dbg !45
  %.lobit.i = ashr i32 %120, 31, !dbg !45
  %hi.i.i.i.2.i = xor i32 %.lobit.i, %120, !dbg !45
  %lo.i.i.i.1.i = xor i32 %.lobit.i, %121, !dbg !45
  %126 = zext i32 %hi.i.i.i.2.i to i64, !dbg !45
  %127 = shl nuw i64 %126, 32, !dbg !45
  %128 = zext i32 %lo.i.i.i.1.i to i64, !dbg !45
  %129 = or disjoint i64 %127, %128, !dbg !45
  %130 = sitofp i64 %129 to double, !dbg !45
  %131 = fmul double %130, 0x3BF921FB54442D19, !dbg !45
  %132 = fptrunc double %131 to float, !dbg !45
  %133 = fneg float %132, !dbg !45
  %.not2526.i = icmp slt i32 %125, 0, !dbg !45
  %r.i.i.i.0.i = select i1 %.not2526.i, float %133, float %132, !dbg !45
  br label %__internal_trig_reduction_kernel.exit.i.i, !dbg !45

__internal_trig_reduction_kernel.exit.i.i:        ; preds = %__internal_trig_reduction_slowpath.exit.i.i.i, %__nv_fmul_rn.exit.i.i.i, %7
  %i.i.1.i = phi i32 [ %.01.i, %7 ], [ 0, %__nv_fmul_rn.exit.i.i.i ], [ %spec.select.i, %__internal_trig_reduction_slowpath.exit.i.i.i ], !dbg !45
  %t.i.i.1.i = phi float [ %.04.i, %7 ], [ %.08.i, %__nv_fmul_rn.exit.i.i.i ], [ %r.i.i.i.0.i, %__internal_trig_reduction_slowpath.exit.i.i.i ], !dbg !45
  %134 = add i32 %i.i.1.i, 1, !dbg !45
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not28.i = icmp eq i32 %135, 0, !dbg !45
  %136 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %t.i.i.1.i, float %t.i.i.1.i) #4, !dbg !45
  %137 = tail call float @llvm.nvvm.mul.rn.f(float %t.i.i.1.i, float %t.i.i.1.i) #4, !dbg !45
  %.011.i = select i1 %.not28.i, float %137, float %136, !dbg !45
  %138 = and i32 %i.i.1.i, 1, !dbg !45
  %.not29.not.i = icmp eq i32 %138, 0, !dbg !45
  %139 = select i1 %.not29.not.i, float 1.000000e+00, float %t.i.i.1.i, !dbg !45
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not30.i = icmp eq i32 %140, 0, !dbg !45
  %141 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %139, float 0.000000e+00) #4, !dbg !45
  %142 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %139, float 0.000000e+00) #4, !dbg !45
  %.012.i = select i1 %.not30.i, float %142, float %141, !dbg !45
  br i1 %.not29.not.i, label %__internal_fmad.exit1.i.i.i, label %__internal_fmad.exit2.i.i.i, !dbg !45

__internal_fmad.exit1.i.i.i:                      ; preds = %__internal_trig_reduction_kernel.exit.i.i
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not31.i = icmp eq i32 %143, 0, !dbg !45
  %144 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3EF9758000000000, float %.011.i, float 0xBF56C0FDA0000000) #4, !dbg !45
  %145 = tail call float @llvm.nvvm.fma.rn.f(float 0x3EF9758000000000, float %.011.i, float 0xBF56C0FDA0000000) #4, !dbg !45
  %.013.i = select i1 %.not31.i, float %145, float %144, !dbg !45
  br label %__internal_fmad.exit2.i.i.i, !dbg !45

__internal_fmad.exit2.i.i.i:                      ; preds = %__internal_fmad.exit1.i.i.i, %__internal_trig_reduction_kernel.exit.i.i
  %146 = phi float [ 0xBFDFFFFFE0000000, %__internal_fmad.exit1.i.i.i ], [ 0xBFC5555500000000, %__internal_trig_reduction_kernel.exit.i.i ], !dbg !45
  %147 = phi float [ 0x3FA5555760000000, %__internal_fmad.exit1.i.i.i ], [ 0x3F8110BC80000000, %__internal_trig_reduction_kernel.exit.i.i ], !dbg !45
  %148 = phi float [ %.013.i, %__internal_fmad.exit1.i.i.i ], [ 0xBF29A82A60000000, %__internal_trig_reduction_kernel.exit.i.i ], !dbg !45
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not32.i = icmp eq i32 %149, 0, !dbg !45
  %150 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %148, float %.011.i, float %147) #4, !dbg !45
  %151 = tail call float @llvm.nvvm.fma.rn.f(float %148, float %.011.i, float %147) #4, !dbg !45
  %.010.i = select i1 %.not32.i, float %151, float %150, !dbg !45
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not33.i = icmp eq i32 %152, 0, !dbg !45
  %153 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %.011.i, float %146) #4, !dbg !45
  %154 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %.011.i, float %146) #4, !dbg !45
  %.09.i = select i1 %.not33.i, float %154, float %153, !dbg !45
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not34.i = icmp eq i32 %155, 0, !dbg !45
  %156 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %.012.i, float %139) #4, !dbg !45
  %157 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %.012.i, float %139) #4, !dbg !45
  %.05.i = select i1 %.not34.i, float %157, float %156, !dbg !45
  %158 = and i32 %134, 2, !dbg !45
  %.not35.i = icmp eq i32 %158, 0, !dbg !45
  br i1 %.not35.i, label %__nv_cosf.exit, label %__internal_fmad.exit5.i.i.i, !dbg !45

__internal_fmad.exit5.i.i.i:                      ; preds = %__internal_fmad.exit2.i.i.i
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not36.i = icmp eq i32 %159, 0, !dbg !45
  %160 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float -1.000000e+00, float 0.000000e+00) #4, !dbg !45
  %161 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float -1.000000e+00, float 0.000000e+00) #4, !dbg !45
  %.0.i = select i1 %.not36.i, float %161, float %160, !dbg !45
  br label %__nv_cosf.exit, !dbg !45

__nv_cosf.exit:                                   ; preds = %__internal_fmad.exit2.i.i.i, %__internal_fmad.exit5.i.i.i
  %z.i.i.0.i = phi float [ %.0.i, %__internal_fmad.exit5.i.i.i ], [ %.05.i, %__internal_fmad.exit2.i.i.i ], !dbg !45
  call void @llvm.lifetime.end.p0(i64 28, ptr nonnull %result.i.i.i.i), !dbg !45
  call void @llvm.lifetime.start.p0(i64 28, ptr nonnull %result.i.i.i.i1), !dbg !45
  %162 = fmul float %50, 0x3FE45F3060000000, !dbg !45
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i2 = icmp eq i32 %163, 0, !dbg !45
  %164 = tail call i32 @llvm.nvvm.f2i.rn.ftz(float %162) #4, !dbg !45
  %165 = tail call i32 @llvm.nvvm.f2i.rn(float %162) #4, !dbg !45
  %.01.i3 = select i1 %.not.i2, i32 %165, i32 %164, !dbg !45
  %166 = sitofp i32 %.01.i3 to float, !dbg !45
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not15.i4 = icmp eq i32 %167, 0, !dbg !45
  %168 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %166, float 0xBFF921FB40000000, float %50) #4, !dbg !45
  %169 = tail call float @llvm.nvvm.fma.rn.f(float %166, float 0xBFF921FB40000000, float %50) #4, !dbg !45
  %.02.i5 = select i1 %.not15.i4, float %169, float %168, !dbg !45
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not16.i6 = icmp eq i32 %170, 0, !dbg !45
  %171 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %166, float 0xBE74442D00000000, float %.02.i5) #4, !dbg !45
  %172 = tail call float @llvm.nvvm.fma.rn.f(float %166, float 0xBE74442D00000000, float %.02.i5) #4, !dbg !45
  %.03.i7 = select i1 %.not16.i6, float %172, float %171, !dbg !45
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not17.i8 = icmp eq i32 %173, 0, !dbg !45
  %174 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %166, float 0xBCF84698A0000000, float %.03.i7) #4, !dbg !45
  %175 = tail call float @llvm.nvvm.fma.rn.f(float %166, float 0xBCF84698A0000000, float %.03.i7) #4, !dbg !45
  %.04.i9 = select i1 %.not17.i8, float %175, float %174, !dbg !45
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not18.i10 = icmp eq i32 %176, 0, !dbg !45
  %177 = tail call float @llvm.nvvm.fabs.ftz.f(float %50) #4, !dbg !45
  %178 = tail call float @llvm.nvvm.fabs.f(float %50) #4, !dbg !45
  %.06.i11 = select i1 %.not18.i10, float %178, float %177, !dbg !45
  %179 = fcmp ult float %.06.i11, 1.056150e+05, !dbg !45
  br i1 %179, label %__internal_trig_reduction_kernel.exit.i.i29, label %__nv_isinff.exit.i.i.i12, !dbg !45

__nv_isinff.exit.i.i.i12:                         ; preds = %__nv_cosf.exit
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not19.i13 = icmp eq i32 %180, 0, !dbg !45
  %.07.i14 = select i1 %.not19.i13, float %178, float %177, !dbg !45
  %181 = fcmp oeq float %.07.i14, 0x7FF0000000000000, !dbg !45
  br i1 %181, label %__nv_fmul_rn.exit.i.i.i52, label %185, !dbg !45

__nv_fmul_rn.exit.i.i.i52:                        ; preds = %__nv_isinff.exit.i.i.i12
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not27.i53 = icmp eq i32 %182, 0, !dbg !45
  %183 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %50, float 0.000000e+00) #4, !dbg !45
  %184 = tail call float @llvm.nvvm.mul.rn.f(float %50, float 0.000000e+00) #4, !dbg !45
  %.08.i54 = select i1 %.not27.i53, float %184, float %183, !dbg !45
  br label %__internal_trig_reduction_kernel.exit.i.i29, !dbg !45

185:                                              ; preds = %__nv_isinff.exit.i.i.i12
  %186 = lshr i32 %49, 23, !dbg !45
  %187 = and i32 %186, 224, !dbg !45
  %188 = add nsw i32 %187, -128, !dbg !45
  %189 = shl i32 %49, 8, !dbg !45
  %190 = or i32 %189, -2147483648, !dbg !45
  %191 = lshr exact i32 %188, 5, !dbg !45
  br label %192, !dbg !45

192:                                              ; preds = %185, %192
  %indvars.iv65 = phi i64 [ 0, %185 ], [ %indvars.iv.next66, %192 ]
  %hi.i.i.i.0.i1560 = phi i32 [ 0, %185 ], [ %197, %192 ]
  %193 = getelementptr inbounds nuw [6 x i32], ptr addrspace(1) @__cudart_i2opi_f, i64 0, i64 %indvars.iv65, !dbg !45
  %194 = load i32, ptr addrspace(1) %193, align 4, !dbg !45
  %195 = tail call { i32, i32 } asm "{\0A\09mad.lo.cc.u32   $0, $2, $3, $4;\0A\09madc.hi.u32     $1, $2, $3,  0;\0A\09}", "=r,=r,r,r,r"(i32 %194, i32 %190, i32 %hi.i.i.i.0.i1560) #5, !dbg !45, !srcloc !46
  %196 = extractvalue { i32, i32 } %195, 0, !dbg !45
  %197 = extractvalue { i32, i32 } %195, 1, !dbg !45
  %198 = getelementptr inbounds nuw [7 x i32], ptr %result.i.i.i.i1, i64 0, i64 %indvars.iv65, !dbg !45
  store i32 %196, ptr %198, align 4, !dbg !45
  %indvars.iv.next66 = add nuw nsw i64 %indvars.iv65, 1, !dbg !45
  %exitcond67.not = icmp eq i64 %indvars.iv.next66, 6, !dbg !45
  br i1 %exitcond67.not, label %199, label %192, !dbg !45, !llvm.loop !49

199:                                              ; preds = %192
  %200 = getelementptr inbounds nuw i8, ptr %result.i.i.i.i1, i64 24, !dbg !45
  store i32 %197, ptr %200, align 4, !dbg !45
  %201 = sub nsw i32 6, %191, !dbg !45
  %202 = sext i32 %201 to i64, !dbg !45
  %203 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i1, i64 0, i64 %202, !dbg !45
  %204 = load i32, ptr %203, align 4, !dbg !45
  %205 = sub nsw i32 5, %191, !dbg !45
  %206 = sext i32 %205 to i64, !dbg !45
  %207 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i1, i64 0, i64 %206, !dbg !45
  %208 = load i32, ptr %207, align 4, !dbg !45
  %209 = freeze i32 %208, !dbg !45
  %210 = and i32 %49, 260046848, !dbg !45
  %.not20.i17 = icmp eq i32 %210, 0, !dbg !45
  br i1 %.not20.i17, label %__internal_trig_reduction_slowpath.exit.i.i.i18, label %211, !dbg !45

211:                                              ; preds = %199
  %212 = sub nsw i32 4, %191, !dbg !45
  %213 = sext i32 %212 to i64, !dbg !45
  %214 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i1, i64 0, i64 %213, !dbg !45
  %215 = load i32, ptr %214, align 4, !dbg !45
  %216 = tail call i32 @llvm.fshl.i32(i32 %209, i32 %215, i32 %186), !dbg !45
  br label %__internal_trig_reduction_slowpath.exit.i.i.i18, !dbg !45

__internal_trig_reduction_slowpath.exit.i.i.i18:  ; preds = %211, %199
  %lo.i.i.i.0.i20 = phi i32 [ %216, %211 ], [ %209, %199 ], !dbg !45
  %217 = tail call i32 @llvm.fshl.i32(i32 %204, i32 %209, i32 %186), !dbg !45
  %218 = lshr i32 %217, 30, !dbg !45
  %219 = tail call i32 @llvm.fshl.i32(i32 %217, i32 %lo.i.i.i.0.i20, i32 2), !dbg !45
  %220 = shl i32 %lo.i.i.i.0.i20, 2, !dbg !45
  %221 = lshr i32 %219, 31, !dbg !45
  %222 = add nuw nsw i32 %221, %218, !dbg !45
  %223 = sub nsw i32 0, %222, !dbg !45
  %.not2123.i21 = icmp slt i32 %49, 0, !dbg !45
  %spec.select.i22 = select i1 %.not2123.i21, i32 %223, i32 %222, !dbg !45
  %224 = xor i32 %219, %49, !dbg !45
  %.lobit.i23 = ashr i32 %219, 31, !dbg !45
  %hi.i.i.i.2.i24 = xor i32 %.lobit.i23, %219, !dbg !45
  %lo.i.i.i.1.i26 = xor i32 %.lobit.i23, %220, !dbg !45
  %225 = zext i32 %hi.i.i.i.2.i24 to i64, !dbg !45
  %226 = shl nuw i64 %225, 32, !dbg !45
  %227 = zext i32 %lo.i.i.i.1.i26 to i64, !dbg !45
  %228 = or disjoint i64 %226, %227, !dbg !45
  %229 = sitofp i64 %228 to double, !dbg !45
  %230 = fmul double %229, 0x3BF921FB54442D19, !dbg !45
  %231 = fptrunc double %230 to float, !dbg !45
  %232 = fneg float %231, !dbg !45
  %.not2526.i27 = icmp slt i32 %224, 0, !dbg !45
  %r.i.i.i.0.i28 = select i1 %.not2526.i27, float %232, float %231, !dbg !45
  br label %__internal_trig_reduction_kernel.exit.i.i29, !dbg !45

__internal_trig_reduction_kernel.exit.i.i29:      ; preds = %__internal_trig_reduction_slowpath.exit.i.i.i18, %__nv_fmul_rn.exit.i.i.i52, %__nv_cosf.exit
  %i.i.1.i30 = phi i32 [ %.01.i3, %__nv_cosf.exit ], [ 0, %__nv_fmul_rn.exit.i.i.i52 ], [ %spec.select.i22, %__internal_trig_reduction_slowpath.exit.i.i.i18 ], !dbg !45
  %t.i.i.1.i31 = phi float [ %.04.i9, %__nv_cosf.exit ], [ %.08.i54, %__nv_fmul_rn.exit.i.i.i52 ], [ %r.i.i.i.0.i28, %__internal_trig_reduction_slowpath.exit.i.i.i18 ], !dbg !45
  %233 = add i32 %i.i.1.i30, 1, !dbg !45
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not28.i32 = icmp eq i32 %234, 0, !dbg !45
  %235 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %t.i.i.1.i31, float %t.i.i.1.i31) #4, !dbg !45
  %236 = tail call float @llvm.nvvm.mul.rn.f(float %t.i.i.1.i31, float %t.i.i.1.i31) #4, !dbg !45
  %.011.i33 = select i1 %.not28.i32, float %236, float %235, !dbg !45
  %237 = and i32 %i.i.1.i30, 1, !dbg !45
  %.not29.not.i34 = icmp eq i32 %237, 0, !dbg !45
  %238 = select i1 %.not29.not.i34, float 1.000000e+00, float %t.i.i.1.i31, !dbg !45
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not30.i35 = icmp eq i32 %239, 0, !dbg !45
  %240 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i33, float %238, float 0.000000e+00) #4, !dbg !45
  %241 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i33, float %238, float 0.000000e+00) #4, !dbg !45
  %.012.i36 = select i1 %.not30.i35, float %241, float %240, !dbg !45
  br i1 %.not29.not.i34, label %__internal_fmad.exit1.i.i.i49, label %__internal_fmad.exit2.i.i.i37, !dbg !45

__internal_fmad.exit1.i.i.i49:                    ; preds = %__internal_trig_reduction_kernel.exit.i.i29
  %242 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not31.i50 = icmp eq i32 %242, 0, !dbg !45
  %243 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3EF9758000000000, float %.011.i33, float 0xBF56C0FDA0000000) #4, !dbg !45
  %244 = tail call float @llvm.nvvm.fma.rn.f(float 0x3EF9758000000000, float %.011.i33, float 0xBF56C0FDA0000000) #4, !dbg !45
  %.013.i51 = select i1 %.not31.i50, float %244, float %243, !dbg !45
  br label %__internal_fmad.exit2.i.i.i37, !dbg !45

__internal_fmad.exit2.i.i.i37:                    ; preds = %__internal_fmad.exit1.i.i.i49, %__internal_trig_reduction_kernel.exit.i.i29
  %245 = phi float [ 0xBFDFFFFFE0000000, %__internal_fmad.exit1.i.i.i49 ], [ 0xBFC5555500000000, %__internal_trig_reduction_kernel.exit.i.i29 ], !dbg !45
  %246 = phi float [ 0x3FA5555760000000, %__internal_fmad.exit1.i.i.i49 ], [ 0x3F8110BC80000000, %__internal_trig_reduction_kernel.exit.i.i29 ], !dbg !45
  %247 = phi float [ %.013.i51, %__internal_fmad.exit1.i.i.i49 ], [ 0xBF29A82A60000000, %__internal_trig_reduction_kernel.exit.i.i29 ], !dbg !45
  %248 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not32.i38 = icmp eq i32 %248, 0, !dbg !45
  %249 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %247, float %.011.i33, float %246) #4, !dbg !45
  %250 = tail call float @llvm.nvvm.fma.rn.f(float %247, float %.011.i33, float %246) #4, !dbg !45
  %.010.i39 = select i1 %.not32.i38, float %250, float %249, !dbg !45
  %251 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not33.i40 = icmp eq i32 %251, 0, !dbg !45
  %252 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i39, float %.011.i33, float %245) #4, !dbg !45
  %253 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i39, float %.011.i33, float %245) #4, !dbg !45
  %.09.i41 = select i1 %.not33.i40, float %253, float %252, !dbg !45
  %254 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not34.i42 = icmp eq i32 %254, 0, !dbg !45
  %255 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i41, float %.012.i36, float %238) #4, !dbg !45
  %256 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i41, float %.012.i36, float %238) #4, !dbg !45
  %.05.i43 = select i1 %.not34.i42, float %256, float %255, !dbg !45
  %257 = and i32 %233, 2, !dbg !45
  %.not35.i44 = icmp eq i32 %257, 0, !dbg !45
  br i1 %.not35.i44, label %__nv_cosf.exit55, label %__internal_fmad.exit5.i.i.i45, !dbg !45

__internal_fmad.exit5.i.i.i45:                    ; preds = %__internal_fmad.exit2.i.i.i37
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not36.i46 = icmp eq i32 %258, 0, !dbg !45
  %259 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i43, float -1.000000e+00, float 0.000000e+00) #4, !dbg !45
  %260 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i43, float -1.000000e+00, float 0.000000e+00) #4, !dbg !45
  %.0.i47 = select i1 %.not36.i46, float %260, float %259, !dbg !45
  br label %__nv_cosf.exit55, !dbg !45

__nv_cosf.exit55:                                 ; preds = %__internal_fmad.exit2.i.i.i37, %__internal_fmad.exit5.i.i.i45
  %z.i.i.0.i48 = phi float [ %.0.i47, %__internal_fmad.exit5.i.i.i45 ], [ %.05.i43, %__internal_fmad.exit2.i.i.i37 ], !dbg !45
  %261 = bitcast i32 %24 to <2 x half>, !dbg !20
  %262 = bitcast i32 %28 to <2 x half>, !dbg !23
  %263 = bitcast i32 %32 to <2 x half>, !dbg !26
  %264 = bitcast i32 %36 to <2 x half>, !dbg !29
  %265 = bitcast i32 %56 to <2 x half>, !dbg !39
  %266 = bitcast i32 %62 to <2 x half>, !dbg !44
  call void @llvm.lifetime.end.p0(i64 28, ptr nonnull %result.i.i.i.i1), !dbg !45
  %267 = sext i32 %13 to i64, !dbg !50
  %268 = getelementptr half, ptr addrspace(1) %3, i64 %267, !dbg !50
  %269 = fpext <2 x half> %261 to <2 x float>, !dbg !51
  %270 = fpext <2 x half> %262 to <2 x float>, !dbg !52
  %271 = fadd <2 x float> %269, %270, !dbg !53
  %272 = fpext <2 x half> %263 to <2 x float>, !dbg !54
  %273 = fadd <2 x float> %271, %272, !dbg !55
  %274 = fpext <2 x half> %264 to <2 x float>, !dbg !56
  %275 = fadd <2 x float> %273, %274, !dbg !57
  %276 = fpext <2 x half> %265 to <2 x float>, !dbg !58
  %277 = fsub <2 x float> zeroinitializer, %276, !dbg !59
  %278 = insertelement <2 x i1> poison, i1 %51, i64 0, !dbg !60
  %279 = shufflevector <2 x i1> %278, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !60
  %280 = select <2 x i1> %279, <2 x float> %277, <2 x float> zeroinitializer, !dbg !60
  %281 = fpext <2 x half> %266 to <2 x float>, !dbg !61
  %282 = insertelement <2 x i1> poison, i1 %57, i64 0, !dbg !62
  %283 = shufflevector <2 x i1> %282, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !62
  %284 = select <2 x i1> %283, <2 x float> %281, <2 x float> zeroinitializer, !dbg !62
  %285 = fadd <2 x float> %280, %284, !dbg !63
  %286 = insertelement <2 x float> poison, float %z.i.i.0.i, i64 0, !dbg !64
  %287 = insertelement <2 x float> %286, float %z.i.i.0.i48, i64 1, !dbg !64
  %288 = fmul <2 x float> %275, %287, !dbg !64
  %289 = fadd <2 x float> %285, %288, !dbg !65
  %290 = fptrunc <2 x float> %289 to <2 x half>, !dbg !66
  %291 = bitcast <2 x half> %290 to i32, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %291, ptr addrspace(1) %268, i1 %15) #4, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.nvvm.f2i.rn.ftz(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.nvvm.f2i.rn(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.mul.rn.ftz.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.mul.rn.f(float, float) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.fshl.i32(i32, i32, i32) #2

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr captures(none)) #3

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr captures(none)) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { nounwind }
attributes #5 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c33pslorb5xd2k34plkaxwh25sawddifcuabgrgv6gfhofwkut75.py", directory: "/tmp/torchinductor_root/33")
!4 = !{ptr @triton_poi_fused_clone_8, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused_clone_8", linkageName: "triton_poi_fused_clone_8", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 19, column: 28, scope: !6)
!10 = !DILocation(line: 19, column: 33, scope: !6)
!11 = !DILocation(line: 20, column: 36, scope: !6)
!12 = !DILocation(line: 20, column: 23, scope: !6)
!13 = !DILocation(line: 21, column: 21, scope: !6)
!14 = !DILocation(line: 24, column: 19, scope: !6)
!15 = !DILocation(line: 22, column: 19, scope: !6)
!16 = !DILocation(line: 25, column: 19, scope: !6)
!17 = !DILocation(line: 26, column: 40, scope: !6)
!18 = !DILocation(line: 26, column: 36, scope: !6)
!19 = !DILocation(line: 26, column: 31, scope: !6)
!20 = !DILocation(line: 26, column: 45, scope: !6)
!21 = !DILocation(line: 27, column: 42, scope: !6)
!22 = !DILocation(line: 27, column: 31, scope: !6)
!23 = !DILocation(line: 27, column: 51, scope: !6)
!24 = !DILocation(line: 28, column: 42, scope: !6)
!25 = !DILocation(line: 28, column: 31, scope: !6)
!26 = !DILocation(line: 28, column: 51, scope: !6)
!27 = !DILocation(line: 29, column: 42, scope: !6)
!28 = !DILocation(line: 29, column: 31, scope: !6)
!29 = !DILocation(line: 29, column: 51, scope: !6)
!30 = !DILocation(line: 30, column: 47, scope: !6)
!31 = !DILocation(line: 30, column: 42, scope: !6)
!32 = !DILocation(line: 30, column: 36, scope: !6)
!33 = !DILocation(line: 30, column: 31, scope: !6)
!34 = !DILocation(line: 30, column: 54, scope: !6)
!35 = !DILocation(line: 33, column: 19, scope: !6)
!36 = !DILocation(line: 34, column: 38, scope: !6)
!37 = !DILocation(line: 34, column: 30, scope: !6)
!38 = !DILocation(line: 34, column: 51, scope: !6)
!39 = !DILocation(line: 34, column: 43, scope: !6)
!40 = !DILocation(line: 40, column: 18, scope: !6)
!41 = !DILocation(line: 41, column: 36, scope: !6)
!42 = !DILocation(line: 41, column: 31, scope: !6)
!43 = !DILocation(line: 41, column: 49, scope: !6)
!44 = !DILocation(line: 41, column: 41, scope: !6)
!45 = !DILocation(line: 47, column: 24, scope: !6)
!46 = !{i32 30999, i32 31003, i32 31048, i32 31093}
!47 = distinct !{!47, !48}
!48 = !{!"llvm.loop.unroll.count", i32 1}
!49 = distinct !{!49, !48}
!50 = !DILocation(line: 53, column: 25, scope: !6)
!51 = !DILocation(line: 26, column: 55, scope: !6)
!52 = !DILocation(line: 27, column: 61, scope: !6)
!53 = !DILocation(line: 44, column: 20, scope: !6)
!54 = !DILocation(line: 28, column: 61, scope: !6)
!55 = !DILocation(line: 45, column: 20, scope: !6)
!56 = !DILocation(line: 29, column: 61, scope: !6)
!57 = !DILocation(line: 46, column: 20, scope: !6)
!58 = !DILocation(line: 34, column: 71, scope: !6)
!59 = !DILocation(line: 35, column: 12, scope: !6)
!60 = !DILocation(line: 0, scope: !6)
!61 = !DILocation(line: 41, column: 69, scope: !6)
!62 = !DILocation(line: 42, column: 34, scope: !6)
!63 = !DILocation(line: 43, column: 19, scope: !6)
!64 = !DILocation(line: 51, column: 20, scope: !6)
!65 = !DILocation(line: 52, column: 20, scope: !6)
!66 = !DILocation(line: 53, column: 37, scope: !6)
!67 = !DILocation(line: 53, column: 4, scope: !6)
