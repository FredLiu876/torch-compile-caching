#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":18:0)
#loc1 = loc(unknown)
#loc29 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":45:25)
#loc61 = loc(callsite(#loc1 at #loc29))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__to_copy_add_div_mul_pow_sum_2(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":18:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":18:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":18:0), %arg4: i32 loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":18:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":18:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x8xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<-5.000000e-01> : tensor<64x1xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<2.44140625E-4> : tensor<64x1xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<2.000000e+00> : tensor<64x8xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<64x8xf16, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_4 = arith.constant dense<4096> : tensor<1x8xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<4096> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<0.000000e+00> : tensor<1x8xf16, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc4)
    %4 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked> loc(#loc5)
    %5 = arith.addi %4, %3 : tensor<64x1xi32, #blocked> loc(#loc5)
    %6 = tt.splat %arg4 : i32 -> tensor<64x1xi32, #blocked> loc(#loc6)
    %7 = arith.cmpi slt, %5, %6 : tensor<64x1xi32, #blocked> loc(#loc6)
    %8 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %9 = tt.expand_dims %8 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc7)
    %10 = arith.muli %5, %cst_5 : tensor<64x1xi32, #blocked> loc(#loc8)
    %11 = tt.broadcast %10 : tensor<64x1xi32, #blocked> -> tensor<64x8xi32, #blocked> loc(#loc9)
    %12 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<64x8x!tt.ptr<f16>, #blocked> loc(#loc10)
    %13 = tt.broadcast %7 : tensor<64x1xi1, #blocked> -> tensor<64x8xi1, #blocked> loc(#loc11)
    %14 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<1x8x!tt.ptr<f16>, #blocked> loc(#loc12)
    %15 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<64x8x!tt.ptr<f16>, #blocked> loc(#loc13)
    %16 = scf.for %arg6 = %c0_i32 to %c4096_i32 step %c8_i32 iter_args(%arg7 = %cst) -> (tensor<64x8xf32, #blocked>)  : i32 {
      %29 = tt.splat %arg6 : i32 -> tensor<1x8xi32, #blocked> loc(#loc15)
      %30 = arith.addi %29, %9 : tensor<1x8xi32, #blocked> loc(#loc15)
      %31 = arith.cmpi slt, %30, %cst_4 : tensor<1x8xi32, #blocked> loc(#loc16)
      %32 = tt.broadcast %30 : tensor<1x8xi32, #blocked> -> tensor<64x8xi32, #blocked> loc(#loc9)
      %33 = arith.addi %32, %11 : tensor<64x8xi32, #blocked> loc(#loc9)
      %34 = tt.addptr %12, %33 : tensor<64x8x!tt.ptr<f16>, #blocked>, tensor<64x8xi32, #blocked> loc(#loc10)
      %35 = tt.broadcast %31 : tensor<1x8xi1, #blocked> -> tensor<64x8xi1, #blocked> loc(#loc11)
      %36 = arith.andi %13, %35 : tensor<64x8xi1, #blocked> loc(#loc11)
      %37 = tt.load %34, %36, %cst_3 evictionPolicy = evict_last : tensor<64x8x!tt.ptr<f16>, #blocked> loc(#loc17)
      %38 = arith.extf %37 : tensor<64x8xf16, #blocked> to tensor<64x8xf32, #blocked> loc(#loc18)
      %39 = tt.addptr %14, %30 : tensor<1x8x!tt.ptr<f16>, #blocked>, tensor<1x8xi32, #blocked> loc(#loc12)
      %40 = tt.load %39, %31, %cst_6 evictionPolicy = evict_last : tensor<1x8x!tt.ptr<f16>, #blocked> loc(#loc19)
      %41 = arith.extf %40 : tensor<1x8xf16, #blocked> to tensor<1x8xf32, #blocked> loc(#loc20)
      %42 = tt.addptr %15, %33 : tensor<64x8x!tt.ptr<f16>, #blocked>, tensor<64x8xi32, #blocked> loc(#loc13)
      %43 = tt.load %42, %36, %cst_3 evictionPolicy = evict_last : tensor<64x8x!tt.ptr<f16>, #blocked> loc(#loc21)
      %44 = arith.extf %43 : tensor<64x8xf16, #blocked> to tensor<64x8xf32, #blocked> loc(#loc22)
      %45 = tt.broadcast %41 : tensor<1x8xf32, #blocked> -> tensor<64x8xf32, #blocked> loc(#loc23)
      %46 = arith.mulf %38, %45 : tensor<64x8xf32, #blocked> loc(#loc23)
      %47 = arith.mulf %46, %44 : tensor<64x8xf32, #blocked> loc(#loc24)
      %48 = arith.addf %arg7, %47 : tensor<64x8xf32, #blocked> loc(#loc25)
      %49 = arith.select %36, %48, %arg7 : tensor<64x8xi1, #blocked>, tensor<64x8xf32, #blocked> loc(#loc26)
      scf.yield %49 : tensor<64x8xf32, #blocked> loc(#loc27)
    } loc(#loc14)
    %17 = "tt.reduce"(%16) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc29)), %arg7: f32 loc(callsite(#loc1 at #loc29))):
      %29 = arith.addf %arg6, %arg7 : f32 loc(#loc63)
      tt.reduce.return %29 : f32 loc(#loc60)
    }) : (tensor<64x8xf32, #blocked>) -> tensor<64xf32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc60)
    %18 = tt.expand_dims %17 {axis = 1 : i32} : tensor<64xf32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xf32, #blocked> loc(#loc31)
    %19 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc32)
    %20 = tt.addptr %19, %5 : tensor<64x1x!tt.ptr<f32>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc32)
    %21 = tt.load %20, %7 evictionPolicy = evict_last : tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc33)
    %22 = tt.broadcast %21 : tensor<64x1xf32, #blocked> -> tensor<64x8xf32, #blocked> loc(#loc34)
    %23 = arith.mulf %18, %cst_0 : tensor<64x1xf32, #blocked> loc(#loc35)
    %24 = arith.mulf %21, %21 : tensor<64x1xf32, #blocked> loc(#loc36)
    %25 = arith.mulf %24, %21 : tensor<64x1xf32, #blocked> loc(#loc37)
    %26 = arith.mulf %23, %25 : tensor<64x1xf32, #blocked> loc(#loc38)
    %27 = arith.mulf %26, %cst_1 : tensor<64x1xf32, #blocked> loc(#loc39)
    %28 = tt.broadcast %27 : tensor<64x1xf32, #blocked> -> tensor<64x8xf32, #blocked> loc(#loc40)
    scf.for %arg6 = %c0_i32 to %c4096_i32 step %c8_i32  : i32 {
      %29 = tt.splat %arg6 : i32 -> tensor<1x8xi32, #blocked> loc(#loc42)
      %30 = arith.addi %29, %9 : tensor<1x8xi32, #blocked> loc(#loc42)
      %31 = arith.cmpi slt, %30, %cst_4 : tensor<1x8xi32, #blocked> loc(#loc43)
      %32 = tt.broadcast %30 : tensor<1x8xi32, #blocked> -> tensor<64x8xi32, #blocked> loc(#loc44)
      %33 = arith.addi %32, %11 : tensor<64x8xi32, #blocked> loc(#loc44)
      %34 = tt.addptr %12, %33 : tensor<64x8x!tt.ptr<f16>, #blocked>, tensor<64x8xi32, #blocked> loc(#loc45)
      %35 = tt.broadcast %31 : tensor<1x8xi1, #blocked> -> tensor<64x8xi1, #blocked> loc(#loc46)
      %36 = arith.andi %13, %35 : tensor<64x8xi1, #blocked> loc(#loc46)
      %37 = tt.load %34, %36, %cst_3 evictionPolicy = evict_first : tensor<64x8x!tt.ptr<f16>, #blocked> loc(#loc47)
      %38 = arith.extf %37 : tensor<64x8xf16, #blocked> to tensor<64x8xf32, #blocked> loc(#loc48)
      %39 = tt.addptr %14, %30 : tensor<1x8x!tt.ptr<f16>, #blocked>, tensor<1x8xi32, #blocked> loc(#loc49)
      %40 = tt.load %39, %31, %cst_6 evictionPolicy = evict_last : tensor<1x8x!tt.ptr<f16>, #blocked> loc(#loc50)
      %41 = arith.extf %40 : tensor<1x8xf16, #blocked> to tensor<1x8xf32, #blocked> loc(#loc51)
      %42 = tt.addptr %15, %33 : tensor<64x8x!tt.ptr<f16>, #blocked>, tensor<64x8xi32, #blocked> loc(#loc52)
      %43 = tt.load %42, %36, %cst_3 evictionPolicy = evict_first : tensor<64x8x!tt.ptr<f16>, #blocked> loc(#loc53)
      %44 = arith.extf %43 : tensor<64x8xf16, #blocked> to tensor<64x8xf32, #blocked> loc(#loc54)
      %45 = tt.broadcast %41 : tensor<1x8xf32, #blocked> -> tensor<64x8xf32, #blocked> loc(#loc55)
      %46 = arith.mulf %38, %45 : tensor<64x8xf32, #blocked> loc(#loc55)
      %47 = arith.mulf %46, %22 : tensor<64x8xf32, #blocked> loc(#loc34)
      %48 = arith.mulf %44, %cst_2 : tensor<64x8xf32, #blocked> loc(#loc56)
      %49 = arith.mulf %28, %48 : tensor<64x8xf32, #blocked> loc(#loc40)
      %50 = arith.addf %47, %49 : tensor<64x8xf32, #blocked> loc(#loc57)
      %51 = arith.truncf %50 : tensor<64x8xf32, #blocked> to tensor<64x8xf16, #blocked> loc(#loc58)
      tt.store %34, %51, %36 : tensor<64x8x!tt.ptr<f16>, #blocked> loc(#loc58)
    } loc(#loc41)
    tt.return loc(#loc59)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":22:28)
#loc3 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":22:33)
#loc4 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":23:44)
#loc5 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":23:23)
#loc6 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":24:21)
#loc7 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":25:37)
#loc8 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":35:50)
#loc9 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":35:45)
#loc10 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":35:38)
#loc11 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":35:63)
#loc12 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":36:34)
#loc13 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":37:34)
#loc14 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":29:40)
#loc15 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":30:31)
#loc16 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":31:29)
#loc17 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":35:55)
#loc18 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":35:116)
#loc19 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":36:41)
#loc20 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":36:94)
#loc21 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":37:51)
#loc22 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":37:112)
#loc23 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":38:22)
#loc24 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":41:22)
#loc25 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":43:23)
#loc26 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":44:48)
#loc27 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":44:8)
#loc28 = loc("/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language/standard.py":286:36)
#loc30 = loc("/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language/standard.py":256:15)
#loc31 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":45:28)
#loc32 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":46:31)
#loc33 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":46:36)
#loc34 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":58:24)
#loc35 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":60:23)
#loc36 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":61:24)
#loc37 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":62:24)
#loc38 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":63:24)
#loc39 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":65:24)
#loc40 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":69:24)
#loc41 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":47:40)
#loc42 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":48:31)
#loc43 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":49:29)
#loc44 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":53:46)
#loc45 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":53:39)
#loc46 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":53:64)
#loc47 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":53:56)
#loc48 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":53:118)
#loc49 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":54:35)
#loc50 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":54:42)
#loc51 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":54:95)
#loc52 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":55:35)
#loc53 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":55:52)
#loc54 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":55:114)
#loc55 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":56:24)
#loc56 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":68:24)
#loc57 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":70:24)
#loc58 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":72:56)
#loc59 = loc("/tmp/torchinductor_root/zm/czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py":47:4)
#loc60 = loc(callsite(#loc28 at #loc29))
#loc62 = loc(callsite(#loc30 at #loc28))
#loc63 = loc(callsite(#loc62 at #loc29))
