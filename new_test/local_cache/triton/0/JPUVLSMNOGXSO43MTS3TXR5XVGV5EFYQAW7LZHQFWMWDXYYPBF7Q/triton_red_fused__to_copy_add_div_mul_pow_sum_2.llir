; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_red_fused__to_copy_add_div_mul_pow_sum_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 6, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = lshr i32 %10, 1, !dbg !11
  %12 = and i32 %11, 63, !dbg !11
  %13 = or disjoint i32 %12, %9, !dbg !12
  %14 = icmp slt i32 %13, %4, !dbg !13
  %15 = shl i32 %10, 2, !dbg !14
  %16 = and i32 %15, 4, !dbg !14
  %17 = shl i32 %13, 12, !dbg !15
  %invariant.op = or disjoint i32 %16, %17, !dbg !16
  %18 = zext nneg i32 %16 to i64, !dbg !16
  br label %19, !dbg !16

19:                                               ; preds = %7, %19
  %indvars.iv = phi i64 [ 0, %7 ], [ %indvars.iv.next, %19 ]
  %20 = phi float [ 0.000000e+00, %7 ], [ %81, %19 ]
  %21 = phi float [ 0.000000e+00, %7 ], [ %82, %19 ]
  %22 = phi float [ 0.000000e+00, %7 ], [ %83, %19 ]
  %23 = phi float [ 0.000000e+00, %7 ], [ %84, %19 ]
  %24 = or disjoint i64 %indvars.iv, %18, !dbg !17
  %25 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %25
  %26 = sext i32 %.reass to i64, !dbg !18
  %27 = getelementptr half, ptr addrspace(1) %0, i64 %26, !dbg !18
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %27, i1 %14) #2, !dbg !19
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !19
  %30 = bitcast i32 %29 to <2 x half>, !dbg !19
  %31 = extractvalue { i32, i32 } %28, 1, !dbg !19
  %32 = bitcast i32 %31 to <2 x half>, !dbg !19
  %33 = extractelement <2 x half> %30, i64 0, !dbg !19
  %34 = extractelement <2 x half> %30, i64 1, !dbg !19
  %35 = extractelement <2 x half> %32, i64 0, !dbg !19
  %36 = extractelement <2 x half> %32, i64 1, !dbg !19
  %37 = fpext half %33 to float, !dbg !20
  %38 = fpext half %34 to float, !dbg !20
  %39 = fpext half %35 to float, !dbg !20
  %40 = fpext half %36 to float, !dbg !20
  %41 = getelementptr half, ptr addrspace(1) %1, i64 %24, !dbg !21
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %41, i1 true) #2, !dbg !22
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !22
  %44 = bitcast i32 %43 to <2 x half>, !dbg !22
  %45 = extractvalue { i32, i32 } %42, 1, !dbg !22
  %46 = bitcast i32 %45 to <2 x half>, !dbg !22
  %47 = extractelement <2 x half> %44, i64 0, !dbg !22
  %48 = extractelement <2 x half> %44, i64 1, !dbg !22
  %49 = extractelement <2 x half> %46, i64 0, !dbg !22
  %50 = extractelement <2 x half> %46, i64 1, !dbg !22
  %51 = fpext half %47 to float, !dbg !23
  %52 = fpext half %48 to float, !dbg !23
  %53 = fpext half %49 to float, !dbg !23
  %54 = fpext half %50 to float, !dbg !23
  %55 = getelementptr half, ptr addrspace(1) %2, i64 %26, !dbg !24
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %55, i1 %14) #2, !dbg !25
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !25
  %58 = bitcast i32 %57 to <2 x half>, !dbg !25
  %59 = extractvalue { i32, i32 } %56, 1, !dbg !25
  %60 = bitcast i32 %59 to <2 x half>, !dbg !25
  %61 = extractelement <2 x half> %58, i64 0, !dbg !25
  %62 = extractelement <2 x half> %58, i64 1, !dbg !25
  %63 = extractelement <2 x half> %60, i64 0, !dbg !25
  %64 = extractelement <2 x half> %60, i64 1, !dbg !25
  %65 = fpext half %61 to float, !dbg !26
  %66 = fpext half %62 to float, !dbg !26
  %67 = fpext half %63 to float, !dbg !26
  %68 = fpext half %64 to float, !dbg !26
  %69 = fmul float %37, %51, !dbg !27
  %70 = fmul float %38, %52, !dbg !27
  %71 = fmul float %39, %53, !dbg !27
  %72 = fmul float %40, %54, !dbg !27
  %73 = fmul float %69, %65, !dbg !28
  %74 = fmul float %70, %66, !dbg !28
  %75 = fmul float %71, %67, !dbg !28
  %76 = fmul float %72, %68, !dbg !28
  %77 = fadd float %20, %73, !dbg !29
  %78 = fadd float %21, %74, !dbg !29
  %79 = fadd float %22, %75, !dbg !29
  %80 = fadd float %23, %76, !dbg !29
  %81 = select i1 %14, float %77, float %20, !dbg !30
  %82 = select i1 %14, float %78, float %21, !dbg !30
  %83 = select i1 %14, float %79, float %22, !dbg !30
  %84 = select i1 %14, float %80, float %23, !dbg !30
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !16
  %85 = icmp samesign ult i64 %indvars.iv, 4088, !dbg !16
  br i1 %85, label %19, label %86, !dbg !16

86:                                               ; preds = %19
  %87 = fadd float %81, %82, !dbg !31
  %88 = fadd float %83, %87, !dbg !31
  %89 = fadd float %84, %88, !dbg !31
  %90 = bitcast float %89 to i32, !dbg !36
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 1, i32 31), !dbg !36
  %92 = bitcast i32 %91 to float, !dbg !36
  %93 = fadd float %89, %92, !dbg !31
  %94 = sext i32 %13 to i64, !dbg !37
  %95 = getelementptr float, ptr addrspace(1) %3, i64 %94, !dbg !37
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %14) #2, !dbg !38
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %14) #2, !dbg !38
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %14) #2, !dbg !38
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %14) #2, !dbg !38
  %100 = bitcast i32 %99 to float, !dbg !38
  %101 = fmul float %93, -5.000000e-01, !dbg !39
  %102 = fmul float %100, %100, !dbg !40
  %103 = fmul float %102, %100, !dbg !41
  %104 = fmul float %101, %103, !dbg !42
  %105 = fmul float %104, 0x3F30000000000000, !dbg !43
  %106 = insertelement <2 x float> poison, float %100, i64 0, !dbg !44
  %107 = shufflevector <2 x float> %106, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !44
  %108 = insertelement <2 x float> poison, float %105, i64 0, !dbg !45
  %109 = shufflevector <2 x float> %108, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !45
  br label %110, !dbg !46

110:                                              ; preds = %86, %110
  %indvars.iv7 = phi i64 [ 0, %86 ], [ %indvars.iv.next8, %110 ]
  %111 = or disjoint i64 %indvars.iv7, %18, !dbg !47
  %112 = trunc nuw nsw i64 %indvars.iv7 to i32
  %.reass3 = or i32 %invariant.op, %112
  %113 = sext i32 %.reass3 to i64, !dbg !48
  %114 = getelementptr half, ptr addrspace(1) %0, i64 %113, !dbg !48
  %115 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %114, i1 %14) #2, !dbg !49
  %116 = extractvalue { i32, i32 } %115, 0, !dbg !49
  %117 = bitcast i32 %116 to <2 x half>, !dbg !49
  %118 = extractvalue { i32, i32 } %115, 1, !dbg !49
  %119 = bitcast i32 %118 to <2 x half>, !dbg !49
  %120 = getelementptr half, ptr addrspace(1) %1, i64 %111, !dbg !50
  %121 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %120, i1 true) #2, !dbg !51
  %122 = extractvalue { i32, i32 } %121, 0, !dbg !51
  %123 = bitcast i32 %122 to <2 x half>, !dbg !51
  %124 = extractvalue { i32, i32 } %121, 1, !dbg !51
  %125 = bitcast i32 %124 to <2 x half>, !dbg !51
  %126 = getelementptr half, ptr addrspace(1) %2, i64 %113, !dbg !52
  %127 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %126, i1 %14) #2, !dbg !53
  %128 = extractvalue { i32, i32 } %127, 0, !dbg !53
  %129 = bitcast i32 %128 to <2 x half>, !dbg !53
  %130 = extractvalue { i32, i32 } %127, 1, !dbg !53
  %131 = bitcast i32 %130 to <2 x half>, !dbg !53
  %132 = fpext <2 x half> %117 to <2 x float>, !dbg !54
  %133 = fpext <2 x half> %123 to <2 x float>, !dbg !55
  %134 = fpext <2 x half> %129 to <2 x float>, !dbg !56
  %135 = fmul <2 x float> %132, %133, !dbg !57
  %136 = fmul <2 x float> %135, %107, !dbg !44
  %137 = fmul <2 x float> %134, splat (float 2.000000e+00), !dbg !58
  %138 = fmul <2 x float> %109, %137, !dbg !45
  %139 = fadd <2 x float> %136, %138, !dbg !59
  %140 = fptrunc <2 x float> %139 to <2 x half>, !dbg !60
  %141 = fpext <2 x half> %119 to <2 x float>, !dbg !54
  %142 = fpext <2 x half> %125 to <2 x float>, !dbg !55
  %143 = fpext <2 x half> %131 to <2 x float>, !dbg !56
  %144 = fmul <2 x float> %141, %142, !dbg !57
  %145 = fmul <2 x float> %144, %107, !dbg !44
  %146 = fmul <2 x float> %143, splat (float 2.000000e+00), !dbg !58
  %147 = fmul <2 x float> %109, %146, !dbg !45
  %148 = fadd <2 x float> %145, %147, !dbg !59
  %149 = fptrunc <2 x float> %148 to <2 x half>, !dbg !60
  %150 = bitcast <2 x half> %140 to i32, !dbg !60
  %151 = bitcast <2 x half> %149 to i32, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %150, i32 %151, ptr addrspace(1) %114, i1 %14) #2, !dbg !60
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 8, !dbg !46
  %152 = icmp samesign ult i64 %indvars.iv7, 4088, !dbg !46
  br i1 %152, label %110, label %153, !dbg !46

153:                                              ; preds = %110
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czmiywrot3mpppkqmo6csuonrqz52cn6ppl435zgrknyxhls2lup.py", directory: "/tmp/torchinductor_root/zm")
!4 = !{ptr @triton_red_fused__to_copy_add_div_mul_pow_sum_2, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_mul_pow_sum_2", linkageName: "triton_red_fused__to_copy_add_div_mul_pow_sum_2", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 50, scope: !6)
!16 = !DILocation(line: 29, column: 40, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 35, column: 38, scope: !6)
!19 = !DILocation(line: 35, column: 55, scope: !6)
!20 = !DILocation(line: 35, column: 116, scope: !6)
!21 = !DILocation(line: 36, column: 34, scope: !6)
!22 = !DILocation(line: 36, column: 41, scope: !6)
!23 = !DILocation(line: 36, column: 94, scope: !6)
!24 = !DILocation(line: 37, column: 34, scope: !6)
!25 = !DILocation(line: 37, column: 51, scope: !6)
!26 = !DILocation(line: 37, column: 112, scope: !6)
!27 = !DILocation(line: 38, column: 22, scope: !6)
!28 = !DILocation(line: 41, column: 22, scope: !6)
!29 = !DILocation(line: 43, column: 23, scope: !6)
!30 = !DILocation(line: 44, column: 48, scope: !6)
!31 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !35)
!32 = distinct !DILexicalBlockFile(scope: !34, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!34 = distinct !DILexicalBlockFile(scope: !6, file: !33, discriminator: 0)
!35 = !DILocation(line: 45, column: 25, scope: !6)
!36 = !DILocation(line: 286, column: 36, scope: !34, inlinedAt: !35)
!37 = !DILocation(line: 46, column: 31, scope: !6)
!38 = !DILocation(line: 46, column: 36, scope: !6)
!39 = !DILocation(line: 60, column: 23, scope: !6)
!40 = !DILocation(line: 61, column: 24, scope: !6)
!41 = !DILocation(line: 62, column: 24, scope: !6)
!42 = !DILocation(line: 63, column: 24, scope: !6)
!43 = !DILocation(line: 65, column: 24, scope: !6)
!44 = !DILocation(line: 58, column: 24, scope: !6)
!45 = !DILocation(line: 69, column: 24, scope: !6)
!46 = !DILocation(line: 47, column: 40, scope: !6)
!47 = !DILocation(line: 48, column: 31, scope: !6)
!48 = !DILocation(line: 53, column: 39, scope: !6)
!49 = !DILocation(line: 53, column: 56, scope: !6)
!50 = !DILocation(line: 54, column: 35, scope: !6)
!51 = !DILocation(line: 54, column: 42, scope: !6)
!52 = !DILocation(line: 55, column: 35, scope: !6)
!53 = !DILocation(line: 55, column: 52, scope: !6)
!54 = !DILocation(line: 53, column: 118, scope: !6)
!55 = !DILocation(line: 54, column: 95, scope: !6)
!56 = !DILocation(line: 55, column: 114, scope: !6)
!57 = !DILocation(line: 56, column: 24, scope: !6)
!58 = !DILocation(line: 68, column: 24, scope: !6)
!59 = !DILocation(line: 70, column: 24, scope: !6)
!60 = !DILocation(line: 72, column: 56, scope: !6)
!61 = !DILocation(line: 47, column: 4, scope: !6)
