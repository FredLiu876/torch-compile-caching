; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_red_fused__to_copy_add_div_mul_pow_sum_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = shl i32 %10, 6, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = lshr i32 %12, 1, !dbg !11
  %14 = and i32 %13, 63, !dbg !11
  %15 = or disjoint i32 %14, %11, !dbg !12
  %16 = icmp slt i32 %15, %6, !dbg !13
  %17 = shl i32 %12, 2, !dbg !14
  %18 = and i32 %17, 4, !dbg !14
  %19 = shl i32 %15, 12, !dbg !15
  %invariant.op = or disjoint i32 %18, %19, !dbg !16
  %20 = zext nneg i32 %18 to i64, !dbg !16
  br label %21, !dbg !16

21:                                               ; preds = %9, %21
  %indvars.iv = phi i64 [ 0, %9 ], [ %indvars.iv.next, %21 ]
  %22 = phi float [ 0.000000e+00, %9 ], [ %101, %21 ]
  %23 = phi float [ 0.000000e+00, %9 ], [ %102, %21 ]
  %24 = phi float [ 0.000000e+00, %9 ], [ %103, %21 ]
  %25 = phi float [ 0.000000e+00, %9 ], [ %104, %21 ]
  %26 = or disjoint i64 %indvars.iv, %20, !dbg !17
  %27 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %27
  %28 = sext i32 %.reass to i64, !dbg !18
  %29 = getelementptr half, ptr addrspace(1) %1, i64 %28, !dbg !18
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %29, i1 %16) #2, !dbg !19
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !19
  %32 = bitcast i32 %31 to <2 x half>, !dbg !19
  %33 = extractvalue { i32, i32 } %30, 1, !dbg !19
  %34 = bitcast i32 %33 to <2 x half>, !dbg !19
  %35 = extractelement <2 x half> %32, i64 0, !dbg !19
  %36 = extractelement <2 x half> %32, i64 1, !dbg !19
  %37 = extractelement <2 x half> %34, i64 0, !dbg !19
  %38 = extractelement <2 x half> %34, i64 1, !dbg !19
  %39 = fpext half %35 to float, !dbg !20
  %40 = fpext half %36 to float, !dbg !20
  %41 = fpext half %37 to float, !dbg !20
  %42 = fpext half %38 to float, !dbg !20
  %43 = getelementptr half, ptr addrspace(1) %2, i64 %28, !dbg !21
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %43, i1 %16) #2, !dbg !22
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !22
  %46 = bitcast i32 %45 to <2 x half>, !dbg !22
  %47 = extractvalue { i32, i32 } %44, 1, !dbg !22
  %48 = bitcast i32 %47 to <2 x half>, !dbg !22
  %49 = extractelement <2 x half> %46, i64 0, !dbg !22
  %50 = extractelement <2 x half> %46, i64 1, !dbg !22
  %51 = extractelement <2 x half> %48, i64 0, !dbg !22
  %52 = extractelement <2 x half> %48, i64 1, !dbg !22
  %53 = fpext half %49 to float, !dbg !23
  %54 = fpext half %50 to float, !dbg !23
  %55 = fpext half %51 to float, !dbg !23
  %56 = fpext half %52 to float, !dbg !23
  %57 = getelementptr half, ptr addrspace(1) %3, i64 %26, !dbg !24
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %57, i1 true) #2, !dbg !25
  %59 = extractvalue { i32, i32 } %58, 0, !dbg !25
  %60 = bitcast i32 %59 to <2 x half>, !dbg !25
  %61 = extractvalue { i32, i32 } %58, 1, !dbg !25
  %62 = bitcast i32 %61 to <2 x half>, !dbg !25
  %63 = extractelement <2 x half> %60, i64 0, !dbg !25
  %64 = extractelement <2 x half> %60, i64 1, !dbg !25
  %65 = extractelement <2 x half> %62, i64 0, !dbg !25
  %66 = extractelement <2 x half> %62, i64 1, !dbg !25
  %67 = fpext half %63 to float, !dbg !26
  %68 = fpext half %64 to float, !dbg !26
  %69 = fpext half %65 to float, !dbg !26
  %70 = fpext half %66 to float, !dbg !26
  %71 = getelementptr half, ptr addrspace(1) %4, i64 %28, !dbg !27
  %72 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %71, i1 %16) #2, !dbg !28
  %73 = extractvalue { i32, i32 } %72, 0, !dbg !28
  %74 = bitcast i32 %73 to <2 x half>, !dbg !28
  %75 = extractvalue { i32, i32 } %72, 1, !dbg !28
  %76 = bitcast i32 %75 to <2 x half>, !dbg !28
  %77 = extractelement <2 x half> %74, i64 0, !dbg !28
  %78 = extractelement <2 x half> %74, i64 1, !dbg !28
  %79 = extractelement <2 x half> %76, i64 0, !dbg !28
  %80 = extractelement <2 x half> %76, i64 1, !dbg !28
  %81 = fpext half %77 to float, !dbg !29
  %82 = fpext half %78 to float, !dbg !29
  %83 = fpext half %79 to float, !dbg !29
  %84 = fpext half %80 to float, !dbg !29
  %85 = fadd float %39, %53, !dbg !30
  %86 = fadd float %40, %54, !dbg !30
  %87 = fadd float %41, %55, !dbg !30
  %88 = fadd float %42, %56, !dbg !30
  %89 = fmul float %85, %67, !dbg !31
  %90 = fmul float %86, %68, !dbg !31
  %91 = fmul float %87, %69, !dbg !31
  %92 = fmul float %88, %70, !dbg !31
  %93 = fmul float %89, %81, !dbg !32
  %94 = fmul float %90, %82, !dbg !32
  %95 = fmul float %91, %83, !dbg !32
  %96 = fmul float %92, %84, !dbg !32
  %97 = fadd float %22, %93, !dbg !33
  %98 = fadd float %23, %94, !dbg !33
  %99 = fadd float %24, %95, !dbg !33
  %100 = fadd float %25, %96, !dbg !33
  %101 = select i1 %16, float %97, float %22, !dbg !34
  %102 = select i1 %16, float %98, float %23, !dbg !34
  %103 = select i1 %16, float %99, float %24, !dbg !34
  %104 = select i1 %16, float %100, float %25, !dbg !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !16
  %105 = icmp samesign ult i64 %indvars.iv, 4088, !dbg !16
  br i1 %105, label %21, label %106, !dbg !16

106:                                              ; preds = %21
  %107 = fadd float %101, %102, !dbg !35
  %108 = fadd float %103, %107, !dbg !35
  %109 = fadd float %104, %108, !dbg !35
  %110 = bitcast float %109 to i32, !dbg !40
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 1, i32 31), !dbg !40
  %112 = bitcast i32 %111 to float, !dbg !40
  %113 = fadd float %109, %112, !dbg !35
  %114 = sext i32 %15 to i64, !dbg !41
  %115 = getelementptr float, ptr addrspace(1) %5, i64 %114, !dbg !41
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %16) #2, !dbg !42
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %16) #2, !dbg !42
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %16) #2, !dbg !42
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %16) #2, !dbg !42
  %120 = bitcast i32 %119 to float, !dbg !42
  %121 = fmul float %113, -5.000000e-01, !dbg !43
  %122 = fmul float %120, %120, !dbg !44
  %123 = fmul float %122, %120, !dbg !45
  %124 = fmul float %121, %123, !dbg !46
  %125 = fmul float %124, 0x3F30000000000000, !dbg !47
  %126 = insertelement <2 x float> poison, float %120, i64 0, !dbg !48
  %127 = shufflevector <2 x float> %126, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !48
  %128 = insertelement <2 x float> poison, float %125, i64 0, !dbg !49
  %129 = shufflevector <2 x float> %128, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  br label %130, !dbg !50

130:                                              ; preds = %106, %130
  %indvars.iv7 = phi i64 [ 0, %106 ], [ %indvars.iv.next8, %130 ]
  %131 = or disjoint i64 %indvars.iv7, %20, !dbg !51
  %132 = trunc nuw nsw i64 %indvars.iv7 to i32
  %.reass3 = or i32 %invariant.op, %132
  %133 = sext i32 %.reass3 to i64, !dbg !52
  %134 = getelementptr half, ptr addrspace(1) %0, i64 %133, !dbg !52
  %135 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %134, i1 %16) #2, !dbg !53
  %136 = extractvalue { i32, i32 } %135, 0, !dbg !53
  %137 = bitcast i32 %136 to <2 x half>, !dbg !53
  %138 = extractvalue { i32, i32 } %135, 1, !dbg !53
  %139 = bitcast i32 %138 to <2 x half>, !dbg !53
  %140 = getelementptr half, ptr addrspace(1) %1, i64 %133, !dbg !54
  %141 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %140, i1 %16) #2, !dbg !55
  %142 = extractvalue { i32, i32 } %141, 0, !dbg !55
  %143 = bitcast i32 %142 to <2 x half>, !dbg !55
  %144 = extractvalue { i32, i32 } %141, 1, !dbg !55
  %145 = bitcast i32 %144 to <2 x half>, !dbg !55
  %146 = getelementptr half, ptr addrspace(1) %2, i64 %133, !dbg !56
  %147 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %146, i1 %16) #2, !dbg !57
  %148 = extractvalue { i32, i32 } %147, 0, !dbg !57
  %149 = bitcast i32 %148 to <2 x half>, !dbg !57
  %150 = extractvalue { i32, i32 } %147, 1, !dbg !57
  %151 = bitcast i32 %150 to <2 x half>, !dbg !57
  %152 = getelementptr half, ptr addrspace(1) %3, i64 %131, !dbg !58
  %153 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %152, i1 true) #2, !dbg !59
  %154 = extractvalue { i32, i32 } %153, 0, !dbg !59
  %155 = bitcast i32 %154 to <2 x half>, !dbg !59
  %156 = extractvalue { i32, i32 } %153, 1, !dbg !59
  %157 = bitcast i32 %156 to <2 x half>, !dbg !59
  %158 = getelementptr half, ptr addrspace(1) %4, i64 %133, !dbg !60
  %159 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %158, i1 %16) #2, !dbg !61
  %160 = extractvalue { i32, i32 } %159, 0, !dbg !61
  %161 = bitcast i32 %160 to <2 x half>, !dbg !61
  %162 = extractvalue { i32, i32 } %159, 1, !dbg !61
  %163 = bitcast i32 %162 to <2 x half>, !dbg !61
  %164 = fpext <2 x half> %137 to <2 x float>, !dbg !62
  %165 = fpext <2 x half> %143 to <2 x float>, !dbg !63
  %166 = fpext <2 x half> %149 to <2 x float>, !dbg !64
  %167 = fpext <2 x half> %155 to <2 x float>, !dbg !65
  %168 = fpext <2 x half> %161 to <2 x float>, !dbg !66
  %169 = fadd <2 x float> %165, %166, !dbg !67
  %170 = fmul <2 x float> %169, %167, !dbg !68
  %171 = fmul <2 x float> %170, %127, !dbg !48
  %172 = fmul <2 x float> %168, splat (float 2.000000e+00), !dbg !69
  %173 = fmul <2 x float> %129, %172, !dbg !49
  %174 = fadd <2 x float> %171, %173, !dbg !70
  %175 = fadd <2 x float> %174, %164, !dbg !71
  %176 = fptrunc <2 x float> %175 to <2 x half>, !dbg !72
  %177 = fpext <2 x half> %139 to <2 x float>, !dbg !62
  %178 = fpext <2 x half> %145 to <2 x float>, !dbg !63
  %179 = fpext <2 x half> %151 to <2 x float>, !dbg !64
  %180 = fpext <2 x half> %157 to <2 x float>, !dbg !65
  %181 = fpext <2 x half> %163 to <2 x float>, !dbg !66
  %182 = fadd <2 x float> %178, %179, !dbg !67
  %183 = fmul <2 x float> %182, %180, !dbg !68
  %184 = fmul <2 x float> %183, %127, !dbg !48
  %185 = fmul <2 x float> %181, splat (float 2.000000e+00), !dbg !69
  %186 = fmul <2 x float> %129, %185, !dbg !49
  %187 = fadd <2 x float> %184, %186, !dbg !70
  %188 = fadd <2 x float> %187, %177, !dbg !71
  %189 = fptrunc <2 x float> %188 to <2 x half>, !dbg !72
  %190 = bitcast <2 x half> %176 to i32, !dbg !72
  %191 = bitcast <2 x half> %189 to i32, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %190, i32 %191, ptr addrspace(1) %134, i1 %16) #2, !dbg !72
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 8, !dbg !50
  %192 = icmp samesign ult i64 %indvars.iv7, 4088, !dbg !50
  br i1 %192, label %130, label %193, !dbg !50

193:                                              ; preds = %130
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjwsbuhbra2efptdjgfhieilyoqbtzcnj6zivbmmeofuaj63ntgo.py", directory: "/tmp/torchinductor_root/jw")
!4 = !{ptr @triton_red_fused__to_copy_add_div_mul_pow_sum_4, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_mul_pow_sum_4", linkageName: "triton_red_fused__to_copy_add_div_mul_pow_sum_4", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 29, column: 40, scope: !6)
!17 = !DILocation(line: 30, column: 31, scope: !6)
!18 = !DILocation(line: 35, column: 34, scope: !6)
!19 = !DILocation(line: 35, column: 51, scope: !6)
!20 = !DILocation(line: 35, column: 112, scope: !6)
!21 = !DILocation(line: 36, column: 34, scope: !6)
!22 = !DILocation(line: 36, column: 51, scope: !6)
!23 = !DILocation(line: 36, column: 112, scope: !6)
!24 = !DILocation(line: 37, column: 34, scope: !6)
!25 = !DILocation(line: 37, column: 41, scope: !6)
!26 = !DILocation(line: 37, column: 94, scope: !6)
!27 = !DILocation(line: 38, column: 34, scope: !6)
!28 = !DILocation(line: 38, column: 51, scope: !6)
!29 = !DILocation(line: 38, column: 112, scope: !6)
!30 = !DILocation(line: 39, column: 22, scope: !6)
!31 = !DILocation(line: 40, column: 22, scope: !6)
!32 = !DILocation(line: 43, column: 22, scope: !6)
!33 = !DILocation(line: 45, column: 25, scope: !6)
!34 = !DILocation(line: 46, column: 50, scope: !6)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !39)
!36 = distinct !DILexicalBlockFile(scope: !38, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!38 = distinct !DILexicalBlockFile(scope: !6, file: !37, discriminator: 0)
!39 = !DILocation(line: 47, column: 27, scope: !6)
!40 = !DILocation(line: 286, column: 36, scope: !38, inlinedAt: !39)
!41 = !DILocation(line: 48, column: 31, scope: !6)
!42 = !DILocation(line: 48, column: 36, scope: !6)
!43 = !DILocation(line: 65, column: 24, scope: !6)
!44 = !DILocation(line: 66, column: 24, scope: !6)
!45 = !DILocation(line: 67, column: 24, scope: !6)
!46 = !DILocation(line: 68, column: 24, scope: !6)
!47 = !DILocation(line: 70, column: 24, scope: !6)
!48 = !DILocation(line: 63, column: 24, scope: !6)
!49 = !DILocation(line: 74, column: 24, scope: !6)
!50 = !DILocation(line: 49, column: 40, scope: !6)
!51 = !DILocation(line: 50, column: 31, scope: !6)
!52 = !DILocation(line: 55, column: 39, scope: !6)
!53 = !DILocation(line: 55, column: 56, scope: !6)
!54 = !DILocation(line: 56, column: 35, scope: !6)
!55 = !DILocation(line: 56, column: 52, scope: !6)
!56 = !DILocation(line: 57, column: 35, scope: !6)
!57 = !DILocation(line: 57, column: 52, scope: !6)
!58 = !DILocation(line: 58, column: 35, scope: !6)
!59 = !DILocation(line: 58, column: 42, scope: !6)
!60 = !DILocation(line: 59, column: 35, scope: !6)
!61 = !DILocation(line: 59, column: 52, scope: !6)
!62 = !DILocation(line: 55, column: 118, scope: !6)
!63 = !DILocation(line: 56, column: 114, scope: !6)
!64 = !DILocation(line: 57, column: 114, scope: !6)
!65 = !DILocation(line: 58, column: 95, scope: !6)
!66 = !DILocation(line: 59, column: 114, scope: !6)
!67 = !DILocation(line: 60, column: 24, scope: !6)
!68 = !DILocation(line: 61, column: 24, scope: !6)
!69 = !DILocation(line: 73, column: 24, scope: !6)
!70 = !DILocation(line: 75, column: 24, scope: !6)
!71 = !DILocation(line: 77, column: 24, scope: !6)
!72 = !DILocation(line: 78, column: 56, scope: !6)
!73 = !DILocation(line: 49, column: 4, scope: !6)
