; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 1, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 31, !dbg !11
  %13 = and i32 %11, 1, !dbg !11
  %14 = or disjoint i32 %10, 1, !dbg !12
  %15 = icmp slt i32 %10, %5, !dbg !13
  %16 = icmp slt i32 %14, %5, !dbg !13
  %17 = lshr i32 %11, 5, !dbg !14
  %18 = shl i32 %11, 3, !dbg !14
  %19 = and i32 %18, 4088, !dbg !14
  %20 = shl i32 %9, 13, !dbg !15
  %21 = shl i32 %14, 12, !dbg !15
  %22 = or disjoint i32 %19, %20, !dbg !16
  %23 = or disjoint i32 %21, %19, !dbg !16
  %24 = sext i32 %22 to i64, !dbg !17
  %25 = getelementptr half, ptr addrspace(1) %1, i64 %24, !dbg !17
  %26 = sext i32 %23 to i64, !dbg !17
  %27 = getelementptr half, ptr addrspace(1) %1, i64 %26, !dbg !17
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %25, i1 %15) #5, !dbg !18
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !18
  %30 = bitcast i32 %29 to <2 x half>, !dbg !18
  %31 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !18
  %32 = bitcast i32 %31 to <2 x half>, !dbg !18
  %33 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !18
  %34 = bitcast i32 %33 to <2 x half>, !dbg !18
  %35 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !18
  %36 = bitcast i32 %35 to <2 x half>, !dbg !18
  %37 = extractelement <2 x half> %30, i64 0, !dbg !18
  %38 = extractelement <2 x half> %30, i64 1, !dbg !18
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %27, i1 %16) #5, !dbg !18
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !18
  %41 = bitcast i32 %40 to <2 x half>, !dbg !18
  %42 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !18
  %43 = bitcast i32 %42 to <2 x half>, !dbg !18
  %44 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !18
  %45 = bitcast i32 %44 to <2 x half>, !dbg !18
  %46 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !18
  %47 = bitcast i32 %46 to <2 x half>, !dbg !18
  %48 = extractelement <2 x half> %41, i64 0, !dbg !18
  %49 = extractelement <2 x half> %41, i64 1, !dbg !18
  %50 = fpext half %37 to float, !dbg !19
  %51 = fpext half %38 to float, !dbg !19
  %52 = fpext half %48 to float, !dbg !19
  %53 = fpext half %49 to float, !dbg !19
  %54 = getelementptr half, ptr addrspace(1) %2, i64 %24, !dbg !20
  %55 = getelementptr half, ptr addrspace(1) %2, i64 %26, !dbg !20
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %54, i1 %15) #5, !dbg !21
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !21
  %58 = bitcast i32 %57 to <2 x half>, !dbg !21
  %59 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !21
  %60 = bitcast i32 %59 to <2 x half>, !dbg !21
  %61 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !21
  %62 = bitcast i32 %61 to <2 x half>, !dbg !21
  %63 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !21
  %64 = bitcast i32 %63 to <2 x half>, !dbg !21
  %65 = extractelement <2 x half> %58, i64 0, !dbg !21
  %66 = extractelement <2 x half> %58, i64 1, !dbg !21
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %55, i1 %16) #5, !dbg !21
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !21
  %69 = bitcast i32 %68 to <2 x half>, !dbg !21
  %70 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !21
  %71 = bitcast i32 %70 to <2 x half>, !dbg !21
  %72 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !21
  %73 = bitcast i32 %72 to <2 x half>, !dbg !21
  %74 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !21
  %75 = bitcast i32 %74 to <2 x half>, !dbg !21
  %76 = extractelement <2 x half> %69, i64 0, !dbg !21
  %77 = extractelement <2 x half> %69, i64 1, !dbg !21
  %78 = fpext half %65 to float, !dbg !22
  %79 = fpext half %66 to float, !dbg !22
  %80 = fpext half %76 to float, !dbg !22
  %81 = fpext half %77 to float, !dbg !22
  %82 = fadd float %50, %78, !dbg !23
  %83 = fadd float %51, %79, !dbg !23
  %84 = fadd float %52, %80, !dbg !23
  %85 = fadd float %53, %81, !dbg !23
  %86 = fmul float %82, %82, !dbg !24
  %87 = fmul float %83, %83, !dbg !24
  %88 = fpext <2 x half> %32 to <2 x float>, !dbg !19
  %89 = fpext <2 x half> %60 to <2 x float>, !dbg !22
  %90 = fadd <2 x float> %88, %89, !dbg !23
  %91 = fmul <2 x float> %90, %90, !dbg !24
  %92 = fpext <2 x half> %34 to <2 x float>, !dbg !19
  %93 = fpext <2 x half> %62 to <2 x float>, !dbg !22
  %94 = fadd <2 x float> %92, %93, !dbg !23
  %95 = fmul <2 x float> %94, %94, !dbg !24
  %96 = fpext <2 x half> %36 to <2 x float>, !dbg !19
  %97 = fpext <2 x half> %64 to <2 x float>, !dbg !22
  %98 = fadd <2 x float> %96, %97, !dbg !23
  %99 = fmul <2 x float> %98, %98, !dbg !24
  %100 = fmul float %84, %84, !dbg !24
  %101 = fmul float %85, %85, !dbg !24
  %102 = fpext <2 x half> %43 to <2 x float>, !dbg !19
  %103 = fpext <2 x half> %71 to <2 x float>, !dbg !22
  %104 = fadd <2 x float> %102, %103, !dbg !23
  %105 = fmul <2 x float> %104, %104, !dbg !24
  %106 = fpext <2 x half> %45 to <2 x float>, !dbg !19
  %107 = fpext <2 x half> %73 to <2 x float>, !dbg !22
  %108 = fadd <2 x float> %106, %107, !dbg !23
  %109 = fmul <2 x float> %108, %108, !dbg !24
  %110 = fpext <2 x half> %47 to <2 x float>, !dbg !19
  %111 = fpext <2 x half> %75 to <2 x float>, !dbg !22
  %112 = fadd <2 x float> %110, %111, !dbg !23
  %113 = fmul <2 x float> %112, %112, !dbg !24
  %114 = fadd float %86, %87, !dbg !25
  %115 = extractelement <2 x float> %91, i64 0, !dbg !25
  %116 = fadd float %115, %114, !dbg !25
  %117 = extractelement <2 x float> %91, i64 1, !dbg !25
  %118 = fadd float %117, %116, !dbg !25
  %119 = extractelement <2 x float> %95, i64 0, !dbg !25
  %120 = fadd float %119, %118, !dbg !25
  %121 = extractelement <2 x float> %95, i64 1, !dbg !25
  %122 = fadd float %121, %120, !dbg !25
  %123 = extractelement <2 x float> %99, i64 0, !dbg !25
  %124 = fadd float %123, %122, !dbg !25
  %125 = extractelement <2 x float> %99, i64 1, !dbg !25
  %126 = fadd float %125, %124, !dbg !25
  %127 = select i1 %15, float %126, float 0.000000e+00, !dbg !25
  %128 = fadd float %100, %101, !dbg !25
  %129 = extractelement <2 x float> %105, i64 0, !dbg !25
  %130 = fadd float %129, %128, !dbg !25
  %131 = extractelement <2 x float> %105, i64 1, !dbg !25
  %132 = fadd float %131, %130, !dbg !25
  %133 = extractelement <2 x float> %109, i64 0, !dbg !25
  %134 = fadd float %133, %132, !dbg !25
  %135 = extractelement <2 x float> %109, i64 1, !dbg !25
  %136 = fadd float %135, %134, !dbg !25
  %137 = extractelement <2 x float> %113, i64 0, !dbg !25
  %138 = fadd float %137, %136, !dbg !25
  %139 = extractelement <2 x float> %113, i64 1, !dbg !25
  %140 = fadd float %139, %138, !dbg !25
  %141 = select i1 %16, float %140, float 0.000000e+00, !dbg !25
  %142 = bitcast float %127 to i32, !dbg !30
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 16, i32 31), !dbg !30
  %144 = bitcast i32 %143 to float, !dbg !30
  %145 = fadd float %127, %144, !dbg !25
  %146 = bitcast float %145 to i32, !dbg !30
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 8, i32 31), !dbg !30
  %148 = bitcast i32 %147 to float, !dbg !30
  %149 = fadd float %145, %148, !dbg !25
  %150 = bitcast float %149 to i32, !dbg !30
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 4, i32 31), !dbg !30
  %152 = bitcast i32 %151 to float, !dbg !30
  %153 = fadd float %149, %152, !dbg !25
  %154 = bitcast float %153 to i32, !dbg !30
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 2, i32 31), !dbg !30
  %156 = bitcast i32 %155 to float, !dbg !30
  %157 = fadd float %153, %156, !dbg !25
  %158 = bitcast float %157 to i32, !dbg !30
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 1, i32 31), !dbg !30
  %160 = bitcast i32 %159 to float, !dbg !30
  %161 = fadd float %157, %160, !dbg !25
  %162 = bitcast float %141 to i32, !dbg !30
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 16, i32 31), !dbg !30
  %164 = bitcast i32 %163 to float, !dbg !30
  %165 = fadd float %141, %164, !dbg !25
  %166 = bitcast float %165 to i32, !dbg !30
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 8, i32 31), !dbg !30
  %168 = bitcast i32 %167 to float, !dbg !30
  %169 = fadd float %165, %168, !dbg !25
  %170 = bitcast float %169 to i32, !dbg !30
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 4, i32 31), !dbg !30
  %172 = bitcast i32 %171 to float, !dbg !30
  %173 = fadd float %169, %172, !dbg !25
  %174 = bitcast float %173 to i32, !dbg !30
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 2, i32 31), !dbg !30
  %176 = bitcast i32 %175 to float, !dbg !30
  %177 = fadd float %173, %176, !dbg !25
  %178 = bitcast float %177 to i32, !dbg !30
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 1, i32 31), !dbg !30
  %180 = bitcast i32 %179 to float, !dbg !30
  %181 = fadd float %177, %180, !dbg !25
  %182 = and i32 %17, 15, !dbg !30
  %183 = icmp eq i32 %12, 0, !dbg !30
  %184 = getelementptr float, ptr addrspace(3) @global_smem, i32 %182, !dbg !30
  %185 = bitcast float %161 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %184, <1 x i32> %185, i1 %183) #5, !dbg !30
  %186 = or disjoint i32 %182, 16, !dbg !30
  %187 = getelementptr float, ptr addrspace(3) @global_smem, i32 %186, !dbg !30
  %188 = bitcast float %181 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %188, i1 %183) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %189 = icmp slt i32 %11, 32, !dbg !30
  %190 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !30
  %191 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %190, i1 %189) #5, !dbg !30
  %192 = bitcast i32 %191 to float, !dbg !30
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 8, i32 31), !dbg !30
  %194 = bitcast i32 %193 to float, !dbg !30
  %195 = fadd float %192, %194, !dbg !25
  %196 = bitcast float %195 to i32, !dbg !30
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 4, i32 31), !dbg !30
  %198 = bitcast i32 %197 to float, !dbg !30
  %199 = fadd float %195, %198, !dbg !25
  %200 = bitcast float %199 to i32, !dbg !30
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 2, i32 31), !dbg !30
  %202 = bitcast i32 %201 to float, !dbg !30
  %203 = fadd float %199, %202, !dbg !25
  %204 = bitcast float %203 to i32, !dbg !30
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 1, i32 31), !dbg !30
  %206 = bitcast i32 %205 to float, !dbg !30
  %207 = fadd float %203, %206, !dbg !25
  %208 = and i32 %11, 15, !dbg !30
  %209 = icmp eq i32 %208, 0, !dbg !30
  %210 = and i1 %189, %209, !dbg !30
  %211 = bitcast float %207 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %211, i1 %210) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %212 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !30
  %213 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %214 = bitcast float %212 to i32, !dbg !31
  %215 = bitcast float %213 to i32, !dbg !31
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %214, i32 %215, i1 true) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %216 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %13, !dbg !31
  %217 = load float, ptr addrspace(3) %216, align 4, !dbg !31
  %218 = tail call float @llvm.nvvm.div.full(float %217, float 4.096000e+03), !dbg !32
  %219 = tail call float @llvm.nvvm.div.full(float %212, float 4.096000e+03), !dbg !32
  %220 = tail call float @llvm.nvvm.div.full(float %213, float 4.096000e+03), !dbg !32
  %221 = fadd float %218, 0x3EE4F8B580000000, !dbg !33
  %222 = fadd float %219, 0x3EE4F8B580000000, !dbg !33
  %223 = fadd float %220, 0x3EE4F8B580000000, !dbg !33
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i = icmp eq i32 %224, 0, !dbg !31
  br i1 %.not.i, label %227, label %225, !dbg !31

225:                                              ; preds = %8
  %226 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %221), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

227:                                              ; preds = %8
  %228 = tail call float @llvm.nvvm.rsqrt.approx.f(float %221), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

__nv_rsqrtf.exit:                                 ; preds = %225, %227
  %.0.i = phi float [ %226, %225 ], [ %228, %227 ], !dbg !31
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %236 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i22 = icmp eq i32 %236, 0, !dbg !31
  br i1 %.not.i22, label %239, label %237, !dbg !31

237:                                              ; preds = %__nv_rsqrtf.exit
  %238 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %222), !dbg !31
  br label %__nv_rsqrtf.exit24, !dbg !31

239:                                              ; preds = %__nv_rsqrtf.exit
  %240 = tail call float @llvm.nvvm.rsqrt.approx.f(float %222), !dbg !31
  br label %__nv_rsqrtf.exit24, !dbg !31

__nv_rsqrtf.exit24:                               ; preds = %237, %239
  %.0.i23 = phi float [ %238, %237 ], [ %240, %239 ], !dbg !31
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %242 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %243 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %247 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %248 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i46 = icmp eq i32 %248, 0, !dbg !31
  br i1 %.not.i46, label %251, label %249, !dbg !31

249:                                              ; preds = %__nv_rsqrtf.exit24
  %250 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %223), !dbg !31
  br label %__nv_rsqrtf.exit48, !dbg !31

251:                                              ; preds = %__nv_rsqrtf.exit24
  %252 = tail call float @llvm.nvvm.rsqrt.approx.f(float %223), !dbg !31
  br label %__nv_rsqrtf.exit48, !dbg !31

__nv_rsqrtf.exit48:                               ; preds = %249, %251
  %.0.i47 = phi float [ %250, %249 ], [ %252, %251 ], !dbg !31
  %253 = or disjoint i32 %10, %13, !dbg !12
  %254 = icmp slt i32 %253, %5, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %255 = sext i32 %253 to i64, !dbg !35
  %256 = getelementptr float, ptr addrspace(1) %0, i64 %255, !dbg !35
  %257 = and i32 %11, 510, !dbg !36
  %258 = icmp eq i32 %257, 0, !dbg !36
  %259 = bitcast float %.0.i to i32, !dbg !36
  %260 = and i1 %258, %254, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %259, ptr addrspace(1) %256, i1 %260) #5, !dbg !36
  %261 = zext nneg i32 %19 to i64, !dbg !37
  %262 = getelementptr half, ptr addrspace(1) %3, i64 %261, !dbg !37
  %263 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %262, i1 true) #5, !dbg !38
  %264 = extractvalue { i32, i32, i32, i32 } %263, 0, !dbg !38
  %265 = bitcast i32 %264 to <2 x half>, !dbg !38
  %266 = extractvalue { i32, i32, i32, i32 } %263, 1, !dbg !38
  %267 = bitcast i32 %266 to <2 x half>, !dbg !38
  %268 = extractvalue { i32, i32, i32, i32 } %263, 2, !dbg !38
  %269 = bitcast i32 %268 to <2 x half>, !dbg !38
  %270 = extractvalue { i32, i32, i32, i32 } %263, 3, !dbg !38
  %271 = bitcast i32 %270 to <2 x half>, !dbg !38
  %272 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %25, i1 %15) #5, !dbg !39
  %273 = extractvalue { i32, i32, i32, i32 } %272, 0, !dbg !39
  %274 = bitcast i32 %273 to <2 x half>, !dbg !39
  %275 = extractvalue { i32, i32, i32, i32 } %272, 1, !dbg !39
  %276 = bitcast i32 %275 to <2 x half>, !dbg !39
  %277 = extractvalue { i32, i32, i32, i32 } %272, 2, !dbg !39
  %278 = bitcast i32 %277 to <2 x half>, !dbg !39
  %279 = extractvalue { i32, i32, i32, i32 } %272, 3, !dbg !39
  %280 = bitcast i32 %279 to <2 x half>, !dbg !39
  %281 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %27, i1 %16) #5, !dbg !39
  %282 = extractvalue { i32, i32, i32, i32 } %281, 0, !dbg !39
  %283 = bitcast i32 %282 to <2 x half>, !dbg !39
  %284 = extractvalue { i32, i32, i32, i32 } %281, 1, !dbg !39
  %285 = bitcast i32 %284 to <2 x half>, !dbg !39
  %286 = extractvalue { i32, i32, i32, i32 } %281, 2, !dbg !39
  %287 = bitcast i32 %286 to <2 x half>, !dbg !39
  %288 = extractvalue { i32, i32, i32, i32 } %281, 3, !dbg !39
  %289 = bitcast i32 %288 to <2 x half>, !dbg !39
  %290 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %54, i1 %15) #5, !dbg !40
  %291 = extractvalue { i32, i32, i32, i32 } %290, 0, !dbg !40
  %292 = bitcast i32 %291 to <2 x half>, !dbg !40
  %293 = extractvalue { i32, i32, i32, i32 } %290, 1, !dbg !40
  %294 = bitcast i32 %293 to <2 x half>, !dbg !40
  %295 = extractvalue { i32, i32, i32, i32 } %290, 2, !dbg !40
  %296 = bitcast i32 %295 to <2 x half>, !dbg !40
  %297 = extractvalue { i32, i32, i32, i32 } %290, 3, !dbg !40
  %298 = bitcast i32 %297 to <2 x half>, !dbg !40
  %299 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %55, i1 %16) #5, !dbg !40
  %300 = extractvalue { i32, i32, i32, i32 } %299, 0, !dbg !40
  %301 = bitcast i32 %300 to <2 x half>, !dbg !40
  %302 = extractvalue { i32, i32, i32, i32 } %299, 1, !dbg !40
  %303 = bitcast i32 %302 to <2 x half>, !dbg !40
  %304 = extractvalue { i32, i32, i32, i32 } %299, 2, !dbg !40
  %305 = bitcast i32 %304 to <2 x half>, !dbg !40
  %306 = extractvalue { i32, i32, i32, i32 } %299, 3, !dbg !40
  %307 = bitcast i32 %306 to <2 x half>, !dbg !40
  %308 = getelementptr half, ptr addrspace(1) %4, i64 %24, !dbg !41
  %309 = getelementptr half, ptr addrspace(1) %4, i64 %26, !dbg !41
  %310 = fpext <2 x half> %265 to <2 x float>, !dbg !42
  %311 = fpext <2 x half> %274 to <2 x float>, !dbg !43
  %312 = fpext <2 x half> %292 to <2 x float>, !dbg !44
  %313 = fadd <2 x float> %311, %312, !dbg !45
  %314 = insertelement <2 x float> poison, float %.0.i23, i64 0, !dbg !46
  %315 = shufflevector <2 x float> %314, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !46
  %316 = fmul <2 x float> %315, %313, !dbg !46
  %317 = fmul <2 x float> %316, %310, !dbg !47
  %318 = fptrunc <2 x float> %317 to <2 x half>, !dbg !48
  %319 = fpext <2 x half> %267 to <2 x float>, !dbg !42
  %320 = fpext <2 x half> %276 to <2 x float>, !dbg !43
  %321 = fpext <2 x half> %294 to <2 x float>, !dbg !44
  %322 = fadd <2 x float> %320, %321, !dbg !45
  %323 = fmul <2 x float> %315, %322, !dbg !46
  %324 = fmul <2 x float> %323, %319, !dbg !47
  %325 = fptrunc <2 x float> %324 to <2 x half>, !dbg !48
  %326 = fpext <2 x half> %269 to <2 x float>, !dbg !42
  %327 = fpext <2 x half> %278 to <2 x float>, !dbg !43
  %328 = fpext <2 x half> %296 to <2 x float>, !dbg !44
  %329 = fadd <2 x float> %327, %328, !dbg !45
  %330 = fmul <2 x float> %315, %329, !dbg !46
  %331 = fmul <2 x float> %330, %326, !dbg !47
  %332 = fptrunc <2 x float> %331 to <2 x half>, !dbg !48
  %333 = fpext <2 x half> %271 to <2 x float>, !dbg !42
  %334 = fpext <2 x half> %280 to <2 x float>, !dbg !43
  %335 = fpext <2 x half> %298 to <2 x float>, !dbg !44
  %336 = fadd <2 x float> %334, %335, !dbg !45
  %337 = fmul <2 x float> %315, %336, !dbg !46
  %338 = fmul <2 x float> %337, %333, !dbg !47
  %339 = fptrunc <2 x float> %338 to <2 x half>, !dbg !48
  %340 = fpext <2 x half> %283 to <2 x float>, !dbg !43
  %341 = fpext <2 x half> %301 to <2 x float>, !dbg !44
  %342 = fadd <2 x float> %340, %341, !dbg !45
  %343 = insertelement <2 x float> poison, float %.0.i47, i64 0, !dbg !46
  %344 = shufflevector <2 x float> %343, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !46
  %345 = fmul <2 x float> %344, %342, !dbg !46
  %346 = fmul <2 x float> %345, %310, !dbg !47
  %347 = fptrunc <2 x float> %346 to <2 x half>, !dbg !48
  %348 = fpext <2 x half> %285 to <2 x float>, !dbg !43
  %349 = fpext <2 x half> %303 to <2 x float>, !dbg !44
  %350 = fadd <2 x float> %348, %349, !dbg !45
  %351 = fmul <2 x float> %344, %350, !dbg !46
  %352 = fmul <2 x float> %351, %319, !dbg !47
  %353 = fptrunc <2 x float> %352 to <2 x half>, !dbg !48
  %354 = fpext <2 x half> %287 to <2 x float>, !dbg !43
  %355 = fpext <2 x half> %305 to <2 x float>, !dbg !44
  %356 = fadd <2 x float> %354, %355, !dbg !45
  %357 = fmul <2 x float> %344, %356, !dbg !46
  %358 = fmul <2 x float> %357, %326, !dbg !47
  %359 = fptrunc <2 x float> %358 to <2 x half>, !dbg !48
  %360 = fpext <2 x half> %289 to <2 x float>, !dbg !43
  %361 = fpext <2 x half> %307 to <2 x float>, !dbg !44
  %362 = fadd <2 x float> %360, %361, !dbg !45
  %363 = fmul <2 x float> %344, %362, !dbg !46
  %364 = fmul <2 x float> %363, %333, !dbg !47
  %365 = fptrunc <2 x float> %364 to <2 x half>, !dbg !48
  %366 = bitcast <2 x half> %318 to i32, !dbg !48
  %367 = bitcast <2 x half> %325 to i32, !dbg !48
  %368 = bitcast <2 x half> %332 to i32, !dbg !48
  %369 = bitcast <2 x half> %339 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %366, i32 %367, i32 %368, i32 %369, ptr addrspace(1) %308, i1 %15) #5, !dbg !48
  %370 = bitcast <2 x half> %347 to i32, !dbg !48
  %371 = bitcast <2 x half> %353 to i32, !dbg !48
  %372 = bitcast <2 x half> %359 to i32, !dbg !48
  %373 = bitcast <2 x half> %365 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %370, i32 %371, i32 %372, i32 %373, ptr addrspace(1) %309, i1 %16) #5, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cftrsow5qcbxopniidi22t6ajsrwmzbq4o64dytrbucrl2gj2i5m.py", directory: "/tmp/torchinductor_root/ft")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 35, column: 41, scope: !6)
!17 = !DILocation(line: 35, column: 34, scope: !6)
!18 = !DILocation(line: 35, column: 51, scope: !6)
!19 = !DILocation(line: 35, column: 112, scope: !6)
!20 = !DILocation(line: 36, column: 34, scope: !6)
!21 = !DILocation(line: 36, column: 51, scope: !6)
!22 = !DILocation(line: 36, column: 112, scope: !6)
!23 = !DILocation(line: 37, column: 22, scope: !6)
!24 = !DILocation(line: 39, column: 22, scope: !6)
!25 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !29)
!26 = distinct !DILexicalBlockFile(scope: !28, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!28 = distinct !DILexicalBlockFile(scope: !6, file: !27, discriminator: 0)
!29 = !DILocation(line: 43, column: 25, scope: !6)
!30 = !DILocation(line: 286, column: 36, scope: !28, inlinedAt: !29)
!31 = !DILocation(line: 48, column: 28, scope: !6)
!32 = !DILocation(line: 45, column: 19, scope: !6)
!33 = !DILocation(line: 47, column: 19, scope: !6)
!34 = !DILocation(line: 49, column: 4, scope: !6)
!35 = !DILocation(line: 50, column: 28, scope: !6)
!36 = !DILocation(line: 50, column: 40, scope: !6)
!37 = !DILocation(line: 57, column: 35, scope: !6)
!38 = !DILocation(line: 57, column: 42, scope: !6)
!39 = !DILocation(line: 58, column: 52, scope: !6)
!40 = !DILocation(line: 59, column: 52, scope: !6)
!41 = !DILocation(line: 65, column: 29, scope: !6)
!42 = !DILocation(line: 57, column: 95, scope: !6)
!43 = !DILocation(line: 58, column: 114, scope: !6)
!44 = !DILocation(line: 59, column: 114, scope: !6)
!45 = !DILocation(line: 60, column: 24, scope: !6)
!46 = !DILocation(line: 62, column: 24, scope: !6)
!47 = !DILocation(line: 64, column: 24, scope: !6)
!48 = !DILocation(line: 65, column: 53, scope: !6)
!49 = !DILocation(line: 51, column: 4, scope: !6)
