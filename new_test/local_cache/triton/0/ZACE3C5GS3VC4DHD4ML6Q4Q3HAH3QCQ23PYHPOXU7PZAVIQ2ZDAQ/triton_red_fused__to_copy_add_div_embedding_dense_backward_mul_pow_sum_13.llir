; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/rn/crnwhfxb7zfxfwwrin7h4kkc5jsfdj3u6ms7omvekbnm6ohwt6c5.py\00"
@assertMessage_0 = internal constant [41 x i8] c"index out of bounds: 0 <= tmp49 < 128256\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_div_embedding_dense_backward_mul_pow_sum_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10, ptr addrspace(1) readnone captures(none) %11) local_unnamed_addr !dbg !10 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %14 = shl i32 %13, 2, !dbg !12
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %.lobit2 = lshr i32 %15, 7, !dbg !13
  %16 = and i32 %.lobit2, 3, !dbg !13
  %17 = or disjoint i32 %16, %14, !dbg !14
  %18 = or disjoint i32 %14, 1, !dbg !14
  %19 = or disjoint i32 %14, 3, !dbg !14
  %20 = icmp slt i32 %17, %9, !dbg !15
  %21 = icmp slt i32 %18, %9, !dbg !15
  %22 = icmp slt i32 %19, %9, !dbg !15
  %23 = shl i32 %15, 2, !dbg !16
  %24 = and i32 %23, 508, !dbg !16
  %25 = and i32 %15, 511, !dbg !16
  %26 = shl i32 %17, 12, !dbg !17
  %27 = or disjoint i32 %26, %24
  %28 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %25
  %29 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %24
  %30 = zext nneg i32 %25 to i64, !dbg !18
  %31 = insertelement <4 x i1> poison, i1 %20, i64 0, !dbg !19
  %32 = shufflevector <4 x i1> %31, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !19
  br label %33, !dbg !18

33:                                               ; preds = %12, %33
  %indvars.iv = phi i64 [ 0, %12 ], [ %indvars.iv.next, %33 ]
  %34 = phi <4 x float> [ zeroinitializer, %12 ], [ %82, %33 ]
  %35 = or disjoint i64 %indvars.iv, %30, !dbg !20
  %36 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !21
  %37 = or i32 %27, %36, !dbg !21
  %38 = sext i32 %37 to i64, !dbg !22
  %39 = getelementptr half, ptr addrspace(1) %0, i64 %38, !dbg !22
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %39, i1 %20) #4, !dbg !23
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !23
  %42 = bitcast i32 %41 to <2 x half>, !dbg !23
  %43 = extractvalue { i32, i32 } %40, 1, !dbg !23
  %44 = bitcast i32 %43 to <2 x half>, !dbg !23
  %45 = getelementptr half, ptr addrspace(1) %1, i64 %38, !dbg !24
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %45, i1 %20) #4, !dbg !25
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !25
  %48 = bitcast i32 %47 to <2 x half>, !dbg !25
  %49 = extractvalue { i32, i32 } %46, 1, !dbg !25
  %50 = bitcast i32 %49 to <2 x half>, !dbg !25
  %51 = getelementptr half, ptr addrspace(1) %2, i64 %38, !dbg !26
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %51, i1 %20) #4, !dbg !27
  %53 = extractvalue { i32, i32 } %52, 0, !dbg !27
  %54 = bitcast i32 %53 to <2 x half>, !dbg !27
  %55 = extractvalue { i32, i32 } %52, 1, !dbg !27
  %56 = bitcast i32 %55 to <2 x half>, !dbg !27
  %57 = getelementptr half, ptr addrspace(1) %3, i64 %35, !dbg !28
  %58 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %57, i1 true) #4, !dbg !29
  %59 = bitcast i16 %58 to half, !dbg !29
  %60 = fpext half %59 to float, !dbg !30
  %61 = getelementptr half, ptr addrspace(1) %4, i64 %38, !dbg !31
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %61, i1 %20) #4, !dbg !32
  %63 = extractvalue { i32, i32 } %62, 0, !dbg !32
  %64 = bitcast i32 %63 to <2 x half>, !dbg !32
  %65 = extractvalue { i32, i32 } %62, 1, !dbg !32
  %66 = bitcast i32 %65 to <2 x half>, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %67 = bitcast float %60 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %28, <1 x i32> %67, i1 true) #4, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %68 = shufflevector <2 x half> %42, <2 x half> %44, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !34
  %69 = fpext <4 x half> %68 to <4 x float>, !dbg !34
  %70 = shufflevector <2 x half> %48, <2 x half> %50, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !35
  %71 = fpext <4 x half> %70 to <4 x float>, !dbg !35
  %72 = shufflevector <2 x half> %54, <2 x half> %56, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !36
  %73 = fpext <4 x half> %72 to <4 x float>, !dbg !36
  %74 = shufflevector <2 x half> %64, <2 x half> %66, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !37
  %75 = fpext <4 x half> %74 to <4 x float>, !dbg !37
  %76 = fadd <4 x float> %69, %71, !dbg !38
  %77 = fadd <4 x float> %76, %73, !dbg !39
  %78 = load <4 x float>, ptr addrspace(3) %29, align 16, !dbg !33
  %79 = fmul <4 x float> %77, %78, !dbg !33
  %80 = fmul <4 x float> %79, %75, !dbg !40
  %81 = fadd <4 x float> %34, %80, !dbg !41
  %82 = select <4 x i1> %32, <4 x float> %81, <4 x float> %34, !dbg !19
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !18
  %83 = icmp samesign ult i64 %indvars.iv, 3584, !dbg !18
  br i1 %83, label %33, label %84, !dbg !18

84:                                               ; preds = %33
  %85 = lshr i32 %15, 5, !dbg !13
  %86 = or disjoint i32 %14, 2, !dbg !14
  %87 = icmp slt i32 %14, %9, !dbg !15
  %88 = icmp slt i32 %86, %9, !dbg !15
  %89 = and i32 %15, 31, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %shift = shufflevector <4 x float> %82, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !46
  %90 = fadd <4 x float> %82, %shift, !dbg !46
  %shift27 = shufflevector <4 x float> %82, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !46
  %91 = fadd <4 x float> %shift27, %90, !dbg !46
  %shift28 = shufflevector <4 x float> %82, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !46
  %92 = fadd <4 x float> %shift28, %91, !dbg !46
  %93 = extractelement <4 x float> %92, i64 0, !dbg !46
  %94 = bitcast float %93 to i32, !dbg !42
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 16, i32 31), !dbg !42
  %96 = bitcast i32 %95 to float, !dbg !42
  %97 = fadd float %93, %96, !dbg !46
  %98 = bitcast float %97 to i32, !dbg !42
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 8, i32 31), !dbg !42
  %100 = bitcast i32 %99 to float, !dbg !42
  %101 = fadd float %97, %100, !dbg !46
  %102 = bitcast float %101 to i32, !dbg !42
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 4, i32 31), !dbg !42
  %104 = bitcast i32 %103 to float, !dbg !42
  %105 = fadd float %101, %104, !dbg !46
  %106 = bitcast float %105 to i32, !dbg !42
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 2, i32 31), !dbg !42
  %108 = bitcast i32 %107 to float, !dbg !42
  %109 = fadd float %105, %108, !dbg !46
  %110 = bitcast float %109 to i32, !dbg !42
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 1, i32 31), !dbg !42
  %112 = bitcast i32 %111 to float, !dbg !42
  %113 = fadd float %109, %112, !dbg !46
  %114 = and i32 %85, 3, !dbg !42
  %115 = icmp eq i32 %89, 0, !dbg !42
  %116 = shl nuw nsw i32 %16, 2, !dbg !42
  %117 = or disjoint i32 %116, %114, !dbg !42
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i32 %117, !dbg !42
  %119 = bitcast float %113 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 %115) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %120 = icmp slt i32 %15, 16, !dbg !42
  %121 = getelementptr float, ptr addrspace(3) @global_smem, i32 %15, !dbg !42
  %122 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %121, i1 %120) #4, !dbg !42
  %123 = bitcast i32 %122 to float, !dbg !42
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 2, i32 31), !dbg !42
  %125 = bitcast i32 %124 to float, !dbg !42
  %126 = fadd float %123, %125, !dbg !46
  %127 = bitcast float %126 to i32, !dbg !42
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 1, i32 31), !dbg !42
  %129 = bitcast i32 %128 to float, !dbg !42
  %130 = fadd float %126, %129, !dbg !46
  %131 = and i32 %15, 3, !dbg !42
  %132 = icmp eq i32 %131, 0, !dbg !42
  %133 = and i1 %120, %132, !dbg !42
  %134 = bitcast float %130 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %134, i1 %133) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %135 = getelementptr float, ptr addrspace(3) @global_smem, i32 %116, !dbg !42
  %136 = load float, ptr addrspace(3) %135, align 16, !dbg !42
  %137 = sext i32 %17 to i64, !dbg !48
  %138 = getelementptr i64, ptr addrspace(1) %5, i64 %137, !dbg !48
  %139 = sext i32 %14 to i64, !dbg !48
  %140 = getelementptr i64, ptr addrspace(1) %5, i64 %139, !dbg !48
  %141 = sext i32 %18 to i64, !dbg !48
  %142 = getelementptr i64, ptr addrspace(1) %5, i64 %141, !dbg !48
  %143 = sext i32 %86 to i64, !dbg !48
  %144 = getelementptr i64, ptr addrspace(1) %5, i64 %143, !dbg !48
  %145 = sext i32 %19 to i64, !dbg !48
  %146 = getelementptr i64, ptr addrspace(1) %5, i64 %145, !dbg !48
  %147 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %138, i1 %20) #4, !dbg !49
  %148 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %138, i1 %20) #4, !dbg !49
  %149 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %138, i1 %20) #4, !dbg !49
  %150 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %138, i1 %20) #4, !dbg !49
  %151 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %140, i1 %87) #4, !dbg !49
  %152 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %142, i1 %21) #4, !dbg !49
  %153 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %144, i1 %88) #4, !dbg !49
  %154 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %146, i1 %22) #4, !dbg !49
  %155 = getelementptr float, ptr addrspace(1) %7, i64 %137, !dbg !50
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 %20) #4, !dbg !51
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 %20) #4, !dbg !51
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 %20) #4, !dbg !51
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 %20) #4, !dbg !51
  %160 = bitcast i32 %159 to float, !dbg !51
  %161 = icmp eq i64 %150, -1, !dbg !52
  %162 = fmul float %136, -5.000000e-01, !dbg !53
  %163 = fmul float %160, %160, !dbg !54
  %164 = fmul float %163, %160, !dbg !55
  %165 = fmul float %162, %164, !dbg !56
  %166 = fmul float %165, 0x3F30000000000000, !dbg !57
  %167 = icmp slt i64 %150, 0, !dbg !58
  %168 = insertelement <4 x i64> poison, i64 %154, i64 0, !dbg !59
  %169 = insertelement <4 x i64> %168, i64 %153, i64 1, !dbg !59
  %170 = insertelement <4 x i64> %169, i64 %152, i64 2, !dbg !59
  %171 = insertelement <4 x i64> %170, i64 %151, i64 3, !dbg !59
  %172 = add <4 x i64> %171, splat (i64 128256), !dbg !59
  %173 = icmp slt <4 x i64> %171, zeroinitializer, !dbg !58
  %174 = select <4 x i1> %173, <4 x i64> %172, <4 x i64> %171, !dbg !60
  %175 = icmp ugt <4 x i64> %174, splat (i64 128255), !dbg !61
  %176 = extractelement <4 x i1> %175, i64 3, !dbg !62
  %.not6 = and i1 %87, %176, !dbg !62
  %177 = extractelement <4 x i1> %175, i64 2, !dbg !62
  %.not7 = and i1 %21, %177, !dbg !62
  %178 = extractelement <4 x i1> %175, i64 1, !dbg !62
  %.not8 = and i1 %88, %178, !dbg !62
  %179 = extractelement <4 x i1> %175, i64 0, !dbg !63
  %.not9 = and i1 %22, %179, !dbg !63
  %180 = shl i64 %150, 12, !dbg !63
  %181 = add i64 %180, 525336576, !dbg !63
  %182 = select i1 %167, i64 %181, i64 %180, !dbg !63
  %invariant.op14 = or i1 %.not8, %.not9, !dbg !64
  %183 = or i1 %.not6, %.not7
  %.reass15 = or i1 %183, %invariant.op14
  %184 = zext nneg i32 %24 to i64, !dbg !64
  %185 = or disjoint i64 %182, %184
  br label %186, !dbg !64

186:                                              ; preds = %84, %206
  %indvars.iv19 = phi i64 [ 0, %84 ], [ %indvars.iv.next20, %206 ]
  %187 = or disjoint i64 %indvars.iv19, %30, !dbg !65
  %188 = trunc nuw nsw i64 %indvars.iv19 to i32
  %.reass = or i32 %27, %188
  %189 = sext i32 %.reass to i64, !dbg !66
  %190 = getelementptr half, ptr addrspace(1) %6, i64 %189, !dbg !66
  %191 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %190, i1 %20) #4, !dbg !67
  %192 = getelementptr half, ptr addrspace(1) %0, i64 %189, !dbg !68
  %193 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %192, i1 %20) #4, !dbg !69
  %194 = getelementptr half, ptr addrspace(1) %1, i64 %189, !dbg !70
  %195 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %194, i1 %20) #4, !dbg !71
  %196 = getelementptr half, ptr addrspace(1) %2, i64 %189, !dbg !72
  %197 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %196, i1 %20) #4, !dbg !73
  %198 = getelementptr half, ptr addrspace(1) %3, i64 %187, !dbg !74
  %199 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %198, i1 true) #4, !dbg !75
  %200 = bitcast i16 %199 to half, !dbg !75
  %201 = fpext half %200 to float, !dbg !76
  %202 = getelementptr half, ptr addrspace(1) %4, i64 %189, !dbg !77
  %203 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %202, i1 %20) #4, !dbg !78
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %204 = bitcast float %201 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %28, <1 x i32> %204, i1 true) #4, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  br i1 %.reass15, label %205, label %206, !dbg !80

205:                                              ; preds = %186
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 92, ptr nonnull @assertFunc_0, i64 1), !dbg !80
  unreachable, !dbg !80

206:                                              ; preds = %186
  %207 = extractvalue { i32, i32 } %193, 1, !dbg !69
  %208 = bitcast i32 %207 to <2 x half>, !dbg !69
  %209 = extractelement <2 x half> %208, i64 1, !dbg !69
  %210 = fpext half %209 to float, !dbg !81
  %211 = extractvalue { i32, i32 } %195, 1, !dbg !71
  %212 = bitcast i32 %211 to <2 x half>, !dbg !71
  %213 = extractelement <2 x half> %212, i64 1, !dbg !71
  %214 = fpext half %213 to float, !dbg !82
  %215 = fadd float %210, %214, !dbg !83
  %216 = extractvalue { i32, i32 } %197, 1, !dbg !73
  %217 = bitcast i32 %216 to <2 x half>, !dbg !73
  %218 = extractelement <2 x half> %217, i64 1, !dbg !73
  %219 = fpext half %218 to float, !dbg !84
  %220 = fadd float %215, %219, !dbg !85
  %221 = load <4 x float>, ptr addrspace(3) %29, align 16, !dbg !79
  %222 = extractelement <4 x float> %221, i64 3, !dbg !79
  %223 = fmul float %220, %222, !dbg !86
  %224 = fmul float %223, %160, !dbg !79
  %225 = extractvalue { i32, i32 } %203, 1, !dbg !78
  %226 = bitcast i32 %225 to <2 x half>, !dbg !78
  %227 = extractelement <2 x half> %226, i64 1, !dbg !78
  %228 = fpext half %227 to float, !dbg !87
  %229 = fmul float %228, 2.000000e+00, !dbg !88
  %230 = fmul float %166, %229, !dbg !89
  %231 = fadd float %230, %224, !dbg !90
  %232 = extractvalue { i32, i32 } %191, 1, !dbg !67
  %233 = bitcast i32 %232 to <2 x half>, !dbg !67
  %234 = extractelement <2 x half> %233, i64 1, !dbg !67
  %235 = fpext half %234 to float, !dbg !91
  %236 = fadd float %231, %235, !dbg !92
  %237 = select i1 %161, float 0.000000e+00, float %236, !dbg !93
  %238 = extractelement <2 x half> %208, i64 0, !dbg !69
  %239 = fpext half %238 to float, !dbg !81
  %240 = extractelement <2 x half> %212, i64 0, !dbg !71
  %241 = fpext half %240 to float, !dbg !82
  %242 = fadd float %239, %241, !dbg !83
  %243 = extractelement <2 x half> %217, i64 0, !dbg !73
  %244 = fpext half %243 to float, !dbg !84
  %245 = fadd float %242, %244, !dbg !85
  %246 = extractelement <4 x float> %221, i64 2, !dbg !79
  %247 = fmul float %245, %246, !dbg !86
  %248 = fmul float %247, %160, !dbg !79
  %249 = extractelement <2 x half> %226, i64 0, !dbg !78
  %250 = fpext half %249 to float, !dbg !87
  %251 = fmul float %250, 2.000000e+00, !dbg !88
  %252 = fmul float %166, %251, !dbg !89
  %253 = fadd float %252, %248, !dbg !90
  %254 = extractelement <2 x half> %233, i64 0, !dbg !67
  %255 = fpext half %254 to float, !dbg !91
  %256 = fadd float %253, %255, !dbg !92
  %257 = select i1 %161, float 0.000000e+00, float %256, !dbg !93
  %258 = extractvalue { i32, i32 } %193, 0, !dbg !69
  %259 = bitcast i32 %258 to <2 x half>, !dbg !69
  %260 = extractelement <2 x half> %259, i64 1, !dbg !69
  %261 = fpext half %260 to float, !dbg !81
  %262 = extractvalue { i32, i32 } %195, 0, !dbg !71
  %263 = bitcast i32 %262 to <2 x half>, !dbg !71
  %264 = extractelement <2 x half> %263, i64 1, !dbg !71
  %265 = fpext half %264 to float, !dbg !82
  %266 = fadd float %261, %265, !dbg !83
  %267 = extractvalue { i32, i32 } %197, 0, !dbg !73
  %268 = bitcast i32 %267 to <2 x half>, !dbg !73
  %269 = extractelement <2 x half> %268, i64 1, !dbg !73
  %270 = fpext half %269 to float, !dbg !84
  %271 = fadd float %266, %270, !dbg !85
  %272 = extractelement <4 x float> %221, i64 1, !dbg !79
  %273 = fmul float %271, %272, !dbg !86
  %274 = fmul float %273, %160, !dbg !79
  %275 = extractvalue { i32, i32 } %203, 0, !dbg !78
  %276 = bitcast i32 %275 to <2 x half>, !dbg !78
  %277 = extractelement <2 x half> %276, i64 1, !dbg !78
  %278 = fpext half %277 to float, !dbg !87
  %279 = fmul float %278, 2.000000e+00, !dbg !88
  %280 = fmul float %166, %279, !dbg !89
  %281 = fadd float %280, %274, !dbg !90
  %282 = extractvalue { i32, i32 } %191, 0, !dbg !67
  %283 = bitcast i32 %282 to <2 x half>, !dbg !67
  %284 = extractelement <2 x half> %283, i64 1, !dbg !67
  %285 = fpext half %284 to float, !dbg !91
  %286 = fadd float %281, %285, !dbg !92
  %287 = select i1 %161, float 0.000000e+00, float %286, !dbg !93
  %288 = extractelement <2 x half> %259, i64 0, !dbg !69
  %289 = fpext half %288 to float, !dbg !81
  %290 = extractelement <2 x half> %263, i64 0, !dbg !71
  %291 = fpext half %290 to float, !dbg !82
  %292 = fadd float %289, %291, !dbg !83
  %293 = extractelement <2 x half> %268, i64 0, !dbg !73
  %294 = fpext half %293 to float, !dbg !84
  %295 = fadd float %292, %294, !dbg !85
  %296 = extractelement <4 x float> %221, i64 0, !dbg !79
  %297 = fmul float %295, %296, !dbg !86
  %298 = fmul float %297, %160, !dbg !79
  %299 = extractelement <2 x half> %276, i64 0, !dbg !78
  %300 = fpext half %299 to float, !dbg !87
  %301 = fmul float %300, 2.000000e+00, !dbg !88
  %302 = fmul float %166, %301, !dbg !89
  %303 = fadd float %302, %298, !dbg !90
  %304 = extractelement <2 x half> %283, i64 0, !dbg !67
  %305 = fpext half %304 to float, !dbg !91
  %306 = fadd float %303, %305, !dbg !92
  %307 = select i1 %161, float 0.000000e+00, float %306, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %308 = or i64 %185, %indvars.iv19, !dbg !94
  %309 = getelementptr float, ptr addrspace(1) %8, i64 %308, !dbg !95
  %310 = tail call { float, float, float, float } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$9 atom.global.gpu.relaxed.add.v4.f32 { $0, $1, $2, $3 }, [ $4 + 0 ], { $5, $6, $7, $8 };", "=r,=r,=r,=r,l,r,r,r,r,b"(ptr addrspace(1) %309, float %307, float %287, float %257, float %237, i1 %20) #4, !dbg !96
  %indvars.iv.next20 = add nuw nsw i64 %indvars.iv19, 512, !dbg !64
  %311 = icmp samesign ult i64 %indvars.iv19, 3584, !dbg !64
  br i1 %311, label %186, label %312, !dbg !64

312:                                              ; preds = %206
  ret void, !dbg !97
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crnwhfxb7zfxfwwrin7h4kkc5jsfdj3u6ms7omvekbnm6ohwt6c5.py", directory: "/tmp/torchinductor_root/rn")
!4 = !{ptr @triton_red_fused__to_copy_add_div_embedding_dense_backward_mul_pow_sum_13, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_embedding_dense_backward_mul_pow_sum_13", linkageName: "triton_red_fused__to_copy_add_div_embedding_dense_backward_mul_pow_sum_13", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 22, column: 28, scope: !10)
!12 = !DILocation(line: 22, column: 33, scope: !10)
!13 = !DILocation(line: 23, column: 44, scope: !10)
!14 = !DILocation(line: 23, column: 23, scope: !10)
!15 = !DILocation(line: 24, column: 21, scope: !10)
!16 = !DILocation(line: 25, column: 37, scope: !10)
!17 = !DILocation(line: 35, column: 46, scope: !10)
!18 = !DILocation(line: 29, column: 40, scope: !10)
!19 = !DILocation(line: 48, column: 50, scope: !10)
!20 = !DILocation(line: 30, column: 31, scope: !10)
!21 = !DILocation(line: 35, column: 41, scope: !10)
!22 = !DILocation(line: 35, column: 34, scope: !10)
!23 = !DILocation(line: 35, column: 51, scope: !10)
!24 = !DILocation(line: 36, column: 34, scope: !10)
!25 = !DILocation(line: 36, column: 51, scope: !10)
!26 = !DILocation(line: 37, column: 34, scope: !10)
!27 = !DILocation(line: 37, column: 51, scope: !10)
!28 = !DILocation(line: 38, column: 34, scope: !10)
!29 = !DILocation(line: 38, column: 41, scope: !10)
!30 = !DILocation(line: 38, column: 94, scope: !10)
!31 = !DILocation(line: 39, column: 34, scope: !10)
!32 = !DILocation(line: 39, column: 51, scope: !10)
!33 = !DILocation(line: 42, column: 22, scope: !10)
!34 = !DILocation(line: 35, column: 112, scope: !10)
!35 = !DILocation(line: 36, column: 112, scope: !10)
!36 = !DILocation(line: 37, column: 112, scope: !10)
!37 = !DILocation(line: 39, column: 112, scope: !10)
!38 = !DILocation(line: 40, column: 22, scope: !10)
!39 = !DILocation(line: 41, column: 22, scope: !10)
!40 = !DILocation(line: 45, column: 23, scope: !10)
!41 = !DILocation(line: 47, column: 25, scope: !10)
!42 = !DILocation(line: 286, column: 36, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !10, file: !44, discriminator: 0)
!44 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!45 = !DILocation(line: 49, column: 27, scope: !10)
!46 = !DILocation(line: 256, column: 15, scope: !47, inlinedAt: !45)
!47 = distinct !DILexicalBlockFile(scope: !43, file: !44, discriminator: 0)
!48 = !DILocation(line: 50, column: 31, scope: !10)
!49 = !DILocation(line: 50, column: 36, scope: !10)
!50 = !DILocation(line: 51, column: 31, scope: !10)
!51 = !DILocation(line: 51, column: 36, scope: !10)
!52 = !DILocation(line: 65, column: 25, scope: !10)
!53 = !DILocation(line: 72, column: 24, scope: !10)
!54 = !DILocation(line: 73, column: 24, scope: !10)
!55 = !DILocation(line: 74, column: 24, scope: !10)
!56 = !DILocation(line: 75, column: 24, scope: !10)
!57 = !DILocation(line: 77, column: 24, scope: !10)
!58 = !DILocation(line: 90, column: 24, scope: !10)
!59 = !DILocation(line: 89, column: 24, scope: !10)
!60 = !DILocation(line: 91, column: 39, scope: !10)
!61 = !DILocation(line: 92, column: 42, scope: !10)
!62 = !DILocation(line: 92, column: 61, scope: !10)
!63 = !DILocation(line: 93, column: 62, scope: !10)
!64 = !DILocation(line: 52, column: 40, scope: !10)
!65 = !DILocation(line: 53, column: 31, scope: !10)
!66 = !DILocation(line: 58, column: 35, scope: !10)
!67 = !DILocation(line: 58, column: 52, scope: !10)
!68 = !DILocation(line: 59, column: 35, scope: !10)
!69 = !DILocation(line: 59, column: 52, scope: !10)
!70 = !DILocation(line: 60, column: 35, scope: !10)
!71 = !DILocation(line: 60, column: 52, scope: !10)
!72 = !DILocation(line: 61, column: 35, scope: !10)
!73 = !DILocation(line: 61, column: 52, scope: !10)
!74 = !DILocation(line: 62, column: 35, scope: !10)
!75 = !DILocation(line: 62, column: 42, scope: !10)
!76 = !DILocation(line: 62, column: 95, scope: !10)
!77 = !DILocation(line: 63, column: 35, scope: !10)
!78 = !DILocation(line: 63, column: 52, scope: !10)
!79 = !DILocation(line: 70, column: 24, scope: !10)
!80 = !DILocation(line: 92, column: 71, scope: !10)
!81 = !DILocation(line: 59, column: 114, scope: !10)
!82 = !DILocation(line: 60, column: 114, scope: !10)
!83 = !DILocation(line: 66, column: 24, scope: !10)
!84 = !DILocation(line: 61, column: 114, scope: !10)
!85 = !DILocation(line: 67, column: 24, scope: !10)
!86 = !DILocation(line: 68, column: 24, scope: !10)
!87 = !DILocation(line: 63, column: 114, scope: !10)
!88 = !DILocation(line: 80, column: 24, scope: !10)
!89 = !DILocation(line: 81, column: 24, scope: !10)
!90 = !DILocation(line: 82, column: 24, scope: !10)
!91 = !DILocation(line: 58, column: 114, scope: !10)
!92 = !DILocation(line: 84, column: 24, scope: !10)
!93 = !DILocation(line: 87, column: 39, scope: !10)
!94 = !DILocation(line: 93, column: 57, scope: !10)
!95 = !DILocation(line: 93, column: 34, scope: !10)
!96 = !DILocation(line: 93, column: 98, scope: !10)
!97 = !DILocation(line: 52, column: 4, scope: !10)
