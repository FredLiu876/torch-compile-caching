; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_mul_sum_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 6, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = shl i32 %11, 3, !dbg !11
  %13 = and i32 %12, 56, !dbg !11
  %14 = or disjoint i32 %13, %10, !dbg !12
  %15 = lshr i32 %11, 3, !dbg !13
  %16 = and i32 %15, 63, !dbg !13
  %17 = icmp sgt i32 %6, 0, !dbg !14
  br i1 %17, label %.lr.ph, label %._crit_edge, !dbg !14

.lr.ph:                                           ; preds = %8, %.lr.ph
  %18 = phi i32 [ %105, %.lr.ph ], [ 0, %8 ]
  %19 = phi <8 x float> [ %104, %.lr.ph ], [ zeroinitializer, %8 ]
  %20 = or disjoint i32 %18, %16, !dbg !15
  %21 = icmp slt i32 %20, %6, !dbg !16
  %22 = shl i32 %20, 12, !dbg !17
  %23 = add i32 %14, %22, !dbg !18
  %24 = sext i32 %23 to i64, !dbg !19
  %25 = getelementptr half, ptr addrspace(1) %0, i64 %24, !dbg !19
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %25, i1 %21) #3, !dbg !20
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !20
  %28 = bitcast i32 %27 to <2 x half>, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !20
  %30 = bitcast i32 %29 to <2 x half>, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !20
  %32 = bitcast i32 %31 to <2 x half>, !dbg !20
  %33 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !20
  %34 = bitcast i32 %33 to <2 x half>, !dbg !20
  %35 = getelementptr half, ptr addrspace(1) %1, i64 %24, !dbg !21
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %35, i1 %21) #3, !dbg !22
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !22
  %38 = bitcast i32 %37 to <2 x half>, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !22
  %40 = bitcast i32 %39 to <2 x half>, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !22
  %42 = bitcast i32 %41 to <2 x half>, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !22
  %44 = bitcast i32 %43 to <2 x half>, !dbg !22
  %45 = getelementptr half, ptr addrspace(1) %2, i64 %24, !dbg !23
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %45, i1 %21) #3, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !24
  %48 = bitcast i32 %47 to <2 x half>, !dbg !24
  %49 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !24
  %50 = bitcast i32 %49 to <2 x half>, !dbg !24
  %51 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !24
  %52 = bitcast i32 %51 to <2 x half>, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !24
  %54 = bitcast i32 %53 to <2 x half>, !dbg !24
  %55 = sext i32 %20 to i64, !dbg !25
  %56 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !25
  %57 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %56, i1 %21) #3, !dbg !26
  %58 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %56, i1 %21) #3, !dbg !26
  %59 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %56, i1 %21) #3, !dbg !26
  %60 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %56, i1 %21) #3, !dbg !26
  %61 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %56, i1 %21) #3, !dbg !26
  %62 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %56, i1 %21) #3, !dbg !26
  %63 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %56, i1 %21) #3, !dbg !26
  %64 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %56, i1 %21) #3, !dbg !26
  %65 = shufflevector <2 x half> %28, <2 x half> %30, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %66 = shufflevector <2 x half> %32, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %67 = shufflevector <8 x half> %65, <8 x half> %66, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !27
  %68 = shufflevector <2 x half> %32, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %69 = shufflevector <8 x half> %67, <8 x half> %68, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !27
  %70 = shufflevector <2 x half> %34, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %71 = shufflevector <8 x half> %69, <8 x half> %70, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !27
  %72 = shufflevector <2 x half> %34, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %73 = shufflevector <8 x half> %71, <8 x half> %72, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !27
  %74 = fpext <8 x half> %73 to <8 x float>, !dbg !27
  %75 = shufflevector <2 x half> %38, <2 x half> %40, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %76 = shufflevector <2 x half> %42, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %77 = shufflevector <8 x half> %75, <8 x half> %76, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !28
  %78 = shufflevector <2 x half> %42, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %79 = shufflevector <8 x half> %77, <8 x half> %78, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !28
  %80 = shufflevector <2 x half> %44, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %81 = shufflevector <8 x half> %79, <8 x half> %80, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !28
  %82 = shufflevector <2 x half> %44, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %83 = shufflevector <8 x half> %81, <8 x half> %82, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !28
  %84 = fpext <8 x half> %83 to <8 x float>, !dbg !28
  %85 = shufflevector <2 x half> %48, <2 x half> %50, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %86 = shufflevector <2 x half> %52, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %87 = shufflevector <8 x half> %85, <8 x half> %86, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !29
  %88 = shufflevector <2 x half> %52, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %89 = shufflevector <8 x half> %87, <8 x half> %88, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !29
  %90 = shufflevector <2 x half> %54, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %91 = shufflevector <8 x half> %89, <8 x half> %90, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !29
  %92 = shufflevector <2 x half> %54, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %93 = shufflevector <8 x half> %91, <8 x half> %92, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !29
  %94 = fpext <8 x half> %93 to <8 x float>, !dbg !29
  %95 = fadd <8 x float> %74, %84, !dbg !30
  %96 = insertelement <8 x i32> poison, i32 %64, i64 0, !dbg !31
  %97 = bitcast <8 x i32> %96 to <8 x float>, !dbg !31
  %98 = shufflevector <8 x float> %97, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !31
  %99 = fmul <8 x float> %98, %94, !dbg !31
  %100 = fmul <8 x float> %95, %99, !dbg !32
  %101 = fadd <8 x float> %19, %100, !dbg !33
  %102 = insertelement <8 x i1> poison, i1 %21, i64 0, !dbg !34
  %103 = shufflevector <8 x i1> %102, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !34
  %104 = select <8 x i1> %103, <8 x float> %101, <8 x float> %19, !dbg !34
  %105 = add i32 %18, 64, !dbg !14
  %106 = icmp slt i32 %105, %6, !dbg !14
  br i1 %106, label %.lr.ph, label %._crit_edge, !dbg !14

._crit_edge:                                      ; preds = %.lr.ph, %8
  %107 = phi <8 x float> [ zeroinitializer, %8 ], [ %104, %.lr.ph ]
  %108 = lshr i32 %11, 5, !dbg !11
  %109 = and i32 %11, 63, !dbg !11
  %110 = or disjoint i32 %10, %109, !dbg !12
  %111 = and i32 %11, 24, !dbg !11
  %112 = or disjoint i32 %13, 4, !dbg !35
  %113 = extractelement <8 x float> %107, i64 0, !dbg !35
  %114 = bitcast float %113 to i32, !dbg !35
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 16, i32 31), !dbg !35
  %116 = bitcast i32 %115 to float, !dbg !35
  %117 = fadd float %113, %116, !dbg !39
  %118 = bitcast float %117 to i32, !dbg !35
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 8, i32 31), !dbg !35
  %120 = bitcast i32 %119 to float, !dbg !35
  %121 = fadd float %117, %120, !dbg !39
  %122 = extractelement <8 x float> %107, i64 1, !dbg !35
  %123 = bitcast float %122 to i32, !dbg !35
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 16, i32 31), !dbg !35
  %125 = bitcast i32 %124 to float, !dbg !35
  %126 = fadd float %122, %125, !dbg !39
  %127 = bitcast float %126 to i32, !dbg !35
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 8, i32 31), !dbg !35
  %129 = bitcast i32 %128 to float, !dbg !35
  %130 = fadd float %126, %129, !dbg !39
  %131 = extractelement <8 x float> %107, i64 2, !dbg !35
  %132 = bitcast float %131 to i32, !dbg !35
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 16, i32 31), !dbg !35
  %134 = bitcast i32 %133 to float, !dbg !35
  %135 = fadd float %131, %134, !dbg !39
  %136 = bitcast float %135 to i32, !dbg !35
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 8, i32 31), !dbg !35
  %138 = bitcast i32 %137 to float, !dbg !35
  %139 = fadd float %135, %138, !dbg !39
  %140 = extractelement <8 x float> %107, i64 3, !dbg !35
  %141 = bitcast float %140 to i32, !dbg !35
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 16, i32 31), !dbg !35
  %143 = bitcast i32 %142 to float, !dbg !35
  %144 = fadd float %140, %143, !dbg !39
  %145 = bitcast float %144 to i32, !dbg !35
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 8, i32 31), !dbg !35
  %147 = bitcast i32 %146 to float, !dbg !35
  %148 = fadd float %144, %147, !dbg !39
  %149 = extractelement <8 x float> %107, i64 4, !dbg !35
  %150 = bitcast float %149 to i32, !dbg !35
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 16, i32 31), !dbg !35
  %152 = bitcast i32 %151 to float, !dbg !35
  %153 = fadd float %149, %152, !dbg !39
  %154 = bitcast float %153 to i32, !dbg !35
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 8, i32 31), !dbg !35
  %156 = bitcast i32 %155 to float, !dbg !35
  %157 = fadd float %153, %156, !dbg !39
  %158 = extractelement <8 x float> %107, i64 5, !dbg !35
  %159 = bitcast float %158 to i32, !dbg !35
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 16, i32 31), !dbg !35
  %161 = bitcast i32 %160 to float, !dbg !35
  %162 = fadd float %158, %161, !dbg !39
  %163 = bitcast float %162 to i32, !dbg !35
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 8, i32 31), !dbg !35
  %165 = bitcast i32 %164 to float, !dbg !35
  %166 = fadd float %162, %165, !dbg !39
  %167 = extractelement <8 x float> %107, i64 6, !dbg !35
  %168 = bitcast float %167 to i32, !dbg !35
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 16, i32 31), !dbg !35
  %170 = bitcast i32 %169 to float, !dbg !35
  %171 = fadd float %167, %170, !dbg !39
  %172 = bitcast float %171 to i32, !dbg !35
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 8, i32 31), !dbg !35
  %174 = bitcast i32 %173 to float, !dbg !35
  %175 = fadd float %171, %174, !dbg !39
  %176 = extractelement <8 x float> %107, i64 7, !dbg !35
  %177 = bitcast float %176 to i32, !dbg !35
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 16, i32 31), !dbg !35
  %179 = bitcast i32 %178 to float, !dbg !35
  %180 = fadd float %176, %179, !dbg !39
  %181 = bitcast float %180 to i32, !dbg !35
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 8, i32 31), !dbg !35
  %183 = bitcast i32 %182 to float, !dbg !35
  %184 = fadd float %180, %183, !dbg !39
  %185 = and i32 %108, 15, !dbg !35
  %186 = icmp eq i32 %111, 0, !dbg !35
  %187 = shl nuw nsw i32 %13, 4, !dbg !35
  %188 = or disjoint i32 %187, %185, !dbg !35
  %189 = getelementptr float, ptr addrspace(3) @global_smem, i32 %188, !dbg !35
  %190 = bitcast float %121 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %189, <1 x i32> %190, i1 %186) #3, !dbg !35
  %191 = or disjoint i32 %187, 16, !dbg !35
  %192 = or disjoint i32 %191, %185, !dbg !35
  %193 = getelementptr float, ptr addrspace(3) @global_smem, i32 %192, !dbg !35
  %194 = bitcast float %130 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %193, <1 x i32> %194, i1 %186) #3, !dbg !35
  %195 = or disjoint i32 %187, 32, !dbg !35
  %196 = or disjoint i32 %195, %185, !dbg !35
  %197 = getelementptr float, ptr addrspace(3) @global_smem, i32 %196, !dbg !35
  %198 = bitcast float %139 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %198, i1 %186) #3, !dbg !35
  %199 = or disjoint i32 %187, 48, !dbg !35
  %200 = or disjoint i32 %199, %185, !dbg !35
  %201 = getelementptr float, ptr addrspace(3) @global_smem, i32 %200, !dbg !35
  %202 = bitcast float %148 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %202, i1 %186) #3, !dbg !35
  %203 = shl nuw nsw i32 %112, 4, !dbg !35
  %204 = or disjoint i32 %203, %185, !dbg !35
  %205 = getelementptr float, ptr addrspace(3) @global_smem, i32 %204, !dbg !35
  %206 = bitcast float %157 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %206, i1 %186) #3, !dbg !35
  %207 = or disjoint i32 %187, 80, !dbg !35
  %208 = or disjoint i32 %207, %185, !dbg !35
  %209 = getelementptr float, ptr addrspace(3) @global_smem, i32 %208, !dbg !35
  %210 = bitcast float %166 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %209, <1 x i32> %210, i1 %186) #3, !dbg !35
  %211 = or disjoint i32 %187, 96, !dbg !35
  %212 = or disjoint i32 %211, %185, !dbg !35
  %213 = getelementptr float, ptr addrspace(3) @global_smem, i32 %212, !dbg !35
  %214 = bitcast float %175 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %213, <1 x i32> %214, i1 %186) #3, !dbg !35
  %215 = or disjoint i32 %187, 112, !dbg !35
  %216 = or disjoint i32 %215, %185, !dbg !35
  %217 = getelementptr float, ptr addrspace(3) @global_smem, i32 %216, !dbg !35
  %218 = bitcast float %184 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %218, i1 %186) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %219 = icmp slt i32 %11, 1024, !dbg !35
  %220 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !35
  %221 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %220, i1 %219) #3, !dbg !35
  %222 = bitcast i32 %221 to float, !dbg !35
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 8, i32 31), !dbg !35
  %224 = bitcast i32 %223 to float, !dbg !35
  %225 = fadd float %222, %224, !dbg !39
  %226 = bitcast float %225 to i32, !dbg !35
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 4, i32 31), !dbg !35
  %228 = bitcast i32 %227 to float, !dbg !35
  %229 = fadd float %225, %228, !dbg !39
  %230 = bitcast float %229 to i32, !dbg !35
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 2, i32 31), !dbg !35
  %232 = bitcast i32 %231 to float, !dbg !35
  %233 = fadd float %229, %232, !dbg !39
  %234 = bitcast float %233 to i32, !dbg !35
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 1, i32 31), !dbg !35
  %236 = bitcast i32 %235 to float, !dbg !35
  %237 = fadd float %233, %236, !dbg !39
  %238 = and i32 %11, 15, !dbg !35
  %239 = icmp eq i32 %238, 0, !dbg !35
  %240 = and i1 %219, %239, !dbg !35
  %241 = bitcast float %237 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %241, i1 %240) #3, !dbg !35
  %242 = getelementptr i8, ptr addrspace(3) %220, i32 2048, !dbg !35
  %243 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %242, i1 %219) #3, !dbg !35
  %244 = bitcast i32 %243 to float, !dbg !35
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 8, i32 31), !dbg !35
  %246 = bitcast i32 %245 to float, !dbg !35
  %247 = fadd float %244, %246, !dbg !39
  %248 = bitcast float %247 to i32, !dbg !35
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 4, i32 31), !dbg !35
  %250 = bitcast i32 %249 to float, !dbg !35
  %251 = fadd float %247, %250, !dbg !39
  %252 = bitcast float %251 to i32, !dbg !35
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 2, i32 31), !dbg !35
  %254 = bitcast i32 %253 to float, !dbg !35
  %255 = fadd float %251, %254, !dbg !39
  %256 = bitcast float %255 to i32, !dbg !35
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 1, i32 31), !dbg !35
  %258 = bitcast i32 %257 to float, !dbg !35
  %259 = fadd float %255, %258, !dbg !39
  %260 = bitcast float %259 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %242, <1 x i32> %260, i1 %240) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %261 = getelementptr float, ptr addrspace(3) @global_smem, i32 %187, !dbg !35
  %262 = load i32, ptr addrspace(3) %261, align 16, !dbg !35
  %263 = getelementptr float, ptr addrspace(3) @global_smem, i32 %191, !dbg !35
  %264 = load i32, ptr addrspace(3) %263, align 16, !dbg !35
  %265 = getelementptr float, ptr addrspace(3) @global_smem, i32 %195, !dbg !35
  %266 = load i32, ptr addrspace(3) %265, align 16, !dbg !35
  %267 = getelementptr float, ptr addrspace(3) @global_smem, i32 %199, !dbg !35
  %268 = load i32, ptr addrspace(3) %267, align 16, !dbg !35
  %269 = getelementptr float, ptr addrspace(3) @global_smem, i32 %203, !dbg !35
  %270 = load i32, ptr addrspace(3) %269, align 16, !dbg !35
  %271 = getelementptr float, ptr addrspace(3) @global_smem, i32 %207, !dbg !35
  %272 = load i32, ptr addrspace(3) %271, align 16, !dbg !35
  %273 = getelementptr float, ptr addrspace(3) @global_smem, i32 %211, !dbg !35
  %274 = load i32, ptr addrspace(3) %273, align 16, !dbg !35
  %275 = getelementptr float, ptr addrspace(3) @global_smem, i32 %215, !dbg !35
  %276 = load i32, ptr addrspace(3) %275, align 16, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %277 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %13, !dbg !41
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %277, i32 %262, i32 %264, i32 %266, i32 %268, i1 true) #3, !dbg !41
  %278 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %112, !dbg !41
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %278, i32 %270, i32 %272, i32 %274, i32 %276, i1 true) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %279 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %109, !dbg !41
  %280 = load float, ptr addrspace(3) %279, align 4, !dbg !41
  %281 = sext i32 %110 to i64, !dbg !42
  %282 = getelementptr half, ptr addrspace(1) %4, i64 %281, !dbg !42
  %283 = fptrunc float %280 to half, !dbg !41
  %284 = and i32 %11, 448, !dbg !41
  %285 = icmp eq i32 %284, 0, !dbg !41
  %286 = bitcast half %283 to i16, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %286, ptr addrspace(1) %282, i1 %285) #3, !dbg !41
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crbdf4vyauezdx6iqixg755sryxnoi3oifqxkxdy34s3u2w7snkb.py", directory: "/tmp/torchinductor_root/rb")
!4 = !{ptr @triton_red_fused__to_copy_add_mul_sum_5, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mul_sum_5", linkageName: "triton_red_fused__to_copy_add_mul_sum_5", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 37, scope: !6)
!14 = !DILocation(line: 29, column: 40, scope: !6)
!15 = !DILocation(line: 30, column: 31, scope: !6)
!16 = !DILocation(line: 31, column: 29, scope: !6)
!17 = !DILocation(line: 35, column: 44, scope: !6)
!18 = !DILocation(line: 35, column: 39, scope: !6)
!19 = !DILocation(line: 35, column: 34, scope: !6)
!20 = !DILocation(line: 35, column: 51, scope: !6)
!21 = !DILocation(line: 36, column: 34, scope: !6)
!22 = !DILocation(line: 36, column: 51, scope: !6)
!23 = !DILocation(line: 37, column: 34, scope: !6)
!24 = !DILocation(line: 37, column: 51, scope: !6)
!25 = !DILocation(line: 38, column: 34, scope: !6)
!26 = !DILocation(line: 38, column: 41, scope: !6)
!27 = !DILocation(line: 35, column: 105, scope: !6)
!28 = !DILocation(line: 36, column: 105, scope: !6)
!29 = !DILocation(line: 37, column: 105, scope: !6)
!30 = !DILocation(line: 39, column: 22, scope: !6)
!31 = !DILocation(line: 41, column: 22, scope: !6)
!32 = !DILocation(line: 43, column: 22, scope: !6)
!33 = !DILocation(line: 45, column: 25, scope: !6)
!34 = !DILocation(line: 46, column: 42, scope: !6)
!35 = !DILocation(line: 286, column: 36, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !6, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!38 = !DILocation(line: 47, column: 27, scope: !6)
!39 = !DILocation(line: 256, column: 15, scope: !40, inlinedAt: !38)
!40 = distinct !DILexicalBlockFile(scope: !36, file: !37, discriminator: 0)
!41 = !DILocation(line: 48, column: 37, scope: !6)
!42 = !DILocation(line: 48, column: 25, scope: !6)
!43 = !DILocation(line: 48, column: 4, scope: !6)
