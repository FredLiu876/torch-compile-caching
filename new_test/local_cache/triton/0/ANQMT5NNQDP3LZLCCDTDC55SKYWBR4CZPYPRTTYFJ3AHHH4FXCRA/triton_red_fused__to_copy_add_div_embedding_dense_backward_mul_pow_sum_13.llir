; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/tx/ctxmaw5t3t256dq7yrmhxrht563tkigfbxuljvcdxlsac2hljoin.py\00"
@assertMessage_0 = internal constant [41 x i8] c"index out of bounds: 0 <= tmp49 < 128256\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_div_embedding_dense_backward_mul_pow_sum_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10, ptr addrspace(1) readnone captures(none) %11) local_unnamed_addr !dbg !10 {
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %14 = shl i32 %13, 6, !dbg !12
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %16 = lshr i32 %15, 3, !dbg !13
  %17 = and i32 %16, 63, !dbg !13
  %18 = lshr i32 %15, 4, !dbg !13
  %19 = and i32 %18, 31, !dbg !13
  %20 = lshr i32 %15, 6, !dbg !13
  %21 = and i32 %20, 7, !dbg !13
  %22 = or disjoint i32 %17, %14, !dbg !14
  %23 = or disjoint i32 %19, %14, !dbg !14
  %24 = or disjoint i32 %21, %14, !dbg !14
  %25 = or disjoint i32 %24, 16, !dbg !14
  %26 = or disjoint i32 %24, 32, !dbg !14
  %27 = or disjoint i32 %24, 48, !dbg !14
  %28 = icmp slt i32 %22, %9, !dbg !15
  %29 = icmp slt i32 %23, %9, !dbg !15
  %30 = icmp slt i32 %24, %9, !dbg !15
  %31 = icmp slt i32 %25, %9, !dbg !15
  %32 = icmp slt i32 %26, %9, !dbg !15
  %33 = icmp slt i32 %27, %9, !dbg !15
  %34 = shl i32 %15, 3, !dbg !16
  %35 = and i32 %34, 56, !dbg !16
  %36 = shl i32 %15, 2, !dbg !16
  %37 = shl i32 %22, 12, !dbg !17
  %invariant.op = or disjoint i32 %35, %37, !dbg !18
  %38 = zext nneg i32 %35 to i64, !dbg !18
  %39 = insertelement <8 x i1> poison, i1 %28, i64 0, !dbg !19
  %40 = shufflevector <8 x i1> %39, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !19
  br label %41, !dbg !18

41:                                               ; preds = %12, %41
  %indvars.iv = phi i64 [ 0, %12 ], [ %indvars.iv.next, %41 ]
  %42 = phi <8 x float> [ zeroinitializer, %12 ], [ %151, %41 ]
  %43 = or disjoint i64 %indvars.iv, %38, !dbg !20
  %44 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %44
  %45 = sext i32 %.reass to i64, !dbg !21
  %46 = getelementptr half, ptr addrspace(1) %0, i64 %45, !dbg !21
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %46, i1 %28) #4, !dbg !22
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !22
  %49 = bitcast i32 %48 to <2 x half>, !dbg !22
  %50 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !22
  %51 = bitcast i32 %50 to <2 x half>, !dbg !22
  %52 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !22
  %53 = bitcast i32 %52 to <2 x half>, !dbg !22
  %54 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !22
  %55 = bitcast i32 %54 to <2 x half>, !dbg !22
  %56 = getelementptr half, ptr addrspace(1) %1, i64 %45, !dbg !23
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %56, i1 %28) #4, !dbg !24
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !24
  %59 = bitcast i32 %58 to <2 x half>, !dbg !24
  %60 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !24
  %61 = bitcast i32 %60 to <2 x half>, !dbg !24
  %62 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !24
  %63 = bitcast i32 %62 to <2 x half>, !dbg !24
  %64 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !24
  %65 = bitcast i32 %64 to <2 x half>, !dbg !24
  %66 = getelementptr half, ptr addrspace(1) %2, i64 %45, !dbg !25
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %66, i1 %28) #4, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !26
  %69 = bitcast i32 %68 to <2 x half>, !dbg !26
  %70 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !26
  %71 = bitcast i32 %70 to <2 x half>, !dbg !26
  %72 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !26
  %73 = bitcast i32 %72 to <2 x half>, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !26
  %75 = bitcast i32 %74 to <2 x half>, !dbg !26
  %76 = getelementptr half, ptr addrspace(1) %3, i64 %43, !dbg !27
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %76, i1 true) #4, !dbg !28
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !28
  %79 = bitcast i32 %78 to <2 x half>, !dbg !28
  %80 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !28
  %81 = bitcast i32 %80 to <2 x half>, !dbg !28
  %82 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !28
  %83 = bitcast i32 %82 to <2 x half>, !dbg !28
  %84 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !28
  %85 = bitcast i32 %84 to <2 x half>, !dbg !28
  %86 = getelementptr half, ptr addrspace(1) %4, i64 %45, !dbg !29
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %86, i1 %28) #4, !dbg !30
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !30
  %89 = bitcast i32 %88 to <2 x half>, !dbg !30
  %90 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !30
  %91 = bitcast i32 %90 to <2 x half>, !dbg !30
  %92 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !30
  %93 = bitcast i32 %92 to <2 x half>, !dbg !30
  %94 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !30
  %95 = bitcast i32 %94 to <2 x half>, !dbg !30
  %96 = shufflevector <2 x half> %49, <2 x half> %51, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %97 = shufflevector <2 x half> %53, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %98 = shufflevector <8 x half> %96, <8 x half> %97, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !31
  %99 = shufflevector <2 x half> %53, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %100 = shufflevector <8 x half> %98, <8 x half> %99, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !31
  %101 = shufflevector <2 x half> %55, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %102 = shufflevector <8 x half> %100, <8 x half> %101, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !31
  %103 = shufflevector <2 x half> %55, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %104 = shufflevector <8 x half> %102, <8 x half> %103, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !31
  %105 = fpext <8 x half> %104 to <8 x float>, !dbg !31
  %106 = shufflevector <2 x half> %59, <2 x half> %61, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %107 = shufflevector <2 x half> %63, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %108 = shufflevector <8 x half> %106, <8 x half> %107, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !32
  %109 = shufflevector <2 x half> %63, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %110 = shufflevector <8 x half> %108, <8 x half> %109, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !32
  %111 = shufflevector <2 x half> %65, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %112 = shufflevector <8 x half> %110, <8 x half> %111, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !32
  %113 = shufflevector <2 x half> %65, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %114 = shufflevector <8 x half> %112, <8 x half> %113, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !32
  %115 = fpext <8 x half> %114 to <8 x float>, !dbg !32
  %116 = shufflevector <2 x half> %69, <2 x half> %71, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %117 = shufflevector <2 x half> %73, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %118 = shufflevector <8 x half> %116, <8 x half> %117, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !33
  %119 = shufflevector <2 x half> %73, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %120 = shufflevector <8 x half> %118, <8 x half> %119, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !33
  %121 = shufflevector <2 x half> %75, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %122 = shufflevector <8 x half> %120, <8 x half> %121, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !33
  %123 = shufflevector <2 x half> %75, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %124 = shufflevector <8 x half> %122, <8 x half> %123, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !33
  %125 = fpext <8 x half> %124 to <8 x float>, !dbg !33
  %126 = shufflevector <2 x half> %79, <2 x half> %81, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %127 = shufflevector <2 x half> %83, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %128 = shufflevector <8 x half> %126, <8 x half> %127, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !34
  %129 = shufflevector <2 x half> %83, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %130 = shufflevector <8 x half> %128, <8 x half> %129, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !34
  %131 = shufflevector <2 x half> %85, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %132 = shufflevector <8 x half> %130, <8 x half> %131, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !34
  %133 = shufflevector <2 x half> %85, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !34
  %134 = shufflevector <8 x half> %132, <8 x half> %133, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !34
  %135 = fpext <8 x half> %134 to <8 x float>, !dbg !34
  %136 = shufflevector <2 x half> %89, <2 x half> %91, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %137 = shufflevector <2 x half> %93, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %138 = shufflevector <8 x half> %136, <8 x half> %137, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !35
  %139 = shufflevector <2 x half> %93, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %140 = shufflevector <8 x half> %138, <8 x half> %139, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !35
  %141 = shufflevector <2 x half> %95, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %142 = shufflevector <8 x half> %140, <8 x half> %141, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !35
  %143 = shufflevector <2 x half> %95, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !35
  %144 = shufflevector <8 x half> %142, <8 x half> %143, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !35
  %145 = fpext <8 x half> %144 to <8 x float>, !dbg !35
  %146 = fadd <8 x float> %105, %115, !dbg !36
  %147 = fadd <8 x float> %146, %125, !dbg !37
  %148 = fmul <8 x float> %147, %135, !dbg !38
  %149 = fmul <8 x float> %148, %145, !dbg !39
  %150 = fadd <8 x float> %42, %149, !dbg !40
  %151 = select <8 x i1> %40, <8 x float> %150, <8 x float> %42, !dbg !19
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !18
  %152 = icmp samesign ult i64 %indvars.iv, 4032, !dbg !18
  br i1 %152, label %41, label %153, !dbg !18

153:                                              ; preds = %41
  %154 = or disjoint i32 %23, 32, !dbg !14
  %155 = or disjoint i32 %24, 8, !dbg !14
  %156 = or disjoint i32 %24, 24, !dbg !14
  %157 = or disjoint i32 %24, 40, !dbg !14
  %158 = or disjoint i32 %24, 56, !dbg !14
  %159 = icmp slt i32 %154, %9, !dbg !15
  %160 = icmp slt i32 %155, %9, !dbg !15
  %161 = icmp slt i32 %156, %9, !dbg !15
  %162 = icmp slt i32 %157, %9, !dbg !15
  %163 = icmp slt i32 %158, %9, !dbg !15
  %164 = and i32 %36, 60, !dbg !16
  %shift = shufflevector <8 x float> %151, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %165 = fadd <8 x float> %151, %shift, !dbg !41
  %shift69 = shufflevector <8 x float> %151, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %166 = fadd <8 x float> %shift69, %165, !dbg !41
  %shift70 = shufflevector <8 x float> %151, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %167 = fadd <8 x float> %shift70, %166, !dbg !41
  %shift71 = shufflevector <8 x float> %151, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %168 = fadd <8 x float> %shift71, %167, !dbg !41
  %shift72 = shufflevector <8 x float> %151, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %169 = fadd <8 x float> %shift72, %168, !dbg !41
  %shift73 = shufflevector <8 x float> %151, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %170 = fadd <8 x float> %shift73, %169, !dbg !41
  %shift74 = shufflevector <8 x float> %151, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !41
  %171 = fadd <8 x float> %shift74, %170, !dbg !41
  %172 = extractelement <8 x float> %171, i64 0, !dbg !41
  %173 = bitcast float %172 to i32, !dbg !46
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 4, i32 31), !dbg !46
  %175 = bitcast i32 %174 to float, !dbg !46
  %176 = fadd float %172, %175, !dbg !41
  %177 = bitcast float %176 to i32, !dbg !46
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 2, i32 31), !dbg !46
  %179 = bitcast i32 %178 to float, !dbg !46
  %180 = fadd float %176, %179, !dbg !41
  %181 = bitcast float %180 to i32, !dbg !46
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 1, i32 31), !dbg !46
  %183 = bitcast i32 %182 to float, !dbg !46
  %184 = fadd float %180, %183, !dbg !41
  %185 = sext i32 %22 to i64, !dbg !47
  %186 = getelementptr i64, ptr addrspace(1) %5, i64 %185, !dbg !47
  %187 = sext i32 %23 to i64, !dbg !47
  %188 = getelementptr i64, ptr addrspace(1) %5, i64 %187, !dbg !47
  %189 = sext i32 %154 to i64, !dbg !47
  %190 = getelementptr i64, ptr addrspace(1) %5, i64 %189, !dbg !47
  %191 = sext i32 %24 to i64, !dbg !47
  %192 = getelementptr i64, ptr addrspace(1) %5, i64 %191, !dbg !47
  %193 = sext i32 %155 to i64, !dbg !47
  %194 = getelementptr i64, ptr addrspace(1) %5, i64 %193, !dbg !47
  %195 = sext i32 %25 to i64, !dbg !47
  %196 = getelementptr i64, ptr addrspace(1) %5, i64 %195, !dbg !47
  %197 = sext i32 %156 to i64, !dbg !47
  %198 = getelementptr i64, ptr addrspace(1) %5, i64 %197, !dbg !47
  %199 = sext i32 %26 to i64, !dbg !47
  %200 = getelementptr i64, ptr addrspace(1) %5, i64 %199, !dbg !47
  %201 = sext i32 %157 to i64, !dbg !47
  %202 = getelementptr i64, ptr addrspace(1) %5, i64 %201, !dbg !47
  %203 = sext i32 %27 to i64, !dbg !47
  %204 = getelementptr i64, ptr addrspace(1) %5, i64 %203, !dbg !47
  %205 = sext i32 %158 to i64, !dbg !47
  %206 = getelementptr i64, ptr addrspace(1) %5, i64 %205, !dbg !47
  %207 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %186, i1 %28) #4, !dbg !48
  %208 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %186, i1 %28) #4, !dbg !48
  %209 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %186, i1 %28) #4, !dbg !48
  %210 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %186, i1 %28) #4, !dbg !48
  %211 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %186, i1 %28) #4, !dbg !48
  %212 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %186, i1 %28) #4, !dbg !48
  %213 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %186, i1 %28) #4, !dbg !48
  %214 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %186, i1 %28) #4, !dbg !48
  %215 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %188, i1 %29) #4, !dbg !48
  %216 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %188, i1 %29) #4, !dbg !48
  %217 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %188, i1 %29) #4, !dbg !48
  %218 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %188, i1 %29) #4, !dbg !48
  %219 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %190, i1 %159) #4, !dbg !48
  %220 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %190, i1 %159) #4, !dbg !48
  %221 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %190, i1 %159) #4, !dbg !48
  %222 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %190, i1 %159) #4, !dbg !48
  %223 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %192, i1 %30) #4, !dbg !48
  %224 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %194, i1 %160) #4, !dbg !48
  %225 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %196, i1 %31) #4, !dbg !48
  %226 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %198, i1 %161) #4, !dbg !48
  %227 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %200, i1 %32) #4, !dbg !48
  %228 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %202, i1 %162) #4, !dbg !48
  %229 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %204, i1 %33) #4, !dbg !48
  %230 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %206, i1 %163) #4, !dbg !48
  %231 = getelementptr float, ptr addrspace(1) %7, i64 %185, !dbg !49
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %231, i1 %28) #4, !dbg !50
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %231, i1 %28) #4, !dbg !50
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %231, i1 %28) #4, !dbg !50
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %231, i1 %28) #4, !dbg !50
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %231, i1 %28) #4, !dbg !50
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %231, i1 %28) #4, !dbg !50
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %231, i1 %28) #4, !dbg !50
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %231, i1 %28) #4, !dbg !50
  %240 = bitcast i32 %239 to float, !dbg !50
  %241 = icmp eq i64 %214, -1, !dbg !51
  %242 = fmul float %184, -5.000000e-01, !dbg !52
  %243 = fmul float %240, %240, !dbg !53
  %244 = fmul float %243, %240, !dbg !54
  %245 = fmul float %242, %244, !dbg !55
  %246 = fmul float %245, 0x3F30000000000000, !dbg !56
  %247 = icmp slt i64 %218, 0, !dbg !57
  %248 = icmp slt i64 %222, 0, !dbg !57
  %249 = insertelement <8 x i64> poison, i64 %230, i64 0, !dbg !58
  %250 = insertelement <8 x i64> %249, i64 %229, i64 1, !dbg !58
  %251 = insertelement <8 x i64> %250, i64 %228, i64 2, !dbg !58
  %252 = insertelement <8 x i64> %251, i64 %227, i64 3, !dbg !58
  %253 = insertelement <8 x i64> %252, i64 %226, i64 4, !dbg !58
  %254 = insertelement <8 x i64> %253, i64 %225, i64 5, !dbg !58
  %255 = insertelement <8 x i64> %254, i64 %224, i64 6, !dbg !58
  %256 = insertelement <8 x i64> %255, i64 %223, i64 7, !dbg !58
  %257 = add <8 x i64> %256, splat (i64 128256), !dbg !58
  %258 = icmp slt <8 x i64> %256, zeroinitializer, !dbg !57
  %259 = select <8 x i1> %258, <8 x i64> %257, <8 x i64> %256, !dbg !59
  %260 = icmp ugt <8 x i64> %259, splat (i64 128255), !dbg !60
  %261 = extractelement <8 x i1> %260, i64 7, !dbg !61
  %.not8 = and i1 %30, %261, !dbg !61
  %262 = extractelement <8 x i1> %260, i64 6, !dbg !61
  %.not10 = and i1 %160, %262, !dbg !61
  %263 = extractelement <8 x i1> %260, i64 5, !dbg !61
  %.not12 = and i1 %31, %263, !dbg !61
  %264 = extractelement <8 x i1> %260, i64 4, !dbg !61
  %.not14 = and i1 %161, %264, !dbg !61
  %265 = extractelement <8 x i1> %260, i64 3, !dbg !61
  %.not16 = and i1 %32, %265, !dbg !61
  %266 = extractelement <8 x i1> %260, i64 2, !dbg !61
  %.not18 = and i1 %162, %266, !dbg !61
  %267 = extractelement <8 x i1> %260, i64 1, !dbg !61
  %.not20 = and i1 %33, %267, !dbg !61
  %268 = extractelement <8 x i1> %260, i64 0, !dbg !62
  %.not22 = and i1 %163, %268, !dbg !62
  %269 = shl i64 %218, 12, !dbg !62
  %270 = add i64 %269, 525336576, !dbg !62
  %271 = select i1 %247, i64 %270, i64 %269, !dbg !62
  %272 = shl i64 %222, 12, !dbg !62
  %273 = add i64 %272, 525336576, !dbg !62
  %274 = select i1 %248, i64 %273, i64 %272, !dbg !62
  %invariant.op32 = or i1 %.not12, %.not14, !dbg !63
  %invariant.op34 = or i1 %invariant.op32, %.not16, !dbg !63
  %invariant.op36 = or i1 %invariant.op34, %.not18, !dbg !63
  %invariant.op38 = or i1 %invariant.op36, %.not20, !dbg !63
  %invariant.op40 = or i1 %invariant.op38, %.not22, !dbg !63
  %275 = or i1 %.not8, %.not10
  %.reass41 = or i1 %275, %invariant.op40
  %276 = and i32 %34, 4088
  %277 = and i32 %36, 2044
  %278 = lshr i32 %34, 4
  %279 = and i32 %278, 252
  %280 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %279
  %281 = getelementptr inbounds nuw float, ptr addrspace(3) %280, i32 %276
  %282 = or disjoint i32 %276, 4
  %283 = getelementptr inbounds nuw float, ptr addrspace(3) %280, i32 %282
  %284 = and i32 %15, 496
  %285 = getelementptr inbounds nuw i8, ptr addrspace(3) @global_smem, i32 %284
  %286 = getelementptr inbounds nuw float, ptr addrspace(3) %285, i32 %277
  %287 = or disjoint i32 %277, 2048
  %288 = lshr i32 %287, 4
  %289 = and i32 %288, 252
  %290 = getelementptr float, ptr addrspace(3) @global_smem, i32 %289
  %291 = getelementptr float, ptr addrspace(3) %290, i32 %287
  %292 = zext nneg i32 %164 to i64, !dbg !63
  %invariant.op58 = or disjoint i64 %271, %292, !dbg !63
  %invariant.op60 = or disjoint i64 %274, %292, !dbg !63
  %293 = getelementptr inbounds nuw i8, ptr addrspace(3) %286, i32 4
  %294 = getelementptr inbounds nuw i8, ptr addrspace(3) %286, i32 8
  %295 = getelementptr inbounds nuw i8, ptr addrspace(3) %286, i32 12
  %296 = getelementptr inbounds nuw i8, ptr addrspace(3) %291, i32 4
  %297 = getelementptr inbounds nuw i8, ptr addrspace(3) %291, i32 8
  %298 = getelementptr inbounds nuw i8, ptr addrspace(3) %291, i32 12
  br label %299, !dbg !63

299:                                              ; preds = %153, %316
  %indvars.iv49 = phi i64 [ 0, %153 ], [ %indvars.iv.next50, %316 ]
  %300 = or disjoint i64 %indvars.iv49, %38, !dbg !64
  %301 = trunc nuw nsw i64 %indvars.iv49 to i32
  %.reass31 = or i32 %invariant.op, %301
  %302 = sext i32 %.reass31 to i64, !dbg !65
  %303 = getelementptr half, ptr addrspace(1) %6, i64 %302, !dbg !65
  %304 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %303, i1 %28) #4, !dbg !66
  %305 = getelementptr half, ptr addrspace(1) %0, i64 %302, !dbg !67
  %306 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %305, i1 %28) #4, !dbg !68
  %307 = getelementptr half, ptr addrspace(1) %1, i64 %302, !dbg !69
  %308 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %307, i1 %28) #4, !dbg !70
  %309 = getelementptr half, ptr addrspace(1) %2, i64 %302, !dbg !71
  %310 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %309, i1 %28) #4, !dbg !72
  %311 = getelementptr half, ptr addrspace(1) %3, i64 %300, !dbg !73
  %312 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %311, i1 true) #4, !dbg !74
  %313 = getelementptr half, ptr addrspace(1) %4, i64 %302, !dbg !75
  %314 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %313, i1 %28) #4, !dbg !76
  br i1 %.reass41, label %315, label %316, !dbg !77

315:                                              ; preds = %299
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 92, ptr nonnull @assertFunc_0, i64 1), !dbg !77
  unreachable, !dbg !77

316:                                              ; preds = %299
  %317 = extractvalue { i32, i32, i32, i32 } %306, 3, !dbg !68
  %318 = bitcast i32 %317 to <2 x half>, !dbg !68
  %319 = extractelement <2 x half> %318, i64 1, !dbg !68
  %320 = fpext half %319 to float, !dbg !78
  %321 = extractvalue { i32, i32, i32, i32 } %308, 3, !dbg !70
  %322 = bitcast i32 %321 to <2 x half>, !dbg !70
  %323 = extractelement <2 x half> %322, i64 1, !dbg !70
  %324 = fpext half %323 to float, !dbg !79
  %325 = fadd float %320, %324, !dbg !80
  %326 = extractvalue { i32, i32, i32, i32 } %310, 3, !dbg !72
  %327 = bitcast i32 %326 to <2 x half>, !dbg !72
  %328 = extractelement <2 x half> %327, i64 1, !dbg !72
  %329 = fpext half %328 to float, !dbg !81
  %330 = fadd float %325, %329, !dbg !82
  %331 = extractvalue { i32, i32, i32, i32 } %312, 3, !dbg !74
  %332 = bitcast i32 %331 to <2 x half>, !dbg !74
  %333 = extractelement <2 x half> %332, i64 1, !dbg !74
  %334 = fpext half %333 to float, !dbg !83
  %335 = fmul float %330, %334, !dbg !84
  %336 = fmul float %335, %240, !dbg !85
  %337 = extractvalue { i32, i32, i32, i32 } %314, 3, !dbg !76
  %338 = bitcast i32 %337 to <2 x half>, !dbg !76
  %339 = extractelement <2 x half> %338, i64 1, !dbg !76
  %340 = fpext half %339 to float, !dbg !86
  %341 = fmul float %340, 2.000000e+00, !dbg !87
  %342 = fmul float %246, %341, !dbg !88
  %343 = fadd float %336, %342, !dbg !89
  %344 = extractvalue { i32, i32, i32, i32 } %304, 3, !dbg !66
  %345 = bitcast i32 %344 to <2 x half>, !dbg !66
  %346 = extractelement <2 x half> %345, i64 1, !dbg !66
  %347 = fpext half %346 to float, !dbg !90
  %348 = fadd float %343, %347, !dbg !91
  %349 = extractelement <2 x half> %318, i64 0, !dbg !68
  %350 = fpext half %349 to float, !dbg !78
  %351 = extractelement <2 x half> %322, i64 0, !dbg !70
  %352 = fpext half %351 to float, !dbg !79
  %353 = fadd float %350, %352, !dbg !80
  %354 = extractelement <2 x half> %327, i64 0, !dbg !72
  %355 = fpext half %354 to float, !dbg !81
  %356 = fadd float %353, %355, !dbg !82
  %357 = extractelement <2 x half> %332, i64 0, !dbg !74
  %358 = fpext half %357 to float, !dbg !83
  %359 = fmul float %356, %358, !dbg !84
  %360 = fmul float %359, %240, !dbg !85
  %361 = extractelement <2 x half> %338, i64 0, !dbg !76
  %362 = fpext half %361 to float, !dbg !86
  %363 = fmul float %362, 2.000000e+00, !dbg !87
  %364 = fmul float %246, %363, !dbg !88
  %365 = fadd float %360, %364, !dbg !89
  %366 = extractelement <2 x half> %345, i64 0, !dbg !66
  %367 = fpext half %366 to float, !dbg !90
  %368 = fadd float %365, %367, !dbg !91
  %369 = extractvalue { i32, i32, i32, i32 } %306, 2, !dbg !68
  %370 = bitcast i32 %369 to <2 x half>, !dbg !68
  %371 = extractelement <2 x half> %370, i64 1, !dbg !68
  %372 = fpext half %371 to float, !dbg !78
  %373 = extractvalue { i32, i32, i32, i32 } %308, 2, !dbg !70
  %374 = bitcast i32 %373 to <2 x half>, !dbg !70
  %375 = extractelement <2 x half> %374, i64 1, !dbg !70
  %376 = fpext half %375 to float, !dbg !79
  %377 = fadd float %372, %376, !dbg !80
  %378 = extractvalue { i32, i32, i32, i32 } %310, 2, !dbg !72
  %379 = bitcast i32 %378 to <2 x half>, !dbg !72
  %380 = extractelement <2 x half> %379, i64 1, !dbg !72
  %381 = fpext half %380 to float, !dbg !81
  %382 = fadd float %377, %381, !dbg !82
  %383 = extractvalue { i32, i32, i32, i32 } %312, 2, !dbg !74
  %384 = bitcast i32 %383 to <2 x half>, !dbg !74
  %385 = extractelement <2 x half> %384, i64 1, !dbg !74
  %386 = fpext half %385 to float, !dbg !83
  %387 = fmul float %382, %386, !dbg !84
  %388 = fmul float %387, %240, !dbg !85
  %389 = extractvalue { i32, i32, i32, i32 } %314, 2, !dbg !76
  %390 = bitcast i32 %389 to <2 x half>, !dbg !76
  %391 = extractelement <2 x half> %390, i64 1, !dbg !76
  %392 = fpext half %391 to float, !dbg !86
  %393 = fmul float %392, 2.000000e+00, !dbg !87
  %394 = fmul float %246, %393, !dbg !88
  %395 = fadd float %388, %394, !dbg !89
  %396 = extractvalue { i32, i32, i32, i32 } %304, 2, !dbg !66
  %397 = bitcast i32 %396 to <2 x half>, !dbg !66
  %398 = extractelement <2 x half> %397, i64 1, !dbg !66
  %399 = fpext half %398 to float, !dbg !90
  %400 = fadd float %395, %399, !dbg !91
  %401 = extractelement <2 x half> %370, i64 0, !dbg !68
  %402 = fpext half %401 to float, !dbg !78
  %403 = extractelement <2 x half> %374, i64 0, !dbg !70
  %404 = fpext half %403 to float, !dbg !79
  %405 = fadd float %402, %404, !dbg !80
  %406 = extractelement <2 x half> %379, i64 0, !dbg !72
  %407 = fpext half %406 to float, !dbg !81
  %408 = fadd float %405, %407, !dbg !82
  %409 = extractelement <2 x half> %384, i64 0, !dbg !74
  %410 = fpext half %409 to float, !dbg !83
  %411 = fmul float %408, %410, !dbg !84
  %412 = fmul float %411, %240, !dbg !85
  %413 = extractelement <2 x half> %390, i64 0, !dbg !76
  %414 = fpext half %413 to float, !dbg !86
  %415 = fmul float %414, 2.000000e+00, !dbg !87
  %416 = fmul float %246, %415, !dbg !88
  %417 = fadd float %412, %416, !dbg !89
  %418 = extractelement <2 x half> %397, i64 0, !dbg !66
  %419 = fpext half %418 to float, !dbg !90
  %420 = fadd float %417, %419, !dbg !91
  %421 = extractvalue { i32, i32, i32, i32 } %306, 1, !dbg !68
  %422 = bitcast i32 %421 to <2 x half>, !dbg !68
  %423 = extractelement <2 x half> %422, i64 1, !dbg !68
  %424 = fpext half %423 to float, !dbg !78
  %425 = extractvalue { i32, i32, i32, i32 } %308, 1, !dbg !70
  %426 = bitcast i32 %425 to <2 x half>, !dbg !70
  %427 = extractelement <2 x half> %426, i64 1, !dbg !70
  %428 = fpext half %427 to float, !dbg !79
  %429 = fadd float %424, %428, !dbg !80
  %430 = extractvalue { i32, i32, i32, i32 } %310, 1, !dbg !72
  %431 = bitcast i32 %430 to <2 x half>, !dbg !72
  %432 = extractelement <2 x half> %431, i64 1, !dbg !72
  %433 = fpext half %432 to float, !dbg !81
  %434 = fadd float %429, %433, !dbg !82
  %435 = extractvalue { i32, i32, i32, i32 } %312, 1, !dbg !74
  %436 = bitcast i32 %435 to <2 x half>, !dbg !74
  %437 = extractelement <2 x half> %436, i64 1, !dbg !74
  %438 = fpext half %437 to float, !dbg !83
  %439 = fmul float %434, %438, !dbg !84
  %440 = fmul float %439, %240, !dbg !85
  %441 = extractvalue { i32, i32, i32, i32 } %314, 1, !dbg !76
  %442 = bitcast i32 %441 to <2 x half>, !dbg !76
  %443 = extractelement <2 x half> %442, i64 1, !dbg !76
  %444 = fpext half %443 to float, !dbg !86
  %445 = fmul float %444, 2.000000e+00, !dbg !87
  %446 = fmul float %246, %445, !dbg !88
  %447 = fadd float %440, %446, !dbg !89
  %448 = extractvalue { i32, i32, i32, i32 } %304, 1, !dbg !66
  %449 = bitcast i32 %448 to <2 x half>, !dbg !66
  %450 = extractelement <2 x half> %449, i64 1, !dbg !66
  %451 = fpext half %450 to float, !dbg !90
  %452 = fadd float %447, %451, !dbg !91
  %453 = extractelement <2 x half> %422, i64 0, !dbg !68
  %454 = fpext half %453 to float, !dbg !78
  %455 = extractelement <2 x half> %426, i64 0, !dbg !70
  %456 = fpext half %455 to float, !dbg !79
  %457 = fadd float %454, %456, !dbg !80
  %458 = extractelement <2 x half> %431, i64 0, !dbg !72
  %459 = fpext half %458 to float, !dbg !81
  %460 = fadd float %457, %459, !dbg !82
  %461 = extractelement <2 x half> %436, i64 0, !dbg !74
  %462 = fpext half %461 to float, !dbg !83
  %463 = fmul float %460, %462, !dbg !84
  %464 = fmul float %463, %240, !dbg !85
  %465 = extractelement <2 x half> %442, i64 0, !dbg !76
  %466 = fpext half %465 to float, !dbg !86
  %467 = fmul float %466, 2.000000e+00, !dbg !87
  %468 = fmul float %246, %467, !dbg !88
  %469 = fadd float %464, %468, !dbg !89
  %470 = extractelement <2 x half> %449, i64 0, !dbg !66
  %471 = fpext half %470 to float, !dbg !90
  %472 = fadd float %469, %471, !dbg !91
  %473 = extractvalue { i32, i32, i32, i32 } %306, 0, !dbg !68
  %474 = bitcast i32 %473 to <2 x half>, !dbg !68
  %475 = extractelement <2 x half> %474, i64 1, !dbg !68
  %476 = fpext half %475 to float, !dbg !78
  %477 = extractvalue { i32, i32, i32, i32 } %308, 0, !dbg !70
  %478 = bitcast i32 %477 to <2 x half>, !dbg !70
  %479 = extractelement <2 x half> %478, i64 1, !dbg !70
  %480 = fpext half %479 to float, !dbg !79
  %481 = fadd float %476, %480, !dbg !80
  %482 = extractvalue { i32, i32, i32, i32 } %310, 0, !dbg !72
  %483 = bitcast i32 %482 to <2 x half>, !dbg !72
  %484 = extractelement <2 x half> %483, i64 1, !dbg !72
  %485 = fpext half %484 to float, !dbg !81
  %486 = fadd float %481, %485, !dbg !82
  %487 = extractvalue { i32, i32, i32, i32 } %312, 0, !dbg !74
  %488 = bitcast i32 %487 to <2 x half>, !dbg !74
  %489 = extractelement <2 x half> %488, i64 1, !dbg !74
  %490 = fpext half %489 to float, !dbg !83
  %491 = fmul float %486, %490, !dbg !84
  %492 = fmul float %491, %240, !dbg !85
  %493 = extractvalue { i32, i32, i32, i32 } %314, 0, !dbg !76
  %494 = bitcast i32 %493 to <2 x half>, !dbg !76
  %495 = extractelement <2 x half> %494, i64 1, !dbg !76
  %496 = fpext half %495 to float, !dbg !86
  %497 = fmul float %496, 2.000000e+00, !dbg !87
  %498 = fmul float %246, %497, !dbg !88
  %499 = fadd float %492, %498, !dbg !89
  %500 = extractvalue { i32, i32, i32, i32 } %304, 0, !dbg !66
  %501 = bitcast i32 %500 to <2 x half>, !dbg !66
  %502 = extractelement <2 x half> %501, i64 1, !dbg !66
  %503 = fpext half %502 to float, !dbg !90
  %504 = fadd float %499, %503, !dbg !91
  %505 = extractelement <2 x half> %474, i64 0, !dbg !68
  %506 = fpext half %505 to float, !dbg !78
  %507 = extractelement <2 x half> %478, i64 0, !dbg !70
  %508 = fpext half %507 to float, !dbg !79
  %509 = fadd float %506, %508, !dbg !80
  %510 = extractelement <2 x half> %483, i64 0, !dbg !72
  %511 = fpext half %510 to float, !dbg !81
  %512 = fadd float %509, %511, !dbg !82
  %513 = extractelement <2 x half> %488, i64 0, !dbg !74
  %514 = fpext half %513 to float, !dbg !83
  %515 = fmul float %512, %514, !dbg !84
  %516 = fmul float %515, %240, !dbg !85
  %517 = extractelement <2 x half> %494, i64 0, !dbg !76
  %518 = fpext half %517 to float, !dbg !86
  %519 = fmul float %518, 2.000000e+00, !dbg !87
  %520 = fmul float %246, %519, !dbg !88
  %521 = fadd float %516, %520, !dbg !89
  %522 = extractelement <2 x half> %501, i64 0, !dbg !66
  %523 = fpext half %522 to float, !dbg !90
  %524 = fadd float %521, %523, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %.reass59 = or i64 %indvars.iv49, %invariant.op58
  %.reass61 = or i64 %indvars.iv49, %invariant.op60
  %525 = getelementptr float, ptr addrspace(1) %8, i64 %.reass59, !dbg !92
  %526 = getelementptr float, ptr addrspace(1) %8, i64 %.reass61, !dbg !92
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %527 = bitcast float %524 to i32, !dbg !93
  %528 = select i1 %241, i32 0, i32 %527, !dbg !94
  %529 = bitcast float %504 to i32, !dbg !93
  %530 = select i1 %241, i32 0, i32 %529, !dbg !94
  %531 = bitcast float %472 to i32, !dbg !93
  %532 = select i1 %241, i32 0, i32 %531, !dbg !94
  %533 = bitcast float %452 to i32, !dbg !93
  %534 = select i1 %241, i32 0, i32 %533, !dbg !94
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %281, i32 %528, i32 %530, i32 %532, i32 %534, i1 true) #4, !dbg !93
  %535 = bitcast float %420 to i32, !dbg !93
  %536 = select i1 %241, i32 0, i32 %535, !dbg !94
  %537 = bitcast float %400 to i32, !dbg !93
  %538 = select i1 %241, i32 0, i32 %537, !dbg !94
  %539 = bitcast float %368 to i32, !dbg !93
  %540 = select i1 %241, i32 0, i32 %539, !dbg !94
  %541 = bitcast float %348 to i32, !dbg !93
  %542 = select i1 %241, i32 0, i32 %541, !dbg !94
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %283, i32 %536, i32 %538, i32 %540, i32 %542, i1 true) #4, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %543 = load float, ptr addrspace(3) %286, align 16, !dbg !93
  %544 = load float, ptr addrspace(3) %293, align 4, !dbg !93
  %545 = load float, ptr addrspace(3) %294, align 8, !dbg !93
  %546 = load float, ptr addrspace(3) %295, align 4, !dbg !93
  %547 = load float, ptr addrspace(3) %291, align 16, !dbg !93
  %548 = load float, ptr addrspace(3) %296, align 4, !dbg !93
  %549 = load float, ptr addrspace(3) %297, align 8, !dbg !93
  %550 = load float, ptr addrspace(3) %298, align 4, !dbg !93
  %551 = tail call { float, float, float, float } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$9 atom.global.gpu.relaxed.add.v4.f32 { $0, $1, $2, $3 }, [ $4 + 0 ], { $5, $6, $7, $8 };", "=r,=r,=r,=r,l,r,r,r,r,b"(ptr addrspace(1) %525, float %543, float %544, float %545, float %546, i1 %29) #4, !dbg !93
  %552 = tail call { float, float, float, float } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$9 atom.global.gpu.relaxed.add.v4.f32 { $0, $1, $2, $3 }, [ $4 + 0 ], { $5, $6, $7, $8 };", "=r,=r,=r,=r,l,r,r,r,r,b"(ptr addrspace(1) %526, float %547, float %548, float %549, float %550, i1 %159) #4, !dbg !93
  %indvars.iv.next50 = add nuw nsw i64 %indvars.iv49, 64, !dbg !63
  %553 = icmp samesign ult i64 %indvars.iv49, 4032, !dbg !63
  br i1 %553, label %299, label %554, !dbg !63

554:                                              ; preds = %316
  ret void, !dbg !95
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctxmaw5t3t256dq7yrmhxrht563tkigfbxuljvcdxlsac2hljoin.py", directory: "/tmp/torchinductor_root/tx")
!4 = !{ptr @triton_red_fused__to_copy_add_div_embedding_dense_backward_mul_pow_sum_13, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_embedding_dense_backward_mul_pow_sum_13", linkageName: "triton_red_fused__to_copy_add_div_embedding_dense_backward_mul_pow_sum_13", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 22, column: 28, scope: !10)
!12 = !DILocation(line: 22, column: 33, scope: !10)
!13 = !DILocation(line: 23, column: 44, scope: !10)
!14 = !DILocation(line: 23, column: 23, scope: !10)
!15 = !DILocation(line: 24, column: 21, scope: !10)
!16 = !DILocation(line: 25, column: 37, scope: !10)
!17 = !DILocation(line: 35, column: 46, scope: !10)
!18 = !DILocation(line: 29, column: 40, scope: !10)
!19 = !DILocation(line: 48, column: 50, scope: !10)
!20 = !DILocation(line: 30, column: 31, scope: !10)
!21 = !DILocation(line: 35, column: 34, scope: !10)
!22 = !DILocation(line: 35, column: 51, scope: !10)
!23 = !DILocation(line: 36, column: 34, scope: !10)
!24 = !DILocation(line: 36, column: 51, scope: !10)
!25 = !DILocation(line: 37, column: 34, scope: !10)
!26 = !DILocation(line: 37, column: 51, scope: !10)
!27 = !DILocation(line: 38, column: 34, scope: !10)
!28 = !DILocation(line: 38, column: 41, scope: !10)
!29 = !DILocation(line: 39, column: 34, scope: !10)
!30 = !DILocation(line: 39, column: 51, scope: !10)
!31 = !DILocation(line: 35, column: 112, scope: !10)
!32 = !DILocation(line: 36, column: 112, scope: !10)
!33 = !DILocation(line: 37, column: 112, scope: !10)
!34 = !DILocation(line: 38, column: 94, scope: !10)
!35 = !DILocation(line: 39, column: 112, scope: !10)
!36 = !DILocation(line: 40, column: 22, scope: !10)
!37 = !DILocation(line: 41, column: 22, scope: !10)
!38 = !DILocation(line: 42, column: 22, scope: !10)
!39 = !DILocation(line: 45, column: 23, scope: !10)
!40 = !DILocation(line: 47, column: 25, scope: !10)
!41 = !DILocation(line: 256, column: 15, scope: !42, inlinedAt: !45)
!42 = distinct !DILexicalBlockFile(scope: !44, file: !43, discriminator: 0)
!43 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!44 = distinct !DILexicalBlockFile(scope: !10, file: !43, discriminator: 0)
!45 = !DILocation(line: 49, column: 27, scope: !10)
!46 = !DILocation(line: 286, column: 36, scope: !44, inlinedAt: !45)
!47 = !DILocation(line: 50, column: 31, scope: !10)
!48 = !DILocation(line: 50, column: 36, scope: !10)
!49 = !DILocation(line: 51, column: 31, scope: !10)
!50 = !DILocation(line: 51, column: 36, scope: !10)
!51 = !DILocation(line: 65, column: 25, scope: !10)
!52 = !DILocation(line: 72, column: 24, scope: !10)
!53 = !DILocation(line: 73, column: 24, scope: !10)
!54 = !DILocation(line: 74, column: 24, scope: !10)
!55 = !DILocation(line: 75, column: 24, scope: !10)
!56 = !DILocation(line: 77, column: 24, scope: !10)
!57 = !DILocation(line: 90, column: 24, scope: !10)
!58 = !DILocation(line: 89, column: 24, scope: !10)
!59 = !DILocation(line: 91, column: 39, scope: !10)
!60 = !DILocation(line: 92, column: 42, scope: !10)
!61 = !DILocation(line: 92, column: 61, scope: !10)
!62 = !DILocation(line: 93, column: 62, scope: !10)
!63 = !DILocation(line: 52, column: 40, scope: !10)
!64 = !DILocation(line: 53, column: 31, scope: !10)
!65 = !DILocation(line: 58, column: 35, scope: !10)
!66 = !DILocation(line: 58, column: 52, scope: !10)
!67 = !DILocation(line: 59, column: 35, scope: !10)
!68 = !DILocation(line: 59, column: 52, scope: !10)
!69 = !DILocation(line: 60, column: 35, scope: !10)
!70 = !DILocation(line: 60, column: 52, scope: !10)
!71 = !DILocation(line: 61, column: 35, scope: !10)
!72 = !DILocation(line: 61, column: 52, scope: !10)
!73 = !DILocation(line: 62, column: 35, scope: !10)
!74 = !DILocation(line: 62, column: 42, scope: !10)
!75 = !DILocation(line: 63, column: 35, scope: !10)
!76 = !DILocation(line: 63, column: 52, scope: !10)
!77 = !DILocation(line: 92, column: 71, scope: !10)
!78 = !DILocation(line: 59, column: 114, scope: !10)
!79 = !DILocation(line: 60, column: 114, scope: !10)
!80 = !DILocation(line: 66, column: 24, scope: !10)
!81 = !DILocation(line: 61, column: 114, scope: !10)
!82 = !DILocation(line: 67, column: 24, scope: !10)
!83 = !DILocation(line: 62, column: 95, scope: !10)
!84 = !DILocation(line: 68, column: 24, scope: !10)
!85 = !DILocation(line: 70, column: 24, scope: !10)
!86 = !DILocation(line: 63, column: 114, scope: !10)
!87 = !DILocation(line: 80, column: 24, scope: !10)
!88 = !DILocation(line: 81, column: 24, scope: !10)
!89 = !DILocation(line: 82, column: 24, scope: !10)
!90 = !DILocation(line: 58, column: 114, scope: !10)
!91 = !DILocation(line: 84, column: 24, scope: !10)
!92 = !DILocation(line: 93, column: 34, scope: !10)
!93 = !DILocation(line: 93, column: 98, scope: !10)
!94 = !DILocation(line: 87, column: 39, scope: !10)
!95 = !DILocation(line: 52, column: 4, scope: !10)
