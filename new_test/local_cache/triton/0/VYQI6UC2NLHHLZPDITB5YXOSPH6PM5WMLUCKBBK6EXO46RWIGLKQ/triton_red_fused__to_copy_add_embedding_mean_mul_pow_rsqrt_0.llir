; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py\00"
@assertMessage_0 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp4 < 128256\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !10 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %11 = shl i32 %10, 1, !dbg !12
  %12 = or disjoint i32 %11, 1, !dbg !13
  %13 = icmp slt i32 %11, %6, !dbg !14
  %14 = icmp slt i32 %12, %6, !dbg !14
  %15 = sext i32 %11 to i64, !dbg !15
  %16 = getelementptr i64, ptr addrspace(1) %1, i64 %15, !dbg !15
  %17 = sext i32 %12 to i64, !dbg !15
  %18 = getelementptr i64, ptr addrspace(1) %1, i64 %17, !dbg !15
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %13) #6, !dbg !16
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %13) #6, !dbg !16
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %13) #6, !dbg !16
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %13) #6, !dbg !16
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %13) #6, !dbg !16
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %13) #6, !dbg !16
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %13) #6, !dbg !16
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %13) #6, !dbg !16
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %14) #6, !dbg !16
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %14) #6, !dbg !16
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %14) #6, !dbg !16
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %14) #6, !dbg !16
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %14) #6, !dbg !16
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %14) #6, !dbg !16
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %14) #6, !dbg !16
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %14) #6, !dbg !16
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %16, i1 %13) #6, !dbg !16
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %14) #6, !dbg !16
  %37 = insertelement <2 x i64> poison, i64 %36, i64 0, !dbg !17
  %38 = insertelement <2 x i64> %37, i64 %35, i64 1, !dbg !17
  %39 = add <2 x i64> %38, splat (i64 128256), !dbg !17
  %40 = icmp slt <2 x i64> %38, zeroinitializer, !dbg !18
  %41 = select <2 x i1> %40, <2 x i64> %39, <2 x i64> %38, !dbg !19
  %42 = icmp ugt <2 x i64> %41, splat (i64 128255), !dbg !20
  %43 = extractelement <2 x i1> %42, i64 1, !dbg !21
  %.not1 = and i1 %13, %43, !dbg !21
  %44 = extractelement <2 x i1> %42, i64 0, !dbg !22
  %.not2 = and i1 %14, %44, !dbg !22
  %45 = or i1 %.not1, %.not2, !dbg !22
  br i1 %45, label %46, label %47, !dbg !22

46:                                               ; preds = %9
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !22
  unreachable, !dbg !22

47:                                               ; preds = %9
  %48 = icmp slt i64 %34, 0, !dbg !18
  %49 = icmp slt i64 %26, 0, !dbg !18
  %50 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !23
  %51 = shl i32 %50, 3, !dbg !24
  %52 = and i32 %51, 1016, !dbg !24
  %53 = or disjoint i32 %52, 3072, !dbg !24
  %54 = or disjoint i32 %52, 2048, !dbg !24
  %55 = or disjoint i32 %52, 1024, !dbg !24
  %56 = lshr i32 %50, 5, !dbg !24
  %57 = and i32 %50, 31, !dbg !23
  %58 = and i32 %50, 1, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %59 = shl i64 %26, 12, !dbg !25
  %60 = add i64 %59, 525336576, !dbg !25
  %61 = select i1 %49, i64 %60, i64 %59, !dbg !25
  %62 = shl i64 %34, 12, !dbg !25
  %63 = add i64 %62, 525336576, !dbg !25
  %64 = select i1 %48, i64 %63, i64 %62, !dbg !25
  %65 = zext nneg i32 %52 to i64, !dbg !26
  %66 = zext nneg i32 %55 to i64, !dbg !26
  %67 = zext nneg i32 %54 to i64, !dbg !26
  %68 = zext nneg i32 %53 to i64, !dbg !26
  %69 = getelementptr half, ptr addrspace(1) %2, i64 %61, !dbg !27
  %70 = getelementptr half, ptr addrspace(1) %69, i64 %65, !dbg !27
  %71 = getelementptr half, ptr addrspace(1) %69, i64 %66, !dbg !27
  %72 = getelementptr half, ptr addrspace(1) %69, i64 %67, !dbg !27
  %73 = getelementptr half, ptr addrspace(1) %69, i64 %68, !dbg !27
  %74 = getelementptr half, ptr addrspace(1) %2, i64 %64, !dbg !27
  %75 = getelementptr half, ptr addrspace(1) %74, i64 %65, !dbg !27
  %76 = getelementptr half, ptr addrspace(1) %74, i64 %66, !dbg !27
  %77 = getelementptr half, ptr addrspace(1) %74, i64 %67, !dbg !27
  %78 = getelementptr half, ptr addrspace(1) %74, i64 %68, !dbg !27
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %70, i1 %13) #6, !dbg !28
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !28
  %81 = bitcast i32 %80 to <2 x half>, !dbg !28
  %82 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !28
  %83 = bitcast i32 %82 to <2 x half>, !dbg !28
  %84 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !28
  %85 = bitcast i32 %84 to <2 x half>, !dbg !28
  %86 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !28
  %87 = bitcast i32 %86 to <2 x half>, !dbg !28
  %88 = extractelement <2 x half> %81, i64 0, !dbg !28
  %89 = extractelement <2 x half> %81, i64 1, !dbg !28
  %90 = extractelement <2 x half> %83, i64 0, !dbg !28
  %91 = extractelement <2 x half> %83, i64 1, !dbg !28
  %92 = extractelement <2 x half> %85, i64 0, !dbg !28
  %93 = extractelement <2 x half> %85, i64 1, !dbg !28
  %94 = extractelement <2 x half> %87, i64 0, !dbg !28
  %95 = extractelement <2 x half> %87, i64 1, !dbg !28
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %71, i1 %13) #6, !dbg !28
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !28
  %98 = bitcast i32 %97 to <2 x half>, !dbg !28
  %99 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !28
  %100 = bitcast i32 %99 to <2 x half>, !dbg !28
  %101 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !28
  %102 = bitcast i32 %101 to <2 x half>, !dbg !28
  %103 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !28
  %104 = bitcast i32 %103 to <2 x half>, !dbg !28
  %105 = extractelement <2 x half> %98, i64 0, !dbg !28
  %106 = extractelement <2 x half> %98, i64 1, !dbg !28
  %107 = extractelement <2 x half> %100, i64 0, !dbg !28
  %108 = extractelement <2 x half> %100, i64 1, !dbg !28
  %109 = extractelement <2 x half> %102, i64 0, !dbg !28
  %110 = extractelement <2 x half> %102, i64 1, !dbg !28
  %111 = extractelement <2 x half> %104, i64 0, !dbg !28
  %112 = extractelement <2 x half> %104, i64 1, !dbg !28
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %72, i1 %13) #6, !dbg !28
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !28
  %115 = bitcast i32 %114 to <2 x half>, !dbg !28
  %116 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !28
  %117 = bitcast i32 %116 to <2 x half>, !dbg !28
  %118 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !28
  %119 = bitcast i32 %118 to <2 x half>, !dbg !28
  %120 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !28
  %121 = bitcast i32 %120 to <2 x half>, !dbg !28
  %122 = extractelement <2 x half> %115, i64 0, !dbg !28
  %123 = extractelement <2 x half> %115, i64 1, !dbg !28
  %124 = extractelement <2 x half> %117, i64 0, !dbg !28
  %125 = extractelement <2 x half> %117, i64 1, !dbg !28
  %126 = extractelement <2 x half> %119, i64 0, !dbg !28
  %127 = extractelement <2 x half> %119, i64 1, !dbg !28
  %128 = extractelement <2 x half> %121, i64 0, !dbg !28
  %129 = extractelement <2 x half> %121, i64 1, !dbg !28
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %73, i1 %13) #6, !dbg !28
  %131 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !28
  %132 = bitcast i32 %131 to <2 x half>, !dbg !28
  %133 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !28
  %134 = bitcast i32 %133 to <2 x half>, !dbg !28
  %135 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !28
  %136 = bitcast i32 %135 to <2 x half>, !dbg !28
  %137 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !28
  %138 = bitcast i32 %137 to <2 x half>, !dbg !28
  %139 = extractelement <2 x half> %132, i64 0, !dbg !28
  %140 = extractelement <2 x half> %132, i64 1, !dbg !28
  %141 = extractelement <2 x half> %134, i64 0, !dbg !28
  %142 = extractelement <2 x half> %134, i64 1, !dbg !28
  %143 = extractelement <2 x half> %136, i64 0, !dbg !28
  %144 = extractelement <2 x half> %136, i64 1, !dbg !28
  %145 = extractelement <2 x half> %138, i64 0, !dbg !28
  %146 = extractelement <2 x half> %138, i64 1, !dbg !28
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %75, i1 %14) #6, !dbg !28
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !28
  %149 = bitcast i32 %148 to <2 x half>, !dbg !28
  %150 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !28
  %151 = bitcast i32 %150 to <2 x half>, !dbg !28
  %152 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !28
  %153 = bitcast i32 %152 to <2 x half>, !dbg !28
  %154 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !28
  %155 = bitcast i32 %154 to <2 x half>, !dbg !28
  %156 = extractelement <2 x half> %149, i64 0, !dbg !28
  %157 = extractelement <2 x half> %149, i64 1, !dbg !28
  %158 = extractelement <2 x half> %151, i64 0, !dbg !28
  %159 = extractelement <2 x half> %151, i64 1, !dbg !28
  %160 = extractelement <2 x half> %153, i64 0, !dbg !28
  %161 = extractelement <2 x half> %153, i64 1, !dbg !28
  %162 = extractelement <2 x half> %155, i64 0, !dbg !28
  %163 = extractelement <2 x half> %155, i64 1, !dbg !28
  %164 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %76, i1 %14) #6, !dbg !28
  %165 = extractvalue { i32, i32, i32, i32 } %164, 0, !dbg !28
  %166 = bitcast i32 %165 to <2 x half>, !dbg !28
  %167 = extractvalue { i32, i32, i32, i32 } %164, 1, !dbg !28
  %168 = bitcast i32 %167 to <2 x half>, !dbg !28
  %169 = extractvalue { i32, i32, i32, i32 } %164, 2, !dbg !28
  %170 = bitcast i32 %169 to <2 x half>, !dbg !28
  %171 = extractvalue { i32, i32, i32, i32 } %164, 3, !dbg !28
  %172 = bitcast i32 %171 to <2 x half>, !dbg !28
  %173 = extractelement <2 x half> %166, i64 0, !dbg !28
  %174 = extractelement <2 x half> %166, i64 1, !dbg !28
  %175 = extractelement <2 x half> %168, i64 0, !dbg !28
  %176 = extractelement <2 x half> %168, i64 1, !dbg !28
  %177 = extractelement <2 x half> %170, i64 0, !dbg !28
  %178 = extractelement <2 x half> %170, i64 1, !dbg !28
  %179 = extractelement <2 x half> %172, i64 0, !dbg !28
  %180 = extractelement <2 x half> %172, i64 1, !dbg !28
  %181 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %77, i1 %14) #6, !dbg !28
  %182 = extractvalue { i32, i32, i32, i32 } %181, 0, !dbg !28
  %183 = bitcast i32 %182 to <2 x half>, !dbg !28
  %184 = extractvalue { i32, i32, i32, i32 } %181, 1, !dbg !28
  %185 = bitcast i32 %184 to <2 x half>, !dbg !28
  %186 = extractvalue { i32, i32, i32, i32 } %181, 2, !dbg !28
  %187 = bitcast i32 %186 to <2 x half>, !dbg !28
  %188 = extractvalue { i32, i32, i32, i32 } %181, 3, !dbg !28
  %189 = bitcast i32 %188 to <2 x half>, !dbg !28
  %190 = extractelement <2 x half> %183, i64 0, !dbg !28
  %191 = extractelement <2 x half> %183, i64 1, !dbg !28
  %192 = extractelement <2 x half> %185, i64 0, !dbg !28
  %193 = extractelement <2 x half> %185, i64 1, !dbg !28
  %194 = extractelement <2 x half> %187, i64 0, !dbg !28
  %195 = extractelement <2 x half> %187, i64 1, !dbg !28
  %196 = extractelement <2 x half> %189, i64 0, !dbg !28
  %197 = extractelement <2 x half> %189, i64 1, !dbg !28
  %198 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %78, i1 %14) #6, !dbg !28
  %199 = extractvalue { i32, i32, i32, i32 } %198, 0, !dbg !28
  %200 = bitcast i32 %199 to <2 x half>, !dbg !28
  %201 = extractvalue { i32, i32, i32, i32 } %198, 1, !dbg !28
  %202 = bitcast i32 %201 to <2 x half>, !dbg !28
  %203 = extractvalue { i32, i32, i32, i32 } %198, 2, !dbg !28
  %204 = bitcast i32 %203 to <2 x half>, !dbg !28
  %205 = extractvalue { i32, i32, i32, i32 } %198, 3, !dbg !28
  %206 = bitcast i32 %205 to <2 x half>, !dbg !28
  %207 = extractelement <2 x half> %200, i64 0, !dbg !28
  %208 = extractelement <2 x half> %200, i64 1, !dbg !28
  %209 = extractelement <2 x half> %202, i64 0, !dbg !28
  %210 = extractelement <2 x half> %202, i64 1, !dbg !28
  %211 = extractelement <2 x half> %204, i64 0, !dbg !28
  %212 = extractelement <2 x half> %204, i64 1, !dbg !28
  %213 = extractelement <2 x half> %206, i64 0, !dbg !28
  %214 = extractelement <2 x half> %206, i64 1, !dbg !28
  %215 = fpext half %88 to float, !dbg !29
  %216 = fpext half %89 to float, !dbg !29
  %217 = fpext half %90 to float, !dbg !29
  %218 = fpext half %91 to float, !dbg !29
  %219 = fpext half %92 to float, !dbg !29
  %220 = fpext half %93 to float, !dbg !29
  %221 = fpext half %94 to float, !dbg !29
  %222 = fpext half %95 to float, !dbg !29
  %223 = fpext half %105 to float, !dbg !29
  %224 = fpext half %106 to float, !dbg !29
  %225 = fpext half %107 to float, !dbg !29
  %226 = fpext half %108 to float, !dbg !29
  %227 = fpext half %109 to float, !dbg !29
  %228 = fpext half %110 to float, !dbg !29
  %229 = fpext half %111 to float, !dbg !29
  %230 = fpext half %112 to float, !dbg !29
  %231 = fpext half %122 to float, !dbg !29
  %232 = fpext half %123 to float, !dbg !29
  %233 = fpext half %124 to float, !dbg !29
  %234 = fpext half %125 to float, !dbg !29
  %235 = fpext half %126 to float, !dbg !29
  %236 = fpext half %127 to float, !dbg !29
  %237 = fpext half %128 to float, !dbg !29
  %238 = fpext half %129 to float, !dbg !29
  %239 = fpext half %139 to float, !dbg !29
  %240 = fpext half %140 to float, !dbg !29
  %241 = fpext half %141 to float, !dbg !29
  %242 = fpext half %142 to float, !dbg !29
  %243 = fpext half %143 to float, !dbg !29
  %244 = fpext half %144 to float, !dbg !29
  %245 = fpext half %145 to float, !dbg !29
  %246 = fpext half %146 to float, !dbg !29
  %247 = fpext half %156 to float, !dbg !29
  %248 = fpext half %157 to float, !dbg !29
  %249 = fpext half %158 to float, !dbg !29
  %250 = fpext half %159 to float, !dbg !29
  %251 = fpext half %160 to float, !dbg !29
  %252 = fpext half %161 to float, !dbg !29
  %253 = fpext half %162 to float, !dbg !29
  %254 = fpext half %163 to float, !dbg !29
  %255 = fpext half %173 to float, !dbg !29
  %256 = fpext half %174 to float, !dbg !29
  %257 = fpext half %175 to float, !dbg !29
  %258 = fpext half %176 to float, !dbg !29
  %259 = fpext half %177 to float, !dbg !29
  %260 = fpext half %178 to float, !dbg !29
  %261 = fpext half %179 to float, !dbg !29
  %262 = fpext half %180 to float, !dbg !29
  %263 = fpext half %190 to float, !dbg !29
  %264 = fpext half %191 to float, !dbg !29
  %265 = fpext half %192 to float, !dbg !29
  %266 = fpext half %193 to float, !dbg !29
  %267 = fpext half %194 to float, !dbg !29
  %268 = fpext half %195 to float, !dbg !29
  %269 = fpext half %196 to float, !dbg !29
  %270 = fpext half %197 to float, !dbg !29
  %271 = fpext half %207 to float, !dbg !29
  %272 = fpext half %208 to float, !dbg !29
  %273 = fpext half %209 to float, !dbg !29
  %274 = fpext half %210 to float, !dbg !29
  %275 = fpext half %211 to float, !dbg !29
  %276 = fpext half %212 to float, !dbg !29
  %277 = fpext half %213 to float, !dbg !29
  %278 = fpext half %214 to float, !dbg !29
  %279 = fmul float %215, %215, !dbg !30
  %280 = fmul float %216, %216, !dbg !30
  %281 = fmul float %217, %217, !dbg !30
  %282 = fmul float %218, %218, !dbg !30
  %283 = fmul float %219, %219, !dbg !30
  %284 = fmul float %220, %220, !dbg !30
  %285 = fmul float %221, %221, !dbg !30
  %286 = fmul float %222, %222, !dbg !30
  %287 = fmul float %223, %223, !dbg !30
  %288 = fmul float %224, %224, !dbg !30
  %289 = fmul float %225, %225, !dbg !30
  %290 = fmul float %226, %226, !dbg !30
  %291 = fmul float %227, %227, !dbg !30
  %292 = fmul float %228, %228, !dbg !30
  %293 = fmul float %229, %229, !dbg !30
  %294 = fmul float %230, %230, !dbg !30
  %295 = fmul float %231, %231, !dbg !30
  %296 = fmul float %232, %232, !dbg !30
  %297 = fmul float %233, %233, !dbg !30
  %298 = fmul float %234, %234, !dbg !30
  %299 = fmul float %235, %235, !dbg !30
  %300 = fmul float %236, %236, !dbg !30
  %301 = fmul float %237, %237, !dbg !30
  %302 = fmul float %238, %238, !dbg !30
  %303 = fmul float %239, %239, !dbg !30
  %304 = fmul float %240, %240, !dbg !30
  %305 = fmul float %241, %241, !dbg !30
  %306 = fmul float %242, %242, !dbg !30
  %307 = fmul float %243, %243, !dbg !30
  %308 = fmul float %244, %244, !dbg !30
  %309 = fmul float %245, %245, !dbg !30
  %310 = fmul float %246, %246, !dbg !30
  %311 = fmul float %247, %247, !dbg !30
  %312 = fmul float %248, %248, !dbg !30
  %313 = fmul float %249, %249, !dbg !30
  %314 = fmul float %250, %250, !dbg !30
  %315 = fmul float %251, %251, !dbg !30
  %316 = fmul float %252, %252, !dbg !30
  %317 = fmul float %253, %253, !dbg !30
  %318 = fmul float %254, %254, !dbg !30
  %319 = fmul float %255, %255, !dbg !30
  %320 = fmul float %256, %256, !dbg !30
  %321 = fmul float %257, %257, !dbg !30
  %322 = fmul float %258, %258, !dbg !30
  %323 = fmul float %259, %259, !dbg !30
  %324 = fmul float %260, %260, !dbg !30
  %325 = fmul float %261, %261, !dbg !30
  %326 = fmul float %262, %262, !dbg !30
  %327 = fmul float %263, %263, !dbg !30
  %328 = fmul float %264, %264, !dbg !30
  %329 = fmul float %265, %265, !dbg !30
  %330 = fmul float %266, %266, !dbg !30
  %331 = fmul float %267, %267, !dbg !30
  %332 = fmul float %268, %268, !dbg !30
  %333 = fmul float %269, %269, !dbg !30
  %334 = fmul float %270, %270, !dbg !30
  %335 = fmul float %271, %271, !dbg !30
  %336 = fmul float %272, %272, !dbg !30
  %337 = fmul float %273, %273, !dbg !30
  %338 = fmul float %274, %274, !dbg !30
  %339 = fmul float %275, %275, !dbg !30
  %340 = fmul float %276, %276, !dbg !30
  %341 = fmul float %277, %277, !dbg !30
  %342 = fmul float %278, %278, !dbg !30
  %343 = shl i32 %10, 13, !dbg !31
  %344 = shl i32 %12, 12, !dbg !31
  %345 = or disjoint i32 %52, %343, !dbg !32
  %346 = or disjoint i32 %55, %343, !dbg !32
  %347 = or disjoint i32 %54, %343, !dbg !32
  %348 = or disjoint i32 %53, %343, !dbg !32
  %349 = or disjoint i32 %344, %52, !dbg !32
  %350 = or disjoint i32 %55, %344, !dbg !32
  %351 = or disjoint i32 %54, %344, !dbg !32
  %352 = or disjoint i32 %53, %344, !dbg !32
  %353 = sext i32 %345 to i64, !dbg !33
  %354 = getelementptr half, ptr addrspace(1) %4, i64 %353, !dbg !33
  %355 = sext i32 %346 to i64, !dbg !33
  %356 = getelementptr half, ptr addrspace(1) %4, i64 %355, !dbg !33
  %357 = sext i32 %347 to i64, !dbg !33
  %358 = getelementptr half, ptr addrspace(1) %4, i64 %357, !dbg !33
  %359 = sext i32 %348 to i64, !dbg !33
  %360 = getelementptr half, ptr addrspace(1) %4, i64 %359, !dbg !33
  %361 = sext i32 %349 to i64, !dbg !33
  %362 = getelementptr half, ptr addrspace(1) %4, i64 %361, !dbg !33
  %363 = sext i32 %350 to i64, !dbg !33
  %364 = getelementptr half, ptr addrspace(1) %4, i64 %363, !dbg !33
  %365 = sext i32 %351 to i64, !dbg !33
  %366 = getelementptr half, ptr addrspace(1) %4, i64 %365, !dbg !33
  %367 = sext i32 %352 to i64, !dbg !33
  %368 = getelementptr half, ptr addrspace(1) %4, i64 %367, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %80, i32 %82, i32 %84, i32 %86, ptr addrspace(1) %354, i1 %13) #6, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %97, i32 %99, i32 %101, i32 %103, ptr addrspace(1) %356, i1 %13) #6, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %114, i32 %116, i32 %118, i32 %120, ptr addrspace(1) %358, i1 %13) #6, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %131, i32 %133, i32 %135, i32 %137, ptr addrspace(1) %360, i1 %13) #6, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %148, i32 %150, i32 %152, i32 %154, ptr addrspace(1) %362, i1 %14) #6, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %165, i32 %167, i32 %169, i32 %171, ptr addrspace(1) %364, i1 %14) #6, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %182, i32 %184, i32 %186, i32 %188, ptr addrspace(1) %366, i1 %14) #6, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %199, i32 %201, i32 %203, i32 %205, ptr addrspace(1) %368, i1 %14) #6, !dbg !34
  %369 = fadd float %279, %280, !dbg !35
  %370 = fadd float %281, %369, !dbg !35
  %371 = fadd float %282, %370, !dbg !35
  %372 = fadd float %283, %371, !dbg !35
  %373 = fadd float %284, %372, !dbg !35
  %374 = fadd float %285, %373, !dbg !35
  %375 = fadd float %286, %374, !dbg !35
  %376 = fadd float %287, %375, !dbg !35
  %377 = fadd float %288, %376, !dbg !35
  %378 = fadd float %289, %377, !dbg !35
  %379 = fadd float %290, %378, !dbg !35
  %380 = fadd float %291, %379, !dbg !35
  %381 = fadd float %292, %380, !dbg !35
  %382 = fadd float %293, %381, !dbg !35
  %383 = fadd float %294, %382, !dbg !35
  %384 = fadd float %295, %383, !dbg !35
  %385 = fadd float %296, %384, !dbg !35
  %386 = fadd float %297, %385, !dbg !35
  %387 = fadd float %298, %386, !dbg !35
  %388 = fadd float %299, %387, !dbg !35
  %389 = fadd float %300, %388, !dbg !35
  %390 = fadd float %301, %389, !dbg !35
  %391 = fadd float %302, %390, !dbg !35
  %392 = fadd float %303, %391, !dbg !35
  %393 = fadd float %304, %392, !dbg !35
  %394 = fadd float %305, %393, !dbg !35
  %395 = fadd float %306, %394, !dbg !35
  %396 = fadd float %307, %395, !dbg !35
  %397 = fadd float %308, %396, !dbg !35
  %398 = fadd float %309, %397, !dbg !35
  %399 = fadd float %310, %398, !dbg !35
  %400 = select i1 %13, float %399, float 0.000000e+00, !dbg !35
  %401 = fadd float %311, %312, !dbg !35
  %402 = fadd float %313, %401, !dbg !35
  %403 = fadd float %314, %402, !dbg !35
  %404 = fadd float %315, %403, !dbg !35
  %405 = fadd float %316, %404, !dbg !35
  %406 = fadd float %317, %405, !dbg !35
  %407 = fadd float %318, %406, !dbg !35
  %408 = fadd float %319, %407, !dbg !35
  %409 = fadd float %320, %408, !dbg !35
  %410 = fadd float %321, %409, !dbg !35
  %411 = fadd float %322, %410, !dbg !35
  %412 = fadd float %323, %411, !dbg !35
  %413 = fadd float %324, %412, !dbg !35
  %414 = fadd float %325, %413, !dbg !35
  %415 = fadd float %326, %414, !dbg !35
  %416 = fadd float %327, %415, !dbg !35
  %417 = fadd float %328, %416, !dbg !35
  %418 = fadd float %329, %417, !dbg !35
  %419 = fadd float %330, %418, !dbg !35
  %420 = fadd float %331, %419, !dbg !35
  %421 = fadd float %332, %420, !dbg !35
  %422 = fadd float %333, %421, !dbg !35
  %423 = fadd float %334, %422, !dbg !35
  %424 = fadd float %335, %423, !dbg !35
  %425 = fadd float %336, %424, !dbg !35
  %426 = fadd float %337, %425, !dbg !35
  %427 = fadd float %338, %426, !dbg !35
  %428 = fadd float %339, %427, !dbg !35
  %429 = fadd float %340, %428, !dbg !35
  %430 = fadd float %341, %429, !dbg !35
  %431 = fadd float %342, %430, !dbg !35
  %432 = select i1 %14, float %431, float 0.000000e+00, !dbg !35
  %433 = bitcast float %400 to i32, !dbg !40
  %434 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %433, i32 16, i32 31), !dbg !40
  %435 = bitcast i32 %434 to float, !dbg !40
  %436 = fadd float %400, %435, !dbg !35
  %437 = bitcast float %436 to i32, !dbg !40
  %438 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %437, i32 8, i32 31), !dbg !40
  %439 = bitcast i32 %438 to float, !dbg !40
  %440 = fadd float %436, %439, !dbg !35
  %441 = bitcast float %440 to i32, !dbg !40
  %442 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %441, i32 4, i32 31), !dbg !40
  %443 = bitcast i32 %442 to float, !dbg !40
  %444 = fadd float %440, %443, !dbg !35
  %445 = bitcast float %444 to i32, !dbg !40
  %446 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %445, i32 2, i32 31), !dbg !40
  %447 = bitcast i32 %446 to float, !dbg !40
  %448 = fadd float %444, %447, !dbg !35
  %449 = bitcast float %448 to i32, !dbg !40
  %450 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %449, i32 1, i32 31), !dbg !40
  %451 = bitcast i32 %450 to float, !dbg !40
  %452 = fadd float %448, %451, !dbg !35
  %453 = bitcast float %432 to i32, !dbg !40
  %454 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %453, i32 16, i32 31), !dbg !40
  %455 = bitcast i32 %454 to float, !dbg !40
  %456 = fadd float %432, %455, !dbg !35
  %457 = bitcast float %456 to i32, !dbg !40
  %458 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %457, i32 8, i32 31), !dbg !40
  %459 = bitcast i32 %458 to float, !dbg !40
  %460 = fadd float %456, %459, !dbg !35
  %461 = bitcast float %460 to i32, !dbg !40
  %462 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %461, i32 4, i32 31), !dbg !40
  %463 = bitcast i32 %462 to float, !dbg !40
  %464 = fadd float %460, %463, !dbg !35
  %465 = bitcast float %464 to i32, !dbg !40
  %466 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %465, i32 2, i32 31), !dbg !40
  %467 = bitcast i32 %466 to float, !dbg !40
  %468 = fadd float %464, %467, !dbg !35
  %469 = bitcast float %468 to i32, !dbg !40
  %470 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %469, i32 1, i32 31), !dbg !40
  %471 = bitcast i32 %470 to float, !dbg !40
  %472 = fadd float %468, %471, !dbg !35
  %473 = and i32 %56, 3, !dbg !40
  %474 = icmp eq i32 %57, 0, !dbg !40
  %475 = getelementptr float, ptr addrspace(3) @global_smem, i32 %473, !dbg !40
  %476 = bitcast float %452 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %475, <1 x i32> %476, i1 %474) #6, !dbg !40
  %477 = or disjoint i32 %473, 4, !dbg !40
  %478 = getelementptr float, ptr addrspace(3) @global_smem, i32 %477, !dbg !40
  %479 = bitcast float %472 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %478, <1 x i32> %479, i1 %474) #6, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %480 = icmp slt i32 %50, 8, !dbg !40
  %481 = getelementptr float, ptr addrspace(3) @global_smem, i32 %50, !dbg !40
  %482 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %481, i1 %480) #6, !dbg !40
  %483 = bitcast i32 %482 to float, !dbg !40
  %484 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %482, i32 2, i32 31), !dbg !40
  %485 = bitcast i32 %484 to float, !dbg !40
  %486 = fadd float %483, %485, !dbg !35
  %487 = bitcast float %486 to i32, !dbg !40
  %488 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %487, i32 1, i32 31), !dbg !40
  %489 = bitcast i32 %488 to float, !dbg !40
  %490 = fadd float %486, %489, !dbg !35
  %491 = and i32 %50, 3, !dbg !40
  %492 = icmp eq i32 %491, 0, !dbg !40
  %493 = and i1 %480, %492, !dbg !40
  %494 = bitcast float %490 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %481, <1 x i32> %494, i1 %493) #6, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %495 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !40
  %496 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %497 = bitcast float %495 to i32, !dbg !41
  %498 = bitcast float %496 to i32, !dbg !41
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %497, i32 %498, i1 true) #6, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %499 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %58, !dbg !41
  %500 = load float, ptr addrspace(3) %499, align 4, !dbg !41
  %501 = tail call float @llvm.nvvm.div.full(float %500, float 4.096000e+03), !dbg !42
  %502 = tail call float @llvm.nvvm.div.full(float %495, float 4.096000e+03), !dbg !42
  %503 = tail call float @llvm.nvvm.div.full(float %496, float 4.096000e+03), !dbg !42
  %504 = fadd float %501, 0x3EE4F8B580000000, !dbg !43
  %505 = fadd float %502, 0x3EE4F8B580000000, !dbg !43
  %506 = fadd float %503, 0x3EE4F8B580000000, !dbg !43
  %507 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %.not.i = icmp eq i32 %507, 0, !dbg !41
  br i1 %.not.i, label %510, label %508, !dbg !41

508:                                              ; preds = %47
  %509 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %504), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

510:                                              ; preds = %47
  %511 = tail call float @llvm.nvvm.rsqrt.approx.f(float %504), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %508, %510
  %.0.i = phi float [ %509, %508 ], [ %511, %510 ], !dbg !41
  %512 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %513 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %514 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %515 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %516 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %517 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %518 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %519 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %.not.i24 = icmp eq i32 %519, 0, !dbg !41
  br i1 %.not.i24, label %522, label %520, !dbg !41

520:                                              ; preds = %__nv_rsqrtf.exit
  %521 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %505), !dbg !41
  br label %__nv_rsqrtf.exit26, !dbg !41

522:                                              ; preds = %__nv_rsqrtf.exit
  %523 = tail call float @llvm.nvvm.rsqrt.approx.f(float %505), !dbg !41
  br label %__nv_rsqrtf.exit26, !dbg !41

__nv_rsqrtf.exit26:                               ; preds = %520, %522
  %.0.i25 = phi float [ %521, %520 ], [ %523, %522 ], !dbg !41
  %524 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %525 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %526 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %527 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %528 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %529 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %530 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %531 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !41
  %.not.i48 = icmp eq i32 %531, 0, !dbg !41
  br i1 %.not.i48, label %534, label %532, !dbg !41

532:                                              ; preds = %__nv_rsqrtf.exit26
  %533 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %506), !dbg !41
  br label %__nv_rsqrtf.exit50, !dbg !41

534:                                              ; preds = %__nv_rsqrtf.exit26
  %535 = tail call float @llvm.nvvm.rsqrt.approx.f(float %506), !dbg !41
  br label %__nv_rsqrtf.exit50, !dbg !41

__nv_rsqrtf.exit50:                               ; preds = %532, %534
  %.0.i49 = phi float [ %533, %532 ], [ %535, %534 ], !dbg !41
  %536 = or disjoint i32 %11, %58, !dbg !13
  %537 = icmp slt i32 %536, %6, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %538 = sext i32 %536 to i64, !dbg !45
  %539 = getelementptr float, ptr addrspace(1) %0, i64 %538, !dbg !45
  %540 = and i32 %50, 126, !dbg !46
  %541 = icmp eq i32 %540, 0, !dbg !46
  %542 = bitcast float %.0.i to i32, !dbg !46
  %543 = and i1 %541, %537, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %542, ptr addrspace(1) %539, i1 %543) #6, !dbg !46
  %544 = getelementptr half, ptr addrspace(1) %3, i64 %65, !dbg !47
  %545 = getelementptr half, ptr addrspace(1) %3, i64 %66, !dbg !47
  %546 = getelementptr half, ptr addrspace(1) %3, i64 %67, !dbg !47
  %547 = getelementptr half, ptr addrspace(1) %3, i64 %68, !dbg !47
  %548 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %544, i1 true) #6, !dbg !48
  %549 = extractvalue { i32, i32, i32, i32 } %548, 0, !dbg !48
  %550 = bitcast i32 %549 to <2 x half>, !dbg !48
  %551 = extractvalue { i32, i32, i32, i32 } %548, 1, !dbg !48
  %552 = bitcast i32 %551 to <2 x half>, !dbg !48
  %553 = extractvalue { i32, i32, i32, i32 } %548, 2, !dbg !48
  %554 = bitcast i32 %553 to <2 x half>, !dbg !48
  %555 = extractvalue { i32, i32, i32, i32 } %548, 3, !dbg !48
  %556 = bitcast i32 %555 to <2 x half>, !dbg !48
  %557 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %545, i1 true) #6, !dbg !48
  %558 = extractvalue { i32, i32, i32, i32 } %557, 0, !dbg !48
  %559 = bitcast i32 %558 to <2 x half>, !dbg !48
  %560 = extractvalue { i32, i32, i32, i32 } %557, 1, !dbg !48
  %561 = bitcast i32 %560 to <2 x half>, !dbg !48
  %562 = extractvalue { i32, i32, i32, i32 } %557, 2, !dbg !48
  %563 = bitcast i32 %562 to <2 x half>, !dbg !48
  %564 = extractvalue { i32, i32, i32, i32 } %557, 3, !dbg !48
  %565 = bitcast i32 %564 to <2 x half>, !dbg !48
  %566 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %546, i1 true) #6, !dbg !48
  %567 = extractvalue { i32, i32, i32, i32 } %566, 0, !dbg !48
  %568 = bitcast i32 %567 to <2 x half>, !dbg !48
  %569 = extractvalue { i32, i32, i32, i32 } %566, 1, !dbg !48
  %570 = bitcast i32 %569 to <2 x half>, !dbg !48
  %571 = extractvalue { i32, i32, i32, i32 } %566, 2, !dbg !48
  %572 = bitcast i32 %571 to <2 x half>, !dbg !48
  %573 = extractvalue { i32, i32, i32, i32 } %566, 3, !dbg !48
  %574 = bitcast i32 %573 to <2 x half>, !dbg !48
  %575 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %547, i1 true) #6, !dbg !48
  %576 = extractvalue { i32, i32, i32, i32 } %575, 0, !dbg !48
  %577 = bitcast i32 %576 to <2 x half>, !dbg !48
  %578 = extractvalue { i32, i32, i32, i32 } %575, 1, !dbg !48
  %579 = bitcast i32 %578 to <2 x half>, !dbg !48
  %580 = extractvalue { i32, i32, i32, i32 } %575, 2, !dbg !48
  %581 = bitcast i32 %580 to <2 x half>, !dbg !48
  %582 = extractvalue { i32, i32, i32, i32 } %575, 3, !dbg !48
  %583 = bitcast i32 %582 to <2 x half>, !dbg !48
  %584 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %354, i1 %13) #6, !dbg !49
  %585 = extractvalue { i32, i32, i32, i32 } %584, 0, !dbg !49
  %586 = bitcast i32 %585 to <2 x half>, !dbg !49
  %587 = extractvalue { i32, i32, i32, i32 } %584, 1, !dbg !49
  %588 = bitcast i32 %587 to <2 x half>, !dbg !49
  %589 = extractvalue { i32, i32, i32, i32 } %584, 2, !dbg !49
  %590 = bitcast i32 %589 to <2 x half>, !dbg !49
  %591 = extractvalue { i32, i32, i32, i32 } %584, 3, !dbg !49
  %592 = bitcast i32 %591 to <2 x half>, !dbg !49
  %593 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %356, i1 %13) #6, !dbg !49
  %594 = extractvalue { i32, i32, i32, i32 } %593, 0, !dbg !49
  %595 = bitcast i32 %594 to <2 x half>, !dbg !49
  %596 = extractvalue { i32, i32, i32, i32 } %593, 1, !dbg !49
  %597 = bitcast i32 %596 to <2 x half>, !dbg !49
  %598 = extractvalue { i32, i32, i32, i32 } %593, 2, !dbg !49
  %599 = bitcast i32 %598 to <2 x half>, !dbg !49
  %600 = extractvalue { i32, i32, i32, i32 } %593, 3, !dbg !49
  %601 = bitcast i32 %600 to <2 x half>, !dbg !49
  %602 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %358, i1 %13) #6, !dbg !49
  %603 = extractvalue { i32, i32, i32, i32 } %602, 0, !dbg !49
  %604 = bitcast i32 %603 to <2 x half>, !dbg !49
  %605 = extractvalue { i32, i32, i32, i32 } %602, 1, !dbg !49
  %606 = bitcast i32 %605 to <2 x half>, !dbg !49
  %607 = extractvalue { i32, i32, i32, i32 } %602, 2, !dbg !49
  %608 = bitcast i32 %607 to <2 x half>, !dbg !49
  %609 = extractvalue { i32, i32, i32, i32 } %602, 3, !dbg !49
  %610 = bitcast i32 %609 to <2 x half>, !dbg !49
  %611 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %360, i1 %13) #6, !dbg !49
  %612 = extractvalue { i32, i32, i32, i32 } %611, 0, !dbg !49
  %613 = bitcast i32 %612 to <2 x half>, !dbg !49
  %614 = extractvalue { i32, i32, i32, i32 } %611, 1, !dbg !49
  %615 = bitcast i32 %614 to <2 x half>, !dbg !49
  %616 = extractvalue { i32, i32, i32, i32 } %611, 2, !dbg !49
  %617 = bitcast i32 %616 to <2 x half>, !dbg !49
  %618 = extractvalue { i32, i32, i32, i32 } %611, 3, !dbg !49
  %619 = bitcast i32 %618 to <2 x half>, !dbg !49
  %620 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %362, i1 %14) #6, !dbg !49
  %621 = extractvalue { i32, i32, i32, i32 } %620, 0, !dbg !49
  %622 = bitcast i32 %621 to <2 x half>, !dbg !49
  %623 = extractvalue { i32, i32, i32, i32 } %620, 1, !dbg !49
  %624 = bitcast i32 %623 to <2 x half>, !dbg !49
  %625 = extractvalue { i32, i32, i32, i32 } %620, 2, !dbg !49
  %626 = bitcast i32 %625 to <2 x half>, !dbg !49
  %627 = extractvalue { i32, i32, i32, i32 } %620, 3, !dbg !49
  %628 = bitcast i32 %627 to <2 x half>, !dbg !49
  %629 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %364, i1 %14) #6, !dbg !49
  %630 = extractvalue { i32, i32, i32, i32 } %629, 0, !dbg !49
  %631 = bitcast i32 %630 to <2 x half>, !dbg !49
  %632 = extractvalue { i32, i32, i32, i32 } %629, 1, !dbg !49
  %633 = bitcast i32 %632 to <2 x half>, !dbg !49
  %634 = extractvalue { i32, i32, i32, i32 } %629, 2, !dbg !49
  %635 = bitcast i32 %634 to <2 x half>, !dbg !49
  %636 = extractvalue { i32, i32, i32, i32 } %629, 3, !dbg !49
  %637 = bitcast i32 %636 to <2 x half>, !dbg !49
  %638 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %366, i1 %14) #6, !dbg !49
  %639 = extractvalue { i32, i32, i32, i32 } %638, 0, !dbg !49
  %640 = bitcast i32 %639 to <2 x half>, !dbg !49
  %641 = extractvalue { i32, i32, i32, i32 } %638, 1, !dbg !49
  %642 = bitcast i32 %641 to <2 x half>, !dbg !49
  %643 = extractvalue { i32, i32, i32, i32 } %638, 2, !dbg !49
  %644 = bitcast i32 %643 to <2 x half>, !dbg !49
  %645 = extractvalue { i32, i32, i32, i32 } %638, 3, !dbg !49
  %646 = bitcast i32 %645 to <2 x half>, !dbg !49
  %647 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %368, i1 %14) #6, !dbg !49
  %648 = extractvalue { i32, i32, i32, i32 } %647, 0, !dbg !49
  %649 = bitcast i32 %648 to <2 x half>, !dbg !49
  %650 = extractvalue { i32, i32, i32, i32 } %647, 1, !dbg !49
  %651 = bitcast i32 %650 to <2 x half>, !dbg !49
  %652 = extractvalue { i32, i32, i32, i32 } %647, 2, !dbg !49
  %653 = bitcast i32 %652 to <2 x half>, !dbg !49
  %654 = extractvalue { i32, i32, i32, i32 } %647, 3, !dbg !49
  %655 = bitcast i32 %654 to <2 x half>, !dbg !49
  %656 = getelementptr half, ptr addrspace(1) %5, i64 %353, !dbg !50
  %657 = getelementptr half, ptr addrspace(1) %5, i64 %355, !dbg !50
  %658 = getelementptr half, ptr addrspace(1) %5, i64 %357, !dbg !50
  %659 = getelementptr half, ptr addrspace(1) %5, i64 %359, !dbg !50
  %660 = getelementptr half, ptr addrspace(1) %5, i64 %361, !dbg !50
  %661 = getelementptr half, ptr addrspace(1) %5, i64 %363, !dbg !50
  %662 = getelementptr half, ptr addrspace(1) %5, i64 %365, !dbg !50
  %663 = getelementptr half, ptr addrspace(1) %5, i64 %367, !dbg !50
  %664 = fpext <2 x half> %550 to <2 x float>, !dbg !51
  %665 = fpext <2 x half> %586 to <2 x float>, !dbg !52
  %666 = insertelement <2 x float> poison, float %.0.i25, i64 0, !dbg !53
  %667 = shufflevector <2 x float> %666, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %668 = fmul <2 x float> %667, %665, !dbg !53
  %669 = fmul <2 x float> %668, %664, !dbg !54
  %670 = fptrunc <2 x float> %669 to <2 x half>, !dbg !55
  %671 = fpext <2 x half> %552 to <2 x float>, !dbg !51
  %672 = fpext <2 x half> %588 to <2 x float>, !dbg !52
  %673 = fmul <2 x float> %667, %672, !dbg !53
  %674 = fmul <2 x float> %673, %671, !dbg !54
  %675 = fptrunc <2 x float> %674 to <2 x half>, !dbg !55
  %676 = fpext <2 x half> %554 to <2 x float>, !dbg !51
  %677 = fpext <2 x half> %590 to <2 x float>, !dbg !52
  %678 = fmul <2 x float> %667, %677, !dbg !53
  %679 = fmul <2 x float> %678, %676, !dbg !54
  %680 = fptrunc <2 x float> %679 to <2 x half>, !dbg !55
  %681 = fpext <2 x half> %556 to <2 x float>, !dbg !51
  %682 = fpext <2 x half> %592 to <2 x float>, !dbg !52
  %683 = fmul <2 x float> %667, %682, !dbg !53
  %684 = fmul <2 x float> %683, %681, !dbg !54
  %685 = fptrunc <2 x float> %684 to <2 x half>, !dbg !55
  %686 = fpext <2 x half> %559 to <2 x float>, !dbg !51
  %687 = fpext <2 x half> %595 to <2 x float>, !dbg !52
  %688 = fmul <2 x float> %667, %687, !dbg !53
  %689 = fmul <2 x float> %688, %686, !dbg !54
  %690 = fptrunc <2 x float> %689 to <2 x half>, !dbg !55
  %691 = fpext <2 x half> %561 to <2 x float>, !dbg !51
  %692 = fpext <2 x half> %597 to <2 x float>, !dbg !52
  %693 = fmul <2 x float> %667, %692, !dbg !53
  %694 = fmul <2 x float> %693, %691, !dbg !54
  %695 = fptrunc <2 x float> %694 to <2 x half>, !dbg !55
  %696 = fpext <2 x half> %563 to <2 x float>, !dbg !51
  %697 = fpext <2 x half> %599 to <2 x float>, !dbg !52
  %698 = fmul <2 x float> %667, %697, !dbg !53
  %699 = fmul <2 x float> %698, %696, !dbg !54
  %700 = fptrunc <2 x float> %699 to <2 x half>, !dbg !55
  %701 = fpext <2 x half> %565 to <2 x float>, !dbg !51
  %702 = fpext <2 x half> %601 to <2 x float>, !dbg !52
  %703 = fmul <2 x float> %667, %702, !dbg !53
  %704 = fmul <2 x float> %703, %701, !dbg !54
  %705 = fptrunc <2 x float> %704 to <2 x half>, !dbg !55
  %706 = fpext <2 x half> %568 to <2 x float>, !dbg !51
  %707 = fpext <2 x half> %604 to <2 x float>, !dbg !52
  %708 = fmul <2 x float> %667, %707, !dbg !53
  %709 = fmul <2 x float> %708, %706, !dbg !54
  %710 = fptrunc <2 x float> %709 to <2 x half>, !dbg !55
  %711 = fpext <2 x half> %570 to <2 x float>, !dbg !51
  %712 = fpext <2 x half> %606 to <2 x float>, !dbg !52
  %713 = fmul <2 x float> %667, %712, !dbg !53
  %714 = fmul <2 x float> %713, %711, !dbg !54
  %715 = fptrunc <2 x float> %714 to <2 x half>, !dbg !55
  %716 = fpext <2 x half> %572 to <2 x float>, !dbg !51
  %717 = fpext <2 x half> %608 to <2 x float>, !dbg !52
  %718 = fmul <2 x float> %667, %717, !dbg !53
  %719 = fmul <2 x float> %718, %716, !dbg !54
  %720 = fptrunc <2 x float> %719 to <2 x half>, !dbg !55
  %721 = fpext <2 x half> %574 to <2 x float>, !dbg !51
  %722 = fpext <2 x half> %610 to <2 x float>, !dbg !52
  %723 = fmul <2 x float> %667, %722, !dbg !53
  %724 = fmul <2 x float> %723, %721, !dbg !54
  %725 = fptrunc <2 x float> %724 to <2 x half>, !dbg !55
  %726 = fpext <2 x half> %577 to <2 x float>, !dbg !51
  %727 = fpext <2 x half> %613 to <2 x float>, !dbg !52
  %728 = fmul <2 x float> %667, %727, !dbg !53
  %729 = fmul <2 x float> %728, %726, !dbg !54
  %730 = fptrunc <2 x float> %729 to <2 x half>, !dbg !55
  %731 = fpext <2 x half> %579 to <2 x float>, !dbg !51
  %732 = fpext <2 x half> %615 to <2 x float>, !dbg !52
  %733 = fmul <2 x float> %667, %732, !dbg !53
  %734 = fmul <2 x float> %733, %731, !dbg !54
  %735 = fptrunc <2 x float> %734 to <2 x half>, !dbg !55
  %736 = fpext <2 x half> %581 to <2 x float>, !dbg !51
  %737 = fpext <2 x half> %617 to <2 x float>, !dbg !52
  %738 = fmul <2 x float> %667, %737, !dbg !53
  %739 = fmul <2 x float> %738, %736, !dbg !54
  %740 = fptrunc <2 x float> %739 to <2 x half>, !dbg !55
  %741 = fpext <2 x half> %583 to <2 x float>, !dbg !51
  %742 = fpext <2 x half> %619 to <2 x float>, !dbg !52
  %743 = fmul <2 x float> %667, %742, !dbg !53
  %744 = fmul <2 x float> %743, %741, !dbg !54
  %745 = fptrunc <2 x float> %744 to <2 x half>, !dbg !55
  %746 = fpext <2 x half> %622 to <2 x float>, !dbg !52
  %747 = insertelement <2 x float> poison, float %.0.i49, i64 0, !dbg !53
  %748 = shufflevector <2 x float> %747, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %749 = fmul <2 x float> %748, %746, !dbg !53
  %750 = fmul <2 x float> %749, %664, !dbg !54
  %751 = fptrunc <2 x float> %750 to <2 x half>, !dbg !55
  %752 = fpext <2 x half> %624 to <2 x float>, !dbg !52
  %753 = fmul <2 x float> %748, %752, !dbg !53
  %754 = fmul <2 x float> %753, %671, !dbg !54
  %755 = fptrunc <2 x float> %754 to <2 x half>, !dbg !55
  %756 = fpext <2 x half> %626 to <2 x float>, !dbg !52
  %757 = fmul <2 x float> %748, %756, !dbg !53
  %758 = fmul <2 x float> %757, %676, !dbg !54
  %759 = fptrunc <2 x float> %758 to <2 x half>, !dbg !55
  %760 = fpext <2 x half> %628 to <2 x float>, !dbg !52
  %761 = fmul <2 x float> %748, %760, !dbg !53
  %762 = fmul <2 x float> %761, %681, !dbg !54
  %763 = fptrunc <2 x float> %762 to <2 x half>, !dbg !55
  %764 = fpext <2 x half> %631 to <2 x float>, !dbg !52
  %765 = fmul <2 x float> %748, %764, !dbg !53
  %766 = fmul <2 x float> %765, %686, !dbg !54
  %767 = fptrunc <2 x float> %766 to <2 x half>, !dbg !55
  %768 = fpext <2 x half> %633 to <2 x float>, !dbg !52
  %769 = fmul <2 x float> %748, %768, !dbg !53
  %770 = fmul <2 x float> %769, %691, !dbg !54
  %771 = fptrunc <2 x float> %770 to <2 x half>, !dbg !55
  %772 = fpext <2 x half> %635 to <2 x float>, !dbg !52
  %773 = fmul <2 x float> %748, %772, !dbg !53
  %774 = fmul <2 x float> %773, %696, !dbg !54
  %775 = fptrunc <2 x float> %774 to <2 x half>, !dbg !55
  %776 = fpext <2 x half> %637 to <2 x float>, !dbg !52
  %777 = fmul <2 x float> %748, %776, !dbg !53
  %778 = fmul <2 x float> %777, %701, !dbg !54
  %779 = fptrunc <2 x float> %778 to <2 x half>, !dbg !55
  %780 = fpext <2 x half> %640 to <2 x float>, !dbg !52
  %781 = fmul <2 x float> %748, %780, !dbg !53
  %782 = fmul <2 x float> %781, %706, !dbg !54
  %783 = fptrunc <2 x float> %782 to <2 x half>, !dbg !55
  %784 = fpext <2 x half> %642 to <2 x float>, !dbg !52
  %785 = fmul <2 x float> %748, %784, !dbg !53
  %786 = fmul <2 x float> %785, %711, !dbg !54
  %787 = fptrunc <2 x float> %786 to <2 x half>, !dbg !55
  %788 = fpext <2 x half> %644 to <2 x float>, !dbg !52
  %789 = fmul <2 x float> %748, %788, !dbg !53
  %790 = fmul <2 x float> %789, %716, !dbg !54
  %791 = fptrunc <2 x float> %790 to <2 x half>, !dbg !55
  %792 = fpext <2 x half> %646 to <2 x float>, !dbg !52
  %793 = fmul <2 x float> %748, %792, !dbg !53
  %794 = fmul <2 x float> %793, %721, !dbg !54
  %795 = fptrunc <2 x float> %794 to <2 x half>, !dbg !55
  %796 = fpext <2 x half> %649 to <2 x float>, !dbg !52
  %797 = fmul <2 x float> %748, %796, !dbg !53
  %798 = fmul <2 x float> %797, %726, !dbg !54
  %799 = fptrunc <2 x float> %798 to <2 x half>, !dbg !55
  %800 = fpext <2 x half> %651 to <2 x float>, !dbg !52
  %801 = fmul <2 x float> %748, %800, !dbg !53
  %802 = fmul <2 x float> %801, %731, !dbg !54
  %803 = fptrunc <2 x float> %802 to <2 x half>, !dbg !55
  %804 = fpext <2 x half> %653 to <2 x float>, !dbg !52
  %805 = fmul <2 x float> %748, %804, !dbg !53
  %806 = fmul <2 x float> %805, %736, !dbg !54
  %807 = fptrunc <2 x float> %806 to <2 x half>, !dbg !55
  %808 = fpext <2 x half> %655 to <2 x float>, !dbg !52
  %809 = fmul <2 x float> %748, %808, !dbg !53
  %810 = fmul <2 x float> %809, %741, !dbg !54
  %811 = fptrunc <2 x float> %810 to <2 x half>, !dbg !55
  %812 = bitcast <2 x half> %670 to i32, !dbg !55
  %813 = bitcast <2 x half> %675 to i32, !dbg !55
  %814 = bitcast <2 x half> %680 to i32, !dbg !55
  %815 = bitcast <2 x half> %685 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %812, i32 %813, i32 %814, i32 %815, ptr addrspace(1) %656, i1 %13) #6, !dbg !55
  %816 = bitcast <2 x half> %690 to i32, !dbg !55
  %817 = bitcast <2 x half> %695 to i32, !dbg !55
  %818 = bitcast <2 x half> %700 to i32, !dbg !55
  %819 = bitcast <2 x half> %705 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %816, i32 %817, i32 %818, i32 %819, ptr addrspace(1) %657, i1 %13) #6, !dbg !55
  %820 = bitcast <2 x half> %710 to i32, !dbg !55
  %821 = bitcast <2 x half> %715 to i32, !dbg !55
  %822 = bitcast <2 x half> %720 to i32, !dbg !55
  %823 = bitcast <2 x half> %725 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %820, i32 %821, i32 %822, i32 %823, ptr addrspace(1) %658, i1 %13) #6, !dbg !55
  %824 = bitcast <2 x half> %730 to i32, !dbg !55
  %825 = bitcast <2 x half> %735 to i32, !dbg !55
  %826 = bitcast <2 x half> %740 to i32, !dbg !55
  %827 = bitcast <2 x half> %745 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %824, i32 %825, i32 %826, i32 %827, ptr addrspace(1) %659, i1 %13) #6, !dbg !55
  %828 = bitcast <2 x half> %751 to i32, !dbg !55
  %829 = bitcast <2 x half> %755 to i32, !dbg !55
  %830 = bitcast <2 x half> %759 to i32, !dbg !55
  %831 = bitcast <2 x half> %763 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %828, i32 %829, i32 %830, i32 %831, ptr addrspace(1) %660, i1 %14) #6, !dbg !55
  %832 = bitcast <2 x half> %767 to i32, !dbg !55
  %833 = bitcast <2 x half> %771 to i32, !dbg !55
  %834 = bitcast <2 x half> %775 to i32, !dbg !55
  %835 = bitcast <2 x half> %779 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %832, i32 %833, i32 %834, i32 %835, ptr addrspace(1) %661, i1 %14) #6, !dbg !55
  %836 = bitcast <2 x half> %783 to i32, !dbg !55
  %837 = bitcast <2 x half> %787 to i32, !dbg !55
  %838 = bitcast <2 x half> %791 to i32, !dbg !55
  %839 = bitcast <2 x half> %795 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %836, i32 %837, i32 %838, i32 %839, ptr addrspace(1) %662, i1 %14) #6, !dbg !55
  %840 = bitcast <2 x half> %799 to i32, !dbg !55
  %841 = bitcast <2 x half> %803 to i32, !dbg !55
  %842 = bitcast <2 x half> %807 to i32, !dbg !55
  %843 = bitcast <2 x half> %811 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %840, i32 %841, i32 %842, i32 %843, ptr addrspace(1) %663, i1 %14) #6, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py", directory: "/tmp/torchinductor_root/3k")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 22, column: 28, scope: !10)
!12 = !DILocation(line: 22, column: 33, scope: !10)
!13 = !DILocation(line: 23, column: 23, scope: !10)
!14 = !DILocation(line: 24, column: 21, scope: !10)
!15 = !DILocation(line: 28, column: 30, scope: !10)
!16 = !DILocation(line: 28, column: 35, scope: !10)
!17 = !DILocation(line: 37, column: 22, scope: !10)
!18 = !DILocation(line: 38, column: 22, scope: !10)
!19 = !DILocation(line: 39, column: 36, scope: !10)
!20 = !DILocation(line: 40, column: 41, scope: !10)
!21 = !DILocation(line: 40, column: 59, scope: !10)
!22 = !DILocation(line: 40, column: 69, scope: !10)
!23 = !DILocation(line: 23, column: 44, scope: !10)
!24 = !DILocation(line: 25, column: 37, scope: !10)
!25 = !DILocation(line: 41, column: 46, scope: !10)
!26 = !DILocation(line: 41, column: 41, scope: !10)
!27 = !DILocation(line: 41, column: 34, scope: !10)
!28 = !DILocation(line: 41, column: 53, scope: !10)
!29 = !DILocation(line: 41, column: 115, scope: !10)
!30 = !DILocation(line: 43, column: 22, scope: !10)
!31 = !DILocation(line: 47, column: 41, scope: !10)
!32 = !DILocation(line: 47, column: 36, scope: !10)
!33 = !DILocation(line: 47, column: 29, scope: !10)
!34 = !DILocation(line: 47, column: 52, scope: !10)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !39)
!36 = distinct !DILexicalBlockFile(scope: !38, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!38 = distinct !DILexicalBlockFile(scope: !10, file: !37, discriminator: 0)
!39 = !DILocation(line: 48, column: 27, scope: !10)
!40 = !DILocation(line: 286, column: 36, scope: !38, inlinedAt: !39)
!41 = !DILocation(line: 53, column: 28, scope: !10)
!42 = !DILocation(line: 50, column: 21, scope: !10)
!43 = !DILocation(line: 52, column: 20, scope: !10)
!44 = !DILocation(line: 54, column: 4, scope: !10)
!45 = !DILocation(line: 55, column: 28, scope: !10)
!46 = !DILocation(line: 55, column: 40, scope: !10)
!47 = !DILocation(line: 62, column: 35, scope: !10)
!48 = !DILocation(line: 62, column: 42, scope: !10)
!49 = !DILocation(line: 63, column: 53, scope: !10)
!50 = !DILocation(line: 68, column: 29, scope: !10)
!51 = !DILocation(line: 62, column: 95, scope: !10)
!52 = !DILocation(line: 63, column: 115, scope: !10)
!53 = !DILocation(line: 65, column: 24, scope: !10)
!54 = !DILocation(line: 67, column: 24, scope: !10)
!55 = !DILocation(line: 68, column: 53, scope: !10)
!56 = !DILocation(line: 56, column: 4, scope: !10)
