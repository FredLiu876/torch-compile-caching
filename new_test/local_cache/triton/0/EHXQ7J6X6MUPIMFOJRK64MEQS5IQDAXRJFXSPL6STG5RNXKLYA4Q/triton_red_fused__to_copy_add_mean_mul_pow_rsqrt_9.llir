; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 6, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = lshr i32 %11, 3, !dbg !11
  %13 = and i32 %12, 63, !dbg !11
  %14 = or disjoint i32 %13, %10, !dbg !12
  %15 = icmp slt i32 %14, %5, !dbg !13
  %16 = shl i32 %11, 3, !dbg !14
  %17 = and i32 %16, 56, !dbg !14
  %18 = shl i32 %14, 12, !dbg !15
  %19 = or disjoint i32 %18, %17
  %20 = insertelement <8 x i1> poison, i1 %15, i64 0, !dbg !16
  %21 = shufflevector <8 x i1> %20, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !16
  br label %22, !dbg !17

22:                                               ; preds = %8, %22
  %23 = phi i32 [ 0, %8 ], [ %99, %22 ]
  %24 = phi <8 x float> [ zeroinitializer, %8 ], [ %70, %22 ]
  %25 = or i32 %19, %23, !dbg !18
  %26 = sext i32 %25 to i64, !dbg !19
  %27 = getelementptr half, ptr addrspace(1) %2, i64 %26, !dbg !19
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %27, i1 %15) #5, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !20
  %30 = bitcast i32 %29 to <2 x half>, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !20
  %32 = bitcast i32 %31 to <2 x half>, !dbg !20
  %33 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !20
  %34 = bitcast i32 %33 to <2 x half>, !dbg !20
  %35 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !20
  %36 = bitcast i32 %35 to <2 x half>, !dbg !20
  %37 = getelementptr half, ptr addrspace(1) %0, i64 %26, !dbg !21
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %37, i1 %15) #5, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !22
  %40 = bitcast i32 %39 to <2 x half>, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !22
  %42 = bitcast i32 %41 to <2 x half>, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !22
  %44 = bitcast i32 %43 to <2 x half>, !dbg !22
  %45 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !22
  %46 = bitcast i32 %45 to <2 x half>, !dbg !22
  %47 = shufflevector <2 x half> %30, <2 x half> %32, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %48 = shufflevector <2 x half> %34, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %49 = shufflevector <8 x half> %47, <8 x half> %48, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !23
  %50 = shufflevector <2 x half> %34, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %51 = shufflevector <8 x half> %49, <8 x half> %50, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !23
  %52 = shufflevector <2 x half> %36, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %53 = shufflevector <8 x half> %51, <8 x half> %52, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !23
  %54 = shufflevector <2 x half> %36, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %55 = shufflevector <8 x half> %53, <8 x half> %54, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !23
  %56 = fpext <8 x half> %55 to <8 x float>, !dbg !23
  %57 = shufflevector <2 x half> %40, <2 x half> %42, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %58 = shufflevector <2 x half> %44, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %59 = shufflevector <8 x half> %57, <8 x half> %58, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !24
  %60 = shufflevector <2 x half> %44, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %61 = shufflevector <8 x half> %59, <8 x half> %60, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !24
  %62 = shufflevector <2 x half> %46, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %63 = shufflevector <8 x half> %61, <8 x half> %62, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !24
  %64 = shufflevector <2 x half> %46, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %65 = shufflevector <8 x half> %63, <8 x half> %64, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !24
  %66 = fpext <8 x half> %65 to <8 x float>, !dbg !24
  %67 = fadd <8 x float> %56, %66, !dbg !25
  %68 = fmul <8 x float> %67, %67, !dbg !26
  %69 = fadd <8 x float> %24, %68, !dbg !27
  %70 = select <8 x i1> %21, <8 x float> %69, <8 x float> %24, !dbg !16
  %71 = extractelement <8 x float> %67, i64 0, !dbg !28
  %72 = fptrunc float %71 to half, !dbg !28
  %73 = extractelement <8 x float> %67, i64 1, !dbg !28
  %74 = fptrunc float %73 to half, !dbg !28
  %75 = extractelement <8 x float> %67, i64 2, !dbg !28
  %76 = fptrunc float %75 to half, !dbg !28
  %77 = extractelement <8 x float> %67, i64 3, !dbg !28
  %78 = fptrunc float %77 to half, !dbg !28
  %79 = extractelement <8 x float> %67, i64 4, !dbg !28
  %80 = fptrunc float %79 to half, !dbg !28
  %81 = extractelement <8 x float> %67, i64 5, !dbg !28
  %82 = fptrunc float %81 to half, !dbg !28
  %83 = extractelement <8 x float> %67, i64 6, !dbg !28
  %84 = fptrunc float %83 to half, !dbg !28
  %85 = extractelement <8 x float> %67, i64 7, !dbg !28
  %86 = fptrunc float %85 to half, !dbg !28
  %87 = insertelement <2 x half> poison, half %72, i64 0, !dbg !28
  %88 = insertelement <2 x half> %87, half %74, i64 1, !dbg !28
  %89 = bitcast <2 x half> %88 to i32, !dbg !28
  %90 = insertelement <2 x half> poison, half %76, i64 0, !dbg !28
  %91 = insertelement <2 x half> %90, half %78, i64 1, !dbg !28
  %92 = bitcast <2 x half> %91 to i32, !dbg !28
  %93 = insertelement <2 x half> poison, half %80, i64 0, !dbg !28
  %94 = insertelement <2 x half> %93, half %82, i64 1, !dbg !28
  %95 = bitcast <2 x half> %94 to i32, !dbg !28
  %96 = insertelement <2 x half> poison, half %84, i64 0, !dbg !28
  %97 = insertelement <2 x half> %96, half %86, i64 1, !dbg !28
  %98 = bitcast <2 x half> %97 to i32, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %89, i32 %92, i32 %95, i32 %98, ptr addrspace(1) %37, i1 %15) #5, !dbg !28
  %99 = add nuw nsw i32 %23, 64, !dbg !17
  %100 = icmp samesign ult i32 %23, 4032, !dbg !17
  br i1 %100, label %22, label %101, !dbg !17

101:                                              ; preds = %22
  %102 = and i32 %11, 63, !dbg !11
  %103 = or disjoint i32 %10, %102, !dbg !12
  %104 = icmp slt i32 %103, %5, !dbg !13
  %shift = shufflevector <8 x float> %70, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %105 = fadd <8 x float> %70, %shift, !dbg !29
  %shift49 = shufflevector <8 x float> %70, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %106 = fadd <8 x float> %shift49, %105, !dbg !29
  %shift50 = shufflevector <8 x float> %70, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %107 = fadd <8 x float> %shift50, %106, !dbg !29
  %shift51 = shufflevector <8 x float> %70, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %108 = fadd <8 x float> %shift51, %107, !dbg !29
  %shift52 = shufflevector <8 x float> %70, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %109 = fadd <8 x float> %shift52, %108, !dbg !29
  %shift53 = shufflevector <8 x float> %70, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %110 = fadd <8 x float> %shift53, %109, !dbg !29
  %shift54 = shufflevector <8 x float> %70, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %111 = fadd <8 x float> %shift54, %110, !dbg !29
  %112 = extractelement <8 x float> %111, i64 0, !dbg !29
  %113 = bitcast float %112 to i32, !dbg !34
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 4, i32 31), !dbg !34
  %115 = bitcast i32 %114 to float, !dbg !34
  %116 = fadd float %112, %115, !dbg !29
  %117 = bitcast float %116 to i32, !dbg !34
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 2, i32 31), !dbg !34
  %119 = bitcast i32 %118 to float, !dbg !34
  %120 = fadd float %116, %119, !dbg !29
  %121 = bitcast float %120 to i32, !dbg !34
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 1, i32 31), !dbg !34
  %123 = bitcast i32 %122 to float, !dbg !34
  %124 = fadd float %120, %123, !dbg !29
  %125 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %13, !dbg !35
  %126 = bitcast float %124 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 true) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %127 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %102, !dbg !35
  %128 = load float, ptr addrspace(3) %127, align 4, !dbg !35
  %129 = tail call float @llvm.nvvm.div.full(float %128, float 4.096000e+03), !dbg !36
  %130 = tail call float @llvm.nvvm.div.full(float %124, float 4.096000e+03), !dbg !36
  %131 = fadd float %129, 0x3EE4F8B580000000, !dbg !37
  %132 = fadd float %130, 0x3EE4F8B580000000, !dbg !37
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i = icmp eq i32 %133, 0, !dbg !35
  br i1 %.not.i, label %136, label %134, !dbg !35

134:                                              ; preds = %101
  %135 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %131), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

136:                                              ; preds = %101
  %137 = tail call float @llvm.nvvm.rsqrt.approx.f(float %131), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

__nv_rsqrtf.exit:                                 ; preds = %134, %136
  %.0.i = phi float [ %135, %134 ], [ %137, %136 ], !dbg !35
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i25 = icmp eq i32 %145, 0, !dbg !35
  br i1 %.not.i25, label %148, label %146, !dbg !35

146:                                              ; preds = %__nv_rsqrtf.exit
  %147 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %132), !dbg !35
  br label %__nv_rsqrtf.exit27, !dbg !35

148:                                              ; preds = %__nv_rsqrtf.exit
  %149 = tail call float @llvm.nvvm.rsqrt.approx.f(float %132), !dbg !35
  br label %__nv_rsqrtf.exit27, !dbg !35

__nv_rsqrtf.exit27:                               ; preds = %146, %148
  %.0.i26 = phi float [ %147, %146 ], [ %149, %148 ], !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %150 = sext i32 %103 to i64, !dbg !39
  %151 = getelementptr float, ptr addrspace(1) %1, i64 %150, !dbg !39
  %152 = and i32 %11, 448, !dbg !40
  %153 = icmp eq i32 %152, 0, !dbg !40
  %154 = bitcast float %.0.i to i32, !dbg !40
  %155 = and i1 %153, %104, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %154, ptr addrspace(1) %151, i1 %155) #5, !dbg !40
  %156 = zext nneg i32 %17 to i64, !dbg !41
  %157 = insertelement <2 x float> poison, float %.0.i26, i64 0, !dbg !42
  %158 = shufflevector <2 x float> %157, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !42
  br label %159, !dbg !41

159:                                              ; preds = %__nv_rsqrtf.exit27, %159
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit27 ], [ %indvars.iv.next, %159 ]
  %160 = or disjoint i64 %indvars.iv, %156, !dbg !43
  %161 = getelementptr half, ptr addrspace(1) %3, i64 %160, !dbg !44
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %161, i1 true) #5, !dbg !45
  %163 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !45
  %164 = bitcast i32 %163 to <2 x half>, !dbg !45
  %165 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !45
  %166 = bitcast i32 %165 to <2 x half>, !dbg !45
  %167 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !45
  %168 = bitcast i32 %167 to <2 x half>, !dbg !45
  %169 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !45
  %170 = bitcast i32 %169 to <2 x half>, !dbg !45
  %171 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %19, %171
  %172 = sext i32 %.reass to i64, !dbg !46
  %173 = getelementptr half, ptr addrspace(1) %0, i64 %172, !dbg !46
  %174 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %173, i1 %15) #5, !dbg !47
  %175 = extractvalue { i32, i32, i32, i32 } %174, 0, !dbg !47
  %176 = bitcast i32 %175 to <2 x half>, !dbg !47
  %177 = extractvalue { i32, i32, i32, i32 } %174, 1, !dbg !47
  %178 = bitcast i32 %177 to <2 x half>, !dbg !47
  %179 = extractvalue { i32, i32, i32, i32 } %174, 2, !dbg !47
  %180 = bitcast i32 %179 to <2 x half>, !dbg !47
  %181 = extractvalue { i32, i32, i32, i32 } %174, 3, !dbg !47
  %182 = bitcast i32 %181 to <2 x half>, !dbg !47
  %183 = getelementptr half, ptr addrspace(1) %4, i64 %172, !dbg !48
  %184 = fpext <2 x half> %164 to <2 x float>, !dbg !49
  %185 = fpext <2 x half> %176 to <2 x float>, !dbg !50
  %186 = fmul <2 x float> %158, %185, !dbg !42
  %187 = fmul <2 x float> %186, %184, !dbg !51
  %188 = fptrunc <2 x float> %187 to <2 x half>, !dbg !52
  %189 = fpext <2 x half> %166 to <2 x float>, !dbg !49
  %190 = fpext <2 x half> %178 to <2 x float>, !dbg !50
  %191 = fmul <2 x float> %158, %190, !dbg !42
  %192 = fmul <2 x float> %191, %189, !dbg !51
  %193 = fptrunc <2 x float> %192 to <2 x half>, !dbg !52
  %194 = fpext <2 x half> %168 to <2 x float>, !dbg !49
  %195 = fpext <2 x half> %180 to <2 x float>, !dbg !50
  %196 = fmul <2 x float> %158, %195, !dbg !42
  %197 = fmul <2 x float> %196, %194, !dbg !51
  %198 = fptrunc <2 x float> %197 to <2 x half>, !dbg !52
  %199 = fpext <2 x half> %170 to <2 x float>, !dbg !49
  %200 = fpext <2 x half> %182 to <2 x float>, !dbg !50
  %201 = fmul <2 x float> %158, %200, !dbg !42
  %202 = fmul <2 x float> %201, %199, !dbg !51
  %203 = fptrunc <2 x float> %202 to <2 x half>, !dbg !52
  %204 = bitcast <2 x half> %188 to i32, !dbg !52
  %205 = bitcast <2 x half> %193 to i32, !dbg !52
  %206 = bitcast <2 x half> %198 to i32, !dbg !52
  %207 = bitcast <2 x half> %203 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %204, i32 %205, i32 %206, i32 %207, ptr addrspace(1) %183, i1 %15) #5, !dbg !52
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !41
  %208 = icmp samesign ult i64 %indvars.iv, 4032, !dbg !41
  br i1 %208, label %159, label %209, !dbg !41

209:                                              ; preds = %159
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clyhrh4d6xaqs2dxaqhwkhrgdrw7d6mkpbykg5u5uxw52daopsjs.py", directory: "./local_cache/ly")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 42, column: 48, scope: !6)
!17 = !DILocation(line: 29, column: 40, scope: !6)
!18 = !DILocation(line: 35, column: 41, scope: !6)
!19 = !DILocation(line: 35, column: 34, scope: !6)
!20 = !DILocation(line: 35, column: 51, scope: !6)
!21 = !DILocation(line: 36, column: 38, scope: !6)
!22 = !DILocation(line: 36, column: 55, scope: !6)
!23 = !DILocation(line: 35, column: 113, scope: !6)
!24 = !DILocation(line: 36, column: 117, scope: !6)
!25 = !DILocation(line: 37, column: 22, scope: !6)
!26 = !DILocation(line: 39, column: 22, scope: !6)
!27 = !DILocation(line: 41, column: 23, scope: !6)
!28 = !DILocation(line: 43, column: 55, scope: !6)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !33)
!30 = distinct !DILexicalBlockFile(scope: !32, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!32 = distinct !DILexicalBlockFile(scope: !6, file: !31, discriminator: 0)
!33 = !DILocation(line: 44, column: 25, scope: !6)
!34 = !DILocation(line: 286, column: 36, scope: !32, inlinedAt: !33)
!35 = !DILocation(line: 49, column: 28, scope: !6)
!36 = !DILocation(line: 46, column: 19, scope: !6)
!37 = !DILocation(line: 48, column: 19, scope: !6)
!38 = !DILocation(line: 50, column: 4, scope: !6)
!39 = !DILocation(line: 51, column: 28, scope: !6)
!40 = !DILocation(line: 51, column: 40, scope: !6)
!41 = !DILocation(line: 52, column: 40, scope: !6)
!42 = !DILocation(line: 61, column: 24, scope: !6)
!43 = !DILocation(line: 53, column: 31, scope: !6)
!44 = !DILocation(line: 58, column: 35, scope: !6)
!45 = !DILocation(line: 58, column: 42, scope: !6)
!46 = !DILocation(line: 59, column: 39, scope: !6)
!47 = !DILocation(line: 59, column: 56, scope: !6)
!48 = !DILocation(line: 64, column: 29, scope: !6)
!49 = !DILocation(line: 58, column: 95, scope: !6)
!50 = !DILocation(line: 59, column: 118, scope: !6)
!51 = !DILocation(line: 63, column: 24, scope: !6)
!52 = !DILocation(line: 64, column: 53, scope: !6)
!53 = !DILocation(line: 52, column: 4, scope: !6)
