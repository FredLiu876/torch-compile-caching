; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@__cudart_i2opi_f = internal unnamed_addr addrspace(1) constant [6 x i32] [i32 1011060801, i32 -614296167, i32 -181084736, i32 -64530479, i32 1313084713, i32 -1560706194], align 4

define ptx_kernel void @triton_poi_fused_mul_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4, ptr addrspace(1) readnone captures(none) %5) local_unnamed_addr !dbg !6 {
  %result.i.i.i.i = alloca [7 x i32], align 4
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %8 = shl i32 %7, 7, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = and i32 %9, 127, !dbg !11
  %11 = or disjoint i32 %8, %10, !dbg !12
  %12 = icmp slt i32 %11, %4, !dbg !13
  %13 = sdiv i32 %11, 128, !dbg !14
  %14 = mul i32 %13, 128, !dbg !15
  %.decomposed = sub i32 %11, %14, !dbg !15
  %15 = sdiv i32 %11, 1024, !dbg !16
  %16 = shl i32 %13, 9, !dbg !17
  %17 = add i32 %16, %.decomposed, !dbg !18
  %18 = sext i32 %17 to i64, !dbg !19
  %19 = getelementptr half, ptr addrspace(1) %0, i64 %18, !dbg !19
  %20 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %19, i1 %12) #4, !dbg !20
  %21 = add i32 %17, 128, !dbg !21
  %22 = sext i32 %21 to i64, !dbg !22
  %23 = getelementptr half, ptr addrspace(1) %0, i64 %22, !dbg !22
  %24 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %23, i1 %12) #4, !dbg !23
  %25 = add i32 %17, 256, !dbg !24
  %26 = sext i32 %25 to i64, !dbg !25
  %27 = getelementptr half, ptr addrspace(1) %0, i64 %26, !dbg !25
  %28 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %27, i1 %12) #4, !dbg !26
  %29 = add i32 %17, 384, !dbg !27
  %30 = sext i32 %29 to i64, !dbg !28
  %31 = getelementptr half, ptr addrspace(1) %0, i64 %30, !dbg !28
  %32 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %31, i1 %12) #4, !dbg !29
  %.lhs.trunc = trunc nsw i32 %.decomposed to i8, !dbg !30
  %33 = srem i8 %.lhs.trunc, 64, !dbg !30
  %.sext = sext i8 %33 to i32, !dbg !30
  %34 = mul i32 %3, %.sext, !dbg !31
  %35 = add i32 %34, %15, !dbg !32
  %36 = sext i32 %35 to i64, !dbg !33
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !33
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %12) #4, !dbg !34
  %39 = bitcast i32 %38 to float, !dbg !34
  call void @llvm.lifetime.start.p0(i64 28, ptr nonnull %result.i.i.i.i), !dbg !35
  %40 = fmul float %39, 0x3FE45F3060000000, !dbg !35
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %41, 0, !dbg !35
  %42 = tail call i32 @llvm.nvvm.f2i.rn.ftz(float %40) #4, !dbg !35
  %43 = tail call i32 @llvm.nvvm.f2i.rn(float %40) #4, !dbg !35
  %.01.i = select i1 %.not.i, i32 %43, i32 %42, !dbg !35
  %44 = sitofp i32 %.01.i to float, !dbg !35
  %45 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not15.i = icmp eq i32 %45, 0, !dbg !35
  %46 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %44, float 0xBFF921FB40000000, float %39) #4, !dbg !35
  %47 = tail call float @llvm.nvvm.fma.rn.f(float %44, float 0xBFF921FB40000000, float %39) #4, !dbg !35
  %.02.i = select i1 %.not15.i, float %47, float %46, !dbg !35
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not16.i = icmp eq i32 %48, 0, !dbg !35
  %49 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %44, float 0xBE74442D00000000, float %.02.i) #4, !dbg !35
  %50 = tail call float @llvm.nvvm.fma.rn.f(float %44, float 0xBE74442D00000000, float %.02.i) #4, !dbg !35
  %.03.i = select i1 %.not16.i, float %50, float %49, !dbg !35
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not17.i = icmp eq i32 %51, 0, !dbg !35
  %52 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %44, float 0xBCF84698A0000000, float %.03.i) #4, !dbg !35
  %53 = tail call float @llvm.nvvm.fma.rn.f(float %44, float 0xBCF84698A0000000, float %.03.i) #4, !dbg !35
  %.04.i = select i1 %.not17.i, float %53, float %52, !dbg !35
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not18.i = icmp eq i32 %54, 0, !dbg !35
  %55 = tail call float @llvm.nvvm.fabs.ftz.f(float %39) #4, !dbg !35
  %56 = tail call float @llvm.nvvm.fabs.f(float %39) #4, !dbg !35
  %.06.i = select i1 %.not18.i, float %56, float %55, !dbg !35
  %57 = fcmp ult float %.06.i, 1.056150e+05, !dbg !35
  br i1 %57, label %__internal_trig_reduction_kernel.exit.i.i, label %__nv_isinff.exit.i.i.i, !dbg !35

__nv_isinff.exit.i.i.i:                           ; preds = %6
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not19.i = icmp eq i32 %58, 0, !dbg !35
  %.07.i = select i1 %.not19.i, float %56, float %55, !dbg !35
  %59 = fcmp oeq float %.07.i, 0x7FF0000000000000, !dbg !35
  br i1 %59, label %__nv_fmul_rn.exit.i.i.i, label %63, !dbg !35

__nv_fmul_rn.exit.i.i.i:                          ; preds = %__nv_isinff.exit.i.i.i
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not27.i = icmp eq i32 %60, 0, !dbg !35
  %61 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %39, float 0.000000e+00) #4, !dbg !35
  %62 = tail call float @llvm.nvvm.mul.rn.f(float %39, float 0.000000e+00) #4, !dbg !35
  %.08.i = select i1 %.not27.i, float %62, float %61, !dbg !35
  br label %__internal_trig_reduction_kernel.exit.i.i, !dbg !35

63:                                               ; preds = %__nv_isinff.exit.i.i.i
  %64 = lshr i32 %38, 23, !dbg !35
  %65 = and i32 %64, 224, !dbg !35
  %66 = add nsw i32 %65, -128, !dbg !35
  %67 = shl i32 %38, 8, !dbg !35
  %68 = or i32 %67, -2147483648, !dbg !35
  %69 = lshr exact i32 %66, 5, !dbg !35
  br label %70, !dbg !35

70:                                               ; preds = %63, %70
  %indvars.iv = phi i64 [ 0, %63 ], [ %indvars.iv.next, %70 ]
  %hi.i.i.i.0.i1 = phi i32 [ 0, %63 ], [ %75, %70 ]
  %71 = getelementptr inbounds nuw [6 x i32], ptr addrspace(1) @__cudart_i2opi_f, i64 0, i64 %indvars.iv, !dbg !35
  %72 = load i32, ptr addrspace(1) %71, align 4, !dbg !35
  %73 = tail call { i32, i32 } asm "{\0A\09mad.lo.cc.u32   $0, $2, $3, $4;\0A\09madc.hi.u32     $1, $2, $3,  0;\0A\09}", "=r,=r,r,r,r"(i32 %72, i32 %68, i32 %hi.i.i.i.0.i1) #5, !dbg !35, !srcloc !36
  %74 = extractvalue { i32, i32 } %73, 0, !dbg !35
  %75 = extractvalue { i32, i32 } %73, 1, !dbg !35
  %76 = getelementptr inbounds nuw [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %indvars.iv, !dbg !35
  store i32 %74, ptr %76, align 4, !dbg !35
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !35
  %exitcond.not = icmp eq i64 %indvars.iv.next, 6, !dbg !35
  br i1 %exitcond.not, label %77, label %70, !dbg !35, !llvm.loop !37

77:                                               ; preds = %70
  %78 = getelementptr inbounds nuw i8, ptr %result.i.i.i.i, i64 24, !dbg !35
  store i32 %75, ptr %78, align 4, !dbg !35
  %79 = sub nsw i32 6, %69, !dbg !35
  %80 = sext i32 %79 to i64, !dbg !35
  %81 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %80, !dbg !35
  %82 = load i32, ptr %81, align 4, !dbg !35
  %83 = sub nsw i32 5, %69, !dbg !35
  %84 = sext i32 %83 to i64, !dbg !35
  %85 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %84, !dbg !35
  %86 = load i32, ptr %85, align 4, !dbg !35
  %87 = freeze i32 %86, !dbg !35
  %88 = and i32 %38, 260046848, !dbg !35
  %.not20.i = icmp eq i32 %88, 0, !dbg !35
  br i1 %.not20.i, label %__internal_trig_reduction_slowpath.exit.i.i.i, label %89, !dbg !35

89:                                               ; preds = %77
  %90 = sub nsw i32 4, %69, !dbg !35
  %91 = sext i32 %90 to i64, !dbg !35
  %92 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %91, !dbg !35
  %93 = load i32, ptr %92, align 4, !dbg !35
  %94 = tail call i32 @llvm.fshl.i32(i32 %87, i32 %93, i32 %64), !dbg !35
  br label %__internal_trig_reduction_slowpath.exit.i.i.i, !dbg !35

__internal_trig_reduction_slowpath.exit.i.i.i:    ; preds = %89, %77
  %lo.i.i.i.0.i = phi i32 [ %94, %89 ], [ %87, %77 ], !dbg !35
  %95 = tail call i32 @llvm.fshl.i32(i32 %82, i32 %87, i32 %64), !dbg !35
  %96 = lshr i32 %95, 30, !dbg !35
  %97 = tail call i32 @llvm.fshl.i32(i32 %95, i32 %lo.i.i.i.0.i, i32 2), !dbg !35
  %98 = shl i32 %lo.i.i.i.0.i, 2, !dbg !35
  %99 = lshr i32 %97, 31, !dbg !35
  %100 = add nuw nsw i32 %99, %96, !dbg !35
  %101 = sub nsw i32 0, %100, !dbg !35
  %.not2123.i = icmp slt i32 %38, 0, !dbg !35
  %spec.select.i = select i1 %.not2123.i, i32 %101, i32 %100, !dbg !35
  %102 = xor i32 %97, %38, !dbg !35
  %.lobit.i = ashr i32 %97, 31, !dbg !35
  %hi.i.i.i.2.i = xor i32 %.lobit.i, %97, !dbg !35
  %lo.i.i.i.1.i = xor i32 %.lobit.i, %98, !dbg !35
  %103 = zext i32 %hi.i.i.i.2.i to i64, !dbg !35
  %104 = shl nuw i64 %103, 32, !dbg !35
  %105 = zext i32 %lo.i.i.i.1.i to i64, !dbg !35
  %106 = or disjoint i64 %104, %105, !dbg !35
  %107 = sitofp i64 %106 to double, !dbg !35
  %108 = fmul double %107, 0x3BF921FB54442D19, !dbg !35
  %109 = fptrunc double %108 to float, !dbg !35
  %110 = fneg float %109, !dbg !35
  %.not2526.i = icmp slt i32 %102, 0, !dbg !35
  %r.i.i.i.0.i = select i1 %.not2526.i, float %110, float %109, !dbg !35
  br label %__internal_trig_reduction_kernel.exit.i.i, !dbg !35

__internal_trig_reduction_kernel.exit.i.i:        ; preds = %__internal_trig_reduction_slowpath.exit.i.i.i, %__nv_fmul_rn.exit.i.i.i, %6
  %i.i.1.i = phi i32 [ %.01.i, %6 ], [ 0, %__nv_fmul_rn.exit.i.i.i ], [ %spec.select.i, %__internal_trig_reduction_slowpath.exit.i.i.i ], !dbg !35
  %t.i.i.1.i = phi float [ %.04.i, %6 ], [ %.08.i, %__nv_fmul_rn.exit.i.i.i ], [ %r.i.i.i.0.i, %__internal_trig_reduction_slowpath.exit.i.i.i ], !dbg !35
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not28.i = icmp eq i32 %111, 0, !dbg !35
  %112 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %t.i.i.1.i, float %t.i.i.1.i) #4, !dbg !35
  %113 = tail call float @llvm.nvvm.mul.rn.f(float %t.i.i.1.i, float %t.i.i.1.i) #4, !dbg !35
  %.011.i = select i1 %.not28.i, float %113, float %112, !dbg !35
  %114 = and i32 %i.i.1.i, 1, !dbg !35
  %.not29.i = icmp eq i32 %114, 0, !dbg !35
  %115 = select i1 %.not29.i, float %t.i.i.1.i, float 1.000000e+00, !dbg !35
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not30.i = icmp eq i32 %116, 0, !dbg !35
  %117 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %115, float 0.000000e+00) #4, !dbg !35
  %118 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %115, float 0.000000e+00) #4, !dbg !35
  %.012.i = select i1 %.not30.i, float %118, float %117, !dbg !35
  br i1 %.not29.i, label %__internal_fmad.exit2.i.i.i, label %__internal_fmad.exit1.i.i.i, !dbg !35

__internal_fmad.exit1.i.i.i:                      ; preds = %__internal_trig_reduction_kernel.exit.i.i
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not31.i = icmp eq i32 %119, 0, !dbg !35
  %120 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3EF9758000000000, float %.011.i, float 0xBF56C0FDA0000000) #4, !dbg !35
  %121 = tail call float @llvm.nvvm.fma.rn.f(float 0x3EF9758000000000, float %.011.i, float 0xBF56C0FDA0000000) #4, !dbg !35
  %.013.i = select i1 %.not31.i, float %121, float %120, !dbg !35
  br label %__internal_fmad.exit2.i.i.i, !dbg !35

__internal_fmad.exit2.i.i.i:                      ; preds = %__internal_fmad.exit1.i.i.i, %__internal_trig_reduction_kernel.exit.i.i
  %122 = phi float [ 0xBFDFFFFFE0000000, %__internal_fmad.exit1.i.i.i ], [ 0xBFC5555500000000, %__internal_trig_reduction_kernel.exit.i.i ], !dbg !35
  %123 = phi float [ 0x3FA5555760000000, %__internal_fmad.exit1.i.i.i ], [ 0x3F8110BC80000000, %__internal_trig_reduction_kernel.exit.i.i ], !dbg !35
  %124 = phi float [ %.013.i, %__internal_fmad.exit1.i.i.i ], [ 0xBF29A82A60000000, %__internal_trig_reduction_kernel.exit.i.i ], !dbg !35
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not32.i = icmp eq i32 %125, 0, !dbg !35
  %126 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %124, float %.011.i, float %123) #4, !dbg !35
  %127 = tail call float @llvm.nvvm.fma.rn.f(float %124, float %.011.i, float %123) #4, !dbg !35
  %.010.i = select i1 %.not32.i, float %127, float %126, !dbg !35
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not33.i = icmp eq i32 %128, 0, !dbg !35
  %129 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %.011.i, float %122) #4, !dbg !35
  %130 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %.011.i, float %122) #4, !dbg !35
  %.09.i = select i1 %.not33.i, float %130, float %129, !dbg !35
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not34.i = icmp eq i32 %131, 0, !dbg !35
  %132 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %.012.i, float %115) #4, !dbg !35
  %133 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %.012.i, float %115) #4, !dbg !35
  %.05.i = select i1 %.not34.i, float %133, float %132, !dbg !35
  %134 = and i32 %i.i.1.i, 2, !dbg !35
  %.not35.i = icmp eq i32 %134, 0, !dbg !35
  br i1 %.not35.i, label %__nv_sinf.exit, label %__internal_fmad.exit5.i.i.i, !dbg !35

__internal_fmad.exit5.i.i.i:                      ; preds = %__internal_fmad.exit2.i.i.i
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not36.i = icmp eq i32 %135, 0, !dbg !35
  %136 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float -1.000000e+00, float 0.000000e+00) #4, !dbg !35
  %137 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float -1.000000e+00, float 0.000000e+00) #4, !dbg !35
  %.0.i = select i1 %.not36.i, float %137, float %136, !dbg !35
  br label %__nv_sinf.exit, !dbg !35

__nv_sinf.exit:                                   ; preds = %__internal_fmad.exit2.i.i.i, %__internal_fmad.exit5.i.i.i
  %z.i.i.0.i = phi float [ %.0.i, %__internal_fmad.exit5.i.i.i ], [ %.05.i, %__internal_fmad.exit2.i.i.i ], !dbg !35
  %138 = bitcast i16 %20 to half, !dbg !20
  %139 = fpext half %138 to float, !dbg !39
  %140 = bitcast i16 %24 to half, !dbg !23
  %141 = fpext half %140 to float, !dbg !40
  %142 = fadd float %139, %141, !dbg !41
  %143 = bitcast i16 %28 to half, !dbg !26
  %144 = fpext half %143 to float, !dbg !42
  %145 = fadd float %142, %144, !dbg !43
  %146 = bitcast i16 %32 to half, !dbg !29
  %147 = fpext half %146 to float, !dbg !44
  %148 = fadd float %145, %147, !dbg !45
  call void @llvm.lifetime.end.p0(i64 28, ptr nonnull %result.i.i.i.i), !dbg !35
  %149 = fmul float %148, %z.i.i.0.i, !dbg !46
  %150 = sext i32 %11 to i64, !dbg !47
  %151 = getelementptr half, ptr addrspace(1) %2, i64 %150, !dbg !47
  %152 = fptrunc float %149 to half, !dbg !48
  %153 = bitcast half %152 to i16, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %153, ptr addrspace(1) %151, i1 %12) #4, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.nvvm.f2i.rn.ftz(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.nvvm.f2i.rn(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.mul.rn.ftz.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.mul.rn.f(float, float) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.fshl.i32(i32, i32, i32) #2

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr captures(none)) #3

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr captures(none)) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { nounwind }
attributes #5 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgjflhkndk7z5nq6rqc2ds3pfgx4h7sh6dobfuiq7smkh3yy7jlo.py", directory: "/tmp/torchinductor_root/gj")
!4 = !{ptr @triton_poi_fused_mul_7, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused_mul_7", linkageName: "triton_poi_fused_mul_7", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 19, column: 28, scope: !6)
!10 = !DILocation(line: 19, column: 33, scope: !6)
!11 = !DILocation(line: 20, column: 36, scope: !6)
!12 = !DILocation(line: 20, column: 23, scope: !6)
!13 = !DILocation(line: 21, column: 21, scope: !6)
!14 = !DILocation(line: 23, column: 19, scope: !6)
!15 = !DILocation(line: 22, column: 19, scope: !6)
!16 = !DILocation(line: 24, column: 19, scope: !6)
!17 = !DILocation(line: 26, column: 39, scope: !6)
!18 = !DILocation(line: 26, column: 35, scope: !6)
!19 = !DILocation(line: 26, column: 30, scope: !6)
!20 = !DILocation(line: 26, column: 44, scope: !6)
!21 = !DILocation(line: 27, column: 41, scope: !6)
!22 = !DILocation(line: 27, column: 30, scope: !6)
!23 = !DILocation(line: 27, column: 50, scope: !6)
!24 = !DILocation(line: 28, column: 41, scope: !6)
!25 = !DILocation(line: 28, column: 30, scope: !6)
!26 = !DILocation(line: 28, column: 50, scope: !6)
!27 = !DILocation(line: 29, column: 41, scope: !6)
!28 = !DILocation(line: 29, column: 30, scope: !6)
!29 = !DILocation(line: 29, column: 50, scope: !6)
!30 = !DILocation(line: 30, column: 46, scope: !6)
!31 = !DILocation(line: 30, column: 41, scope: !6)
!32 = !DILocation(line: 30, column: 35, scope: !6)
!33 = !DILocation(line: 30, column: 30, scope: !6)
!34 = !DILocation(line: 30, column: 53, scope: !6)
!35 = !DILocation(line: 34, column: 23, scope: !6)
!36 = !{i32 30999, i32 31003, i32 31048, i32 31093}
!37 = distinct !{!37, !38}
!38 = !{!"llvm.loop.unroll.count", i32 1}
!39 = !DILocation(line: 26, column: 54, scope: !6)
!40 = !DILocation(line: 27, column: 60, scope: !6)
!41 = !DILocation(line: 31, column: 18, scope: !6)
!42 = !DILocation(line: 28, column: 60, scope: !6)
!43 = !DILocation(line: 32, column: 18, scope: !6)
!44 = !DILocation(line: 29, column: 60, scope: !6)
!45 = !DILocation(line: 33, column: 18, scope: !6)
!46 = !DILocation(line: 38, column: 19, scope: !6)
!47 = !DILocation(line: 39, column: 25, scope: !6)
!48 = !DILocation(line: 39, column: 37, scope: !6)
!49 = !DILocation(line: 39, column: 4, scope: !6)
