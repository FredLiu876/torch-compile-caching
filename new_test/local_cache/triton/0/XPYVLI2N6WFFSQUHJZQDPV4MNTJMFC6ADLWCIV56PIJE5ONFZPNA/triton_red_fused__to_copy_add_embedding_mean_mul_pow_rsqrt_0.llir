; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [73 x i8] c"./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py\00"
@assertMessage_0 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp4 < 128256\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !10 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %11 = shl i32 %10, 6, !dbg !12
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %13 = lshr i32 %12, 3, !dbg !13
  %14 = and i32 %13, 63, !dbg !13
  %15 = lshr i32 %12, 6, !dbg !13
  %16 = and i32 %15, 7, !dbg !13
  %17 = and i32 %12, 63, !dbg !13
  %18 = or disjoint i32 %14, %11, !dbg !14
  %19 = or disjoint i32 %11, %17, !dbg !14
  %20 = icmp slt i32 %18, %6, !dbg !15
  %21 = icmp slt i32 %19, %6, !dbg !15
  %22 = shl i32 %12, 3, !dbg !16
  %23 = and i32 %22, 56, !dbg !16
  %24 = sext i32 %18 to i64, !dbg !17
  %25 = getelementptr i64, ptr addrspace(1) %1, i64 %24, !dbg !17
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 %20) #6, !dbg !18
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 %20) #6, !dbg !18
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 %20) #6, !dbg !18
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 %20) #6, !dbg !18
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 %20) #6, !dbg !18
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 %20) #6, !dbg !18
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 %20) #6, !dbg !18
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 %20) #6, !dbg !18
  %34 = or disjoint i32 %16, %11, !dbg !14
  %35 = or disjoint i32 %34, 8, !dbg !14
  %36 = or disjoint i32 %34, 16, !dbg !14
  %37 = or disjoint i32 %34, 24, !dbg !14
  %38 = or disjoint i32 %34, 32, !dbg !14
  %39 = or disjoint i32 %34, 40, !dbg !14
  %40 = or disjoint i32 %34, 48, !dbg !14
  %41 = or disjoint i32 %34, 56, !dbg !14
  %42 = insertelement <8 x i32> poison, i32 %34, i64 0, !dbg !15
  %43 = insertelement <8 x i32> %42, i32 %35, i64 1, !dbg !15
  %44 = insertelement <8 x i32> %43, i32 %36, i64 2, !dbg !15
  %45 = insertelement <8 x i32> %44, i32 %37, i64 3, !dbg !15
  %46 = insertelement <8 x i32> %45, i32 %38, i64 4, !dbg !15
  %47 = insertelement <8 x i32> %46, i32 %39, i64 5, !dbg !15
  %48 = insertelement <8 x i32> %47, i32 %40, i64 6, !dbg !15
  %49 = insertelement <8 x i32> %48, i32 %41, i64 7, !dbg !15
  %50 = insertelement <8 x i32> poison, i32 %6, i64 0, !dbg !15
  %51 = shufflevector <8 x i32> %50, <8 x i32> poison, <8 x i32> zeroinitializer, !dbg !15
  %52 = icmp slt <8 x i32> %49, %51, !dbg !15
  %53 = sext i32 %34 to i64, !dbg !17
  %54 = getelementptr i64, ptr addrspace(1) %1, i64 %53, !dbg !17
  %55 = sext i32 %35 to i64, !dbg !17
  %56 = getelementptr i64, ptr addrspace(1) %1, i64 %55, !dbg !17
  %57 = sext i32 %36 to i64, !dbg !17
  %58 = getelementptr i64, ptr addrspace(1) %1, i64 %57, !dbg !17
  %59 = sext i32 %37 to i64, !dbg !17
  %60 = getelementptr i64, ptr addrspace(1) %1, i64 %59, !dbg !17
  %61 = sext i32 %38 to i64, !dbg !17
  %62 = getelementptr i64, ptr addrspace(1) %1, i64 %61, !dbg !17
  %63 = sext i32 %39 to i64, !dbg !17
  %64 = getelementptr i64, ptr addrspace(1) %1, i64 %63, !dbg !17
  %65 = sext i32 %40 to i64, !dbg !17
  %66 = getelementptr i64, ptr addrspace(1) %1, i64 %65, !dbg !17
  %67 = sext i32 %41 to i64, !dbg !17
  %68 = getelementptr i64, ptr addrspace(1) %1, i64 %67, !dbg !17
  %69 = extractelement <8 x i1> %52, i64 0, !dbg !18
  %70 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %54, i1 %69) #6, !dbg !18
  %71 = extractelement <8 x i1> %52, i64 1, !dbg !18
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 %71) #6, !dbg !18
  %73 = extractelement <8 x i1> %52, i64 2, !dbg !18
  %74 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %58, i1 %73) #6, !dbg !18
  %75 = extractelement <8 x i1> %52, i64 3, !dbg !18
  %76 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %60, i1 %75) #6, !dbg !18
  %77 = extractelement <8 x i1> %52, i64 4, !dbg !18
  %78 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 %77) #6, !dbg !18
  %79 = extractelement <8 x i1> %52, i64 5, !dbg !18
  %80 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %64, i1 %79) #6, !dbg !18
  %81 = extractelement <8 x i1> %52, i64 6, !dbg !18
  %82 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %66, i1 %81) #6, !dbg !18
  %83 = extractelement <8 x i1> %52, i64 7, !dbg !18
  %84 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %68, i1 %83) #6, !dbg !18
  %85 = insertelement <8 x i64> poison, i64 %70, i64 0, !dbg !19
  %86 = insertelement <8 x i64> %85, i64 %72, i64 1, !dbg !19
  %87 = insertelement <8 x i64> %86, i64 %74, i64 2, !dbg !19
  %88 = insertelement <8 x i64> %87, i64 %76, i64 3, !dbg !19
  %89 = insertelement <8 x i64> %88, i64 %78, i64 4, !dbg !19
  %90 = insertelement <8 x i64> %89, i64 %80, i64 5, !dbg !19
  %91 = insertelement <8 x i64> %90, i64 %82, i64 6, !dbg !19
  %92 = insertelement <8 x i64> %91, i64 %84, i64 7, !dbg !19
  %93 = add <8 x i64> %92, splat (i64 128256), !dbg !19
  %94 = icmp slt <8 x i64> %92, zeroinitializer, !dbg !20
  %95 = select <8 x i1> %94, <8 x i64> %93, <8 x i64> %92, !dbg !21
  %96 = icmp ugt <8 x i64> %95, splat (i64 128255), !dbg !22
  %97 = and <8 x i1> %52, %96, !dbg !23
  %98 = shl i32 %18, 12, !dbg !24
  %99 = bitcast <8 x i1> %97 to i8
  %.not = icmp eq i8 %99, 0
  %invariant.op = or disjoint i32 %23, %98, !dbg !25
  br i1 %.not, label %.split.preheader, label %137, !dbg !26

.split.preheader:                                 ; preds = %9
  %100 = icmp slt i64 %33, 0, !dbg !20
  %101 = shl i64 %33, 12, !dbg !27
  %102 = add i64 %101, 525336576, !dbg !27
  %103 = select i1 %100, i64 %102, i64 %101, !dbg !27
  %104 = zext nneg i32 %23 to i64, !dbg !25
  %105 = or disjoint i64 %103, %104
  %106 = insertelement <8 x i1> poison, i1 %20, i64 0, !dbg !28
  %107 = shufflevector <8 x i1> %106, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !28
  br label %.split, !dbg !25

.split:                                           ; preds = %.split.preheader, %.split
  %indvars.iv = phi i64 [ 0, %.split.preheader ], [ %indvars.iv.next, %.split ]
  %108 = phi <8 x float> [ zeroinitializer, %.split.preheader ], [ %132, %.split ]
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %109 = or i64 %105, %indvars.iv, !dbg !29
  %110 = getelementptr half, ptr addrspace(1) %2, i64 %109, !dbg !30
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %110, i1 %20) #6, !dbg !31
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !31
  %113 = bitcast i32 %112 to <2 x half>, !dbg !31
  %114 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !31
  %115 = bitcast i32 %114 to <2 x half>, !dbg !31
  %116 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !31
  %117 = bitcast i32 %116 to <2 x half>, !dbg !31
  %118 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !31
  %119 = bitcast i32 %118 to <2 x half>, !dbg !31
  %120 = shufflevector <2 x half> %113, <2 x half> %115, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %121 = shufflevector <2 x half> %117, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %122 = shufflevector <8 x half> %120, <8 x half> %121, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !32
  %123 = shufflevector <2 x half> %117, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %124 = shufflevector <8 x half> %122, <8 x half> %123, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !32
  %125 = shufflevector <2 x half> %119, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %126 = shufflevector <8 x half> %124, <8 x half> %125, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !32
  %127 = shufflevector <2 x half> %119, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %128 = shufflevector <8 x half> %126, <8 x half> %127, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !32
  %129 = fpext <8 x half> %128 to <8 x float>, !dbg !32
  %130 = fmul <8 x float> %129, %129, !dbg !33
  %131 = fadd <8 x float> %108, %130, !dbg !34
  %132 = select <8 x i1> %107, <8 x float> %131, <8 x float> %108, !dbg !28
  %133 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %133
  %134 = sext i32 %.reass to i64, !dbg !35
  %135 = getelementptr half, ptr addrspace(1) %4, i64 %134, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %112, i32 %114, i32 %116, i32 %118, ptr addrspace(1) %135, i1 %20) #6, !dbg !36
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !25
  %136 = icmp samesign ult i64 %indvars.iv, 4032, !dbg !25
  br i1 %136, label %.split, label %138, !dbg !25

137:                                              ; preds = %9
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !26
  unreachable, !dbg !26

138:                                              ; preds = %.split
  %shift = shufflevector <8 x float> %132, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %139 = fadd <8 x float> %132, %shift, !dbg !37
  %shift62 = shufflevector <8 x float> %132, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %140 = fadd <8 x float> %shift62, %139, !dbg !37
  %shift63 = shufflevector <8 x float> %132, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %141 = fadd <8 x float> %shift63, %140, !dbg !37
  %shift64 = shufflevector <8 x float> %132, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %142 = fadd <8 x float> %shift64, %141, !dbg !37
  %shift65 = shufflevector <8 x float> %132, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %143 = fadd <8 x float> %shift65, %142, !dbg !37
  %shift66 = shufflevector <8 x float> %132, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %144 = fadd <8 x float> %shift66, %143, !dbg !37
  %shift67 = shufflevector <8 x float> %132, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %145 = fadd <8 x float> %shift67, %144, !dbg !37
  %146 = extractelement <8 x float> %145, i64 0, !dbg !37
  %147 = bitcast float %146 to i32, !dbg !42
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 4, i32 31), !dbg !42
  %149 = bitcast i32 %148 to float, !dbg !42
  %150 = fadd float %146, %149, !dbg !37
  %151 = bitcast float %150 to i32, !dbg !42
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 2, i32 31), !dbg !42
  %153 = bitcast i32 %152 to float, !dbg !42
  %154 = fadd float %150, %153, !dbg !37
  %155 = bitcast float %154 to i32, !dbg !42
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 1, i32 31), !dbg !42
  %157 = bitcast i32 %156 to float, !dbg !42
  %158 = fadd float %154, %157, !dbg !37
  %159 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %14, !dbg !43
  %160 = bitcast float %158 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #6, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %161 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %17, !dbg !43
  %162 = load float, ptr addrspace(3) %161, align 4, !dbg !43
  %163 = tail call float @llvm.nvvm.div.full(float %162, float 4.096000e+03), !dbg !44
  %164 = tail call float @llvm.nvvm.div.full(float %158, float 4.096000e+03), !dbg !44
  %165 = fadd float %163, 0x3EE4F8B580000000, !dbg !45
  %166 = fadd float %164, 0x3EE4F8B580000000, !dbg !45
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %.not.i = icmp eq i32 %167, 0, !dbg !43
  br i1 %.not.i, label %170, label %168, !dbg !43

168:                                              ; preds = %138
  %169 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %165), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

170:                                              ; preds = %138
  %171 = tail call float @llvm.nvvm.rsqrt.approx.f(float %165), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

__nv_rsqrtf.exit:                                 ; preds = %168, %170
  %.0.i = phi float [ %169, %168 ], [ %171, %170 ], !dbg !43
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %.not.i33 = icmp eq i32 %179, 0, !dbg !43
  br i1 %.not.i33, label %182, label %180, !dbg !43

180:                                              ; preds = %__nv_rsqrtf.exit
  %181 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %166), !dbg !43
  br label %__nv_rsqrtf.exit35, !dbg !43

182:                                              ; preds = %__nv_rsqrtf.exit
  %183 = tail call float @llvm.nvvm.rsqrt.approx.f(float %166), !dbg !43
  br label %__nv_rsqrtf.exit35, !dbg !43

__nv_rsqrtf.exit35:                               ; preds = %180, %182
  %.0.i34 = phi float [ %181, %180 ], [ %183, %182 ], !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %184 = sext i32 %19 to i64, !dbg !47
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %184, !dbg !47
  %186 = and i32 %12, 448, !dbg !48
  %187 = icmp eq i32 %186, 0, !dbg !48
  %188 = bitcast float %.0.i to i32, !dbg !48
  %189 = and i1 %187, %21, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %188, ptr addrspace(1) %185, i1 %189) #6, !dbg !48
  %190 = insertelement <2 x float> poison, float %.0.i34, i64 0, !dbg !49
  %191 = shufflevector <2 x float> %190, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  br label %192, !dbg !50

192:                                              ; preds = %__nv_rsqrtf.exit35, %192
  %indvars.iv46 = phi i64 [ 0, %__nv_rsqrtf.exit35 ], [ %indvars.iv.next47, %192 ]
  %193 = or disjoint i64 %indvars.iv46, %104, !dbg !51
  %194 = getelementptr half, ptr addrspace(1) %3, i64 %193, !dbg !52
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %194, i1 true) #6, !dbg !53
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !53
  %197 = bitcast i32 %196 to <2 x half>, !dbg !53
  %198 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !53
  %199 = bitcast i32 %198 to <2 x half>, !dbg !53
  %200 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !53
  %201 = bitcast i32 %200 to <2 x half>, !dbg !53
  %202 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !53
  %203 = bitcast i32 %202 to <2 x half>, !dbg !53
  %204 = trunc nuw nsw i64 %indvars.iv46 to i32
  %.reass38 = or i32 %invariant.op, %204
  %205 = sext i32 %.reass38 to i64, !dbg !54
  %206 = getelementptr half, ptr addrspace(1) %4, i64 %205, !dbg !54
  %207 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %206, i1 %20) #6, !dbg !55
  %208 = extractvalue { i32, i32, i32, i32 } %207, 0, !dbg !55
  %209 = bitcast i32 %208 to <2 x half>, !dbg !55
  %210 = extractvalue { i32, i32, i32, i32 } %207, 1, !dbg !55
  %211 = bitcast i32 %210 to <2 x half>, !dbg !55
  %212 = extractvalue { i32, i32, i32, i32 } %207, 2, !dbg !55
  %213 = bitcast i32 %212 to <2 x half>, !dbg !55
  %214 = extractvalue { i32, i32, i32, i32 } %207, 3, !dbg !55
  %215 = bitcast i32 %214 to <2 x half>, !dbg !55
  %216 = getelementptr half, ptr addrspace(1) %5, i64 %205, !dbg !56
  %217 = fpext <2 x half> %197 to <2 x float>, !dbg !57
  %218 = fpext <2 x half> %209 to <2 x float>, !dbg !58
  %219 = fmul <2 x float> %191, %218, !dbg !49
  %220 = fmul <2 x float> %219, %217, !dbg !59
  %221 = fptrunc <2 x float> %220 to <2 x half>, !dbg !60
  %222 = fpext <2 x half> %199 to <2 x float>, !dbg !57
  %223 = fpext <2 x half> %211 to <2 x float>, !dbg !58
  %224 = fmul <2 x float> %191, %223, !dbg !49
  %225 = fmul <2 x float> %224, %222, !dbg !59
  %226 = fptrunc <2 x float> %225 to <2 x half>, !dbg !60
  %227 = fpext <2 x half> %201 to <2 x float>, !dbg !57
  %228 = fpext <2 x half> %213 to <2 x float>, !dbg !58
  %229 = fmul <2 x float> %191, %228, !dbg !49
  %230 = fmul <2 x float> %229, %227, !dbg !59
  %231 = fptrunc <2 x float> %230 to <2 x half>, !dbg !60
  %232 = fpext <2 x half> %203 to <2 x float>, !dbg !57
  %233 = fpext <2 x half> %215 to <2 x float>, !dbg !58
  %234 = fmul <2 x float> %191, %233, !dbg !49
  %235 = fmul <2 x float> %234, %232, !dbg !59
  %236 = fptrunc <2 x float> %235 to <2 x half>, !dbg !60
  %237 = bitcast <2 x half> %221 to i32, !dbg !60
  %238 = bitcast <2 x half> %226 to i32, !dbg !60
  %239 = bitcast <2 x half> %231 to i32, !dbg !60
  %240 = bitcast <2 x half> %236 to i32, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %237, i32 %238, i32 %239, i32 %240, ptr addrspace(1) %216, i1 %20) #6, !dbg !60
  %indvars.iv.next47 = add nuw nsw i64 %indvars.iv46, 64, !dbg !50
  %241 = icmp samesign ult i64 %indvars.iv46, 4032, !dbg !50
  br i1 %241, label %192, label %242, !dbg !50

242:                                              ; preds = %192
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py", directory: "./local_cache/3k")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 22, column: 28, scope: !10)
!12 = !DILocation(line: 22, column: 33, scope: !10)
!13 = !DILocation(line: 23, column: 44, scope: !10)
!14 = !DILocation(line: 23, column: 23, scope: !10)
!15 = !DILocation(line: 24, column: 21, scope: !10)
!16 = !DILocation(line: 25, column: 37, scope: !10)
!17 = !DILocation(line: 28, column: 30, scope: !10)
!18 = !DILocation(line: 28, column: 35, scope: !10)
!19 = !DILocation(line: 37, column: 22, scope: !10)
!20 = !DILocation(line: 38, column: 22, scope: !10)
!21 = !DILocation(line: 39, column: 36, scope: !10)
!22 = !DILocation(line: 40, column: 41, scope: !10)
!23 = !DILocation(line: 40, column: 59, scope: !10)
!24 = !DILocation(line: 47, column: 41, scope: !10)
!25 = !DILocation(line: 30, column: 40, scope: !10)
!26 = !DILocation(line: 40, column: 69, scope: !10)
!27 = !DILocation(line: 41, column: 46, scope: !10)
!28 = !DILocation(line: 46, column: 50, scope: !10)
!29 = !DILocation(line: 41, column: 41, scope: !10)
!30 = !DILocation(line: 41, column: 34, scope: !10)
!31 = !DILocation(line: 41, column: 53, scope: !10)
!32 = !DILocation(line: 41, column: 115, scope: !10)
!33 = !DILocation(line: 43, column: 22, scope: !10)
!34 = !DILocation(line: 45, column: 25, scope: !10)
!35 = !DILocation(line: 47, column: 29, scope: !10)
!36 = !DILocation(line: 47, column: 52, scope: !10)
!37 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !41)
!38 = distinct !DILexicalBlockFile(scope: !40, file: !39, discriminator: 0)
!39 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!40 = distinct !DILexicalBlockFile(scope: !10, file: !39, discriminator: 0)
!41 = !DILocation(line: 48, column: 27, scope: !10)
!42 = !DILocation(line: 286, column: 36, scope: !40, inlinedAt: !41)
!43 = !DILocation(line: 53, column: 28, scope: !10)
!44 = !DILocation(line: 50, column: 21, scope: !10)
!45 = !DILocation(line: 52, column: 20, scope: !10)
!46 = !DILocation(line: 54, column: 4, scope: !10)
!47 = !DILocation(line: 55, column: 28, scope: !10)
!48 = !DILocation(line: 55, column: 40, scope: !10)
!49 = !DILocation(line: 65, column: 24, scope: !10)
!50 = !DILocation(line: 56, column: 40, scope: !10)
!51 = !DILocation(line: 57, column: 31, scope: !10)
!52 = !DILocation(line: 62, column: 35, scope: !10)
!53 = !DILocation(line: 62, column: 42, scope: !10)
!54 = !DILocation(line: 63, column: 36, scope: !10)
!55 = !DILocation(line: 63, column: 53, scope: !10)
!56 = !DILocation(line: 68, column: 29, scope: !10)
!57 = !DILocation(line: 62, column: 95, scope: !10)
!58 = !DILocation(line: 63, column: 115, scope: !10)
!59 = !DILocation(line: 67, column: 24, scope: !10)
!60 = !DILocation(line: 68, column: 53, scope: !10)
!61 = !DILocation(line: 56, column: 4, scope: !10)
