#loc = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":18:0)
#loc1 = loc(unknown)
#loc38 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":48:27)
#loc65 = loc(callsite(#loc1 at #loc38))
module {
  tt.func public @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":18:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":18:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":18:0), %arg3: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":18:0), %arg4: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":18:0), %arg5: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":18:0), %arg6: i32 loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":18:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":18:0)) attributes {noinline = false} {
    %cst = arith.constant dense<4096> : tensor<64x1xi64> loc(#loc1)
    %cst_0 = arith.constant dense<128256> : tensor<64x1xi64> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<1x64xf16> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<64x64xf16> loc(#loc1)
    %cst_3 = arith.constant dense<0> : tensor<64x1xi64> loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_4 = arith.constant dense<9.99999974E-6> : tensor<64x1xf32> loc(#loc1)
    %cst_5 = arith.constant dense<4.096000e+03> : tensor<64x1xf32> loc(#loc1)
    %cst_6 = arith.constant dense<4096> : tensor<64x1xi32> loc(#loc1)
    %cst_7 = arith.constant dense<true> : tensor<64x1xi1> loc(#loc1)
    %cst_8 = arith.constant dense<4096> : tensor<1x64xi32> loc(#loc1)
    %cst_9 = arith.constant dense<0.000000e+00> : tensor<64x64xf32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc5)
    %4 = tt.splat %1 : i32 -> tensor<64x1xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64x1xi32> loc(#loc6)
    %6 = tt.splat %arg6 : i32 -> tensor<64x1xi32> loc(#loc7)
    %7 = arith.cmpi slt, %5, %6 : tensor<64x1xi32> loc(#loc7)
    %8 = tt.expand_dims %2 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc8)
    %9 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<64x1x!tt.ptr<i64>> loc(#loc9)
    %10 = tt.addptr %9, %5 : tensor<64x1x!tt.ptr<i64>>, tensor<64x1xi32> loc(#loc9)
    %11 = tt.load %10, %7 evictionPolicy = evict_last : tensor<64x1x!tt.ptr<i64>> loc(#loc10)
    %12 = scf.for %arg8 = %c0_i32 to %c4096_i32 step %c64_i32 iter_args(%arg9 = %cst_9) -> (tensor<64x64xf32>)  : i32 {
      %20 = tt.splat %arg8 : i32 -> tensor<1x64xi32> loc(#loc12)
      %21 = arith.addi %20, %8 : tensor<1x64xi32> loc(#loc12)
      %22 = arith.cmpi slt, %21, %cst_8 : tensor<1x64xi32> loc(#loc13)
      %23 = arith.addi %11, %cst_0 : tensor<64x1xi64> loc(#loc14)
      %24 = arith.cmpi slt, %11, %cst_3 : tensor<64x1xi64> loc(#loc15)
      %25 = arith.select %24, %23, %11 : tensor<64x1xi1>, tensor<64x1xi64> loc(#loc16)
      %26 = arith.cmpi sge, %25, %cst_3 : tensor<64x1xi64> loc(#loc17)
      %27 = arith.cmpi slt, %25, %cst_0 : tensor<64x1xi64> loc(#loc18)
      %28 = arith.andi %26, %27 : tensor<64x1xi1> loc(#loc19)
      %29 = arith.xori %7, %cst_7 : tensor<64x1xi1> loc(#loc20)
      %30 = arith.ori %28, %29 : tensor<64x1xi1> loc(#loc21)
      %31 = tt.broadcast %30 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc21)
      tt.assert %31, "index out of bounds: 0 <= tmp4 < 128256" : tensor<64x64xi1> loc(#loc22)
      %32 = arith.muli %25, %cst : tensor<64x1xi64> loc(#loc23)
      %33 = tt.broadcast %32 : tensor<64x1xi64> -> tensor<64x64xi64> loc(#loc23)
      %34 = arith.extsi %21 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc24)
      %35 = tt.broadcast %34 : tensor<1x64xi64> -> tensor<64x64xi64> loc(#loc24)
      %36 = arith.addi %35, %33 : tensor<64x64xi64> loc(#loc24)
      %37 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<64x64x!tt.ptr<f16>> loc(#loc25)
      %38 = tt.addptr %37, %36 : tensor<64x64x!tt.ptr<f16>>, tensor<64x64xi64> loc(#loc25)
      %39 = tt.broadcast %7 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc26)
      %40 = tt.broadcast %22 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc26)
      %41 = arith.andi %39, %40 : tensor<64x64xi1> loc(#loc26)
      %42 = tt.load %38, %41, %cst_2 evictionPolicy = evict_first : tensor<64x64x!tt.ptr<f16>> loc(#loc27)
      %43 = arith.extf %42 : tensor<64x64xf16> to tensor<64x64xf32> loc(#loc28)
      %44 = arith.mulf %43, %43 : tensor<64x64xf32> loc(#loc29)
      %45 = arith.addf %arg9, %44 : tensor<64x64xf32> loc(#loc30)
      %46 = arith.select %41, %45, %arg9 : tensor<64x64xi1>, tensor<64x64xf32> loc(#loc31)
      %47 = arith.muli %5, %cst_6 : tensor<64x1xi32> loc(#loc32)
      %48 = tt.broadcast %21 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc33)
      %49 = tt.broadcast %47 : tensor<64x1xi32> -> tensor<64x64xi32> loc(#loc33)
      %50 = arith.addi %48, %49 : tensor<64x64xi32> loc(#loc33)
      %51 = tt.splat %arg4 : !tt.ptr<f16> -> tensor<64x64x!tt.ptr<f16>> loc(#loc34)
      %52 = tt.addptr %51, %50 : tensor<64x64x!tt.ptr<f16>>, tensor<64x64xi32> loc(#loc34)
      %53 = arith.truncf %43 : tensor<64x64xf32> to tensor<64x64xf16> loc(#loc35)
      tt.store %52, %53, %41 : tensor<64x64x!tt.ptr<f16>> loc(#loc35)
      scf.yield %46 : tensor<64x64xf32> loc(#loc36)
    } loc(#loc11)
    %13 = "tt.reduce"(%12) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32 loc(callsite(#loc1 at #loc38)), %arg9: f32 loc(callsite(#loc1 at #loc38))):
      %20 = arith.addf %arg8, %arg9 : f32 loc(#loc67)
      tt.reduce.return %20 : f32 loc(#loc64)
    }) : (tensor<64x64xf32>) -> tensor<64xf32> loc(#loc64)
    %14 = tt.expand_dims %13 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc40)
    %15 = arith.divf %14, %cst_5 : tensor<64x1xf32> loc(#loc41)
    %16 = arith.addf %15, %cst_4 : tensor<64x1xf32> loc(#loc42)
    %17 = tt.extern_elementwise %16 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<64x1xf32>) -> tensor<64x1xf32> loc(#loc43)
    gpu.barrier loc(#loc44)
    %18 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc45)
    %19 = tt.addptr %18, %5 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc45)
    tt.store %19, %17, %7 : tensor<64x1x!tt.ptr<f32>> loc(#loc46)
    scf.for %arg8 = %c0_i32 to %c4096_i32 step %c64_i32  : i32 {
      %20 = tt.splat %arg8 : i32 -> tensor<1x64xi32> loc(#loc48)
      %21 = arith.addi %20, %8 : tensor<1x64xi32> loc(#loc48)
      %22 = arith.cmpi slt, %21, %cst_8 : tensor<1x64xi32> loc(#loc49)
      %23 = tt.splat %arg3 : !tt.ptr<f16> -> tensor<1x64x!tt.ptr<f16>> loc(#loc50)
      %24 = tt.addptr %23, %21 : tensor<1x64x!tt.ptr<f16>>, tensor<1x64xi32> loc(#loc50)
      %25 = tt.load %24, %22, %cst_1 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f16>> loc(#loc51)
      %26 = arith.extf %25 : tensor<1x64xf16> to tensor<1x64xf32> loc(#loc52)
      %27 = arith.muli %5, %cst_6 : tensor<64x1xi32> loc(#loc53)
      %28 = tt.broadcast %21 : tensor<1x64xi32> -> tensor<64x64xi32> loc(#loc54)
      %29 = tt.broadcast %27 : tensor<64x1xi32> -> tensor<64x64xi32> loc(#loc54)
      %30 = arith.addi %28, %29 : tensor<64x64xi32> loc(#loc54)
      %31 = tt.splat %arg4 : !tt.ptr<f16> -> tensor<64x64x!tt.ptr<f16>> loc(#loc55)
      %32 = tt.addptr %31, %30 : tensor<64x64x!tt.ptr<f16>>, tensor<64x64xi32> loc(#loc55)
      %33 = tt.broadcast %7 : tensor<64x1xi1> -> tensor<64x64xi1> loc(#loc56)
      %34 = tt.broadcast %22 : tensor<1x64xi1> -> tensor<64x64xi1> loc(#loc56)
      %35 = arith.andi %33, %34 : tensor<64x64xi1> loc(#loc56)
      %36 = tt.load %32, %35, %cst_2 evictionPolicy = evict_first : tensor<64x64x!tt.ptr<f16>> loc(#loc57)
      %37 = arith.extf %36 : tensor<64x64xf16> to tensor<64x64xf32> loc(#loc58)
      %38 = tt.broadcast %17 : tensor<64x1xf32> -> tensor<64x64xf32> loc(#loc59)
      %39 = arith.mulf %37, %38 : tensor<64x64xf32> loc(#loc59)
      %40 = tt.broadcast %26 : tensor<1x64xf32> -> tensor<64x64xf32> loc(#loc60)
      %41 = arith.mulf %40, %39 : tensor<64x64xf32> loc(#loc60)
      %42 = tt.splat %arg5 : !tt.ptr<f16> -> tensor<64x64x!tt.ptr<f16>> loc(#loc61)
      %43 = tt.addptr %42, %30 : tensor<64x64x!tt.ptr<f16>>, tensor<64x64xi32> loc(#loc61)
      %44 = arith.truncf %41 : tensor<64x64xf32> to tensor<64x64xf16> loc(#loc62)
      tt.store %43, %44, %35 : tensor<64x64x!tt.ptr<f16>> loc(#loc62)
    } loc(#loc47)
    tt.return loc(#loc63)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":22:28)
#loc3 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":22:33)
#loc4 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":23:36)
#loc5 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":23:44)
#loc6 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":23:23)
#loc7 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":24:21)
#loc8 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":25:37)
#loc9 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":28:30)
#loc10 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":28:35)
#loc11 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":30:40)
#loc12 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":31:31)
#loc13 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":32:29)
#loc14 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":37:22)
#loc15 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":38:22)
#loc16 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":39:36)
#loc17 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":40:32)
#loc18 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":40:48)
#loc19 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":40:41)
#loc20 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":40:61)
#loc21 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":40:59)
#loc22 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":40:69)
#loc23 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":41:46)
#loc24 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":41:41)
#loc25 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":41:34)
#loc26 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":41:61)
#loc27 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":41:53)
#loc28 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":41:115)
#loc29 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":43:22)
#loc30 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":45:25)
#loc31 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":46:50)
#loc32 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":47:41)
#loc33 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":47:36)
#loc34 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":47:29)
#loc35 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":47:52)
#loc36 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":47:8)
#loc37 = loc("/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language/standard.py":286:36)
#loc39 = loc("/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language/standard.py":256:15)
#loc40 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":48:30)
#loc41 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":50:21)
#loc42 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":52:20)
#loc43 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":53:28)
#loc44 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":54:4)
#loc45 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":55:28)
#loc46 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":55:40)
#loc47 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":56:40)
#loc48 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":57:31)
#loc49 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":58:29)
#loc50 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":62:35)
#loc51 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":62:42)
#loc52 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":62:95)
#loc53 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":63:48)
#loc54 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":63:43)
#loc55 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":63:36)
#loc56 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":63:61)
#loc57 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":63:53)
#loc58 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":63:115)
#loc59 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":65:24)
#loc60 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":67:24)
#loc61 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":68:29)
#loc62 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":68:53)
#loc63 = loc("./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":56:4)
#loc64 = loc(callsite(#loc37 at #loc38))
#loc66 = loc(callsite(#loc39 at #loc37))
#loc67 = loc(callsite(#loc66 at #loc38))
