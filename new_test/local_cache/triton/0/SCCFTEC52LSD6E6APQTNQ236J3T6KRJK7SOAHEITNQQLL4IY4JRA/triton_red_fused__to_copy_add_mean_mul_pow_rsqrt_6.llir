; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %.fr10 = freeze i32 %5, !dbg !10
  %10 = icmp slt i32 %9, %.fr10, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 31, !dbg !11
  %13 = lshr i32 %11, 5, !dbg !11
  %14 = shl i32 %11, 1, !dbg !11
  %15 = and i32 %14, 2046, !dbg !11
  %16 = shl i32 %9, 12, !dbg !12
  %17 = or disjoint i32 %15, %16
  %18 = sext i32 %17 to i64, !dbg !13
  %19 = getelementptr half, ptr addrspace(1) %1, i64 %18, !dbg !13
  br i1 %10, label %.split.us.preheader, label %.split.preheader

.split.preheader:                                 ; preds = %8
  %20 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %19, i1 false) #5, !dbg !14
  %21 = getelementptr half, ptr addrspace(1) %2, i64 %18, !dbg !15
  %22 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %21, i1 false) #5, !dbg !16
  %23 = or disjoint i32 %17, 2048, !dbg !17
  %24 = sext i32 %23 to i64, !dbg !13
  %25 = getelementptr half, ptr addrspace(1) %1, i64 %24, !dbg !13
  %26 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %25, i1 false) #5, !dbg !14
  %27 = getelementptr half, ptr addrspace(1) %2, i64 %24, !dbg !15
  %28 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %27, i1 false) #5, !dbg !16
  br label %.split9.us, !dbg !18

.split.us.preheader:                              ; preds = %8
  %29 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %19, i1 true) #5, !dbg !14
  %30 = bitcast i32 %29 to <2 x half>, !dbg !14
  %31 = getelementptr half, ptr addrspace(1) %2, i64 %18, !dbg !15
  %32 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %31, i1 true) #5, !dbg !16
  %33 = bitcast i32 %32 to <2 x half>, !dbg !16
  %34 = or disjoint i32 %17, 2048, !dbg !17
  %35 = sext i32 %34 to i64, !dbg !13
  %36 = getelementptr half, ptr addrspace(1) %1, i64 %35, !dbg !13
  %37 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %36, i1 true) #5, !dbg !14
  %38 = bitcast i32 %37 to <2 x half>, !dbg !14
  %39 = getelementptr half, ptr addrspace(1) %2, i64 %35, !dbg !15
  %40 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %39, i1 true) #5, !dbg !16
  %41 = bitcast i32 %40 to <2 x half>, !dbg !16
  %42 = fpext <2 x half> %30 to <2 x float>, !dbg !22
  %43 = fpext <2 x half> %33 to <2 x float>, !dbg !23
  %44 = fadd <2 x float> %42, %43, !dbg !24
  %45 = fmul <2 x float> %44, %44, !dbg !25
  %46 = fpext <2 x half> %38 to <2 x float>, !dbg !22
  %47 = fpext <2 x half> %41 to <2 x float>, !dbg !23
  %48 = fadd <2 x float> %46, %47, !dbg !24
  %49 = fmul <2 x float> %48, %48, !dbg !25
  %50 = fadd <2 x float> %45, %49, !dbg !26
  %shift = shufflevector <2 x float> %50, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !18
  %51 = fadd <2 x float> %50, %shift, !dbg !18
  %52 = extractelement <2 x float> %51, i64 0, !dbg !18
  br label %.split9.us, !dbg !18

.split9.us:                                       ; preds = %.split.preheader, %.split.us.preheader
  %53 = phi float [ %52, %.split.us.preheader ], [ 0.000000e+00, %.split.preheader ], !dbg !27
  %54 = bitcast float %53 to i32, !dbg !18
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 16, i32 31), !dbg !18
  %56 = bitcast i32 %55 to float, !dbg !18
  %57 = fadd float %53, %56, !dbg !27
  %58 = bitcast float %57 to i32, !dbg !18
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 8, i32 31), !dbg !18
  %60 = bitcast i32 %59 to float, !dbg !18
  %61 = fadd float %57, %60, !dbg !27
  %62 = bitcast float %61 to i32, !dbg !18
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 4, i32 31), !dbg !18
  %64 = bitcast i32 %63 to float, !dbg !18
  %65 = fadd float %61, %64, !dbg !27
  %66 = bitcast float %65 to i32, !dbg !18
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 2, i32 31), !dbg !18
  %68 = bitcast i32 %67 to float, !dbg !18
  %69 = fadd float %65, %68, !dbg !27
  %70 = bitcast float %69 to i32, !dbg !18
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 1, i32 31), !dbg !18
  %72 = bitcast i32 %71 to float, !dbg !18
  %73 = fadd float %69, %72, !dbg !27
  %74 = and i32 %13, 31, !dbg !18
  %75 = icmp eq i32 %12, 0, !dbg !18
  %76 = getelementptr float, ptr addrspace(3) @global_smem, i32 %74, !dbg !18
  %77 = bitcast float %73 to <1 x i32>, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 %75) #5, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %78 = icmp slt i32 %11, 32, !dbg !18
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !18
  %80 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %79, i1 %78) #5, !dbg !18
  %81 = bitcast i32 %80 to float, !dbg !18
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 16, i32 31), !dbg !18
  %83 = bitcast i32 %82 to float, !dbg !18
  %84 = fadd float %81, %83, !dbg !27
  %85 = bitcast float %84 to i32, !dbg !18
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 8, i32 31), !dbg !18
  %87 = bitcast i32 %86 to float, !dbg !18
  %88 = fadd float %84, %87, !dbg !27
  %89 = bitcast float %88 to i32, !dbg !18
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 4, i32 31), !dbg !18
  %91 = bitcast i32 %90 to float, !dbg !18
  %92 = fadd float %88, %91, !dbg !27
  %93 = bitcast float %92 to i32, !dbg !18
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 2, i32 31), !dbg !18
  %95 = bitcast i32 %94 to float, !dbg !18
  %96 = fadd float %92, %95, !dbg !27
  %97 = bitcast float %96 to i32, !dbg !18
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 1, i32 31), !dbg !18
  %99 = bitcast i32 %98 to float, !dbg !18
  %100 = fadd float %96, %99, !dbg !27
  %101 = and i1 %78, %75, !dbg !18
  %102 = bitcast float %100 to <1 x i32>, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %102, i1 %101) #5, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %103 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !18
  %104 = tail call float @llvm.nvvm.div.full(float %103, float 4.096000e+03), !dbg !29
  %105 = fadd float %104, 0x3EE4F8B580000000, !dbg !30
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i = icmp eq i32 %106, 0, !dbg !31
  br i1 %.not.i, label %109, label %107, !dbg !31

107:                                              ; preds = %.split9.us
  %108 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %105), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

109:                                              ; preds = %.split9.us
  %110 = tail call float @llvm.nvvm.rsqrt.approx.f(float %105), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

__nv_rsqrtf.exit:                                 ; preds = %107, %109
  %.0.i = phi float [ %108, %107 ], [ %110, %109 ], !dbg !31
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i5 = icmp eq i32 %112, 0, !dbg !31
  br i1 %.not.i5, label %115, label %113, !dbg !31

113:                                              ; preds = %__nv_rsqrtf.exit
  %114 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %105), !dbg !31
  br label %__nv_rsqrtf.exit7, !dbg !31

115:                                              ; preds = %__nv_rsqrtf.exit
  %116 = tail call float @llvm.nvvm.rsqrt.approx.f(float %105), !dbg !31
  br label %__nv_rsqrtf.exit7, !dbg !31

__nv_rsqrtf.exit7:                                ; preds = %113, %115
  %.0.i6 = phi float [ %114, %113 ], [ %116, %115 ], !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %117 = sext i32 %9 to i64, !dbg !33
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !33
  %119 = and i32 %11, 1023, !dbg !34
  %120 = icmp eq i32 %119, 0, !dbg !34
  %121 = bitcast float %.0.i to i32, !dbg !34
  %122 = and i1 %120, %10, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %121, ptr addrspace(1) %118, i1 %122) #5, !dbg !34
  %123 = zext nneg i32 %15 to i64, !dbg !35
  %124 = getelementptr half, ptr addrspace(1) %3, i64 %123, !dbg !36
  %125 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %124, i1 true) #5, !dbg !37
  %126 = bitcast i32 %125 to <2 x half>, !dbg !37
  %127 = sext i32 %17 to i64, !dbg !38
  %128 = getelementptr half, ptr addrspace(1) %1, i64 %127, !dbg !38
  %129 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %128, i1 %10) #5, !dbg !39
  %130 = bitcast i32 %129 to <2 x half>, !dbg !39
  %131 = getelementptr half, ptr addrspace(1) %2, i64 %127, !dbg !40
  %132 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %131, i1 %10) #5, !dbg !41
  %133 = bitcast i32 %132 to <2 x half>, !dbg !41
  %134 = getelementptr half, ptr addrspace(1) %4, i64 %127, !dbg !42
  %135 = fpext <2 x half> %126 to <2 x float>, !dbg !43
  %136 = fpext <2 x half> %130 to <2 x float>, !dbg !44
  %137 = fpext <2 x half> %133 to <2 x float>, !dbg !45
  %138 = fadd <2 x float> %136, %137, !dbg !46
  %139 = insertelement <2 x float> poison, float %.0.i6, i64 0, !dbg !47
  %140 = shufflevector <2 x float> %139, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !47
  %141 = fmul <2 x float> %140, %138, !dbg !47
  %142 = fmul <2 x float> %141, %135, !dbg !48
  %143 = fptrunc <2 x float> %142 to <2 x half>, !dbg !49
  %144 = bitcast <2 x half> %143 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %144, ptr addrspace(1) %134, i1 %10) #5, !dbg !49
  %145 = or disjoint i64 %123, 2048, !dbg !50
  %146 = getelementptr half, ptr addrspace(1) %3, i64 %145, !dbg !36
  %147 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %146, i1 true) #5, !dbg !37
  %148 = bitcast i32 %147 to <2 x half>, !dbg !37
  %.reass.1 = or disjoint i32 %17, 2048
  %149 = sext i32 %.reass.1 to i64, !dbg !38
  %150 = getelementptr half, ptr addrspace(1) %1, i64 %149, !dbg !38
  %151 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %150, i1 %10) #5, !dbg !39
  %152 = bitcast i32 %151 to <2 x half>, !dbg !39
  %153 = getelementptr half, ptr addrspace(1) %2, i64 %149, !dbg !40
  %154 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %153, i1 %10) #5, !dbg !41
  %155 = bitcast i32 %154 to <2 x half>, !dbg !41
  %156 = getelementptr half, ptr addrspace(1) %4, i64 %149, !dbg !42
  %157 = fpext <2 x half> %148 to <2 x float>, !dbg !43
  %158 = fpext <2 x half> %152 to <2 x float>, !dbg !44
  %159 = fpext <2 x half> %155 to <2 x float>, !dbg !45
  %160 = fadd <2 x float> %158, %159, !dbg !46
  %161 = fmul <2 x float> %140, %160, !dbg !47
  %162 = fmul <2 x float> %161, %157, !dbg !48
  %163 = fptrunc <2 x float> %162 to <2 x half>, !dbg !49
  %164 = bitcast <2 x half> %163 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %164, ptr addrspace(1) %156, i1 %10) #5, !dbg !49
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxdna3iuiarg5df5zltn5jik5bvuuyvpn2rygiz2q4ninczsg7t7.py", directory: "/tmp/torchinductor_root/xd")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6, !"reqntidx", i32 1024}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 21, scope: !6)
!11 = !DILocation(line: 25, column: 37, scope: !6)
!12 = !DILocation(line: 35, column: 46, scope: !6)
!13 = !DILocation(line: 35, column: 34, scope: !6)
!14 = !DILocation(line: 35, column: 51, scope: !6)
!15 = !DILocation(line: 36, column: 34, scope: !6)
!16 = !DILocation(line: 36, column: 51, scope: !6)
!17 = !DILocation(line: 35, column: 41, scope: !6)
!18 = !DILocation(line: 286, column: 36, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !6, file: !20, discriminator: 0)
!20 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!21 = !DILocation(line: 43, column: 25, scope: !6)
!22 = !DILocation(line: 35, column: 112, scope: !6)
!23 = !DILocation(line: 36, column: 112, scope: !6)
!24 = !DILocation(line: 37, column: 22, scope: !6)
!25 = !DILocation(line: 39, column: 22, scope: !6)
!26 = !DILocation(line: 41, column: 23, scope: !6)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !21)
!28 = distinct !DILexicalBlockFile(scope: !19, file: !20, discriminator: 0)
!29 = !DILocation(line: 45, column: 19, scope: !6)
!30 = !DILocation(line: 47, column: 19, scope: !6)
!31 = !DILocation(line: 48, column: 28, scope: !6)
!32 = !DILocation(line: 49, column: 4, scope: !6)
!33 = !DILocation(line: 50, column: 28, scope: !6)
!34 = !DILocation(line: 50, column: 40, scope: !6)
!35 = !DILocation(line: 51, column: 40, scope: !6)
!36 = !DILocation(line: 57, column: 35, scope: !6)
!37 = !DILocation(line: 57, column: 42, scope: !6)
!38 = !DILocation(line: 58, column: 35, scope: !6)
!39 = !DILocation(line: 58, column: 52, scope: !6)
!40 = !DILocation(line: 59, column: 35, scope: !6)
!41 = !DILocation(line: 59, column: 52, scope: !6)
!42 = !DILocation(line: 65, column: 29, scope: !6)
!43 = !DILocation(line: 57, column: 95, scope: !6)
!44 = !DILocation(line: 58, column: 114, scope: !6)
!45 = !DILocation(line: 59, column: 114, scope: !6)
!46 = !DILocation(line: 60, column: 24, scope: !6)
!47 = !DILocation(line: 62, column: 24, scope: !6)
!48 = !DILocation(line: 64, column: 24, scope: !6)
!49 = !DILocation(line: 65, column: 53, scope: !6)
!50 = !DILocation(line: 52, column: 31, scope: !6)
!51 = !DILocation(line: 51, column: 4, scope: !6)
