; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_div_mul_pow_sum_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = icmp slt i32 %10, %6, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = and i32 %12, 31, !dbg !11
  %14 = shl i32 %12, 2, !dbg !11
  %15 = and i32 %14, 2044, !dbg !11
  %16 = shl i32 %10, 12, !dbg !12
  %invariant.op = or disjoint i32 %15, %16, !dbg !13
  %17 = zext nneg i32 %15 to i64, !dbg !13
  %18 = sext i32 %invariant.op to i64, !dbg !14
  %19 = getelementptr half, ptr addrspace(1) %1, i64 %18, !dbg !14
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %19, i1 %11) #3, !dbg !15
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !15
  %22 = bitcast i32 %21 to <2 x half>, !dbg !15
  %23 = extractvalue { i32, i32 } %20, 1, !dbg !15
  %24 = bitcast i32 %23 to <2 x half>, !dbg !15
  %25 = getelementptr half, ptr addrspace(1) %2, i64 %18, !dbg !16
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %25, i1 %11) #3, !dbg !17
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !17
  %28 = bitcast i32 %27 to <2 x half>, !dbg !17
  %29 = extractvalue { i32, i32 } %26, 1, !dbg !17
  %30 = bitcast i32 %29 to <2 x half>, !dbg !17
  %31 = getelementptr half, ptr addrspace(1) %3, i64 %17, !dbg !18
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %31, i1 true) #3, !dbg !19
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !19
  %34 = bitcast i32 %33 to <2 x half>, !dbg !19
  %35 = extractvalue { i32, i32 } %32, 1, !dbg !19
  %36 = bitcast i32 %35 to <2 x half>, !dbg !19
  %37 = getelementptr half, ptr addrspace(1) %4, i64 %18, !dbg !20
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %37, i1 %11) #3, !dbg !21
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !21
  %40 = bitcast i32 %39 to <2 x half>, !dbg !21
  %41 = extractvalue { i32, i32 } %38, 1, !dbg !21
  %42 = bitcast i32 %41 to <2 x half>, !dbg !21
  %43 = or disjoint i64 %17, 2048, !dbg !22
  %.reass.1 = or disjoint i32 %invariant.op, 2048
  %44 = sext i32 %.reass.1 to i64, !dbg !14
  %45 = getelementptr half, ptr addrspace(1) %1, i64 %44, !dbg !14
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %45, i1 %11) #3, !dbg !15
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !15
  %48 = bitcast i32 %47 to <2 x half>, !dbg !15
  %49 = extractvalue { i32, i32 } %46, 1, !dbg !15
  %50 = bitcast i32 %49 to <2 x half>, !dbg !15
  %51 = getelementptr half, ptr addrspace(1) %2, i64 %44, !dbg !16
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %51, i1 %11) #3, !dbg !17
  %53 = extractvalue { i32, i32 } %52, 0, !dbg !17
  %54 = bitcast i32 %53 to <2 x half>, !dbg !17
  %55 = extractvalue { i32, i32 } %52, 1, !dbg !17
  %56 = bitcast i32 %55 to <2 x half>, !dbg !17
  %57 = getelementptr half, ptr addrspace(1) %3, i64 %43, !dbg !18
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %57, i1 true) #3, !dbg !19
  %59 = extractvalue { i32, i32 } %58, 0, !dbg !19
  %60 = bitcast i32 %59 to <2 x half>, !dbg !19
  %61 = extractvalue { i32, i32 } %58, 1, !dbg !19
  %62 = bitcast i32 %61 to <2 x half>, !dbg !19
  %63 = getelementptr half, ptr addrspace(1) %4, i64 %44, !dbg !20
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %63, i1 %11) #3, !dbg !21
  %65 = extractvalue { i32, i32 } %64, 0, !dbg !21
  %66 = bitcast i32 %65 to <2 x half>, !dbg !21
  %67 = extractvalue { i32, i32 } %64, 1, !dbg !21
  %68 = bitcast i32 %67 to <2 x half>, !dbg !21
  %69 = fpext <2 x half> %22 to <2 x float>, !dbg !23
  %70 = fpext <2 x half> %28 to <2 x float>, !dbg !24
  %71 = fpext <2 x half> %34 to <2 x float>, !dbg !25
  %72 = fpext <2 x half> %40 to <2 x float>, !dbg !26
  %73 = fadd <2 x float> %69, %70, !dbg !27
  %74 = fmul <2 x float> %73, %71, !dbg !28
  %75 = fmul <2 x float> %74, %72, !dbg !29
  %76 = fadd <2 x float> %75, zeroinitializer, !dbg !30
  %77 = fpext <2 x half> %48 to <2 x float>, !dbg !23
  %78 = fpext <2 x half> %54 to <2 x float>, !dbg !24
  %79 = fpext <2 x half> %60 to <2 x float>, !dbg !25
  %80 = fpext <2 x half> %66 to <2 x float>, !dbg !26
  %81 = fadd <2 x float> %77, %78, !dbg !27
  %82 = fmul <2 x float> %81, %79, !dbg !28
  %83 = fmul <2 x float> %82, %80, !dbg !29
  %84 = fadd <2 x float> %76, %83, !dbg !30
  %85 = fpext <2 x half> %24 to <2 x float>, !dbg !23
  %86 = fpext <2 x half> %30 to <2 x float>, !dbg !24
  %87 = fpext <2 x half> %36 to <2 x float>, !dbg !25
  %88 = fpext <2 x half> %42 to <2 x float>, !dbg !26
  %89 = fadd <2 x float> %85, %86, !dbg !27
  %90 = fmul <2 x float> %89, %87, !dbg !28
  %91 = fmul <2 x float> %90, %88, !dbg !29
  %92 = fadd <2 x float> %91, zeroinitializer, !dbg !30
  %93 = fpext <2 x half> %50 to <2 x float>, !dbg !23
  %94 = fpext <2 x half> %56 to <2 x float>, !dbg !24
  %95 = fpext <2 x half> %62 to <2 x float>, !dbg !25
  %96 = fpext <2 x half> %68 to <2 x float>, !dbg !26
  %97 = fadd <2 x float> %93, %94, !dbg !27
  %98 = fmul <2 x float> %97, %95, !dbg !28
  %99 = fmul <2 x float> %98, %96, !dbg !29
  %100 = fadd <2 x float> %92, %99, !dbg !30
  %101 = lshr i32 %12, 5, !dbg !11
  %shift = shufflevector <2 x float> %84, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !31
  %102 = fadd <2 x float> %84, %shift, !dbg !31
  %103 = fadd <2 x float> %100, %102, !dbg !31
  %shift7 = shufflevector <2 x float> %100, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !31
  %104 = fadd <2 x float> %shift7, %103, !dbg !31
  %105 = extractelement <2 x float> %104, i64 0, !dbg !31
  %106 = select i1 %11, float %105, float 0.000000e+00, !dbg !31
  %107 = bitcast float %106 to i32, !dbg !36
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 16, i32 31), !dbg !36
  %109 = bitcast i32 %108 to float, !dbg !36
  %110 = fadd float %106, %109, !dbg !31
  %111 = bitcast float %110 to i32, !dbg !36
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 8, i32 31), !dbg !36
  %113 = bitcast i32 %112 to float, !dbg !36
  %114 = fadd float %110, %113, !dbg !31
  %115 = bitcast float %114 to i32, !dbg !36
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 4, i32 31), !dbg !36
  %117 = bitcast i32 %116 to float, !dbg !36
  %118 = fadd float %114, %117, !dbg !31
  %119 = bitcast float %118 to i32, !dbg !36
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 2, i32 31), !dbg !36
  %121 = bitcast i32 %120 to float, !dbg !36
  %122 = fadd float %118, %121, !dbg !31
  %123 = bitcast float %122 to i32, !dbg !36
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 1, i32 31), !dbg !36
  %125 = bitcast i32 %124 to float, !dbg !36
  %126 = fadd float %122, %125, !dbg !31
  %127 = and i32 %101, 15, !dbg !36
  %128 = icmp eq i32 %13, 0, !dbg !36
  %129 = zext nneg i32 %127 to i64, !dbg !36
  %130 = getelementptr float, ptr addrspace(3) @global_smem, i64 %129, !dbg !36
  %131 = bitcast float %126 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 %128) #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %132 = icmp slt i32 %12, 16, !dbg !36
  %133 = sext i32 %12 to i64, !dbg !36
  %134 = getelementptr float, ptr addrspace(3) @global_smem, i64 %133, !dbg !36
  %135 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %134, i1 %132) #3, !dbg !36
  %136 = bitcast i32 %135 to float, !dbg !36
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 8, i32 31), !dbg !36
  %138 = bitcast i32 %137 to float, !dbg !36
  %139 = fadd float %136, %138, !dbg !31
  %140 = bitcast float %139 to i32, !dbg !36
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 4, i32 31), !dbg !36
  %142 = bitcast i32 %141 to float, !dbg !36
  %143 = fadd float %139, %142, !dbg !31
  %144 = bitcast float %143 to i32, !dbg !36
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 2, i32 31), !dbg !36
  %146 = bitcast i32 %145 to float, !dbg !36
  %147 = fadd float %143, %146, !dbg !31
  %148 = bitcast float %147 to i32, !dbg !36
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 1, i32 31), !dbg !36
  %150 = bitcast i32 %149 to float, !dbg !36
  %151 = fadd float %147, %150, !dbg !31
  %152 = and i32 %12, 15, !dbg !36
  %153 = icmp eq i32 %152, 0, !dbg !36
  %154 = and i1 %132, %153, !dbg !36
  %155 = bitcast float %151 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %155, i1 %154) #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %156 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !36
  %157 = sext i32 %10 to i64, !dbg !37
  %158 = getelementptr float, ptr addrspace(1) %5, i64 %157, !dbg !37
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %11) #3, !dbg !38
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %11) #3, !dbg !38
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %11) #3, !dbg !38
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %11) #3, !dbg !38
  %163 = bitcast i32 %162 to float, !dbg !38
  %164 = fmul float %156, -5.000000e-01, !dbg !39
  %165 = fmul float %163, %163, !dbg !40
  %166 = fmul float %165, %163, !dbg !41
  %167 = fmul float %164, %166, !dbg !42
  %168 = fmul float %167, 0x3F30000000000000, !dbg !43
  %169 = getelementptr half, ptr addrspace(1) %0, i64 %18, !dbg !44
  %170 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %169, i1 %11) #3, !dbg !45
  %171 = extractvalue { i32, i32 } %170, 0, !dbg !45
  %172 = bitcast i32 %171 to <2 x half>, !dbg !45
  %173 = extractvalue { i32, i32 } %170, 1, !dbg !45
  %174 = bitcast i32 %173 to <2 x half>, !dbg !45
  %175 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %19, i1 %11) #3, !dbg !46
  %176 = extractvalue { i32, i32 } %175, 0, !dbg !46
  %177 = bitcast i32 %176 to <2 x half>, !dbg !46
  %178 = extractvalue { i32, i32 } %175, 1, !dbg !46
  %179 = bitcast i32 %178 to <2 x half>, !dbg !46
  %180 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %25, i1 %11) #3, !dbg !47
  %181 = extractvalue { i32, i32 } %180, 0, !dbg !47
  %182 = bitcast i32 %181 to <2 x half>, !dbg !47
  %183 = extractvalue { i32, i32 } %180, 1, !dbg !47
  %184 = bitcast i32 %183 to <2 x half>, !dbg !47
  %185 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %31, i1 true) #3, !dbg !48
  %186 = extractvalue { i32, i32 } %185, 0, !dbg !48
  %187 = bitcast i32 %186 to <2 x half>, !dbg !48
  %188 = extractvalue { i32, i32 } %185, 1, !dbg !48
  %189 = bitcast i32 %188 to <2 x half>, !dbg !48
  %190 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %37, i1 %11) #3, !dbg !49
  %191 = extractvalue { i32, i32 } %190, 0, !dbg !49
  %192 = bitcast i32 %191 to <2 x half>, !dbg !49
  %193 = extractvalue { i32, i32 } %190, 1, !dbg !49
  %194 = bitcast i32 %193 to <2 x half>, !dbg !49
  %195 = fpext <2 x half> %172 to <2 x float>, !dbg !50
  %196 = fpext <2 x half> %177 to <2 x float>, !dbg !51
  %197 = fpext <2 x half> %182 to <2 x float>, !dbg !52
  %198 = fpext <2 x half> %187 to <2 x float>, !dbg !53
  %199 = fpext <2 x half> %192 to <2 x float>, !dbg !54
  %200 = fadd <2 x float> %196, %197, !dbg !55
  %201 = fmul <2 x float> %200, %198, !dbg !56
  %202 = insertelement <2 x float> poison, float %163, i64 0, !dbg !57
  %203 = shufflevector <2 x float> %202, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !57
  %204 = fmul <2 x float> %201, %203, !dbg !57
  %205 = fmul <2 x float> %199, splat (float 2.000000e+00), !dbg !58
  %206 = insertelement <2 x float> poison, float %168, i64 0, !dbg !59
  %207 = shufflevector <2 x float> %206, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !59
  %208 = fmul <2 x float> %207, %205, !dbg !59
  %209 = fadd <2 x float> %204, %208, !dbg !60
  %210 = fadd <2 x float> %209, %195, !dbg !61
  %211 = fptrunc <2 x float> %210 to <2 x half>, !dbg !62
  %212 = fpext <2 x half> %174 to <2 x float>, !dbg !50
  %213 = fpext <2 x half> %179 to <2 x float>, !dbg !51
  %214 = fpext <2 x half> %184 to <2 x float>, !dbg !52
  %215 = fpext <2 x half> %189 to <2 x float>, !dbg !53
  %216 = fpext <2 x half> %194 to <2 x float>, !dbg !54
  %217 = fadd <2 x float> %213, %214, !dbg !55
  %218 = fmul <2 x float> %217, %215, !dbg !56
  %219 = fmul <2 x float> %218, %203, !dbg !57
  %220 = fmul <2 x float> %216, splat (float 2.000000e+00), !dbg !58
  %221 = fmul <2 x float> %207, %220, !dbg !59
  %222 = fadd <2 x float> %219, %221, !dbg !60
  %223 = fadd <2 x float> %222, %212, !dbg !61
  %224 = fptrunc <2 x float> %223 to <2 x half>, !dbg !62
  %225 = bitcast <2 x half> %211 to i32, !dbg !62
  %226 = bitcast <2 x half> %224 to i32, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %225, i32 %226, ptr addrspace(1) %169, i1 %11) #3, !dbg !62
  %227 = getelementptr half, ptr addrspace(1) %0, i64 %44, !dbg !44
  %228 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %227, i1 %11) #3, !dbg !45
  %229 = extractvalue { i32, i32 } %228, 0, !dbg !45
  %230 = bitcast i32 %229 to <2 x half>, !dbg !45
  %231 = extractvalue { i32, i32 } %228, 1, !dbg !45
  %232 = bitcast i32 %231 to <2 x half>, !dbg !45
  %233 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %45, i1 %11) #3, !dbg !46
  %234 = extractvalue { i32, i32 } %233, 0, !dbg !46
  %235 = bitcast i32 %234 to <2 x half>, !dbg !46
  %236 = extractvalue { i32, i32 } %233, 1, !dbg !46
  %237 = bitcast i32 %236 to <2 x half>, !dbg !46
  %238 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %51, i1 %11) #3, !dbg !47
  %239 = extractvalue { i32, i32 } %238, 0, !dbg !47
  %240 = bitcast i32 %239 to <2 x half>, !dbg !47
  %241 = extractvalue { i32, i32 } %238, 1, !dbg !47
  %242 = bitcast i32 %241 to <2 x half>, !dbg !47
  %243 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %57, i1 true) #3, !dbg !48
  %244 = extractvalue { i32, i32 } %243, 0, !dbg !48
  %245 = bitcast i32 %244 to <2 x half>, !dbg !48
  %246 = extractvalue { i32, i32 } %243, 1, !dbg !48
  %247 = bitcast i32 %246 to <2 x half>, !dbg !48
  %248 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %63, i1 %11) #3, !dbg !49
  %249 = extractvalue { i32, i32 } %248, 0, !dbg !49
  %250 = bitcast i32 %249 to <2 x half>, !dbg !49
  %251 = extractvalue { i32, i32 } %248, 1, !dbg !49
  %252 = bitcast i32 %251 to <2 x half>, !dbg !49
  %253 = fpext <2 x half> %230 to <2 x float>, !dbg !50
  %254 = fpext <2 x half> %235 to <2 x float>, !dbg !51
  %255 = fpext <2 x half> %240 to <2 x float>, !dbg !52
  %256 = fpext <2 x half> %245 to <2 x float>, !dbg !53
  %257 = fpext <2 x half> %250 to <2 x float>, !dbg !54
  %258 = fadd <2 x float> %254, %255, !dbg !55
  %259 = fmul <2 x float> %258, %256, !dbg !56
  %260 = fmul <2 x float> %259, %203, !dbg !57
  %261 = fmul <2 x float> %257, splat (float 2.000000e+00), !dbg !58
  %262 = fmul <2 x float> %207, %261, !dbg !59
  %263 = fadd <2 x float> %260, %262, !dbg !60
  %264 = fadd <2 x float> %263, %253, !dbg !61
  %265 = fptrunc <2 x float> %264 to <2 x half>, !dbg !62
  %266 = fpext <2 x half> %232 to <2 x float>, !dbg !50
  %267 = fpext <2 x half> %237 to <2 x float>, !dbg !51
  %268 = fpext <2 x half> %242 to <2 x float>, !dbg !52
  %269 = fpext <2 x half> %247 to <2 x float>, !dbg !53
  %270 = fpext <2 x half> %252 to <2 x float>, !dbg !54
  %271 = fadd <2 x float> %267, %268, !dbg !55
  %272 = fmul <2 x float> %271, %269, !dbg !56
  %273 = fmul <2 x float> %272, %203, !dbg !57
  %274 = fmul <2 x float> %270, splat (float 2.000000e+00), !dbg !58
  %275 = fmul <2 x float> %207, %274, !dbg !59
  %276 = fadd <2 x float> %273, %275, !dbg !60
  %277 = fadd <2 x float> %276, %266, !dbg !61
  %278 = fptrunc <2 x float> %277 to <2 x half>, !dbg !62
  %279 = bitcast <2 x half> %265 to i32, !dbg !62
  %280 = bitcast <2 x half> %278 to i32, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %279, i32 %280, ptr addrspace(1) %227, i1 %11) #3, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccr6kpecjjvjczb635rxg7suvuumsc74vqgkqqcpdj2b5fxdchar.py", directory: "/tmp/torchinductor_root/cr")
!4 = !{ptr @triton_red_fused__to_copy_add_div_mul_pow_sum_4, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_mul_pow_sum_4", linkageName: "triton_red_fused__to_copy_add_div_mul_pow_sum_4", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 21, scope: !6)
!11 = !DILocation(line: 25, column: 37, scope: !6)
!12 = !DILocation(line: 35, column: 46, scope: !6)
!13 = !DILocation(line: 29, column: 40, scope: !6)
!14 = !DILocation(line: 35, column: 34, scope: !6)
!15 = !DILocation(line: 35, column: 51, scope: !6)
!16 = !DILocation(line: 36, column: 34, scope: !6)
!17 = !DILocation(line: 36, column: 51, scope: !6)
!18 = !DILocation(line: 37, column: 34, scope: !6)
!19 = !DILocation(line: 37, column: 41, scope: !6)
!20 = !DILocation(line: 38, column: 34, scope: !6)
!21 = !DILocation(line: 38, column: 51, scope: !6)
!22 = !DILocation(line: 30, column: 31, scope: !6)
!23 = !DILocation(line: 35, column: 112, scope: !6)
!24 = !DILocation(line: 36, column: 112, scope: !6)
!25 = !DILocation(line: 37, column: 94, scope: !6)
!26 = !DILocation(line: 38, column: 112, scope: !6)
!27 = !DILocation(line: 39, column: 22, scope: !6)
!28 = !DILocation(line: 40, column: 22, scope: !6)
!29 = !DILocation(line: 43, column: 22, scope: !6)
!30 = !DILocation(line: 45, column: 25, scope: !6)
!31 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !35)
!32 = distinct !DILexicalBlockFile(scope: !34, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!34 = distinct !DILexicalBlockFile(scope: !6, file: !33, discriminator: 0)
!35 = !DILocation(line: 47, column: 27, scope: !6)
!36 = !DILocation(line: 286, column: 36, scope: !34, inlinedAt: !35)
!37 = !DILocation(line: 48, column: 31, scope: !6)
!38 = !DILocation(line: 48, column: 36, scope: !6)
!39 = !DILocation(line: 65, column: 24, scope: !6)
!40 = !DILocation(line: 66, column: 24, scope: !6)
!41 = !DILocation(line: 67, column: 24, scope: !6)
!42 = !DILocation(line: 68, column: 24, scope: !6)
!43 = !DILocation(line: 70, column: 24, scope: !6)
!44 = !DILocation(line: 55, column: 39, scope: !6)
!45 = !DILocation(line: 55, column: 56, scope: !6)
!46 = !DILocation(line: 56, column: 52, scope: !6)
!47 = !DILocation(line: 57, column: 52, scope: !6)
!48 = !DILocation(line: 58, column: 42, scope: !6)
!49 = !DILocation(line: 59, column: 52, scope: !6)
!50 = !DILocation(line: 55, column: 118, scope: !6)
!51 = !DILocation(line: 56, column: 114, scope: !6)
!52 = !DILocation(line: 57, column: 114, scope: !6)
!53 = !DILocation(line: 58, column: 95, scope: !6)
!54 = !DILocation(line: 59, column: 114, scope: !6)
!55 = !DILocation(line: 60, column: 24, scope: !6)
!56 = !DILocation(line: 61, column: 24, scope: !6)
!57 = !DILocation(line: 63, column: 24, scope: !6)
!58 = !DILocation(line: 73, column: 24, scope: !6)
!59 = !DILocation(line: 74, column: 24, scope: !6)
!60 = !DILocation(line: 75, column: 24, scope: !6)
!61 = !DILocation(line: 77, column: 24, scope: !6)
!62 = !DILocation(line: 78, column: 56, scope: !6)
!63 = !DILocation(line: 49, column: 4, scope: !6)
