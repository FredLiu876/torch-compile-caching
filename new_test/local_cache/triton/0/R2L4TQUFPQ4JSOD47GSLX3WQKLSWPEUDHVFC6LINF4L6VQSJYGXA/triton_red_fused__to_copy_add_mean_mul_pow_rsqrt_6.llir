; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = shl i32 %9, 6, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = lshr i32 %11, 3, !dbg !11
  %13 = and i32 %12, 63, !dbg !11
  %14 = or disjoint i32 %13, %10, !dbg !12
  %15 = icmp slt i32 %14, %5, !dbg !13
  %16 = shl i32 %11, 3, !dbg !14
  %17 = and i32 %16, 56, !dbg !14
  %18 = shl i32 %14, 12, !dbg !15
  %19 = or disjoint i32 %18, %17
  %20 = insertelement <8 x i1> poison, i1 %15, i64 0, !dbg !16
  %21 = shufflevector <8 x i1> %20, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !16
  br label %22, !dbg !17

22:                                               ; preds = %8, %22
  %23 = phi i32 [ 0, %8 ], [ %71, %22 ]
  %24 = phi <8 x float> [ zeroinitializer, %8 ], [ %70, %22 ]
  %25 = or i32 %19, %23, !dbg !18
  %26 = sext i32 %25 to i64, !dbg !19
  %27 = getelementptr half, ptr addrspace(1) %1, i64 %26, !dbg !19
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %27, i1 %15) #5, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !20
  %30 = bitcast i32 %29 to <2 x half>, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !20
  %32 = bitcast i32 %31 to <2 x half>, !dbg !20
  %33 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !20
  %34 = bitcast i32 %33 to <2 x half>, !dbg !20
  %35 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !20
  %36 = bitcast i32 %35 to <2 x half>, !dbg !20
  %37 = getelementptr half, ptr addrspace(1) %2, i64 %26, !dbg !21
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %37, i1 %15) #5, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !22
  %40 = bitcast i32 %39 to <2 x half>, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !22
  %42 = bitcast i32 %41 to <2 x half>, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !22
  %44 = bitcast i32 %43 to <2 x half>, !dbg !22
  %45 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !22
  %46 = bitcast i32 %45 to <2 x half>, !dbg !22
  %47 = shufflevector <2 x half> %30, <2 x half> %32, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %48 = shufflevector <2 x half> %34, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %49 = shufflevector <8 x half> %47, <8 x half> %48, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !23
  %50 = shufflevector <2 x half> %34, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %51 = shufflevector <8 x half> %49, <8 x half> %50, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !23
  %52 = shufflevector <2 x half> %36, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %53 = shufflevector <8 x half> %51, <8 x half> %52, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !23
  %54 = shufflevector <2 x half> %36, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !23
  %55 = shufflevector <8 x half> %53, <8 x half> %54, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !23
  %56 = fpext <8 x half> %55 to <8 x float>, !dbg !23
  %57 = shufflevector <2 x half> %40, <2 x half> %42, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %58 = shufflevector <2 x half> %44, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %59 = shufflevector <8 x half> %57, <8 x half> %58, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !24
  %60 = shufflevector <2 x half> %44, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %61 = shufflevector <8 x half> %59, <8 x half> %60, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !24
  %62 = shufflevector <2 x half> %46, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %63 = shufflevector <8 x half> %61, <8 x half> %62, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !24
  %64 = shufflevector <2 x half> %46, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !24
  %65 = shufflevector <8 x half> %63, <8 x half> %64, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !24
  %66 = fpext <8 x half> %65 to <8 x float>, !dbg !24
  %67 = fadd <8 x float> %56, %66, !dbg !25
  %68 = fmul <8 x float> %67, %67, !dbg !26
  %69 = fadd <8 x float> %24, %68, !dbg !27
  %70 = select <8 x i1> %21, <8 x float> %69, <8 x float> %24, !dbg !16
  %71 = add nuw nsw i32 %23, 64, !dbg !17
  %72 = icmp samesign ult i32 %23, 4032, !dbg !17
  br i1 %72, label %22, label %73, !dbg !17

73:                                               ; preds = %22
  %74 = and i32 %11, 63, !dbg !11
  %75 = or disjoint i32 %10, %74, !dbg !12
  %76 = icmp slt i32 %75, %5, !dbg !13
  %shift = shufflevector <8 x float> %70, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %77 = fadd <8 x float> %70, %shift, !dbg !28
  %shift49 = shufflevector <8 x float> %70, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %78 = fadd <8 x float> %shift49, %77, !dbg !28
  %shift50 = shufflevector <8 x float> %70, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %79 = fadd <8 x float> %shift50, %78, !dbg !28
  %shift51 = shufflevector <8 x float> %70, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %80 = fadd <8 x float> %shift51, %79, !dbg !28
  %shift52 = shufflevector <8 x float> %70, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %81 = fadd <8 x float> %shift52, %80, !dbg !28
  %shift53 = shufflevector <8 x float> %70, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %82 = fadd <8 x float> %shift53, %81, !dbg !28
  %shift54 = shufflevector <8 x float> %70, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !28
  %83 = fadd <8 x float> %shift54, %82, !dbg !28
  %84 = extractelement <8 x float> %83, i64 0, !dbg !28
  %85 = bitcast float %84 to i32, !dbg !33
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 4, i32 31), !dbg !33
  %87 = bitcast i32 %86 to float, !dbg !33
  %88 = fadd float %84, %87, !dbg !28
  %89 = bitcast float %88 to i32, !dbg !33
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 2, i32 31), !dbg !33
  %91 = bitcast i32 %90 to float, !dbg !33
  %92 = fadd float %88, %91, !dbg !28
  %93 = bitcast float %92 to i32, !dbg !33
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 1, i32 31), !dbg !33
  %95 = bitcast i32 %94 to float, !dbg !33
  %96 = fadd float %92, %95, !dbg !28
  %97 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %13, !dbg !34
  %98 = bitcast float %96 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %99 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %74, !dbg !34
  %100 = load float, ptr addrspace(3) %99, align 4, !dbg !34
  %101 = tail call float @llvm.nvvm.div.full(float %100, float 4.096000e+03), !dbg !35
  %102 = tail call float @llvm.nvvm.div.full(float %96, float 4.096000e+03), !dbg !35
  %103 = fadd float %101, 0x3EE4F8B580000000, !dbg !36
  %104 = fadd float %102, 0x3EE4F8B580000000, !dbg !36
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %.not.i = icmp eq i32 %105, 0, !dbg !34
  br i1 %.not.i, label %108, label %106, !dbg !34

106:                                              ; preds = %73
  %107 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %103), !dbg !34
  br label %__nv_rsqrtf.exit, !dbg !34

108:                                              ; preds = %73
  %109 = tail call float @llvm.nvvm.rsqrt.approx.f(float %103), !dbg !34
  br label %__nv_rsqrtf.exit, !dbg !34

__nv_rsqrtf.exit:                                 ; preds = %106, %108
  %.0.i = phi float [ %107, %106 ], [ %109, %108 ], !dbg !34
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !34
  %.not.i25 = icmp eq i32 %117, 0, !dbg !34
  br i1 %.not.i25, label %120, label %118, !dbg !34

118:                                              ; preds = %__nv_rsqrtf.exit
  %119 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %104), !dbg !34
  br label %__nv_rsqrtf.exit27, !dbg !34

120:                                              ; preds = %__nv_rsqrtf.exit
  %121 = tail call float @llvm.nvvm.rsqrt.approx.f(float %104), !dbg !34
  br label %__nv_rsqrtf.exit27, !dbg !34

__nv_rsqrtf.exit27:                               ; preds = %118, %120
  %.0.i26 = phi float [ %119, %118 ], [ %121, %120 ], !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %122 = sext i32 %75 to i64, !dbg !38
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !38
  %124 = and i32 %11, 448, !dbg !39
  %125 = icmp eq i32 %124, 0, !dbg !39
  %126 = bitcast float %.0.i to i32, !dbg !39
  %127 = and i1 %125, %76, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %126, ptr addrspace(1) %123, i1 %127) #5, !dbg !39
  %128 = zext nneg i32 %17 to i64, !dbg !40
  %129 = insertelement <2 x float> poison, float %.0.i26, i64 0, !dbg !41
  %130 = shufflevector <2 x float> %129, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !41
  br label %131, !dbg !40

131:                                              ; preds = %__nv_rsqrtf.exit27, %131
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit27 ], [ %indvars.iv.next, %131 ]
  %132 = or disjoint i64 %indvars.iv, %128, !dbg !42
  %133 = getelementptr half, ptr addrspace(1) %3, i64 %132, !dbg !43
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %133, i1 true) #5, !dbg !44
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !44
  %136 = bitcast i32 %135 to <2 x half>, !dbg !44
  %137 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !44
  %138 = bitcast i32 %137 to <2 x half>, !dbg !44
  %139 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !44
  %140 = bitcast i32 %139 to <2 x half>, !dbg !44
  %141 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !44
  %142 = bitcast i32 %141 to <2 x half>, !dbg !44
  %143 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %19, %143
  %144 = sext i32 %.reass to i64, !dbg !45
  %145 = getelementptr half, ptr addrspace(1) %1, i64 %144, !dbg !45
  %146 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %145, i1 %15) #5, !dbg !46
  %147 = extractvalue { i32, i32, i32, i32 } %146, 0, !dbg !46
  %148 = bitcast i32 %147 to <2 x half>, !dbg !46
  %149 = extractvalue { i32, i32, i32, i32 } %146, 1, !dbg !46
  %150 = bitcast i32 %149 to <2 x half>, !dbg !46
  %151 = extractvalue { i32, i32, i32, i32 } %146, 2, !dbg !46
  %152 = bitcast i32 %151 to <2 x half>, !dbg !46
  %153 = extractvalue { i32, i32, i32, i32 } %146, 3, !dbg !46
  %154 = bitcast i32 %153 to <2 x half>, !dbg !46
  %155 = getelementptr half, ptr addrspace(1) %2, i64 %144, !dbg !47
  %156 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %155, i1 %15) #5, !dbg !48
  %157 = extractvalue { i32, i32, i32, i32 } %156, 0, !dbg !48
  %158 = bitcast i32 %157 to <2 x half>, !dbg !48
  %159 = extractvalue { i32, i32, i32, i32 } %156, 1, !dbg !48
  %160 = bitcast i32 %159 to <2 x half>, !dbg !48
  %161 = extractvalue { i32, i32, i32, i32 } %156, 2, !dbg !48
  %162 = bitcast i32 %161 to <2 x half>, !dbg !48
  %163 = extractvalue { i32, i32, i32, i32 } %156, 3, !dbg !48
  %164 = bitcast i32 %163 to <2 x half>, !dbg !48
  %165 = getelementptr half, ptr addrspace(1) %4, i64 %144, !dbg !49
  %166 = fpext <2 x half> %136 to <2 x float>, !dbg !50
  %167 = fpext <2 x half> %148 to <2 x float>, !dbg !51
  %168 = fpext <2 x half> %158 to <2 x float>, !dbg !52
  %169 = fadd <2 x float> %167, %168, !dbg !53
  %170 = fmul <2 x float> %130, %169, !dbg !41
  %171 = fmul <2 x float> %170, %166, !dbg !54
  %172 = fptrunc <2 x float> %171 to <2 x half>, !dbg !55
  %173 = fpext <2 x half> %138 to <2 x float>, !dbg !50
  %174 = fpext <2 x half> %150 to <2 x float>, !dbg !51
  %175 = fpext <2 x half> %160 to <2 x float>, !dbg !52
  %176 = fadd <2 x float> %174, %175, !dbg !53
  %177 = fmul <2 x float> %130, %176, !dbg !41
  %178 = fmul <2 x float> %177, %173, !dbg !54
  %179 = fptrunc <2 x float> %178 to <2 x half>, !dbg !55
  %180 = fpext <2 x half> %140 to <2 x float>, !dbg !50
  %181 = fpext <2 x half> %152 to <2 x float>, !dbg !51
  %182 = fpext <2 x half> %162 to <2 x float>, !dbg !52
  %183 = fadd <2 x float> %181, %182, !dbg !53
  %184 = fmul <2 x float> %130, %183, !dbg !41
  %185 = fmul <2 x float> %184, %180, !dbg !54
  %186 = fptrunc <2 x float> %185 to <2 x half>, !dbg !55
  %187 = fpext <2 x half> %142 to <2 x float>, !dbg !50
  %188 = fpext <2 x half> %154 to <2 x float>, !dbg !51
  %189 = fpext <2 x half> %164 to <2 x float>, !dbg !52
  %190 = fadd <2 x float> %188, %189, !dbg !53
  %191 = fmul <2 x float> %130, %190, !dbg !41
  %192 = fmul <2 x float> %191, %187, !dbg !54
  %193 = fptrunc <2 x float> %192 to <2 x half>, !dbg !55
  %194 = bitcast <2 x half> %172 to i32, !dbg !55
  %195 = bitcast <2 x half> %179 to i32, !dbg !55
  %196 = bitcast <2 x half> %186 to i32, !dbg !55
  %197 = bitcast <2 x half> %193 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %194, i32 %195, i32 %196, i32 %197, ptr addrspace(1) %165, i1 %15) #5, !dbg !55
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !40
  %198 = icmp samesign ult i64 %indvars.iv, 4032, !dbg !40
  br i1 %198, label %131, label %199, !dbg !40

199:                                              ; preds = %131
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cftrsow5qcbxopniidi22t6ajsrwmzbq4o64dytrbucrl2gj2i5m.py", directory: "./local_cache/ft")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 42, column: 48, scope: !6)
!17 = !DILocation(line: 29, column: 40, scope: !6)
!18 = !DILocation(line: 35, column: 41, scope: !6)
!19 = !DILocation(line: 35, column: 34, scope: !6)
!20 = !DILocation(line: 35, column: 51, scope: !6)
!21 = !DILocation(line: 36, column: 34, scope: !6)
!22 = !DILocation(line: 36, column: 51, scope: !6)
!23 = !DILocation(line: 35, column: 112, scope: !6)
!24 = !DILocation(line: 36, column: 112, scope: !6)
!25 = !DILocation(line: 37, column: 22, scope: !6)
!26 = !DILocation(line: 39, column: 22, scope: !6)
!27 = !DILocation(line: 41, column: 23, scope: !6)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !32)
!29 = distinct !DILexicalBlockFile(scope: !31, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!31 = distinct !DILexicalBlockFile(scope: !6, file: !30, discriminator: 0)
!32 = !DILocation(line: 43, column: 25, scope: !6)
!33 = !DILocation(line: 286, column: 36, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 48, column: 28, scope: !6)
!35 = !DILocation(line: 45, column: 19, scope: !6)
!36 = !DILocation(line: 47, column: 19, scope: !6)
!37 = !DILocation(line: 49, column: 4, scope: !6)
!38 = !DILocation(line: 50, column: 28, scope: !6)
!39 = !DILocation(line: 50, column: 40, scope: !6)
!40 = !DILocation(line: 51, column: 40, scope: !6)
!41 = !DILocation(line: 62, column: 24, scope: !6)
!42 = !DILocation(line: 52, column: 31, scope: !6)
!43 = !DILocation(line: 57, column: 35, scope: !6)
!44 = !DILocation(line: 57, column: 42, scope: !6)
!45 = !DILocation(line: 58, column: 35, scope: !6)
!46 = !DILocation(line: 58, column: 52, scope: !6)
!47 = !DILocation(line: 59, column: 35, scope: !6)
!48 = !DILocation(line: 59, column: 52, scope: !6)
!49 = !DILocation(line: 65, column: 29, scope: !6)
!50 = !DILocation(line: 57, column: 95, scope: !6)
!51 = !DILocation(line: 58, column: 114, scope: !6)
!52 = !DILocation(line: 59, column: 114, scope: !6)
!53 = !DILocation(line: 60, column: 24, scope: !6)
!54 = !DILocation(line: 64, column: 24, scope: !6)
!55 = !DILocation(line: 65, column: 53, scope: !6)
!56 = !DILocation(line: 51, column: 4, scope: !6)
