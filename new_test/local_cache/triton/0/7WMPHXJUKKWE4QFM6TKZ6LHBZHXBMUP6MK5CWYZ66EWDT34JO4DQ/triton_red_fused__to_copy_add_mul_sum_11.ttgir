#blocked = #ttg.blocked<{sizePerThread = [4, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":18:0)
#loc1 = loc(unknown)
#loc34 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":49:27)
#loc41 = loc(callsite(#loc1 at #loc34))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__to_copy_add_mul_sum_11(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":18:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":18:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":18:0), %arg3: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":18:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":18:0), %arg5: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":18:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":18:0), %arg7: i32 loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":18:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<8x64xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<8x64xf16, #blocked> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<1x64xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<4096> : tensor<1x64xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<8xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<8xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<8x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<8x1xi32, #blocked1> loc(#loc5)
    %10 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc6)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc6)
    %12 = tt.splat %arg7 : i32 -> tensor<1x64xi32, #blocked> loc(#loc7)
    %13 = tt.broadcast %8 : tensor<8x1xi32, #blocked> -> tensor<8x64xi32, #blocked> loc(#loc8)
    %14 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<8x64x!tt.ptr<f16>, #blocked> loc(#loc9)
    %15 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<8x64x!tt.ptr<f16>, #blocked> loc(#loc10)
    %16 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<8x64x!tt.ptr<f16>, #blocked> loc(#loc11)
    %17 = tt.splat %arg3 : !tt.ptr<f16> -> tensor<8x64x!tt.ptr<f16>, #blocked> loc(#loc12)
    %18 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc13)
    %19 = scf.for %arg8 = %c0_i32 to %arg7 step %c64_i32 iter_args(%arg9 = %cst) -> (tensor<8x64xf32, #blocked>)  : i32 {
      %26 = tt.splat %arg8 : i32 -> tensor<1x64xi32, #blocked> loc(#loc15)
      %27 = arith.addi %26, %11 : tensor<1x64xi32, #blocked> loc(#loc15)
      %28 = arith.cmpi slt, %27, %12 : tensor<1x64xi32, #blocked> loc(#loc7)
      %29 = arith.muli %27, %cst_2 : tensor<1x64xi32, #blocked> loc(#loc16)
      %30 = tt.broadcast %29 : tensor<1x64xi32, #blocked> -> tensor<8x64xi32, #blocked> loc(#loc8)
      %31 = arith.addi %13, %30 : tensor<8x64xi32, #blocked> loc(#loc8)
      %32 = tt.addptr %14, %31 : tensor<8x64x!tt.ptr<f16>, #blocked>, tensor<8x64xi32, #blocked> loc(#loc9)
      %33 = tt.broadcast %28 : tensor<1x64xi1, #blocked> -> tensor<8x64xi1, #blocked> loc(#loc17)
      %34 = tt.load %32, %33, %cst_0 evictionPolicy = evict_first : tensor<8x64x!tt.ptr<f16>, #blocked> loc(#loc17)
      %35 = arith.extf %34 : tensor<8x64xf16, #blocked> to tensor<8x64xf32, #blocked> loc(#loc18)
      %36 = tt.addptr %15, %31 : tensor<8x64x!tt.ptr<f16>, #blocked>, tensor<8x64xi32, #blocked> loc(#loc10)
      %37 = tt.load %36, %33, %cst_0 evictionPolicy = evict_first : tensor<8x64x!tt.ptr<f16>, #blocked> loc(#loc19)
      %38 = arith.extf %37 : tensor<8x64xf16, #blocked> to tensor<8x64xf32, #blocked> loc(#loc20)
      %39 = tt.addptr %16, %31 : tensor<8x64x!tt.ptr<f16>, #blocked>, tensor<8x64xi32, #blocked> loc(#loc11)
      %40 = tt.load %39, %33, %cst_0 evictionPolicy = evict_first : tensor<8x64x!tt.ptr<f16>, #blocked> loc(#loc21)
      %41 = arith.extf %40 : tensor<8x64xf16, #blocked> to tensor<8x64xf32, #blocked> loc(#loc22)
      %42 = tt.addptr %17, %31 : tensor<8x64x!tt.ptr<f16>, #blocked>, tensor<8x64xi32, #blocked> loc(#loc12)
      %43 = tt.load %42, %33, %cst_0 evictionPolicy = evict_first : tensor<8x64x!tt.ptr<f16>, #blocked> loc(#loc23)
      %44 = arith.extf %43 : tensor<8x64xf16, #blocked> to tensor<8x64xf32, #blocked> loc(#loc24)
      %45 = tt.addptr %18, %27 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc13)
      %46 = tt.load %45, %28, %cst_1 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc25)
      %47 = arith.addf %35, %38 : tensor<8x64xf32, #blocked> loc(#loc26)
      %48 = arith.addf %47, %41 : tensor<8x64xf32, #blocked> loc(#loc27)
      %49 = tt.broadcast %46 : tensor<1x64xf32, #blocked> -> tensor<8x64xf32, #blocked> loc(#loc28)
      %50 = arith.mulf %44, %49 : tensor<8x64xf32, #blocked> loc(#loc28)
      %51 = arith.mulf %48, %50 : tensor<8x64xf32, #blocked> loc(#loc29)
      %52 = arith.addf %arg9, %51 : tensor<8x64xf32, #blocked> loc(#loc30)
      %53 = arith.select %33, %52, %arg9 : tensor<8x64xi1, #blocked>, tensor<8x64xf32, #blocked> loc(#loc31)
      scf.yield %53 : tensor<8x64xf32, #blocked> loc(#loc32)
    } loc(#loc14)
    %20 = "tt.reduce"(%19) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32 loc(callsite(#loc1 at #loc34)), %arg9: f32 loc(callsite(#loc1 at #loc34))):
      %26 = arith.addf %arg8, %arg9 : f32 loc(#loc43)
      tt.reduce.return %26 : f32 loc(#loc40)
    }) : (tensor<8x64xf32, #blocked>) -> tensor<8xf32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc40)
    %21 = ttg.convert_layout %20 : tensor<8xf32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<8xf32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc36)
    %22 = tt.expand_dims %21 {axis = 1 : i32} : tensor<8xf32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xf32, #blocked1> loc(#loc37)
    %23 = tt.splat %arg5 : !tt.ptr<f16> -> tensor<8x1x!tt.ptr<f16>, #blocked1> loc(#loc38)
    %24 = tt.addptr %23, %9 : tensor<8x1x!tt.ptr<f16>, #blocked1>, tensor<8x1xi32, #blocked1> loc(#loc38)
    %25 = arith.truncf %22 : tensor<8x1xf32, #blocked1> to tensor<8x1xf16, #blocked1> loc(#loc36)
    tt.store %24, %25 : tensor<8x1x!tt.ptr<f16>, #blocked1> loc(#loc36)
    tt.return loc(#loc39)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":22:28)
#loc3 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":22:33)
#loc4 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":23:44)
#loc5 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":23:23)
#loc6 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":25:37)
#loc7 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":31:29)
#loc8 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":35:39)
#loc9 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":35:34)
#loc10 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":36:34)
#loc11 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":37:34)
#loc12 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":38:34)
#loc13 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":39:34)
#loc14 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":29:40)
#loc15 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":30:31)
#loc16 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":35:44)
#loc17 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":35:51)
#loc18 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":35:105)
#loc19 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":36:51)
#loc20 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":36:105)
#loc21 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":37:51)
#loc22 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":37:105)
#loc23 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":38:51)
#loc24 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":38:105)
#loc25 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":39:41)
#loc26 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":40:22)
#loc27 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":41:22)
#loc28 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":43:22)
#loc29 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":45:23)
#loc30 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":47:25)
#loc31 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":48:42)
#loc32 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":48:8)
#loc33 = loc("/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language/standard.py":286:36)
#loc35 = loc("/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language/standard.py":256:15)
#loc36 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":50:37)
#loc37 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":49:30)
#loc38 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":50:25)
#loc39 = loc("/tmp/torchinductor_root/yk/cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py":50:4)
#loc40 = loc(callsite(#loc33 at #loc34))
#loc42 = loc(callsite(#loc35 at #loc33))
#loc43 = loc(callsite(#loc42 at #loc34))
