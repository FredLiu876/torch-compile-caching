; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_red_fused__to_copy_add_div_mul_pow_sum_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8, ptr addrspace(1) readnone captures(none) %9) local_unnamed_addr !dbg !6 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %12 = shl i32 %11, 6, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %14 = lshr i32 %13, 3, !dbg !11
  %15 = and i32 %14, 63, !dbg !11
  %16 = or disjoint i32 %15, %12, !dbg !12
  %17 = icmp slt i32 %16, %7, !dbg !13
  %18 = shl i32 %13, 3, !dbg !14
  %19 = and i32 %18, 56, !dbg !14
  %20 = shl i32 %16, 12, !dbg !15
  %invariant.op = or disjoint i32 %19, %20, !dbg !16
  %21 = zext nneg i32 %19 to i64, !dbg !16
  %22 = insertelement <8 x i1> poison, i1 %17, i64 0, !dbg !17
  %23 = shufflevector <8 x i1> %22, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !17
  br label %24, !dbg !16

24:                                               ; preds = %10, %24
  %indvars.iv = phi i64 [ 0, %10 ], [ %indvars.iv.next, %24 ]
  %25 = phi <8 x float> [ zeroinitializer, %10 ], [ %134, %24 ]
  %26 = or disjoint i64 %indvars.iv, %21, !dbg !18
  %27 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %27
  %28 = sext i32 %.reass to i64, !dbg !19
  %29 = getelementptr half, ptr addrspace(1) %1, i64 %28, !dbg !19
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %29, i1 %17) #2, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !20
  %32 = bitcast i32 %31 to <2 x half>, !dbg !20
  %33 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !20
  %34 = bitcast i32 %33 to <2 x half>, !dbg !20
  %35 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !20
  %36 = bitcast i32 %35 to <2 x half>, !dbg !20
  %37 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !20
  %38 = bitcast i32 %37 to <2 x half>, !dbg !20
  %39 = getelementptr half, ptr addrspace(1) %2, i64 %28, !dbg !21
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %39, i1 %17) #2, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !22
  %42 = bitcast i32 %41 to <2 x half>, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !22
  %44 = bitcast i32 %43 to <2 x half>, !dbg !22
  %45 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !22
  %46 = bitcast i32 %45 to <2 x half>, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !22
  %48 = bitcast i32 %47 to <2 x half>, !dbg !22
  %49 = getelementptr half, ptr addrspace(1) %3, i64 %28, !dbg !23
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %49, i1 %17) #2, !dbg !24
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !24
  %52 = bitcast i32 %51 to <2 x half>, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !24
  %54 = bitcast i32 %53 to <2 x half>, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !24
  %56 = bitcast i32 %55 to <2 x half>, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !24
  %58 = bitcast i32 %57 to <2 x half>, !dbg !24
  %59 = getelementptr half, ptr addrspace(1) %4, i64 %26, !dbg !25
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %59, i1 true) #2, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !26
  %62 = bitcast i32 %61 to <2 x half>, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !26
  %64 = bitcast i32 %63 to <2 x half>, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !26
  %66 = bitcast i32 %65 to <2 x half>, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !26
  %68 = bitcast i32 %67 to <2 x half>, !dbg !26
  %69 = getelementptr half, ptr addrspace(1) %5, i64 %28, !dbg !27
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %69, i1 %17) #2, !dbg !28
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !28
  %72 = bitcast i32 %71 to <2 x half>, !dbg !28
  %73 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !28
  %74 = bitcast i32 %73 to <2 x half>, !dbg !28
  %75 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !28
  %76 = bitcast i32 %75 to <2 x half>, !dbg !28
  %77 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !28
  %78 = bitcast i32 %77 to <2 x half>, !dbg !28
  %79 = shufflevector <2 x half> %32, <2 x half> %34, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %80 = shufflevector <2 x half> %36, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %81 = shufflevector <8 x half> %79, <8 x half> %80, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !29
  %82 = shufflevector <2 x half> %36, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %83 = shufflevector <8 x half> %81, <8 x half> %82, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !29
  %84 = shufflevector <2 x half> %38, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %85 = shufflevector <8 x half> %83, <8 x half> %84, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !29
  %86 = shufflevector <2 x half> %38, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %87 = shufflevector <8 x half> %85, <8 x half> %86, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !29
  %88 = fpext <8 x half> %87 to <8 x float>, !dbg !29
  %89 = shufflevector <2 x half> %42, <2 x half> %44, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %90 = shufflevector <2 x half> %46, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %91 = shufflevector <8 x half> %89, <8 x half> %90, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !30
  %92 = shufflevector <2 x half> %46, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %93 = shufflevector <8 x half> %91, <8 x half> %92, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !30
  %94 = shufflevector <2 x half> %48, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %95 = shufflevector <8 x half> %93, <8 x half> %94, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !30
  %96 = shufflevector <2 x half> %48, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %97 = shufflevector <8 x half> %95, <8 x half> %96, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !30
  %98 = fpext <8 x half> %97 to <8 x float>, !dbg !30
  %99 = shufflevector <2 x half> %52, <2 x half> %54, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %100 = shufflevector <2 x half> %56, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %101 = shufflevector <8 x half> %99, <8 x half> %100, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !31
  %102 = shufflevector <2 x half> %56, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %103 = shufflevector <8 x half> %101, <8 x half> %102, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !31
  %104 = shufflevector <2 x half> %58, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %105 = shufflevector <8 x half> %103, <8 x half> %104, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !31
  %106 = shufflevector <2 x half> %58, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %107 = shufflevector <8 x half> %105, <8 x half> %106, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !31
  %108 = fpext <8 x half> %107 to <8 x float>, !dbg !31
  %109 = shufflevector <2 x half> %62, <2 x half> %64, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %110 = shufflevector <2 x half> %66, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %111 = shufflevector <8 x half> %109, <8 x half> %110, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !32
  %112 = shufflevector <2 x half> %66, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %113 = shufflevector <8 x half> %111, <8 x half> %112, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !32
  %114 = shufflevector <2 x half> %68, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %115 = shufflevector <8 x half> %113, <8 x half> %114, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !32
  %116 = shufflevector <2 x half> %68, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %117 = shufflevector <8 x half> %115, <8 x half> %116, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !32
  %118 = fpext <8 x half> %117 to <8 x float>, !dbg !32
  %119 = shufflevector <2 x half> %72, <2 x half> %74, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %120 = shufflevector <2 x half> %76, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %121 = shufflevector <8 x half> %119, <8 x half> %120, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !33
  %122 = shufflevector <2 x half> %76, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %123 = shufflevector <8 x half> %121, <8 x half> %122, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !33
  %124 = shufflevector <2 x half> %78, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %125 = shufflevector <8 x half> %123, <8 x half> %124, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !33
  %126 = shufflevector <2 x half> %78, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %127 = shufflevector <8 x half> %125, <8 x half> %126, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !33
  %128 = fpext <8 x half> %127 to <8 x float>, !dbg !33
  %129 = fadd <8 x float> %88, %98, !dbg !34
  %130 = fadd <8 x float> %129, %108, !dbg !35
  %131 = fmul <8 x float> %130, %118, !dbg !36
  %132 = fmul <8 x float> %131, %128, !dbg !37
  %133 = fadd <8 x float> %25, %132, !dbg !38
  %134 = select <8 x i1> %23, <8 x float> %133, <8 x float> %25, !dbg !17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !16
  %135 = icmp samesign ult i64 %indvars.iv, 4032, !dbg !16
  br i1 %135, label %24, label %136, !dbg !16

136:                                              ; preds = %24
  %shift = shufflevector <8 x float> %134, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %137 = fadd <8 x float> %134, %shift, !dbg !39
  %shift27 = shufflevector <8 x float> %134, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %138 = fadd <8 x float> %shift27, %137, !dbg !39
  %shift28 = shufflevector <8 x float> %134, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %139 = fadd <8 x float> %shift28, %138, !dbg !39
  %shift29 = shufflevector <8 x float> %134, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %140 = fadd <8 x float> %shift29, %139, !dbg !39
  %shift30 = shufflevector <8 x float> %134, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %141 = fadd <8 x float> %shift30, %140, !dbg !39
  %shift31 = shufflevector <8 x float> %134, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %142 = fadd <8 x float> %shift31, %141, !dbg !39
  %shift32 = shufflevector <8 x float> %134, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %143 = fadd <8 x float> %shift32, %142, !dbg !39
  %144 = extractelement <8 x float> %143, i64 0, !dbg !39
  %145 = bitcast float %144 to i32, !dbg !44
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 4, i32 31), !dbg !44
  %147 = bitcast i32 %146 to float, !dbg !44
  %148 = fadd float %144, %147, !dbg !39
  %149 = bitcast float %148 to i32, !dbg !44
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 2, i32 31), !dbg !44
  %151 = bitcast i32 %150 to float, !dbg !44
  %152 = fadd float %148, %151, !dbg !39
  %153 = bitcast float %152 to i32, !dbg !44
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 1, i32 31), !dbg !44
  %155 = bitcast i32 %154 to float, !dbg !44
  %156 = fadd float %152, %155, !dbg !39
  %157 = sext i32 %16 to i64, !dbg !45
  %158 = getelementptr float, ptr addrspace(1) %6, i64 %157, !dbg !45
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %17) #2, !dbg !46
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %17) #2, !dbg !46
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %17) #2, !dbg !46
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %17) #2, !dbg !46
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %17) #2, !dbg !46
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %17) #2, !dbg !46
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %17) #2, !dbg !46
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %17) #2, !dbg !46
  %167 = bitcast i32 %166 to float, !dbg !46
  %168 = fmul float %156, -5.000000e-01, !dbg !47
  %169 = fmul float %167, %167, !dbg !48
  %170 = fmul float %169, %167, !dbg !49
  %171 = fmul float %168, %170, !dbg !50
  %172 = fmul float %171, 0x3F30000000000000, !dbg !51
  %173 = insertelement <2 x float> poison, float %167, i64 0, !dbg !52
  %174 = shufflevector <2 x float> %173, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %175 = insertelement <2 x float> poison, float %172, i64 0, !dbg !53
  %176 = shufflevector <2 x float> %175, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  br label %177, !dbg !54

177:                                              ; preds = %136, %177
  %indvars.iv11 = phi i64 [ 0, %136 ], [ %indvars.iv.next12, %177 ]
  %178 = or disjoint i64 %indvars.iv11, %21, !dbg !55
  %179 = trunc nuw nsw i64 %indvars.iv11 to i32
  %.reass3 = or i32 %invariant.op, %179
  %180 = sext i32 %.reass3 to i64, !dbg !56
  %181 = getelementptr half, ptr addrspace(1) %0, i64 %180, !dbg !56
  %182 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %181, i1 %17) #2, !dbg !57
  %183 = extractvalue { i32, i32, i32, i32 } %182, 0, !dbg !57
  %184 = bitcast i32 %183 to <2 x half>, !dbg !57
  %185 = extractvalue { i32, i32, i32, i32 } %182, 1, !dbg !57
  %186 = bitcast i32 %185 to <2 x half>, !dbg !57
  %187 = extractvalue { i32, i32, i32, i32 } %182, 2, !dbg !57
  %188 = bitcast i32 %187 to <2 x half>, !dbg !57
  %189 = extractvalue { i32, i32, i32, i32 } %182, 3, !dbg !57
  %190 = bitcast i32 %189 to <2 x half>, !dbg !57
  %191 = getelementptr half, ptr addrspace(1) %1, i64 %180, !dbg !58
  %192 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %191, i1 %17) #2, !dbg !59
  %193 = extractvalue { i32, i32, i32, i32 } %192, 0, !dbg !59
  %194 = bitcast i32 %193 to <2 x half>, !dbg !59
  %195 = extractvalue { i32, i32, i32, i32 } %192, 1, !dbg !59
  %196 = bitcast i32 %195 to <2 x half>, !dbg !59
  %197 = extractvalue { i32, i32, i32, i32 } %192, 2, !dbg !59
  %198 = bitcast i32 %197 to <2 x half>, !dbg !59
  %199 = extractvalue { i32, i32, i32, i32 } %192, 3, !dbg !59
  %200 = bitcast i32 %199 to <2 x half>, !dbg !59
  %201 = getelementptr half, ptr addrspace(1) %2, i64 %180, !dbg !60
  %202 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %201, i1 %17) #2, !dbg !61
  %203 = extractvalue { i32, i32, i32, i32 } %202, 0, !dbg !61
  %204 = bitcast i32 %203 to <2 x half>, !dbg !61
  %205 = extractvalue { i32, i32, i32, i32 } %202, 1, !dbg !61
  %206 = bitcast i32 %205 to <2 x half>, !dbg !61
  %207 = extractvalue { i32, i32, i32, i32 } %202, 2, !dbg !61
  %208 = bitcast i32 %207 to <2 x half>, !dbg !61
  %209 = extractvalue { i32, i32, i32, i32 } %202, 3, !dbg !61
  %210 = bitcast i32 %209 to <2 x half>, !dbg !61
  %211 = getelementptr half, ptr addrspace(1) %3, i64 %180, !dbg !62
  %212 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %211, i1 %17) #2, !dbg !63
  %213 = extractvalue { i32, i32, i32, i32 } %212, 0, !dbg !63
  %214 = bitcast i32 %213 to <2 x half>, !dbg !63
  %215 = extractvalue { i32, i32, i32, i32 } %212, 1, !dbg !63
  %216 = bitcast i32 %215 to <2 x half>, !dbg !63
  %217 = extractvalue { i32, i32, i32, i32 } %212, 2, !dbg !63
  %218 = bitcast i32 %217 to <2 x half>, !dbg !63
  %219 = extractvalue { i32, i32, i32, i32 } %212, 3, !dbg !63
  %220 = bitcast i32 %219 to <2 x half>, !dbg !63
  %221 = getelementptr half, ptr addrspace(1) %4, i64 %178, !dbg !64
  %222 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %221, i1 true) #2, !dbg !65
  %223 = extractvalue { i32, i32, i32, i32 } %222, 0, !dbg !65
  %224 = bitcast i32 %223 to <2 x half>, !dbg !65
  %225 = extractvalue { i32, i32, i32, i32 } %222, 1, !dbg !65
  %226 = bitcast i32 %225 to <2 x half>, !dbg !65
  %227 = extractvalue { i32, i32, i32, i32 } %222, 2, !dbg !65
  %228 = bitcast i32 %227 to <2 x half>, !dbg !65
  %229 = extractvalue { i32, i32, i32, i32 } %222, 3, !dbg !65
  %230 = bitcast i32 %229 to <2 x half>, !dbg !65
  %231 = getelementptr half, ptr addrspace(1) %5, i64 %180, !dbg !66
  %232 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %231, i1 %17) #2, !dbg !67
  %233 = extractvalue { i32, i32, i32, i32 } %232, 0, !dbg !67
  %234 = bitcast i32 %233 to <2 x half>, !dbg !67
  %235 = extractvalue { i32, i32, i32, i32 } %232, 1, !dbg !67
  %236 = bitcast i32 %235 to <2 x half>, !dbg !67
  %237 = extractvalue { i32, i32, i32, i32 } %232, 2, !dbg !67
  %238 = bitcast i32 %237 to <2 x half>, !dbg !67
  %239 = extractvalue { i32, i32, i32, i32 } %232, 3, !dbg !67
  %240 = bitcast i32 %239 to <2 x half>, !dbg !67
  %241 = fpext <2 x half> %184 to <2 x float>, !dbg !68
  %242 = fpext <2 x half> %194 to <2 x float>, !dbg !69
  %243 = fpext <2 x half> %204 to <2 x float>, !dbg !70
  %244 = fpext <2 x half> %214 to <2 x float>, !dbg !71
  %245 = fpext <2 x half> %224 to <2 x float>, !dbg !72
  %246 = fpext <2 x half> %234 to <2 x float>, !dbg !73
  %247 = fadd <2 x float> %242, %243, !dbg !74
  %248 = fadd <2 x float> %247, %244, !dbg !75
  %249 = fmul <2 x float> %248, %245, !dbg !76
  %250 = fmul <2 x float> %249, %174, !dbg !52
  %251 = fmul <2 x float> %246, splat (float 2.000000e+00), !dbg !77
  %252 = fmul <2 x float> %176, %251, !dbg !53
  %253 = fadd <2 x float> %250, %252, !dbg !78
  %254 = fadd <2 x float> %253, %241, !dbg !79
  %255 = fptrunc <2 x float> %254 to <2 x half>, !dbg !80
  %256 = fpext <2 x half> %186 to <2 x float>, !dbg !68
  %257 = fpext <2 x half> %196 to <2 x float>, !dbg !69
  %258 = fpext <2 x half> %206 to <2 x float>, !dbg !70
  %259 = fpext <2 x half> %216 to <2 x float>, !dbg !71
  %260 = fpext <2 x half> %226 to <2 x float>, !dbg !72
  %261 = fpext <2 x half> %236 to <2 x float>, !dbg !73
  %262 = fadd <2 x float> %257, %258, !dbg !74
  %263 = fadd <2 x float> %262, %259, !dbg !75
  %264 = fmul <2 x float> %263, %260, !dbg !76
  %265 = fmul <2 x float> %264, %174, !dbg !52
  %266 = fmul <2 x float> %261, splat (float 2.000000e+00), !dbg !77
  %267 = fmul <2 x float> %176, %266, !dbg !53
  %268 = fadd <2 x float> %265, %267, !dbg !78
  %269 = fadd <2 x float> %268, %256, !dbg !79
  %270 = fptrunc <2 x float> %269 to <2 x half>, !dbg !80
  %271 = fpext <2 x half> %188 to <2 x float>, !dbg !68
  %272 = fpext <2 x half> %198 to <2 x float>, !dbg !69
  %273 = fpext <2 x half> %208 to <2 x float>, !dbg !70
  %274 = fpext <2 x half> %218 to <2 x float>, !dbg !71
  %275 = fpext <2 x half> %228 to <2 x float>, !dbg !72
  %276 = fpext <2 x half> %238 to <2 x float>, !dbg !73
  %277 = fadd <2 x float> %272, %273, !dbg !74
  %278 = fadd <2 x float> %277, %274, !dbg !75
  %279 = fmul <2 x float> %278, %275, !dbg !76
  %280 = fmul <2 x float> %279, %174, !dbg !52
  %281 = fmul <2 x float> %276, splat (float 2.000000e+00), !dbg !77
  %282 = fmul <2 x float> %176, %281, !dbg !53
  %283 = fadd <2 x float> %280, %282, !dbg !78
  %284 = fadd <2 x float> %283, %271, !dbg !79
  %285 = fptrunc <2 x float> %284 to <2 x half>, !dbg !80
  %286 = fpext <2 x half> %190 to <2 x float>, !dbg !68
  %287 = fpext <2 x half> %200 to <2 x float>, !dbg !69
  %288 = fpext <2 x half> %210 to <2 x float>, !dbg !70
  %289 = fpext <2 x half> %220 to <2 x float>, !dbg !71
  %290 = fpext <2 x half> %230 to <2 x float>, !dbg !72
  %291 = fpext <2 x half> %240 to <2 x float>, !dbg !73
  %292 = fadd <2 x float> %287, %288, !dbg !74
  %293 = fadd <2 x float> %292, %289, !dbg !75
  %294 = fmul <2 x float> %293, %290, !dbg !76
  %295 = fmul <2 x float> %294, %174, !dbg !52
  %296 = fmul <2 x float> %291, splat (float 2.000000e+00), !dbg !77
  %297 = fmul <2 x float> %176, %296, !dbg !53
  %298 = fadd <2 x float> %295, %297, !dbg !78
  %299 = fadd <2 x float> %298, %286, !dbg !79
  %300 = fptrunc <2 x float> %299 to <2 x half>, !dbg !80
  %301 = bitcast <2 x half> %255 to i32, !dbg !80
  %302 = bitcast <2 x half> %270 to i32, !dbg !80
  %303 = bitcast <2 x half> %285 to i32, !dbg !80
  %304 = bitcast <2 x half> %300 to i32, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %301, i32 %302, i32 %303, i32 %304, ptr addrspace(1) %181, i1 %17) #2, !dbg !80
  %indvars.iv.next12 = add nuw nsw i64 %indvars.iv11, 64, !dbg !54
  %305 = icmp samesign ult i64 %indvars.iv11, 4032, !dbg !54
  br i1 %305, label %177, label %306, !dbg !54

306:                                              ; preds = %177
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cahgi5hfispcs5bo2kszbaylzu7b5hj2yove2wcv2d7lq6dkkapw.py", directory: "/tmp/torchinductor_root/ah")
!4 = !{ptr @triton_red_fused__to_copy_add_div_mul_pow_sum_10, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_mul_pow_sum_10", linkageName: "triton_red_fused__to_copy_add_div_mul_pow_sum_10", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 29, column: 40, scope: !6)
!17 = !DILocation(line: 48, column: 50, scope: !6)
!18 = !DILocation(line: 30, column: 31, scope: !6)
!19 = !DILocation(line: 35, column: 34, scope: !6)
!20 = !DILocation(line: 35, column: 51, scope: !6)
!21 = !DILocation(line: 36, column: 34, scope: !6)
!22 = !DILocation(line: 36, column: 51, scope: !6)
!23 = !DILocation(line: 37, column: 34, scope: !6)
!24 = !DILocation(line: 37, column: 51, scope: !6)
!25 = !DILocation(line: 38, column: 34, scope: !6)
!26 = !DILocation(line: 38, column: 41, scope: !6)
!27 = !DILocation(line: 39, column: 34, scope: !6)
!28 = !DILocation(line: 39, column: 51, scope: !6)
!29 = !DILocation(line: 35, column: 112, scope: !6)
!30 = !DILocation(line: 36, column: 112, scope: !6)
!31 = !DILocation(line: 37, column: 112, scope: !6)
!32 = !DILocation(line: 38, column: 94, scope: !6)
!33 = !DILocation(line: 39, column: 112, scope: !6)
!34 = !DILocation(line: 40, column: 22, scope: !6)
!35 = !DILocation(line: 41, column: 22, scope: !6)
!36 = !DILocation(line: 42, column: 22, scope: !6)
!37 = !DILocation(line: 45, column: 23, scope: !6)
!38 = !DILocation(line: 47, column: 25, scope: !6)
!39 = !DILocation(line: 256, column: 15, scope: !40, inlinedAt: !43)
!40 = distinct !DILexicalBlockFile(scope: !42, file: !41, discriminator: 0)
!41 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!42 = distinct !DILexicalBlockFile(scope: !6, file: !41, discriminator: 0)
!43 = !DILocation(line: 49, column: 27, scope: !6)
!44 = !DILocation(line: 286, column: 36, scope: !42, inlinedAt: !43)
!45 = !DILocation(line: 50, column: 31, scope: !6)
!46 = !DILocation(line: 50, column: 36, scope: !6)
!47 = !DILocation(line: 69, column: 24, scope: !6)
!48 = !DILocation(line: 70, column: 24, scope: !6)
!49 = !DILocation(line: 71, column: 24, scope: !6)
!50 = !DILocation(line: 72, column: 24, scope: !6)
!51 = !DILocation(line: 74, column: 24, scope: !6)
!52 = !DILocation(line: 67, column: 24, scope: !6)
!53 = !DILocation(line: 78, column: 24, scope: !6)
!54 = !DILocation(line: 51, column: 40, scope: !6)
!55 = !DILocation(line: 52, column: 31, scope: !6)
!56 = !DILocation(line: 57, column: 39, scope: !6)
!57 = !DILocation(line: 57, column: 56, scope: !6)
!58 = !DILocation(line: 58, column: 35, scope: !6)
!59 = !DILocation(line: 58, column: 52, scope: !6)
!60 = !DILocation(line: 59, column: 35, scope: !6)
!61 = !DILocation(line: 59, column: 52, scope: !6)
!62 = !DILocation(line: 60, column: 35, scope: !6)
!63 = !DILocation(line: 60, column: 52, scope: !6)
!64 = !DILocation(line: 61, column: 35, scope: !6)
!65 = !DILocation(line: 61, column: 42, scope: !6)
!66 = !DILocation(line: 62, column: 35, scope: !6)
!67 = !DILocation(line: 62, column: 52, scope: !6)
!68 = !DILocation(line: 57, column: 118, scope: !6)
!69 = !DILocation(line: 58, column: 114, scope: !6)
!70 = !DILocation(line: 59, column: 114, scope: !6)
!71 = !DILocation(line: 60, column: 114, scope: !6)
!72 = !DILocation(line: 61, column: 95, scope: !6)
!73 = !DILocation(line: 62, column: 114, scope: !6)
!74 = !DILocation(line: 63, column: 24, scope: !6)
!75 = !DILocation(line: 64, column: 24, scope: !6)
!76 = !DILocation(line: 65, column: 24, scope: !6)
!77 = !DILocation(line: 77, column: 24, scope: !6)
!78 = !DILocation(line: 79, column: 24, scope: !6)
!79 = !DILocation(line: 81, column: 24, scope: !6)
!80 = !DILocation(line: 82, column: 56, scope: !6)
!81 = !DILocation(line: 51, column: 4, scope: !6)
