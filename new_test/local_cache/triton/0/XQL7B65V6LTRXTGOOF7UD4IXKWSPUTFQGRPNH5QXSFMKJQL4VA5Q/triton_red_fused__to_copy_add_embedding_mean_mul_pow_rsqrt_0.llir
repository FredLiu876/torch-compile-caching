; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/yi/cyihme7t354xdekku5rks7waotqdnz3mpo47q3uhqjtr5ixrgolb.py\00"
@assertMessage_0 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp4 < 128256\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !10 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %11 = icmp slt i32 %10, %6, !dbg !12
  %12 = sext i32 %10 to i64, !dbg !13
  %13 = getelementptr i64, ptr addrspace(1) %1, i64 %12, !dbg !13
  %14 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %15 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %16 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %17 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %18 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 %11) #6, !dbg !14
  %23 = add i64 %22, 128256, !dbg !15
  %24 = icmp slt i64 %22, 0, !dbg !16
  %25 = select i1 %24, i64 %23, i64 %22, !dbg !17
  %26 = icmp ugt i64 %25, 128255, !dbg !18
  %.not2 = and i1 %11, %26, !dbg !19
  br i1 %.not2, label %27, label %28, !dbg !19

27:                                               ; preds = %9
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !19
  unreachable, !dbg !19

28:                                               ; preds = %9
  %29 = icmp slt i64 %21, 0, !dbg !16
  %30 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !20
  %31 = shl i32 %30, 3, !dbg !20
  %32 = and i32 %31, 1016, !dbg !20
  %33 = or disjoint i32 %32, 3072, !dbg !20
  %34 = or disjoint i32 %32, 2048, !dbg !20
  %35 = or disjoint i32 %32, 1024, !dbg !20
  %36 = lshr i32 %30, 5, !dbg !20
  %37 = and i32 %30, 31, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %38 = shl i64 %21, 12, !dbg !21
  %39 = add i64 %38, 525336576, !dbg !21
  %40 = select i1 %29, i64 %39, i64 %38, !dbg !21
  %41 = zext nneg i32 %32 to i64, !dbg !22
  %42 = zext nneg i32 %35 to i64, !dbg !22
  %43 = zext nneg i32 %34 to i64, !dbg !22
  %44 = zext nneg i32 %33 to i64, !dbg !22
  %45 = getelementptr half, ptr addrspace(1) %2, i64 %40, !dbg !23
  %46 = getelementptr half, ptr addrspace(1) %45, i64 %41, !dbg !23
  %47 = getelementptr half, ptr addrspace(1) %45, i64 %42, !dbg !23
  %48 = getelementptr half, ptr addrspace(1) %45, i64 %43, !dbg !23
  %49 = getelementptr half, ptr addrspace(1) %45, i64 %44, !dbg !23
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %46, i1 %11) #6, !dbg !24
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !24
  %52 = bitcast i32 %51 to <2 x half>, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !24
  %54 = bitcast i32 %53 to <2 x half>, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !24
  %56 = bitcast i32 %55 to <2 x half>, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !24
  %58 = bitcast i32 %57 to <2 x half>, !dbg !24
  %59 = extractelement <2 x half> %52, i64 0, !dbg !24
  %60 = extractelement <2 x half> %52, i64 1, !dbg !24
  %61 = extractelement <2 x half> %54, i64 0, !dbg !24
  %62 = extractelement <2 x half> %54, i64 1, !dbg !24
  %63 = extractelement <2 x half> %56, i64 0, !dbg !24
  %64 = extractelement <2 x half> %56, i64 1, !dbg !24
  %65 = extractelement <2 x half> %58, i64 0, !dbg !24
  %66 = extractelement <2 x half> %58, i64 1, !dbg !24
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %47, i1 %11) #6, !dbg !24
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !24
  %69 = bitcast i32 %68 to <2 x half>, !dbg !24
  %70 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !24
  %71 = bitcast i32 %70 to <2 x half>, !dbg !24
  %72 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !24
  %73 = bitcast i32 %72 to <2 x half>, !dbg !24
  %74 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !24
  %75 = bitcast i32 %74 to <2 x half>, !dbg !24
  %76 = extractelement <2 x half> %69, i64 0, !dbg !24
  %77 = extractelement <2 x half> %69, i64 1, !dbg !24
  %78 = extractelement <2 x half> %71, i64 0, !dbg !24
  %79 = extractelement <2 x half> %71, i64 1, !dbg !24
  %80 = extractelement <2 x half> %73, i64 0, !dbg !24
  %81 = extractelement <2 x half> %73, i64 1, !dbg !24
  %82 = extractelement <2 x half> %75, i64 0, !dbg !24
  %83 = extractelement <2 x half> %75, i64 1, !dbg !24
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %48, i1 %11) #6, !dbg !24
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !24
  %86 = bitcast i32 %85 to <2 x half>, !dbg !24
  %87 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !24
  %88 = bitcast i32 %87 to <2 x half>, !dbg !24
  %89 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !24
  %90 = bitcast i32 %89 to <2 x half>, !dbg !24
  %91 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !24
  %92 = bitcast i32 %91 to <2 x half>, !dbg !24
  %93 = extractelement <2 x half> %86, i64 0, !dbg !24
  %94 = extractelement <2 x half> %86, i64 1, !dbg !24
  %95 = extractelement <2 x half> %88, i64 0, !dbg !24
  %96 = extractelement <2 x half> %88, i64 1, !dbg !24
  %97 = extractelement <2 x half> %90, i64 0, !dbg !24
  %98 = extractelement <2 x half> %90, i64 1, !dbg !24
  %99 = extractelement <2 x half> %92, i64 0, !dbg !24
  %100 = extractelement <2 x half> %92, i64 1, !dbg !24
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %49, i1 %11) #6, !dbg !24
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !24
  %103 = bitcast i32 %102 to <2 x half>, !dbg !24
  %104 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !24
  %105 = bitcast i32 %104 to <2 x half>, !dbg !24
  %106 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !24
  %107 = bitcast i32 %106 to <2 x half>, !dbg !24
  %108 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !24
  %109 = bitcast i32 %108 to <2 x half>, !dbg !24
  %110 = extractelement <2 x half> %103, i64 0, !dbg !24
  %111 = extractelement <2 x half> %103, i64 1, !dbg !24
  %112 = extractelement <2 x half> %105, i64 0, !dbg !24
  %113 = extractelement <2 x half> %105, i64 1, !dbg !24
  %114 = extractelement <2 x half> %107, i64 0, !dbg !24
  %115 = extractelement <2 x half> %107, i64 1, !dbg !24
  %116 = extractelement <2 x half> %109, i64 0, !dbg !24
  %117 = extractelement <2 x half> %109, i64 1, !dbg !24
  %118 = fpext half %59 to float, !dbg !25
  %119 = fpext half %60 to float, !dbg !25
  %120 = fpext half %61 to float, !dbg !25
  %121 = fpext half %62 to float, !dbg !25
  %122 = fpext half %63 to float, !dbg !25
  %123 = fpext half %64 to float, !dbg !25
  %124 = fpext half %65 to float, !dbg !25
  %125 = fpext half %66 to float, !dbg !25
  %126 = fpext half %76 to float, !dbg !25
  %127 = fpext half %77 to float, !dbg !25
  %128 = fpext half %78 to float, !dbg !25
  %129 = fpext half %79 to float, !dbg !25
  %130 = fpext half %80 to float, !dbg !25
  %131 = fpext half %81 to float, !dbg !25
  %132 = fpext half %82 to float, !dbg !25
  %133 = fpext half %83 to float, !dbg !25
  %134 = fpext half %93 to float, !dbg !25
  %135 = fpext half %94 to float, !dbg !25
  %136 = fpext half %95 to float, !dbg !25
  %137 = fpext half %96 to float, !dbg !25
  %138 = fpext half %97 to float, !dbg !25
  %139 = fpext half %98 to float, !dbg !25
  %140 = fpext half %99 to float, !dbg !25
  %141 = fpext half %100 to float, !dbg !25
  %142 = fpext half %110 to float, !dbg !25
  %143 = fpext half %111 to float, !dbg !25
  %144 = fpext half %112 to float, !dbg !25
  %145 = fpext half %113 to float, !dbg !25
  %146 = fpext half %114 to float, !dbg !25
  %147 = fpext half %115 to float, !dbg !25
  %148 = fpext half %116 to float, !dbg !25
  %149 = fpext half %117 to float, !dbg !25
  %150 = fmul float %118, %118, !dbg !26
  %151 = fmul float %119, %119, !dbg !26
  %152 = fmul float %120, %120, !dbg !26
  %153 = fmul float %121, %121, !dbg !26
  %154 = fmul float %122, %122, !dbg !26
  %155 = fmul float %123, %123, !dbg !26
  %156 = fmul float %124, %124, !dbg !26
  %157 = fmul float %125, %125, !dbg !26
  %158 = fmul float %126, %126, !dbg !26
  %159 = fmul float %127, %127, !dbg !26
  %160 = fmul float %128, %128, !dbg !26
  %161 = fmul float %129, %129, !dbg !26
  %162 = fmul float %130, %130, !dbg !26
  %163 = fmul float %131, %131, !dbg !26
  %164 = fmul float %132, %132, !dbg !26
  %165 = fmul float %133, %133, !dbg !26
  %166 = fmul float %134, %134, !dbg !26
  %167 = fmul float %135, %135, !dbg !26
  %168 = fmul float %136, %136, !dbg !26
  %169 = fmul float %137, %137, !dbg !26
  %170 = fmul float %138, %138, !dbg !26
  %171 = fmul float %139, %139, !dbg !26
  %172 = fmul float %140, %140, !dbg !26
  %173 = fmul float %141, %141, !dbg !26
  %174 = fmul float %142, %142, !dbg !26
  %175 = fmul float %143, %143, !dbg !26
  %176 = fmul float %144, %144, !dbg !26
  %177 = fmul float %145, %145, !dbg !26
  %178 = fmul float %146, %146, !dbg !26
  %179 = fmul float %147, %147, !dbg !26
  %180 = fmul float %148, %148, !dbg !26
  %181 = fmul float %149, %149, !dbg !26
  %182 = shl i32 %10, 12, !dbg !27
  %183 = or disjoint i32 %32, %182, !dbg !28
  %184 = or disjoint i32 %35, %182, !dbg !28
  %185 = or disjoint i32 %34, %182, !dbg !28
  %186 = or disjoint i32 %33, %182, !dbg !28
  %187 = sext i32 %183 to i64, !dbg !29
  %188 = getelementptr half, ptr addrspace(1) %4, i64 %187, !dbg !29
  %189 = sext i32 %184 to i64, !dbg !29
  %190 = getelementptr half, ptr addrspace(1) %4, i64 %189, !dbg !29
  %191 = sext i32 %185 to i64, !dbg !29
  %192 = getelementptr half, ptr addrspace(1) %4, i64 %191, !dbg !29
  %193 = sext i32 %186 to i64, !dbg !29
  %194 = getelementptr half, ptr addrspace(1) %4, i64 %193, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %51, i32 %53, i32 %55, i32 %57, ptr addrspace(1) %188, i1 %11) #6, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %68, i32 %70, i32 %72, i32 %74, ptr addrspace(1) %190, i1 %11) #6, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %85, i32 %87, i32 %89, i32 %91, ptr addrspace(1) %192, i1 %11) #6, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %102, i32 %104, i32 %106, i32 %108, ptr addrspace(1) %194, i1 %11) #6, !dbg !30
  %195 = fadd float %150, %151, !dbg !31
  %196 = fadd float %152, %195, !dbg !31
  %197 = fadd float %153, %196, !dbg !31
  %198 = fadd float %154, %197, !dbg !31
  %199 = fadd float %155, %198, !dbg !31
  %200 = fadd float %156, %199, !dbg !31
  %201 = fadd float %157, %200, !dbg !31
  %202 = fadd float %158, %201, !dbg !31
  %203 = fadd float %159, %202, !dbg !31
  %204 = fadd float %160, %203, !dbg !31
  %205 = fadd float %161, %204, !dbg !31
  %206 = fadd float %162, %205, !dbg !31
  %207 = fadd float %163, %206, !dbg !31
  %208 = fadd float %164, %207, !dbg !31
  %209 = fadd float %165, %208, !dbg !31
  %210 = fadd float %166, %209, !dbg !31
  %211 = fadd float %167, %210, !dbg !31
  %212 = fadd float %168, %211, !dbg !31
  %213 = fadd float %169, %212, !dbg !31
  %214 = fadd float %170, %213, !dbg !31
  %215 = fadd float %171, %214, !dbg !31
  %216 = fadd float %172, %215, !dbg !31
  %217 = fadd float %173, %216, !dbg !31
  %218 = fadd float %174, %217, !dbg !31
  %219 = fadd float %175, %218, !dbg !31
  %220 = fadd float %176, %219, !dbg !31
  %221 = fadd float %177, %220, !dbg !31
  %222 = fadd float %178, %221, !dbg !31
  %223 = fadd float %179, %222, !dbg !31
  %224 = fadd float %180, %223, !dbg !31
  %225 = fadd float %181, %224, !dbg !31
  %226 = select i1 %11, float %225, float 0.000000e+00, !dbg !31
  %227 = bitcast float %226 to i32, !dbg !36
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 16, i32 31), !dbg !36
  %229 = bitcast i32 %228 to float, !dbg !36
  %230 = fadd float %226, %229, !dbg !31
  %231 = bitcast float %230 to i32, !dbg !36
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 8, i32 31), !dbg !36
  %233 = bitcast i32 %232 to float, !dbg !36
  %234 = fadd float %230, %233, !dbg !31
  %235 = bitcast float %234 to i32, !dbg !36
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 4, i32 31), !dbg !36
  %237 = bitcast i32 %236 to float, !dbg !36
  %238 = fadd float %234, %237, !dbg !31
  %239 = bitcast float %238 to i32, !dbg !36
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 2, i32 31), !dbg !36
  %241 = bitcast i32 %240 to float, !dbg !36
  %242 = fadd float %238, %241, !dbg !31
  %243 = bitcast float %242 to i32, !dbg !36
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 1, i32 31), !dbg !36
  %245 = bitcast i32 %244 to float, !dbg !36
  %246 = fadd float %242, %245, !dbg !31
  %247 = and i32 %36, 3, !dbg !36
  %248 = icmp eq i32 %37, 0, !dbg !36
  %249 = getelementptr float, ptr addrspace(3) @global_smem, i32 %247, !dbg !36
  %250 = bitcast float %246 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %249, <1 x i32> %250, i1 %248) #6, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %251 = icmp slt i32 %30, 4, !dbg !36
  %252 = getelementptr float, ptr addrspace(3) @global_smem, i32 %30, !dbg !36
  %253 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %252, i1 %251) #6, !dbg !36
  %254 = bitcast i32 %253 to float, !dbg !36
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %253, i32 2, i32 31), !dbg !36
  %256 = bitcast i32 %255 to float, !dbg !36
  %257 = fadd float %254, %256, !dbg !31
  %258 = bitcast float %257 to i32, !dbg !36
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 1, i32 31), !dbg !36
  %260 = bitcast i32 %259 to float, !dbg !36
  %261 = fadd float %257, %260, !dbg !31
  %262 = and i32 %30, 3, !dbg !36
  %263 = icmp eq i32 %262, 0, !dbg !36
  %264 = and i1 %251, %263, !dbg !36
  %265 = bitcast float %261 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %265, i1 %264) #6, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %266 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !36
  %267 = tail call float @llvm.nvvm.div.full(float %266, float 4.096000e+03), !dbg !37
  %268 = fadd float %267, 0x3EE4F8B580000000, !dbg !38
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %.not.i = icmp eq i32 %269, 0, !dbg !39
  br i1 %.not.i, label %272, label %270, !dbg !39

270:                                              ; preds = %28
  %271 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %268), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

272:                                              ; preds = %28
  %273 = tail call float @llvm.nvvm.rsqrt.approx.f(float %268), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

__nv_rsqrtf.exit:                                 ; preds = %270, %272
  %.0.i = phi float [ %271, %270 ], [ %273, %272 ], !dbg !39
  %274 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %275 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %276 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %277 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %278 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %279 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !39
  %.not.i24 = icmp eq i32 %281, 0, !dbg !39
  br i1 %.not.i24, label %284, label %282, !dbg !39

282:                                              ; preds = %__nv_rsqrtf.exit
  %283 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %268), !dbg !39
  br label %__nv_rsqrtf.exit26, !dbg !39

284:                                              ; preds = %__nv_rsqrtf.exit
  %285 = tail call float @llvm.nvvm.rsqrt.approx.f(float %268), !dbg !39
  br label %__nv_rsqrtf.exit26, !dbg !39

__nv_rsqrtf.exit26:                               ; preds = %282, %284
  %.0.i25 = phi float [ %283, %282 ], [ %285, %284 ], !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %286 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !41
  %287 = and i32 %30, 127, !dbg !42
  %288 = icmp eq i32 %287, 0, !dbg !42
  %289 = bitcast float %.0.i to i32, !dbg !42
  %290 = and i1 %288, %11, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %289, ptr addrspace(1) %286, i1 %290) #6, !dbg !42
  %291 = getelementptr half, ptr addrspace(1) %3, i64 %41, !dbg !43
  %292 = getelementptr half, ptr addrspace(1) %3, i64 %42, !dbg !43
  %293 = getelementptr half, ptr addrspace(1) %3, i64 %43, !dbg !43
  %294 = getelementptr half, ptr addrspace(1) %3, i64 %44, !dbg !43
  %295 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %291, i1 true) #6, !dbg !44
  %296 = extractvalue { i32, i32, i32, i32 } %295, 0, !dbg !44
  %297 = bitcast i32 %296 to <2 x half>, !dbg !44
  %298 = extractvalue { i32, i32, i32, i32 } %295, 1, !dbg !44
  %299 = bitcast i32 %298 to <2 x half>, !dbg !44
  %300 = extractvalue { i32, i32, i32, i32 } %295, 2, !dbg !44
  %301 = bitcast i32 %300 to <2 x half>, !dbg !44
  %302 = extractvalue { i32, i32, i32, i32 } %295, 3, !dbg !44
  %303 = bitcast i32 %302 to <2 x half>, !dbg !44
  %304 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %292, i1 true) #6, !dbg !44
  %305 = extractvalue { i32, i32, i32, i32 } %304, 0, !dbg !44
  %306 = bitcast i32 %305 to <2 x half>, !dbg !44
  %307 = extractvalue { i32, i32, i32, i32 } %304, 1, !dbg !44
  %308 = bitcast i32 %307 to <2 x half>, !dbg !44
  %309 = extractvalue { i32, i32, i32, i32 } %304, 2, !dbg !44
  %310 = bitcast i32 %309 to <2 x half>, !dbg !44
  %311 = extractvalue { i32, i32, i32, i32 } %304, 3, !dbg !44
  %312 = bitcast i32 %311 to <2 x half>, !dbg !44
  %313 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %293, i1 true) #6, !dbg !44
  %314 = extractvalue { i32, i32, i32, i32 } %313, 0, !dbg !44
  %315 = bitcast i32 %314 to <2 x half>, !dbg !44
  %316 = extractvalue { i32, i32, i32, i32 } %313, 1, !dbg !44
  %317 = bitcast i32 %316 to <2 x half>, !dbg !44
  %318 = extractvalue { i32, i32, i32, i32 } %313, 2, !dbg !44
  %319 = bitcast i32 %318 to <2 x half>, !dbg !44
  %320 = extractvalue { i32, i32, i32, i32 } %313, 3, !dbg !44
  %321 = bitcast i32 %320 to <2 x half>, !dbg !44
  %322 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %294, i1 true) #6, !dbg !44
  %323 = extractvalue { i32, i32, i32, i32 } %322, 0, !dbg !44
  %324 = bitcast i32 %323 to <2 x half>, !dbg !44
  %325 = extractvalue { i32, i32, i32, i32 } %322, 1, !dbg !44
  %326 = bitcast i32 %325 to <2 x half>, !dbg !44
  %327 = extractvalue { i32, i32, i32, i32 } %322, 2, !dbg !44
  %328 = bitcast i32 %327 to <2 x half>, !dbg !44
  %329 = extractvalue { i32, i32, i32, i32 } %322, 3, !dbg !44
  %330 = bitcast i32 %329 to <2 x half>, !dbg !44
  %331 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %188, i1 %11) #6, !dbg !45
  %332 = extractvalue { i32, i32, i32, i32 } %331, 0, !dbg !45
  %333 = bitcast i32 %332 to <2 x half>, !dbg !45
  %334 = extractvalue { i32, i32, i32, i32 } %331, 1, !dbg !45
  %335 = bitcast i32 %334 to <2 x half>, !dbg !45
  %336 = extractvalue { i32, i32, i32, i32 } %331, 2, !dbg !45
  %337 = bitcast i32 %336 to <2 x half>, !dbg !45
  %338 = extractvalue { i32, i32, i32, i32 } %331, 3, !dbg !45
  %339 = bitcast i32 %338 to <2 x half>, !dbg !45
  %340 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %190, i1 %11) #6, !dbg !45
  %341 = extractvalue { i32, i32, i32, i32 } %340, 0, !dbg !45
  %342 = bitcast i32 %341 to <2 x half>, !dbg !45
  %343 = extractvalue { i32, i32, i32, i32 } %340, 1, !dbg !45
  %344 = bitcast i32 %343 to <2 x half>, !dbg !45
  %345 = extractvalue { i32, i32, i32, i32 } %340, 2, !dbg !45
  %346 = bitcast i32 %345 to <2 x half>, !dbg !45
  %347 = extractvalue { i32, i32, i32, i32 } %340, 3, !dbg !45
  %348 = bitcast i32 %347 to <2 x half>, !dbg !45
  %349 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %192, i1 %11) #6, !dbg !45
  %350 = extractvalue { i32, i32, i32, i32 } %349, 0, !dbg !45
  %351 = bitcast i32 %350 to <2 x half>, !dbg !45
  %352 = extractvalue { i32, i32, i32, i32 } %349, 1, !dbg !45
  %353 = bitcast i32 %352 to <2 x half>, !dbg !45
  %354 = extractvalue { i32, i32, i32, i32 } %349, 2, !dbg !45
  %355 = bitcast i32 %354 to <2 x half>, !dbg !45
  %356 = extractvalue { i32, i32, i32, i32 } %349, 3, !dbg !45
  %357 = bitcast i32 %356 to <2 x half>, !dbg !45
  %358 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %194, i1 %11) #6, !dbg !45
  %359 = extractvalue { i32, i32, i32, i32 } %358, 0, !dbg !45
  %360 = bitcast i32 %359 to <2 x half>, !dbg !45
  %361 = extractvalue { i32, i32, i32, i32 } %358, 1, !dbg !45
  %362 = bitcast i32 %361 to <2 x half>, !dbg !45
  %363 = extractvalue { i32, i32, i32, i32 } %358, 2, !dbg !45
  %364 = bitcast i32 %363 to <2 x half>, !dbg !45
  %365 = extractvalue { i32, i32, i32, i32 } %358, 3, !dbg !45
  %366 = bitcast i32 %365 to <2 x half>, !dbg !45
  %367 = getelementptr half, ptr addrspace(1) %5, i64 %187, !dbg !46
  %368 = getelementptr half, ptr addrspace(1) %5, i64 %189, !dbg !46
  %369 = getelementptr half, ptr addrspace(1) %5, i64 %191, !dbg !46
  %370 = getelementptr half, ptr addrspace(1) %5, i64 %193, !dbg !46
  %371 = fpext <2 x half> %297 to <2 x float>, !dbg !47
  %372 = fpext <2 x half> %333 to <2 x float>, !dbg !48
  %373 = insertelement <2 x float> poison, float %.0.i25, i64 0, !dbg !49
  %374 = shufflevector <2 x float> %373, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %375 = fmul <2 x float> %374, %372, !dbg !49
  %376 = fmul <2 x float> %375, %371, !dbg !50
  %377 = fptrunc <2 x float> %376 to <2 x half>, !dbg !51
  %378 = fpext <2 x half> %299 to <2 x float>, !dbg !47
  %379 = fpext <2 x half> %335 to <2 x float>, !dbg !48
  %380 = fmul <2 x float> %374, %379, !dbg !49
  %381 = fmul <2 x float> %380, %378, !dbg !50
  %382 = fptrunc <2 x float> %381 to <2 x half>, !dbg !51
  %383 = fpext <2 x half> %301 to <2 x float>, !dbg !47
  %384 = fpext <2 x half> %337 to <2 x float>, !dbg !48
  %385 = fmul <2 x float> %374, %384, !dbg !49
  %386 = fmul <2 x float> %385, %383, !dbg !50
  %387 = fptrunc <2 x float> %386 to <2 x half>, !dbg !51
  %388 = fpext <2 x half> %303 to <2 x float>, !dbg !47
  %389 = fpext <2 x half> %339 to <2 x float>, !dbg !48
  %390 = fmul <2 x float> %374, %389, !dbg !49
  %391 = fmul <2 x float> %390, %388, !dbg !50
  %392 = fptrunc <2 x float> %391 to <2 x half>, !dbg !51
  %393 = fpext <2 x half> %306 to <2 x float>, !dbg !47
  %394 = fpext <2 x half> %342 to <2 x float>, !dbg !48
  %395 = fmul <2 x float> %374, %394, !dbg !49
  %396 = fmul <2 x float> %395, %393, !dbg !50
  %397 = fptrunc <2 x float> %396 to <2 x half>, !dbg !51
  %398 = fpext <2 x half> %308 to <2 x float>, !dbg !47
  %399 = fpext <2 x half> %344 to <2 x float>, !dbg !48
  %400 = fmul <2 x float> %374, %399, !dbg !49
  %401 = fmul <2 x float> %400, %398, !dbg !50
  %402 = fptrunc <2 x float> %401 to <2 x half>, !dbg !51
  %403 = fpext <2 x half> %310 to <2 x float>, !dbg !47
  %404 = fpext <2 x half> %346 to <2 x float>, !dbg !48
  %405 = fmul <2 x float> %374, %404, !dbg !49
  %406 = fmul <2 x float> %405, %403, !dbg !50
  %407 = fptrunc <2 x float> %406 to <2 x half>, !dbg !51
  %408 = fpext <2 x half> %312 to <2 x float>, !dbg !47
  %409 = fpext <2 x half> %348 to <2 x float>, !dbg !48
  %410 = fmul <2 x float> %374, %409, !dbg !49
  %411 = fmul <2 x float> %410, %408, !dbg !50
  %412 = fptrunc <2 x float> %411 to <2 x half>, !dbg !51
  %413 = fpext <2 x half> %315 to <2 x float>, !dbg !47
  %414 = fpext <2 x half> %351 to <2 x float>, !dbg !48
  %415 = fmul <2 x float> %374, %414, !dbg !49
  %416 = fmul <2 x float> %415, %413, !dbg !50
  %417 = fptrunc <2 x float> %416 to <2 x half>, !dbg !51
  %418 = fpext <2 x half> %317 to <2 x float>, !dbg !47
  %419 = fpext <2 x half> %353 to <2 x float>, !dbg !48
  %420 = fmul <2 x float> %374, %419, !dbg !49
  %421 = fmul <2 x float> %420, %418, !dbg !50
  %422 = fptrunc <2 x float> %421 to <2 x half>, !dbg !51
  %423 = fpext <2 x half> %319 to <2 x float>, !dbg !47
  %424 = fpext <2 x half> %355 to <2 x float>, !dbg !48
  %425 = fmul <2 x float> %374, %424, !dbg !49
  %426 = fmul <2 x float> %425, %423, !dbg !50
  %427 = fptrunc <2 x float> %426 to <2 x half>, !dbg !51
  %428 = fpext <2 x half> %321 to <2 x float>, !dbg !47
  %429 = fpext <2 x half> %357 to <2 x float>, !dbg !48
  %430 = fmul <2 x float> %374, %429, !dbg !49
  %431 = fmul <2 x float> %430, %428, !dbg !50
  %432 = fptrunc <2 x float> %431 to <2 x half>, !dbg !51
  %433 = fpext <2 x half> %324 to <2 x float>, !dbg !47
  %434 = fpext <2 x half> %360 to <2 x float>, !dbg !48
  %435 = fmul <2 x float> %374, %434, !dbg !49
  %436 = fmul <2 x float> %435, %433, !dbg !50
  %437 = fptrunc <2 x float> %436 to <2 x half>, !dbg !51
  %438 = fpext <2 x half> %326 to <2 x float>, !dbg !47
  %439 = fpext <2 x half> %362 to <2 x float>, !dbg !48
  %440 = fmul <2 x float> %374, %439, !dbg !49
  %441 = fmul <2 x float> %440, %438, !dbg !50
  %442 = fptrunc <2 x float> %441 to <2 x half>, !dbg !51
  %443 = fpext <2 x half> %328 to <2 x float>, !dbg !47
  %444 = fpext <2 x half> %364 to <2 x float>, !dbg !48
  %445 = fmul <2 x float> %374, %444, !dbg !49
  %446 = fmul <2 x float> %445, %443, !dbg !50
  %447 = fptrunc <2 x float> %446 to <2 x half>, !dbg !51
  %448 = fpext <2 x half> %330 to <2 x float>, !dbg !47
  %449 = fpext <2 x half> %366 to <2 x float>, !dbg !48
  %450 = fmul <2 x float> %374, %449, !dbg !49
  %451 = fmul <2 x float> %450, %448, !dbg !50
  %452 = fptrunc <2 x float> %451 to <2 x half>, !dbg !51
  %453 = bitcast <2 x half> %377 to i32, !dbg !51
  %454 = bitcast <2 x half> %382 to i32, !dbg !51
  %455 = bitcast <2 x half> %387 to i32, !dbg !51
  %456 = bitcast <2 x half> %392 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %453, i32 %454, i32 %455, i32 %456, ptr addrspace(1) %367, i1 %11) #6, !dbg !51
  %457 = bitcast <2 x half> %397 to i32, !dbg !51
  %458 = bitcast <2 x half> %402 to i32, !dbg !51
  %459 = bitcast <2 x half> %407 to i32, !dbg !51
  %460 = bitcast <2 x half> %412 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %457, i32 %458, i32 %459, i32 %460, ptr addrspace(1) %368, i1 %11) #6, !dbg !51
  %461 = bitcast <2 x half> %417 to i32, !dbg !51
  %462 = bitcast <2 x half> %422 to i32, !dbg !51
  %463 = bitcast <2 x half> %427 to i32, !dbg !51
  %464 = bitcast <2 x half> %432 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %461, i32 %462, i32 %463, i32 %464, ptr addrspace(1) %369, i1 %11) #6, !dbg !51
  %465 = bitcast <2 x half> %437 to i32, !dbg !51
  %466 = bitcast <2 x half> %442 to i32, !dbg !51
  %467 = bitcast <2 x half> %447 to i32, !dbg !51
  %468 = bitcast <2 x half> %452 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %465, i32 %466, i32 %467, i32 %468, ptr addrspace(1) %370, i1 %11) #6, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyihme7t354xdekku5rks7waotqdnz3mpo47q3uhqjtr5ixrgolb.py", directory: "/tmp/torchinductor_root/yi")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 22, column: 28, scope: !10)
!12 = !DILocation(line: 24, column: 21, scope: !10)
!13 = !DILocation(line: 28, column: 30, scope: !10)
!14 = !DILocation(line: 28, column: 35, scope: !10)
!15 = !DILocation(line: 37, column: 22, scope: !10)
!16 = !DILocation(line: 38, column: 22, scope: !10)
!17 = !DILocation(line: 39, column: 36, scope: !10)
!18 = !DILocation(line: 40, column: 41, scope: !10)
!19 = !DILocation(line: 40, column: 69, scope: !10)
!20 = !DILocation(line: 25, column: 37, scope: !10)
!21 = !DILocation(line: 41, column: 46, scope: !10)
!22 = !DILocation(line: 41, column: 41, scope: !10)
!23 = !DILocation(line: 41, column: 34, scope: !10)
!24 = !DILocation(line: 41, column: 53, scope: !10)
!25 = !DILocation(line: 41, column: 115, scope: !10)
!26 = !DILocation(line: 43, column: 22, scope: !10)
!27 = !DILocation(line: 47, column: 41, scope: !10)
!28 = !DILocation(line: 47, column: 36, scope: !10)
!29 = !DILocation(line: 47, column: 29, scope: !10)
!30 = !DILocation(line: 47, column: 52, scope: !10)
!31 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !35)
!32 = distinct !DILexicalBlockFile(scope: !34, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!34 = distinct !DILexicalBlockFile(scope: !10, file: !33, discriminator: 0)
!35 = !DILocation(line: 48, column: 27, scope: !10)
!36 = !DILocation(line: 286, column: 36, scope: !34, inlinedAt: !35)
!37 = !DILocation(line: 50, column: 21, scope: !10)
!38 = !DILocation(line: 52, column: 20, scope: !10)
!39 = !DILocation(line: 53, column: 28, scope: !10)
!40 = !DILocation(line: 54, column: 4, scope: !10)
!41 = !DILocation(line: 55, column: 28, scope: !10)
!42 = !DILocation(line: 55, column: 40, scope: !10)
!43 = !DILocation(line: 62, column: 35, scope: !10)
!44 = !DILocation(line: 62, column: 42, scope: !10)
!45 = !DILocation(line: 63, column: 53, scope: !10)
!46 = !DILocation(line: 68, column: 29, scope: !10)
!47 = !DILocation(line: 62, column: 95, scope: !10)
!48 = !DILocation(line: 63, column: 115, scope: !10)
!49 = !DILocation(line: 65, column: 24, scope: !10)
!50 = !DILocation(line: 67, column: 24, scope: !10)
!51 = !DILocation(line: 68, column: 53, scope: !10)
!52 = !DILocation(line: 56, column: 4, scope: !10)
