; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [73 x i8] c"./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py\00"
@assertMessage_0 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp4 < 128256\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !10 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 5, !dbg !12
  %13 = lshr i32 %11, 6, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = and i32 %11, 31, !dbg !12
  %16 = and i32 %11, 7, !dbg !12
  %17 = shl i32 %11, 3, !dbg !13
  %18 = and i32 %17, 504, !dbg !13
  %19 = and i32 %11, 511, !dbg !13
  %20 = shl i32 %10, 3, !dbg !14
  %21 = or disjoint i32 %14, %20, !dbg !15
  %22 = or disjoint i32 %20, 1, !dbg !15
  %23 = or disjoint i32 %20, 2, !dbg !15
  %24 = or disjoint i32 %20, 3, !dbg !15
  %25 = insertelement <4 x i32> poison, i32 %20, i64 0, !dbg !15
  %26 = shufflevector <4 x i32> %25, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !15
  %27 = or disjoint <4 x i32> %26, <i32 4, i32 5, i32 6, i32 7>, !dbg !15
  %28 = or disjoint i32 %20, %16, !dbg !15
  %29 = icmp slt i32 %21, %6, !dbg !16
  %30 = insertelement <8 x i32> poison, i32 %20, i64 0, !dbg !16
  %31 = insertelement <8 x i32> %30, i32 %22, i64 1, !dbg !16
  %32 = insertelement <8 x i32> %31, i32 %23, i64 2, !dbg !16
  %33 = insertelement <8 x i32> %32, i32 %24, i64 3, !dbg !16
  %34 = shufflevector <4 x i32> %27, <4 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !16
  %35 = shufflevector <8 x i32> %33, <8 x i32> %34, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>, !dbg !16
  %36 = insertelement <8 x i32> poison, i32 %6, i64 0, !dbg !16
  %37 = shufflevector <8 x i32> %36, <8 x i32> poison, <8 x i32> zeroinitializer, !dbg !16
  %38 = icmp slt <8 x i32> %35, %37, !dbg !16
  %39 = icmp slt i32 %28, %6, !dbg !16
  %40 = sext i32 %21 to i64, !dbg !17
  %41 = getelementptr i64, ptr addrspace(1) %1, i64 %40, !dbg !17
  %42 = sext i32 %20 to i64, !dbg !17
  %43 = getelementptr i64, ptr addrspace(1) %1, i64 %42, !dbg !17
  %44 = sext i32 %22 to i64, !dbg !17
  %45 = getelementptr i64, ptr addrspace(1) %1, i64 %44, !dbg !17
  %46 = sext i32 %23 to i64, !dbg !17
  %47 = getelementptr i64, ptr addrspace(1) %1, i64 %46, !dbg !17
  %48 = sext i32 %24 to i64, !dbg !17
  %49 = getelementptr i64, ptr addrspace(1) %1, i64 %48, !dbg !17
  %50 = extractelement <4 x i32> %27, i64 0, !dbg !17
  %51 = sext i32 %50 to i64, !dbg !17
  %52 = getelementptr i64, ptr addrspace(1) %1, i64 %51, !dbg !17
  %53 = extractelement <4 x i32> %27, i64 1, !dbg !17
  %54 = sext i32 %53 to i64, !dbg !17
  %55 = getelementptr i64, ptr addrspace(1) %1, i64 %54, !dbg !17
  %56 = extractelement <4 x i32> %27, i64 2, !dbg !17
  %57 = sext i32 %56 to i64, !dbg !17
  %58 = getelementptr i64, ptr addrspace(1) %1, i64 %57, !dbg !17
  %59 = extractelement <4 x i32> %27, i64 3, !dbg !17
  %60 = sext i32 %59 to i64, !dbg !17
  %61 = getelementptr i64, ptr addrspace(1) %1, i64 %60, !dbg !17
  %62 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %29) #6, !dbg !18
  %63 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %29) #6, !dbg !18
  %64 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %29) #6, !dbg !18
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %29) #6, !dbg !18
  %66 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %29) #6, !dbg !18
  %67 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %29) #6, !dbg !18
  %68 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %29) #6, !dbg !18
  %69 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %29) #6, !dbg !18
  %70 = extractelement <8 x i1> %38, i64 0, !dbg !18
  %71 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 %70) #6, !dbg !18
  %72 = extractelement <8 x i1> %38, i64 1, !dbg !18
  %73 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 %72) #6, !dbg !18
  %74 = extractelement <8 x i1> %38, i64 2, !dbg !18
  %75 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 %74) #6, !dbg !18
  %76 = extractelement <8 x i1> %38, i64 3, !dbg !18
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %49, i1 %76) #6, !dbg !18
  %78 = extractelement <8 x i1> %38, i64 4, !dbg !18
  %79 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %52, i1 %78) #6, !dbg !18
  %80 = extractelement <8 x i1> %38, i64 5, !dbg !18
  %81 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %55, i1 %80) #6, !dbg !18
  %82 = extractelement <8 x i1> %38, i64 6, !dbg !18
  %83 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %58, i1 %82) #6, !dbg !18
  %84 = extractelement <8 x i1> %38, i64 7, !dbg !18
  %85 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %61, i1 %84) #6, !dbg !18
  %86 = insertelement <8 x i64> poison, i64 %71, i64 0, !dbg !19
  %87 = insertelement <8 x i64> %86, i64 %73, i64 1, !dbg !19
  %88 = insertelement <8 x i64> %87, i64 %75, i64 2, !dbg !19
  %89 = insertelement <8 x i64> %88, i64 %77, i64 3, !dbg !19
  %90 = insertelement <8 x i64> %89, i64 %79, i64 4, !dbg !19
  %91 = insertelement <8 x i64> %90, i64 %81, i64 5, !dbg !19
  %92 = insertelement <8 x i64> %91, i64 %83, i64 6, !dbg !19
  %93 = insertelement <8 x i64> %92, i64 %85, i64 7, !dbg !19
  %94 = add <8 x i64> %93, splat (i64 128256), !dbg !19
  %95 = icmp slt i64 %69, 0, !dbg !20
  %96 = icmp slt <8 x i64> %93, zeroinitializer, !dbg !20
  %97 = select <8 x i1> %96, <8 x i64> %94, <8 x i64> %93, !dbg !21
  %98 = icmp ugt <8 x i64> %97, splat (i64 128255), !dbg !22
  %99 = and <8 x i1> %38, %98, !dbg !23
  %100 = shl i64 %69, 12, !dbg !24
  %101 = add i64 %100, 525336576, !dbg !24
  %102 = select i1 %95, i64 %101, i64 %100, !dbg !24
  %103 = shl i32 %21, 12, !dbg !25
  %104 = bitcast <8 x i1> %99 to i8
  %.not = icmp eq i8 %104, 0
  %invariant.op = or disjoint i32 %18, %103, !dbg !26
  %105 = getelementptr half, ptr addrspace(1) %2, i64 %102
  br i1 %.not, label %.split, label %364, !dbg !27

.split:                                           ; preds = %9
  %106 = insertelement <8 x i1> poison, i1 %29, i64 0, !dbg !28
  %107 = shufflevector <8 x i1> %106, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !28
  %108 = zext nneg i32 %18 to i64, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %109 = getelementptr half, ptr addrspace(1) %105, i64 %108, !dbg !29
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %109, i1 %29) #6, !dbg !30
  %111 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !30
  %112 = bitcast i32 %111 to <2 x half>, !dbg !30
  %113 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !30
  %114 = bitcast i32 %113 to <2 x half>, !dbg !30
  %115 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !30
  %116 = bitcast i32 %115 to <2 x half>, !dbg !30
  %117 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !30
  %118 = bitcast i32 %117 to <2 x half>, !dbg !30
  %119 = shufflevector <2 x half> %112, <2 x half> %114, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %120 = shufflevector <2 x half> %116, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %121 = shufflevector <8 x half> %119, <8 x half> %120, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !31
  %122 = shufflevector <2 x half> %116, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %123 = shufflevector <8 x half> %121, <8 x half> %122, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !31
  %124 = shufflevector <2 x half> %118, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %125 = shufflevector <8 x half> %123, <8 x half> %124, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !31
  %126 = shufflevector <2 x half> %118, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %127 = shufflevector <8 x half> %125, <8 x half> %126, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !31
  %128 = fpext <8 x half> %127 to <8 x float>, !dbg !31
  %129 = fmul <8 x float> %128, %128, !dbg !32
  %130 = sext i32 %invariant.op to i64, !dbg !33
  %131 = getelementptr half, ptr addrspace(1) %4, i64 %130, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %111, i32 %113, i32 %115, i32 %117, ptr addrspace(1) %131, i1 %29) #6, !dbg !34
  %132 = or disjoint i64 %108, 512, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %133 = getelementptr half, ptr addrspace(1) %105, i64 %132, !dbg !29
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %133, i1 %29) #6, !dbg !30
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !30
  %136 = bitcast i32 %135 to <2 x half>, !dbg !30
  %137 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !30
  %138 = bitcast i32 %137 to <2 x half>, !dbg !30
  %139 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !30
  %140 = bitcast i32 %139 to <2 x half>, !dbg !30
  %141 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !30
  %142 = bitcast i32 %141 to <2 x half>, !dbg !30
  %143 = shufflevector <2 x half> %136, <2 x half> %138, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %144 = shufflevector <2 x half> %140, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %145 = shufflevector <8 x half> %143, <8 x half> %144, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !31
  %146 = shufflevector <2 x half> %140, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %147 = shufflevector <8 x half> %145, <8 x half> %146, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !31
  %148 = shufflevector <2 x half> %142, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %149 = shufflevector <8 x half> %147, <8 x half> %148, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !31
  %150 = shufflevector <2 x half> %142, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %151 = shufflevector <8 x half> %149, <8 x half> %150, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !31
  %152 = fpext <8 x half> %151 to <8 x float>, !dbg !31
  %153 = fmul <8 x float> %152, %152, !dbg !32
  %154 = fadd <8 x float> %129, %153, !dbg !36
  %.reass.1 = or disjoint i32 %invariant.op, 512
  %155 = sext i32 %.reass.1 to i64, !dbg !33
  %156 = getelementptr half, ptr addrspace(1) %4, i64 %155, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %135, i32 %137, i32 %139, i32 %141, ptr addrspace(1) %156, i1 %29) #6, !dbg !34
  %157 = or disjoint i64 %108, 1024, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %158 = getelementptr half, ptr addrspace(1) %105, i64 %157, !dbg !29
  %159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %158, i1 %29) #6, !dbg !30
  %160 = extractvalue { i32, i32, i32, i32 } %159, 0, !dbg !30
  %161 = bitcast i32 %160 to <2 x half>, !dbg !30
  %162 = extractvalue { i32, i32, i32, i32 } %159, 1, !dbg !30
  %163 = bitcast i32 %162 to <2 x half>, !dbg !30
  %164 = extractvalue { i32, i32, i32, i32 } %159, 2, !dbg !30
  %165 = bitcast i32 %164 to <2 x half>, !dbg !30
  %166 = extractvalue { i32, i32, i32, i32 } %159, 3, !dbg !30
  %167 = bitcast i32 %166 to <2 x half>, !dbg !30
  %168 = shufflevector <2 x half> %161, <2 x half> %163, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %169 = shufflevector <2 x half> %165, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %170 = shufflevector <8 x half> %168, <8 x half> %169, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !31
  %171 = shufflevector <2 x half> %165, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %172 = shufflevector <8 x half> %170, <8 x half> %171, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !31
  %173 = shufflevector <2 x half> %167, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %174 = shufflevector <8 x half> %172, <8 x half> %173, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !31
  %175 = shufflevector <2 x half> %167, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %176 = shufflevector <8 x half> %174, <8 x half> %175, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !31
  %177 = fpext <8 x half> %176 to <8 x float>, !dbg !31
  %178 = fmul <8 x float> %177, %177, !dbg !32
  %179 = fadd <8 x float> %154, %178, !dbg !36
  %.reass.2 = or disjoint i32 %invariant.op, 1024
  %180 = sext i32 %.reass.2 to i64, !dbg !33
  %181 = getelementptr half, ptr addrspace(1) %4, i64 %180, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %160, i32 %162, i32 %164, i32 %166, ptr addrspace(1) %181, i1 %29) #6, !dbg !34
  %182 = or disjoint i64 %108, 1536, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %183 = getelementptr half, ptr addrspace(1) %105, i64 %182, !dbg !29
  %184 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %183, i1 %29) #6, !dbg !30
  %185 = extractvalue { i32, i32, i32, i32 } %184, 0, !dbg !30
  %186 = bitcast i32 %185 to <2 x half>, !dbg !30
  %187 = extractvalue { i32, i32, i32, i32 } %184, 1, !dbg !30
  %188 = bitcast i32 %187 to <2 x half>, !dbg !30
  %189 = extractvalue { i32, i32, i32, i32 } %184, 2, !dbg !30
  %190 = bitcast i32 %189 to <2 x half>, !dbg !30
  %191 = extractvalue { i32, i32, i32, i32 } %184, 3, !dbg !30
  %192 = bitcast i32 %191 to <2 x half>, !dbg !30
  %193 = shufflevector <2 x half> %186, <2 x half> %188, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %194 = shufflevector <2 x half> %190, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %195 = shufflevector <8 x half> %193, <8 x half> %194, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !31
  %196 = shufflevector <2 x half> %190, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %197 = shufflevector <8 x half> %195, <8 x half> %196, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !31
  %198 = shufflevector <2 x half> %192, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %199 = shufflevector <8 x half> %197, <8 x half> %198, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !31
  %200 = shufflevector <2 x half> %192, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %201 = shufflevector <8 x half> %199, <8 x half> %200, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !31
  %202 = fpext <8 x half> %201 to <8 x float>, !dbg !31
  %203 = fmul <8 x float> %202, %202, !dbg !32
  %204 = fadd <8 x float> %179, %203, !dbg !36
  %.reass.3 = or disjoint i32 %invariant.op, 1536
  %205 = sext i32 %.reass.3 to i64, !dbg !33
  %206 = getelementptr half, ptr addrspace(1) %4, i64 %205, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %185, i32 %187, i32 %189, i32 %191, ptr addrspace(1) %206, i1 %29) #6, !dbg !34
  %207 = or disjoint i64 %108, 2048, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %208 = getelementptr half, ptr addrspace(1) %105, i64 %207, !dbg !29
  %209 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %208, i1 %29) #6, !dbg !30
  %210 = extractvalue { i32, i32, i32, i32 } %209, 0, !dbg !30
  %211 = bitcast i32 %210 to <2 x half>, !dbg !30
  %212 = extractvalue { i32, i32, i32, i32 } %209, 1, !dbg !30
  %213 = bitcast i32 %212 to <2 x half>, !dbg !30
  %214 = extractvalue { i32, i32, i32, i32 } %209, 2, !dbg !30
  %215 = bitcast i32 %214 to <2 x half>, !dbg !30
  %216 = extractvalue { i32, i32, i32, i32 } %209, 3, !dbg !30
  %217 = bitcast i32 %216 to <2 x half>, !dbg !30
  %218 = shufflevector <2 x half> %211, <2 x half> %213, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %219 = shufflevector <2 x half> %215, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %220 = shufflevector <8 x half> %218, <8 x half> %219, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !31
  %221 = shufflevector <2 x half> %215, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %222 = shufflevector <8 x half> %220, <8 x half> %221, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !31
  %223 = shufflevector <2 x half> %217, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %224 = shufflevector <8 x half> %222, <8 x half> %223, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !31
  %225 = shufflevector <2 x half> %217, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %226 = shufflevector <8 x half> %224, <8 x half> %225, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !31
  %227 = fpext <8 x half> %226 to <8 x float>, !dbg !31
  %228 = fmul <8 x float> %227, %227, !dbg !32
  %229 = fadd <8 x float> %204, %228, !dbg !36
  %.reass.4 = or disjoint i32 %invariant.op, 2048
  %230 = sext i32 %.reass.4 to i64, !dbg !33
  %231 = getelementptr half, ptr addrspace(1) %4, i64 %230, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %210, i32 %212, i32 %214, i32 %216, ptr addrspace(1) %231, i1 %29) #6, !dbg !34
  %232 = or disjoint i64 %108, 2560, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %233 = getelementptr half, ptr addrspace(1) %105, i64 %232, !dbg !29
  %234 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %233, i1 %29) #6, !dbg !30
  %235 = extractvalue { i32, i32, i32, i32 } %234, 0, !dbg !30
  %236 = bitcast i32 %235 to <2 x half>, !dbg !30
  %237 = extractvalue { i32, i32, i32, i32 } %234, 1, !dbg !30
  %238 = bitcast i32 %237 to <2 x half>, !dbg !30
  %239 = extractvalue { i32, i32, i32, i32 } %234, 2, !dbg !30
  %240 = bitcast i32 %239 to <2 x half>, !dbg !30
  %241 = extractvalue { i32, i32, i32, i32 } %234, 3, !dbg !30
  %242 = bitcast i32 %241 to <2 x half>, !dbg !30
  %243 = shufflevector <2 x half> %236, <2 x half> %238, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %244 = shufflevector <2 x half> %240, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %245 = shufflevector <8 x half> %243, <8 x half> %244, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !31
  %246 = shufflevector <2 x half> %240, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %247 = shufflevector <8 x half> %245, <8 x half> %246, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !31
  %248 = shufflevector <2 x half> %242, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %249 = shufflevector <8 x half> %247, <8 x half> %248, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !31
  %250 = shufflevector <2 x half> %242, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %251 = shufflevector <8 x half> %249, <8 x half> %250, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !31
  %252 = fpext <8 x half> %251 to <8 x float>, !dbg !31
  %253 = fmul <8 x float> %252, %252, !dbg !32
  %254 = fadd <8 x float> %229, %253, !dbg !36
  %.reass.5 = or disjoint i32 %invariant.op, 2560
  %255 = sext i32 %.reass.5 to i64, !dbg !33
  %256 = getelementptr half, ptr addrspace(1) %4, i64 %255, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %235, i32 %237, i32 %239, i32 %241, ptr addrspace(1) %256, i1 %29) #6, !dbg !34
  %257 = or disjoint i64 %108, 3072, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %258 = getelementptr half, ptr addrspace(1) %105, i64 %257, !dbg !29
  %259 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %258, i1 %29) #6, !dbg !30
  %260 = extractvalue { i32, i32, i32, i32 } %259, 0, !dbg !30
  %261 = bitcast i32 %260 to <2 x half>, !dbg !30
  %262 = extractvalue { i32, i32, i32, i32 } %259, 1, !dbg !30
  %263 = bitcast i32 %262 to <2 x half>, !dbg !30
  %264 = extractvalue { i32, i32, i32, i32 } %259, 2, !dbg !30
  %265 = bitcast i32 %264 to <2 x half>, !dbg !30
  %266 = extractvalue { i32, i32, i32, i32 } %259, 3, !dbg !30
  %267 = bitcast i32 %266 to <2 x half>, !dbg !30
  %268 = shufflevector <2 x half> %261, <2 x half> %263, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %269 = shufflevector <2 x half> %265, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %270 = shufflevector <8 x half> %268, <8 x half> %269, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !31
  %271 = shufflevector <2 x half> %265, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %272 = shufflevector <8 x half> %270, <8 x half> %271, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !31
  %273 = shufflevector <2 x half> %267, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %274 = shufflevector <8 x half> %272, <8 x half> %273, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !31
  %275 = shufflevector <2 x half> %267, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %276 = shufflevector <8 x half> %274, <8 x half> %275, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !31
  %277 = fpext <8 x half> %276 to <8 x float>, !dbg !31
  %278 = fmul <8 x float> %277, %277, !dbg !32
  %279 = fadd <8 x float> %254, %278, !dbg !36
  %.reass.6 = or disjoint i32 %invariant.op, 3072
  %280 = sext i32 %.reass.6 to i64, !dbg !33
  %281 = getelementptr half, ptr addrspace(1) %4, i64 %280, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %260, i32 %262, i32 %264, i32 %266, ptr addrspace(1) %281, i1 %29) #6, !dbg !34
  %282 = or disjoint i64 %108, 3584, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %283 = getelementptr half, ptr addrspace(1) %105, i64 %282, !dbg !29
  %284 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %283, i1 %29) #6, !dbg !30
  %285 = extractvalue { i32, i32, i32, i32 } %284, 0, !dbg !30
  %286 = bitcast i32 %285 to <2 x half>, !dbg !30
  %287 = extractvalue { i32, i32, i32, i32 } %284, 1, !dbg !30
  %288 = bitcast i32 %287 to <2 x half>, !dbg !30
  %289 = extractvalue { i32, i32, i32, i32 } %284, 2, !dbg !30
  %290 = bitcast i32 %289 to <2 x half>, !dbg !30
  %291 = extractvalue { i32, i32, i32, i32 } %284, 3, !dbg !30
  %292 = bitcast i32 %291 to <2 x half>, !dbg !30
  %293 = shufflevector <2 x half> %286, <2 x half> %288, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %294 = shufflevector <2 x half> %290, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %295 = shufflevector <8 x half> %293, <8 x half> %294, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !31
  %296 = shufflevector <2 x half> %290, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %297 = shufflevector <8 x half> %295, <8 x half> %296, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !31
  %298 = shufflevector <2 x half> %292, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %299 = shufflevector <8 x half> %297, <8 x half> %298, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !31
  %300 = shufflevector <2 x half> %292, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %301 = shufflevector <8 x half> %299, <8 x half> %300, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !31
  %302 = fpext <8 x half> %301 to <8 x float>, !dbg !31
  %303 = fmul <8 x float> %302, %302, !dbg !32
  %304 = fadd <8 x float> %279, %303, !dbg !36
  %305 = select <8 x i1> %107, <8 x float> %304, <8 x float> zeroinitializer, !dbg !28
  %.reass.7 = or disjoint i32 %invariant.op, 3584
  %306 = sext i32 %.reass.7 to i64, !dbg !33
  %307 = getelementptr half, ptr addrspace(1) %4, i64 %306, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %285, i32 %287, i32 %289, i32 %291, ptr addrspace(1) %307, i1 %29) #6, !dbg !34
  %shift = shufflevector <8 x float> %305, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %308 = fadd <8 x float> %305, %shift, !dbg !37
  %shift67 = shufflevector <8 x float> %305, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %309 = fadd <8 x float> %shift67, %308, !dbg !37
  %shift68 = shufflevector <8 x float> %305, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %310 = fadd <8 x float> %shift68, %309, !dbg !37
  %shift69 = shufflevector <8 x float> %305, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %311 = fadd <8 x float> %shift69, %310, !dbg !37
  %shift70 = shufflevector <8 x float> %305, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %312 = fadd <8 x float> %shift70, %311, !dbg !37
  %shift71 = shufflevector <8 x float> %305, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %313 = fadd <8 x float> %shift71, %312, !dbg !37
  %shift72 = shufflevector <8 x float> %305, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !37
  %314 = fadd <8 x float> %shift72, %313, !dbg !37
  %315 = extractelement <8 x float> %314, i64 0, !dbg !37
  %316 = bitcast float %315 to i32, !dbg !42
  %317 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %316, i32 16, i32 31), !dbg !42
  %318 = bitcast i32 %317 to float, !dbg !42
  %319 = fadd float %315, %318, !dbg !37
  %320 = bitcast float %319 to i32, !dbg !42
  %321 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %320, i32 8, i32 31), !dbg !42
  %322 = bitcast i32 %321 to float, !dbg !42
  %323 = fadd float %319, %322, !dbg !37
  %324 = bitcast float %323 to i32, !dbg !42
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 4, i32 31), !dbg !42
  %326 = bitcast i32 %325 to float, !dbg !42
  %327 = fadd float %323, %326, !dbg !37
  %328 = bitcast float %327 to i32, !dbg !42
  %329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %328, i32 2, i32 31), !dbg !42
  %330 = bitcast i32 %329 to float, !dbg !42
  %331 = fadd float %327, %330, !dbg !37
  %332 = bitcast float %331 to i32, !dbg !42
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 1, i32 31), !dbg !42
  %334 = bitcast i32 %333 to float, !dbg !42
  %335 = fadd float %331, %334, !dbg !37
  %336 = and i32 %12, 1, !dbg !42
  %337 = icmp eq i32 %15, 0, !dbg !42
  %338 = shl nuw nsw i32 %14, 1, !dbg !42
  %339 = or disjoint i32 %338, %336, !dbg !42
  %340 = getelementptr float, ptr addrspace(3) @global_smem, i32 %339, !dbg !42
  %341 = bitcast float %335 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %340, <1 x i32> %341, i1 %337) #6, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %342 = icmp slt i32 %11, 16, !dbg !42
  %343 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !42
  %344 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %343, i1 %342) #6, !dbg !42
  %345 = bitcast i32 %344 to float, !dbg !42
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %344, i32 1, i32 31), !dbg !42
  %347 = bitcast i32 %346 to float, !dbg !42
  %348 = fadd float %345, %347, !dbg !37
  %349 = and i32 %11, 1, !dbg !42
  %350 = icmp eq i32 %349, 0, !dbg !42
  %351 = and i1 %342, %350, !dbg !42
  %352 = bitcast float %348 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %343, <1 x i32> %352, i1 %351) #6, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %353 = getelementptr float, ptr addrspace(3) @global_smem, i32 %338, !dbg !42
  %354 = load float, ptr addrspace(3) %353, align 8, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %355 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %14, !dbg !43
  %356 = bitcast float %354 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %355, <1 x i32> %356, i1 true) #6, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %357 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %16, !dbg !43
  %358 = load float, ptr addrspace(3) %357, align 4, !dbg !43
  %359 = tail call float @llvm.nvvm.div.full(float %358, float 4.096000e+03), !dbg !44
  %360 = tail call float @llvm.nvvm.div.full(float %354, float 4.096000e+03), !dbg !44
  %361 = fadd float %359, 0x3EE4F8B580000000, !dbg !45
  %362 = fadd float %360, 0x3EE4F8B580000000, !dbg !45
  %363 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %.not.i = icmp eq i32 %363, 0, !dbg !43
  br i1 %.not.i, label %367, label %365, !dbg !43

364:                                              ; preds = %9
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !27
  unreachable, !dbg !27

365:                                              ; preds = %.split
  %366 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %361), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

367:                                              ; preds = %.split
  %368 = tail call float @llvm.nvvm.rsqrt.approx.f(float %361), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

__nv_rsqrtf.exit:                                 ; preds = %365, %367
  %.0.i = phi float [ %366, %365 ], [ %368, %367 ], !dbg !43
  %369 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %370 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %371 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %372 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %373 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %374 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %375 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %376 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %.not.i40 = icmp eq i32 %376, 0, !dbg !43
  br i1 %.not.i40, label %379, label %377, !dbg !43

377:                                              ; preds = %__nv_rsqrtf.exit
  %378 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %362), !dbg !43
  br label %__nv_rsqrtf.exit42, !dbg !43

379:                                              ; preds = %__nv_rsqrtf.exit
  %380 = tail call float @llvm.nvvm.rsqrt.approx.f(float %362), !dbg !43
  br label %__nv_rsqrtf.exit42, !dbg !43

__nv_rsqrtf.exit42:                               ; preds = %377, %379
  %.0.i41 = phi float [ %378, %377 ], [ %380, %379 ], !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %381 = sext i32 %28 to i64, !dbg !47
  %382 = getelementptr float, ptr addrspace(1) %0, i64 %381, !dbg !47
  %383 = and i32 %11, 504, !dbg !48
  %384 = icmp eq i32 %383, 0, !dbg !48
  %385 = bitcast float %.0.i to i32, !dbg !48
  %386 = and i1 %384, %39, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %385, ptr addrspace(1) %382, i1 %386) #6, !dbg !48
  %387 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %19
  %388 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %18
  %389 = or disjoint i32 %18, 4
  %390 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %389
  %391 = zext nneg i32 %19 to i64, !dbg !49
  %392 = getelementptr inbounds nuw i8, ptr addrspace(3) %388, i32 8
  %393 = getelementptr inbounds nuw i8, ptr addrspace(3) %390, i32 8
  %394 = insertelement <2 x float> poison, float %.0.i41, i64 0, !dbg !50
  %395 = shufflevector <2 x float> %394, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  br label %396, !dbg !49

396:                                              ; preds = %__nv_rsqrtf.exit42, %396
  %indvars.iv51 = phi i64 [ 0, %__nv_rsqrtf.exit42 ], [ %indvars.iv.next52, %396 ]
  %397 = or disjoint i64 %indvars.iv51, %391, !dbg !51
  %398 = getelementptr half, ptr addrspace(1) %3, i64 %397, !dbg !52
  %399 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %398, i1 true) #6, !dbg !53
  %400 = bitcast i16 %399 to half, !dbg !53
  %401 = fpext half %400 to float, !dbg !54
  %402 = trunc nuw nsw i64 %indvars.iv51 to i32, !dbg !55
  %403 = or i32 %invariant.op, %402, !dbg !55
  %404 = sext i32 %403 to i64, !dbg !56
  %405 = getelementptr half, ptr addrspace(1) %4, i64 %404, !dbg !56
  %406 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %405, i1 %29) #6, !dbg !57
  %407 = extractvalue { i32, i32, i32, i32 } %406, 0, !dbg !57
  %408 = bitcast i32 %407 to <2 x half>, !dbg !57
  %409 = extractvalue { i32, i32, i32, i32 } %406, 1, !dbg !57
  %410 = bitcast i32 %409 to <2 x half>, !dbg !57
  %411 = extractvalue { i32, i32, i32, i32 } %406, 2, !dbg !57
  %412 = bitcast i32 %411 to <2 x half>, !dbg !57
  %413 = extractvalue { i32, i32, i32, i32 } %406, 3, !dbg !57
  %414 = bitcast i32 %413 to <2 x half>, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %415 = bitcast float %401 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %387, <1 x i32> %415, i1 true) #6, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %416 = getelementptr half, ptr addrspace(1) %5, i64 %404, !dbg !59
  %417 = fpext <2 x half> %408 to <2 x float>, !dbg !60
  %418 = fmul <2 x float> %395, %417, !dbg !50
  %419 = load <2 x float>, ptr addrspace(3) %388, align 16, !dbg !58
  %420 = fmul <2 x float> %419, %418, !dbg !58
  %421 = fptrunc <2 x float> %420 to <2 x half>, !dbg !61
  %422 = fpext <2 x half> %410 to <2 x float>, !dbg !60
  %423 = fmul <2 x float> %395, %422, !dbg !50
  %424 = load <2 x float>, ptr addrspace(3) %392, align 8, !dbg !58
  %425 = fmul <2 x float> %424, %423, !dbg !58
  %426 = fptrunc <2 x float> %425 to <2 x half>, !dbg !61
  %427 = fpext <2 x half> %412 to <2 x float>, !dbg !60
  %428 = fmul <2 x float> %395, %427, !dbg !50
  %429 = load <2 x float>, ptr addrspace(3) %390, align 16, !dbg !58
  %430 = fmul <2 x float> %428, %429, !dbg !58
  %431 = fptrunc <2 x float> %430 to <2 x half>, !dbg !61
  %432 = fpext <2 x half> %414 to <2 x float>, !dbg !60
  %433 = fmul <2 x float> %395, %432, !dbg !50
  %434 = load <2 x float>, ptr addrspace(3) %393, align 8, !dbg !58
  %435 = fmul <2 x float> %433, %434, !dbg !58
  %436 = fptrunc <2 x float> %435 to <2 x half>, !dbg !61
  %437 = bitcast <2 x half> %421 to i32, !dbg !61
  %438 = bitcast <2 x half> %426 to i32, !dbg !61
  %439 = bitcast <2 x half> %431 to i32, !dbg !61
  %440 = bitcast <2 x half> %436 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %437, i32 %438, i32 %439, i32 %440, ptr addrspace(1) %416, i1 %29) #6, !dbg !61
  %indvars.iv.next52 = add nuw nsw i64 %indvars.iv51, 512, !dbg !49
  %441 = icmp samesign ult i64 %indvars.iv51, 3584, !dbg !49
  br i1 %441, label %396, label %442, !dbg !49

442:                                              ; preds = %396
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py", directory: "./local_cache/3k")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 22, column: 28, scope: !10)
!12 = !DILocation(line: 23, column: 44, scope: !10)
!13 = !DILocation(line: 25, column: 37, scope: !10)
!14 = !DILocation(line: 22, column: 33, scope: !10)
!15 = !DILocation(line: 23, column: 23, scope: !10)
!16 = !DILocation(line: 24, column: 21, scope: !10)
!17 = !DILocation(line: 28, column: 30, scope: !10)
!18 = !DILocation(line: 28, column: 35, scope: !10)
!19 = !DILocation(line: 37, column: 22, scope: !10)
!20 = !DILocation(line: 38, column: 22, scope: !10)
!21 = !DILocation(line: 39, column: 36, scope: !10)
!22 = !DILocation(line: 40, column: 41, scope: !10)
!23 = !DILocation(line: 40, column: 59, scope: !10)
!24 = !DILocation(line: 41, column: 46, scope: !10)
!25 = !DILocation(line: 47, column: 41, scope: !10)
!26 = !DILocation(line: 30, column: 40, scope: !10)
!27 = !DILocation(line: 40, column: 69, scope: !10)
!28 = !DILocation(line: 46, column: 50, scope: !10)
!29 = !DILocation(line: 41, column: 34, scope: !10)
!30 = !DILocation(line: 41, column: 53, scope: !10)
!31 = !DILocation(line: 41, column: 115, scope: !10)
!32 = !DILocation(line: 43, column: 22, scope: !10)
!33 = !DILocation(line: 47, column: 29, scope: !10)
!34 = !DILocation(line: 47, column: 52, scope: !10)
!35 = !DILocation(line: 31, column: 31, scope: !10)
!36 = !DILocation(line: 45, column: 25, scope: !10)
!37 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !41)
!38 = distinct !DILexicalBlockFile(scope: !40, file: !39, discriminator: 0)
!39 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!40 = distinct !DILexicalBlockFile(scope: !10, file: !39, discriminator: 0)
!41 = !DILocation(line: 48, column: 27, scope: !10)
!42 = !DILocation(line: 286, column: 36, scope: !40, inlinedAt: !41)
!43 = !DILocation(line: 53, column: 28, scope: !10)
!44 = !DILocation(line: 50, column: 21, scope: !10)
!45 = !DILocation(line: 52, column: 20, scope: !10)
!46 = !DILocation(line: 54, column: 4, scope: !10)
!47 = !DILocation(line: 55, column: 28, scope: !10)
!48 = !DILocation(line: 55, column: 40, scope: !10)
!49 = !DILocation(line: 56, column: 40, scope: !10)
!50 = !DILocation(line: 65, column: 24, scope: !10)
!51 = !DILocation(line: 57, column: 31, scope: !10)
!52 = !DILocation(line: 62, column: 35, scope: !10)
!53 = !DILocation(line: 62, column: 42, scope: !10)
!54 = !DILocation(line: 62, column: 95, scope: !10)
!55 = !DILocation(line: 63, column: 43, scope: !10)
!56 = !DILocation(line: 63, column: 36, scope: !10)
!57 = !DILocation(line: 63, column: 53, scope: !10)
!58 = !DILocation(line: 67, column: 24, scope: !10)
!59 = !DILocation(line: 68, column: 29, scope: !10)
!60 = !DILocation(line: 63, column: 115, scope: !10)
!61 = !DILocation(line: 68, column: 53, scope: !10)
!62 = !DILocation(line: 56, column: 4, scope: !10)
