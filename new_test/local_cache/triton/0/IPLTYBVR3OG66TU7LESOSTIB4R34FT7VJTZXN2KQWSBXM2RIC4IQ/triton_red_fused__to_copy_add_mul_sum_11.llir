; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define ptx_kernel void @triton_red_fused__to_copy_add_mul_sum_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = shl i32 %10, 6, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = shl i32 %12, 3, !dbg !11
  %14 = and i32 %13, 56, !dbg !11
  %15 = or disjoint i32 %14, %11, !dbg !12
  %16 = lshr i32 %12, 3, !dbg !13
  %17 = and i32 %16, 63, !dbg !13
  %18 = icmp sgt i32 %7, 0, !dbg !14
  br i1 %18, label %.lr.ph, label %._crit_edge, !dbg !14

.lr.ph:                                           ; preds = %9, %.lr.ph
  %19 = phi i32 [ %127, %.lr.ph ], [ 0, %9 ]
  %20 = phi <8 x float> [ %126, %.lr.ph ], [ zeroinitializer, %9 ]
  %21 = or disjoint i32 %19, %17, !dbg !15
  %22 = icmp slt i32 %21, %7, !dbg !16
  %23 = shl i32 %21, 12, !dbg !17
  %24 = add i32 %15, %23, !dbg !18
  %25 = sext i32 %24 to i64, !dbg !19
  %26 = getelementptr half, ptr addrspace(1) %0, i64 %25, !dbg !19
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %26, i1 %22) #3, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !20
  %29 = bitcast i32 %28 to <2 x half>, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !20
  %31 = bitcast i32 %30 to <2 x half>, !dbg !20
  %32 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !20
  %33 = bitcast i32 %32 to <2 x half>, !dbg !20
  %34 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !20
  %35 = bitcast i32 %34 to <2 x half>, !dbg !20
  %36 = getelementptr half, ptr addrspace(1) %1, i64 %25, !dbg !21
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %36, i1 %22) #3, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !22
  %39 = bitcast i32 %38 to <2 x half>, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !22
  %41 = bitcast i32 %40 to <2 x half>, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !22
  %43 = bitcast i32 %42 to <2 x half>, !dbg !22
  %44 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !22
  %45 = bitcast i32 %44 to <2 x half>, !dbg !22
  %46 = getelementptr half, ptr addrspace(1) %2, i64 %25, !dbg !23
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %46, i1 %22) #3, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !24
  %49 = bitcast i32 %48 to <2 x half>, !dbg !24
  %50 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !24
  %51 = bitcast i32 %50 to <2 x half>, !dbg !24
  %52 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !24
  %53 = bitcast i32 %52 to <2 x half>, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !24
  %55 = bitcast i32 %54 to <2 x half>, !dbg !24
  %56 = getelementptr half, ptr addrspace(1) %3, i64 %25, !dbg !25
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %56, i1 %22) #3, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !26
  %59 = bitcast i32 %58 to <2 x half>, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !26
  %61 = bitcast i32 %60 to <2 x half>, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !26
  %63 = bitcast i32 %62 to <2 x half>, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !26
  %65 = bitcast i32 %64 to <2 x half>, !dbg !26
  %66 = sext i32 %21 to i64, !dbg !27
  %67 = getelementptr float, ptr addrspace(1) %4, i64 %66, !dbg !27
  %68 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %67, i1 %22) #3, !dbg !28
  %69 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %67, i1 %22) #3, !dbg !28
  %70 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %67, i1 %22) #3, !dbg !28
  %71 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %67, i1 %22) #3, !dbg !28
  %72 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %67, i1 %22) #3, !dbg !28
  %73 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %67, i1 %22) #3, !dbg !28
  %74 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %67, i1 %22) #3, !dbg !28
  %75 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %67, i1 %22) #3, !dbg !28
  %76 = shufflevector <2 x half> %29, <2 x half> %31, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %77 = shufflevector <2 x half> %33, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %78 = shufflevector <8 x half> %76, <8 x half> %77, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !29
  %79 = shufflevector <2 x half> %33, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %80 = shufflevector <8 x half> %78, <8 x half> %79, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !29
  %81 = shufflevector <2 x half> %35, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %82 = shufflevector <8 x half> %80, <8 x half> %81, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !29
  %83 = shufflevector <2 x half> %35, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !29
  %84 = shufflevector <8 x half> %82, <8 x half> %83, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !29
  %85 = fpext <8 x half> %84 to <8 x float>, !dbg !29
  %86 = shufflevector <2 x half> %39, <2 x half> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %87 = shufflevector <2 x half> %43, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %88 = shufflevector <8 x half> %86, <8 x half> %87, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !30
  %89 = shufflevector <2 x half> %43, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %90 = shufflevector <8 x half> %88, <8 x half> %89, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !30
  %91 = shufflevector <2 x half> %45, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %92 = shufflevector <8 x half> %90, <8 x half> %91, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !30
  %93 = shufflevector <2 x half> %45, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %94 = shufflevector <8 x half> %92, <8 x half> %93, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !30
  %95 = fpext <8 x half> %94 to <8 x float>, !dbg !30
  %96 = shufflevector <2 x half> %49, <2 x half> %51, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %97 = shufflevector <2 x half> %53, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %98 = shufflevector <8 x half> %96, <8 x half> %97, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !31
  %99 = shufflevector <2 x half> %53, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %100 = shufflevector <8 x half> %98, <8 x half> %99, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !31
  %101 = shufflevector <2 x half> %55, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %102 = shufflevector <8 x half> %100, <8 x half> %101, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !31
  %103 = shufflevector <2 x half> %55, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %104 = shufflevector <8 x half> %102, <8 x half> %103, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !31
  %105 = fpext <8 x half> %104 to <8 x float>, !dbg !31
  %106 = shufflevector <2 x half> %59, <2 x half> %61, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %107 = shufflevector <2 x half> %63, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %108 = shufflevector <8 x half> %106, <8 x half> %107, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !32
  %109 = shufflevector <2 x half> %63, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %110 = shufflevector <8 x half> %108, <8 x half> %109, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !32
  %111 = shufflevector <2 x half> %65, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %112 = shufflevector <8 x half> %110, <8 x half> %111, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !32
  %113 = shufflevector <2 x half> %65, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %114 = shufflevector <8 x half> %112, <8 x half> %113, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !32
  %115 = fpext <8 x half> %114 to <8 x float>, !dbg !32
  %116 = fadd <8 x float> %85, %95, !dbg !33
  %117 = fadd <8 x float> %116, %105, !dbg !34
  %118 = insertelement <8 x i32> poison, i32 %75, i64 0, !dbg !35
  %119 = bitcast <8 x i32> %118 to <8 x float>, !dbg !35
  %120 = shufflevector <8 x float> %119, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !35
  %121 = fmul <8 x float> %120, %115, !dbg !35
  %122 = fmul <8 x float> %117, %121, !dbg !36
  %123 = fadd <8 x float> %20, %122, !dbg !37
  %124 = insertelement <8 x i1> poison, i1 %22, i64 0, !dbg !38
  %125 = shufflevector <8 x i1> %124, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !38
  %126 = select <8 x i1> %125, <8 x float> %123, <8 x float> %20, !dbg !38
  %127 = add i32 %19, 64, !dbg !14
  %128 = icmp slt i32 %127, %7, !dbg !14
  br i1 %128, label %.lr.ph, label %._crit_edge, !dbg !14

._crit_edge:                                      ; preds = %.lr.ph, %9
  %129 = phi <8 x float> [ zeroinitializer, %9 ], [ %126, %.lr.ph ]
  %130 = lshr i32 %12, 5, !dbg !11
  %131 = and i32 %12, 63, !dbg !11
  %132 = or disjoint i32 %11, %131, !dbg !12
  %133 = and i32 %12, 24, !dbg !11
  %134 = or disjoint i32 %14, 4, !dbg !39
  %135 = extractelement <8 x float> %129, i64 0, !dbg !39
  %136 = bitcast float %135 to i32, !dbg !39
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 16, i32 31), !dbg !39
  %138 = bitcast i32 %137 to float, !dbg !39
  %139 = fadd float %135, %138, !dbg !43
  %140 = bitcast float %139 to i32, !dbg !39
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 8, i32 31), !dbg !39
  %142 = bitcast i32 %141 to float, !dbg !39
  %143 = fadd float %139, %142, !dbg !43
  %144 = extractelement <8 x float> %129, i64 1, !dbg !39
  %145 = bitcast float %144 to i32, !dbg !39
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 16, i32 31), !dbg !39
  %147 = bitcast i32 %146 to float, !dbg !39
  %148 = fadd float %144, %147, !dbg !43
  %149 = bitcast float %148 to i32, !dbg !39
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 8, i32 31), !dbg !39
  %151 = bitcast i32 %150 to float, !dbg !39
  %152 = fadd float %148, %151, !dbg !43
  %153 = extractelement <8 x float> %129, i64 2, !dbg !39
  %154 = bitcast float %153 to i32, !dbg !39
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 16, i32 31), !dbg !39
  %156 = bitcast i32 %155 to float, !dbg !39
  %157 = fadd float %153, %156, !dbg !43
  %158 = bitcast float %157 to i32, !dbg !39
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 8, i32 31), !dbg !39
  %160 = bitcast i32 %159 to float, !dbg !39
  %161 = fadd float %157, %160, !dbg !43
  %162 = extractelement <8 x float> %129, i64 3, !dbg !39
  %163 = bitcast float %162 to i32, !dbg !39
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 16, i32 31), !dbg !39
  %165 = bitcast i32 %164 to float, !dbg !39
  %166 = fadd float %162, %165, !dbg !43
  %167 = bitcast float %166 to i32, !dbg !39
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 8, i32 31), !dbg !39
  %169 = bitcast i32 %168 to float, !dbg !39
  %170 = fadd float %166, %169, !dbg !43
  %171 = extractelement <8 x float> %129, i64 4, !dbg !39
  %172 = bitcast float %171 to i32, !dbg !39
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 16, i32 31), !dbg !39
  %174 = bitcast i32 %173 to float, !dbg !39
  %175 = fadd float %171, %174, !dbg !43
  %176 = bitcast float %175 to i32, !dbg !39
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 8, i32 31), !dbg !39
  %178 = bitcast i32 %177 to float, !dbg !39
  %179 = fadd float %175, %178, !dbg !43
  %180 = extractelement <8 x float> %129, i64 5, !dbg !39
  %181 = bitcast float %180 to i32, !dbg !39
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 16, i32 31), !dbg !39
  %183 = bitcast i32 %182 to float, !dbg !39
  %184 = fadd float %180, %183, !dbg !43
  %185 = bitcast float %184 to i32, !dbg !39
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 8, i32 31), !dbg !39
  %187 = bitcast i32 %186 to float, !dbg !39
  %188 = fadd float %184, %187, !dbg !43
  %189 = extractelement <8 x float> %129, i64 6, !dbg !39
  %190 = bitcast float %189 to i32, !dbg !39
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %190, i32 16, i32 31), !dbg !39
  %192 = bitcast i32 %191 to float, !dbg !39
  %193 = fadd float %189, %192, !dbg !43
  %194 = bitcast float %193 to i32, !dbg !39
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 8, i32 31), !dbg !39
  %196 = bitcast i32 %195 to float, !dbg !39
  %197 = fadd float %193, %196, !dbg !43
  %198 = extractelement <8 x float> %129, i64 7, !dbg !39
  %199 = bitcast float %198 to i32, !dbg !39
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 16, i32 31), !dbg !39
  %201 = bitcast i32 %200 to float, !dbg !39
  %202 = fadd float %198, %201, !dbg !43
  %203 = bitcast float %202 to i32, !dbg !39
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 8, i32 31), !dbg !39
  %205 = bitcast i32 %204 to float, !dbg !39
  %206 = fadd float %202, %205, !dbg !43
  %207 = and i32 %130, 15, !dbg !39
  %208 = icmp eq i32 %133, 0, !dbg !39
  %209 = shl nuw nsw i32 %14, 4, !dbg !39
  %210 = or disjoint i32 %209, %207, !dbg !39
  %211 = getelementptr float, ptr addrspace(3) @global_smem, i32 %210, !dbg !39
  %212 = bitcast float %143 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %212, i1 %208) #3, !dbg !39
  %213 = or disjoint i32 %209, 16, !dbg !39
  %214 = or disjoint i32 %213, %207, !dbg !39
  %215 = getelementptr float, ptr addrspace(3) @global_smem, i32 %214, !dbg !39
  %216 = bitcast float %152 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %215, <1 x i32> %216, i1 %208) #3, !dbg !39
  %217 = or disjoint i32 %209, 32, !dbg !39
  %218 = or disjoint i32 %217, %207, !dbg !39
  %219 = getelementptr float, ptr addrspace(3) @global_smem, i32 %218, !dbg !39
  %220 = bitcast float %161 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %220, i1 %208) #3, !dbg !39
  %221 = or disjoint i32 %209, 48, !dbg !39
  %222 = or disjoint i32 %221, %207, !dbg !39
  %223 = getelementptr float, ptr addrspace(3) @global_smem, i32 %222, !dbg !39
  %224 = bitcast float %170 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %224, i1 %208) #3, !dbg !39
  %225 = shl nuw nsw i32 %134, 4, !dbg !39
  %226 = or disjoint i32 %225, %207, !dbg !39
  %227 = getelementptr float, ptr addrspace(3) @global_smem, i32 %226, !dbg !39
  %228 = bitcast float %179 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %227, <1 x i32> %228, i1 %208) #3, !dbg !39
  %229 = or disjoint i32 %209, 80, !dbg !39
  %230 = or disjoint i32 %229, %207, !dbg !39
  %231 = getelementptr float, ptr addrspace(3) @global_smem, i32 %230, !dbg !39
  %232 = bitcast float %188 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %232, i1 %208) #3, !dbg !39
  %233 = or disjoint i32 %209, 96, !dbg !39
  %234 = or disjoint i32 %233, %207, !dbg !39
  %235 = getelementptr float, ptr addrspace(3) @global_smem, i32 %234, !dbg !39
  %236 = bitcast float %197 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %236, i1 %208) #3, !dbg !39
  %237 = or disjoint i32 %209, 112, !dbg !39
  %238 = or disjoint i32 %237, %207, !dbg !39
  %239 = getelementptr float, ptr addrspace(3) @global_smem, i32 %238, !dbg !39
  %240 = bitcast float %206 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %240, i1 %208) #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %241 = icmp slt i32 %12, 1024, !dbg !39
  %242 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !39
  %243 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %242, i1 %241) #3, !dbg !39
  %244 = bitcast i32 %243 to float, !dbg !39
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 8, i32 31), !dbg !39
  %246 = bitcast i32 %245 to float, !dbg !39
  %247 = fadd float %244, %246, !dbg !43
  %248 = bitcast float %247 to i32, !dbg !39
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 4, i32 31), !dbg !39
  %250 = bitcast i32 %249 to float, !dbg !39
  %251 = fadd float %247, %250, !dbg !43
  %252 = bitcast float %251 to i32, !dbg !39
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 2, i32 31), !dbg !39
  %254 = bitcast i32 %253 to float, !dbg !39
  %255 = fadd float %251, %254, !dbg !43
  %256 = bitcast float %255 to i32, !dbg !39
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 1, i32 31), !dbg !39
  %258 = bitcast i32 %257 to float, !dbg !39
  %259 = fadd float %255, %258, !dbg !43
  %260 = and i32 %12, 15, !dbg !39
  %261 = icmp eq i32 %260, 0, !dbg !39
  %262 = and i1 %241, %261, !dbg !39
  %263 = bitcast float %259 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %242, <1 x i32> %263, i1 %262) #3, !dbg !39
  %264 = getelementptr i8, ptr addrspace(3) %242, i32 2048, !dbg !39
  %265 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %264, i1 %241) #3, !dbg !39
  %266 = bitcast i32 %265 to float, !dbg !39
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 8, i32 31), !dbg !39
  %268 = bitcast i32 %267 to float, !dbg !39
  %269 = fadd float %266, %268, !dbg !43
  %270 = bitcast float %269 to i32, !dbg !39
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 4, i32 31), !dbg !39
  %272 = bitcast i32 %271 to float, !dbg !39
  %273 = fadd float %269, %272, !dbg !43
  %274 = bitcast float %273 to i32, !dbg !39
  %275 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %274, i32 2, i32 31), !dbg !39
  %276 = bitcast i32 %275 to float, !dbg !39
  %277 = fadd float %273, %276, !dbg !43
  %278 = bitcast float %277 to i32, !dbg !39
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 1, i32 31), !dbg !39
  %280 = bitcast i32 %279 to float, !dbg !39
  %281 = fadd float %277, %280, !dbg !43
  %282 = bitcast float %281 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %282, i1 %262) #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %283 = getelementptr float, ptr addrspace(3) @global_smem, i32 %209, !dbg !39
  %284 = load i32, ptr addrspace(3) %283, align 16, !dbg !39
  %285 = getelementptr float, ptr addrspace(3) @global_smem, i32 %213, !dbg !39
  %286 = load i32, ptr addrspace(3) %285, align 16, !dbg !39
  %287 = getelementptr float, ptr addrspace(3) @global_smem, i32 %217, !dbg !39
  %288 = load i32, ptr addrspace(3) %287, align 16, !dbg !39
  %289 = getelementptr float, ptr addrspace(3) @global_smem, i32 %221, !dbg !39
  %290 = load i32, ptr addrspace(3) %289, align 16, !dbg !39
  %291 = getelementptr float, ptr addrspace(3) @global_smem, i32 %225, !dbg !39
  %292 = load i32, ptr addrspace(3) %291, align 16, !dbg !39
  %293 = getelementptr float, ptr addrspace(3) @global_smem, i32 %229, !dbg !39
  %294 = load i32, ptr addrspace(3) %293, align 16, !dbg !39
  %295 = getelementptr float, ptr addrspace(3) @global_smem, i32 %233, !dbg !39
  %296 = load i32, ptr addrspace(3) %295, align 16, !dbg !39
  %297 = getelementptr float, ptr addrspace(3) @global_smem, i32 %237, !dbg !39
  %298 = load i32, ptr addrspace(3) %297, align 16, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %299 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %14, !dbg !45
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %299, i32 %284, i32 %286, i32 %288, i32 %290, i1 true) #3, !dbg !45
  %300 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %134, !dbg !45
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) nonnull %300, i32 %292, i32 %294, i32 %296, i32 %298, i1 true) #3, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %301 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %131, !dbg !45
  %302 = load float, ptr addrspace(3) %301, align 4, !dbg !45
  %303 = sext i32 %132 to i64, !dbg !46
  %304 = getelementptr half, ptr addrspace(1) %5, i64 %303, !dbg !46
  %305 = fptrunc float %302 to half, !dbg !45
  %306 = and i32 %12, 448, !dbg !45
  %307 = icmp eq i32 %306, 0, !dbg !45
  %308 = bitcast half %305 to i16, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %308, ptr addrspace(1) %304, i1 %307) #3, !dbg !45
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cykee6clrweh6jbbxbmrpngyewr62qpmcg4hw7n6oizkget7ik2a.py", directory: "/tmp/torchinductor_root/yk")
!4 = !{ptr @triton_red_fused__to_copy_add_mul_sum_11, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mul_sum_11", linkageName: "triton_red_fused__to_copy_add_mul_sum_11", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 25, column: 37, scope: !6)
!14 = !DILocation(line: 29, column: 40, scope: !6)
!15 = !DILocation(line: 30, column: 31, scope: !6)
!16 = !DILocation(line: 31, column: 29, scope: !6)
!17 = !DILocation(line: 35, column: 44, scope: !6)
!18 = !DILocation(line: 35, column: 39, scope: !6)
!19 = !DILocation(line: 35, column: 34, scope: !6)
!20 = !DILocation(line: 35, column: 51, scope: !6)
!21 = !DILocation(line: 36, column: 34, scope: !6)
!22 = !DILocation(line: 36, column: 51, scope: !6)
!23 = !DILocation(line: 37, column: 34, scope: !6)
!24 = !DILocation(line: 37, column: 51, scope: !6)
!25 = !DILocation(line: 38, column: 34, scope: !6)
!26 = !DILocation(line: 38, column: 51, scope: !6)
!27 = !DILocation(line: 39, column: 34, scope: !6)
!28 = !DILocation(line: 39, column: 41, scope: !6)
!29 = !DILocation(line: 35, column: 105, scope: !6)
!30 = !DILocation(line: 36, column: 105, scope: !6)
!31 = !DILocation(line: 37, column: 105, scope: !6)
!32 = !DILocation(line: 38, column: 105, scope: !6)
!33 = !DILocation(line: 40, column: 22, scope: !6)
!34 = !DILocation(line: 41, column: 22, scope: !6)
!35 = !DILocation(line: 43, column: 22, scope: !6)
!36 = !DILocation(line: 45, column: 23, scope: !6)
!37 = !DILocation(line: 47, column: 25, scope: !6)
!38 = !DILocation(line: 48, column: 42, scope: !6)
!39 = !DILocation(line: 286, column: 36, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !6, file: !41, discriminator: 0)
!41 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!42 = !DILocation(line: 49, column: 27, scope: !6)
!43 = !DILocation(line: 256, column: 15, scope: !44, inlinedAt: !42)
!44 = distinct !DILexicalBlockFile(scope: !40, file: !41, discriminator: 0)
!45 = !DILocation(line: 50, column: 37, scope: !6)
!46 = !DILocation(line: 50, column: 25, scope: !6)
!47 = !DILocation(line: 50, column: 4, scope: !6)
