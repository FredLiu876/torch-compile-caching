; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define ptx_kernel void @triton_poi_fused_mul_silu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, ptr addrspace(1) readnone captures(none) %4) local_unnamed_addr !dbg !6 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %7 = shl i32 %6, 11, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = shl i32 %8, 3, !dbg !11
  %10 = and i32 %9, 1016, !dbg !11
  %11 = or disjoint i32 %10, %7, !dbg !12
  %12 = or disjoint i32 %11, 1024, !dbg !12
  %13 = icmp slt i32 %11, %3, !dbg !13
  %14 = icmp slt i32 %12, %3, !dbg !13
  %15 = sext i32 %11 to i64, !dbg !14
  %16 = getelementptr half, ptr addrspace(1) %0, i64 %15, !dbg !14
  %17 = sext i32 %12 to i64, !dbg !14
  %18 = getelementptr half, ptr addrspace(1) %0, i64 %17, !dbg !14
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %16, i1 %13) #2, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !15
  %21 = bitcast i32 %20 to <2 x half>, !dbg !15
  %22 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !15
  %23 = bitcast i32 %22 to <2 x half>, !dbg !15
  %24 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !15
  %25 = bitcast i32 %24 to <2 x half>, !dbg !15
  %26 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !15
  %27 = bitcast i32 %26 to <2 x half>, !dbg !15
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 %14) #2, !dbg !15
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !15
  %30 = bitcast i32 %29 to <2 x half>, !dbg !15
  %31 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !15
  %32 = bitcast i32 %31 to <2 x half>, !dbg !15
  %33 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !15
  %34 = bitcast i32 %33 to <2 x half>, !dbg !15
  %35 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !15
  %36 = bitcast i32 %35 to <2 x half>, !dbg !15
  %37 = getelementptr half, ptr addrspace(1) %1, i64 %15, !dbg !16
  %38 = getelementptr half, ptr addrspace(1) %1, i64 %17, !dbg !16
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %13) #2, !dbg !17
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !17
  %41 = bitcast i32 %40 to <2 x half>, !dbg !17
  %42 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !17
  %43 = bitcast i32 %42 to <2 x half>, !dbg !17
  %44 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !17
  %45 = bitcast i32 %44 to <2 x half>, !dbg !17
  %46 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !17
  %47 = bitcast i32 %46 to <2 x half>, !dbg !17
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %14) #2, !dbg !17
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !17
  %50 = bitcast i32 %49 to <2 x half>, !dbg !17
  %51 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !17
  %52 = bitcast i32 %51 to <2 x half>, !dbg !17
  %53 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !17
  %54 = bitcast i32 %53 to <2 x half>, !dbg !17
  %55 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !17
  %56 = bitcast i32 %55 to <2 x half>, !dbg !17
  %57 = getelementptr half, ptr addrspace(1) %2, i64 %15, !dbg !18
  %58 = getelementptr half, ptr addrspace(1) %2, i64 %17, !dbg !18
  %59 = fpext <2 x half> %21 to <2 x float>, !dbg !19
  %60 = fpext <2 x half> %41 to <2 x float>, !dbg !20
  %61 = extractelement <2 x float> %59, i64 0, !dbg !21
  %62 = fsub float 0.000000e+00, %61, !dbg !21
  %63 = extractelement <2 x float> %59, i64 1, !dbg !21
  %64 = fsub float 0.000000e+00, %63, !dbg !21
  %65 = fmul float %62, 0x3FF7154760000000, !dbg !25
  %66 = tail call float @llvm.nvvm.ex2.approx.f(float %65), !dbg !25
  %67 = fmul float %64, 0x3FF7154760000000, !dbg !25
  %68 = tail call float @llvm.nvvm.ex2.approx.f(float %67), !dbg !25
  %69 = fadd float %66, 1.000000e+00, !dbg !26
  %70 = fadd float %68, 1.000000e+00, !dbg !26
  %71 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %69), !dbg !27
  %72 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %70), !dbg !27
  %73 = insertelement <2 x float> poison, float %71, i64 0, !dbg !28
  %74 = insertelement <2 x float> %73, float %72, i64 1, !dbg !28
  %75 = fmul <2 x float> %74, %59, !dbg !28
  %76 = fmul <2 x float> %75, %60, !dbg !29
  %77 = fptrunc <2 x float> %76 to <2 x half>, !dbg !30
  %78 = fpext <2 x half> %23 to <2 x float>, !dbg !19
  %79 = fpext <2 x half> %43 to <2 x float>, !dbg !20
  %80 = extractelement <2 x float> %78, i64 0, !dbg !21
  %81 = fsub float 0.000000e+00, %80, !dbg !21
  %82 = extractelement <2 x float> %78, i64 1, !dbg !21
  %83 = fsub float 0.000000e+00, %82, !dbg !21
  %84 = fmul float %81, 0x3FF7154760000000, !dbg !25
  %85 = tail call float @llvm.nvvm.ex2.approx.f(float %84), !dbg !25
  %86 = fmul float %83, 0x3FF7154760000000, !dbg !25
  %87 = tail call float @llvm.nvvm.ex2.approx.f(float %86), !dbg !25
  %88 = fadd float %85, 1.000000e+00, !dbg !26
  %89 = fadd float %87, 1.000000e+00, !dbg !26
  %90 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %88), !dbg !27
  %91 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %89), !dbg !27
  %92 = insertelement <2 x float> poison, float %90, i64 0, !dbg !28
  %93 = insertelement <2 x float> %92, float %91, i64 1, !dbg !28
  %94 = fmul <2 x float> %93, %78, !dbg !28
  %95 = fmul <2 x float> %94, %79, !dbg !29
  %96 = fptrunc <2 x float> %95 to <2 x half>, !dbg !30
  %97 = fpext <2 x half> %25 to <2 x float>, !dbg !19
  %98 = fpext <2 x half> %45 to <2 x float>, !dbg !20
  %99 = extractelement <2 x float> %97, i64 0, !dbg !21
  %100 = fsub float 0.000000e+00, %99, !dbg !21
  %101 = extractelement <2 x float> %97, i64 1, !dbg !21
  %102 = fsub float 0.000000e+00, %101, !dbg !21
  %103 = fmul float %100, 0x3FF7154760000000, !dbg !25
  %104 = tail call float @llvm.nvvm.ex2.approx.f(float %103), !dbg !25
  %105 = fmul float %102, 0x3FF7154760000000, !dbg !25
  %106 = tail call float @llvm.nvvm.ex2.approx.f(float %105), !dbg !25
  %107 = fadd float %104, 1.000000e+00, !dbg !26
  %108 = fadd float %106, 1.000000e+00, !dbg !26
  %109 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %107), !dbg !27
  %110 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %108), !dbg !27
  %111 = insertelement <2 x float> poison, float %109, i64 0, !dbg !28
  %112 = insertelement <2 x float> %111, float %110, i64 1, !dbg !28
  %113 = fmul <2 x float> %112, %97, !dbg !28
  %114 = fmul <2 x float> %113, %98, !dbg !29
  %115 = fptrunc <2 x float> %114 to <2 x half>, !dbg !30
  %116 = fpext <2 x half> %27 to <2 x float>, !dbg !19
  %117 = fpext <2 x half> %47 to <2 x float>, !dbg !20
  %118 = extractelement <2 x float> %116, i64 0, !dbg !21
  %119 = fsub float 0.000000e+00, %118, !dbg !21
  %120 = extractelement <2 x float> %116, i64 1, !dbg !21
  %121 = fsub float 0.000000e+00, %120, !dbg !21
  %122 = fmul float %119, 0x3FF7154760000000, !dbg !25
  %123 = tail call float @llvm.nvvm.ex2.approx.f(float %122), !dbg !25
  %124 = fmul float %121, 0x3FF7154760000000, !dbg !25
  %125 = tail call float @llvm.nvvm.ex2.approx.f(float %124), !dbg !25
  %126 = fadd float %123, 1.000000e+00, !dbg !26
  %127 = fadd float %125, 1.000000e+00, !dbg !26
  %128 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %126), !dbg !27
  %129 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %127), !dbg !27
  %130 = insertelement <2 x float> poison, float %128, i64 0, !dbg !28
  %131 = insertelement <2 x float> %130, float %129, i64 1, !dbg !28
  %132 = fmul <2 x float> %131, %116, !dbg !28
  %133 = fmul <2 x float> %132, %117, !dbg !29
  %134 = fptrunc <2 x float> %133 to <2 x half>, !dbg !30
  %135 = fpext <2 x half> %30 to <2 x float>, !dbg !19
  %136 = fpext <2 x half> %50 to <2 x float>, !dbg !20
  %137 = extractelement <2 x float> %135, i64 0, !dbg !21
  %138 = fsub float 0.000000e+00, %137, !dbg !21
  %139 = extractelement <2 x float> %135, i64 1, !dbg !21
  %140 = fsub float 0.000000e+00, %139, !dbg !21
  %141 = fmul float %138, 0x3FF7154760000000, !dbg !25
  %142 = tail call float @llvm.nvvm.ex2.approx.f(float %141), !dbg !25
  %143 = fmul float %140, 0x3FF7154760000000, !dbg !25
  %144 = tail call float @llvm.nvvm.ex2.approx.f(float %143), !dbg !25
  %145 = fadd float %142, 1.000000e+00, !dbg !26
  %146 = fadd float %144, 1.000000e+00, !dbg !26
  %147 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %145), !dbg !27
  %148 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %146), !dbg !27
  %149 = insertelement <2 x float> poison, float %147, i64 0, !dbg !28
  %150 = insertelement <2 x float> %149, float %148, i64 1, !dbg !28
  %151 = fmul <2 x float> %150, %135, !dbg !28
  %152 = fmul <2 x float> %151, %136, !dbg !29
  %153 = fptrunc <2 x float> %152 to <2 x half>, !dbg !30
  %154 = fpext <2 x half> %32 to <2 x float>, !dbg !19
  %155 = fpext <2 x half> %52 to <2 x float>, !dbg !20
  %156 = extractelement <2 x float> %154, i64 0, !dbg !21
  %157 = fsub float 0.000000e+00, %156, !dbg !21
  %158 = extractelement <2 x float> %154, i64 1, !dbg !21
  %159 = fsub float 0.000000e+00, %158, !dbg !21
  %160 = fmul float %157, 0x3FF7154760000000, !dbg !25
  %161 = tail call float @llvm.nvvm.ex2.approx.f(float %160), !dbg !25
  %162 = fmul float %159, 0x3FF7154760000000, !dbg !25
  %163 = tail call float @llvm.nvvm.ex2.approx.f(float %162), !dbg !25
  %164 = fadd float %161, 1.000000e+00, !dbg !26
  %165 = fadd float %163, 1.000000e+00, !dbg !26
  %166 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %164), !dbg !27
  %167 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %165), !dbg !27
  %168 = insertelement <2 x float> poison, float %166, i64 0, !dbg !28
  %169 = insertelement <2 x float> %168, float %167, i64 1, !dbg !28
  %170 = fmul <2 x float> %169, %154, !dbg !28
  %171 = fmul <2 x float> %170, %155, !dbg !29
  %172 = fptrunc <2 x float> %171 to <2 x half>, !dbg !30
  %173 = fpext <2 x half> %34 to <2 x float>, !dbg !19
  %174 = fpext <2 x half> %54 to <2 x float>, !dbg !20
  %175 = extractelement <2 x float> %173, i64 0, !dbg !21
  %176 = fsub float 0.000000e+00, %175, !dbg !21
  %177 = extractelement <2 x float> %173, i64 1, !dbg !21
  %178 = fsub float 0.000000e+00, %177, !dbg !21
  %179 = fmul float %176, 0x3FF7154760000000, !dbg !25
  %180 = tail call float @llvm.nvvm.ex2.approx.f(float %179), !dbg !25
  %181 = fmul float %178, 0x3FF7154760000000, !dbg !25
  %182 = tail call float @llvm.nvvm.ex2.approx.f(float %181), !dbg !25
  %183 = fadd float %180, 1.000000e+00, !dbg !26
  %184 = fadd float %182, 1.000000e+00, !dbg !26
  %185 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %183), !dbg !27
  %186 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %184), !dbg !27
  %187 = insertelement <2 x float> poison, float %185, i64 0, !dbg !28
  %188 = insertelement <2 x float> %187, float %186, i64 1, !dbg !28
  %189 = fmul <2 x float> %188, %173, !dbg !28
  %190 = fmul <2 x float> %189, %174, !dbg !29
  %191 = fptrunc <2 x float> %190 to <2 x half>, !dbg !30
  %192 = fpext <2 x half> %36 to <2 x float>, !dbg !19
  %193 = fpext <2 x half> %56 to <2 x float>, !dbg !20
  %194 = extractelement <2 x float> %192, i64 0, !dbg !21
  %195 = fsub float 0.000000e+00, %194, !dbg !21
  %196 = extractelement <2 x float> %192, i64 1, !dbg !21
  %197 = fsub float 0.000000e+00, %196, !dbg !21
  %198 = fmul float %195, 0x3FF7154760000000, !dbg !25
  %199 = tail call float @llvm.nvvm.ex2.approx.f(float %198), !dbg !25
  %200 = fmul float %197, 0x3FF7154760000000, !dbg !25
  %201 = tail call float @llvm.nvvm.ex2.approx.f(float %200), !dbg !25
  %202 = fadd float %199, 1.000000e+00, !dbg !26
  %203 = fadd float %201, 1.000000e+00, !dbg !26
  %204 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %202), !dbg !27
  %205 = tail call float @llvm.nvvm.div.full(float 1.000000e+00, float %203), !dbg !27
  %206 = insertelement <2 x float> poison, float %204, i64 0, !dbg !28
  %207 = insertelement <2 x float> %206, float %205, i64 1, !dbg !28
  %208 = fmul <2 x float> %207, %192, !dbg !28
  %209 = fmul <2 x float> %208, %193, !dbg !29
  %210 = fptrunc <2 x float> %209 to <2 x half>, !dbg !30
  %211 = bitcast <2 x half> %77 to i32, !dbg !30
  %212 = bitcast <2 x half> %96 to i32, !dbg !30
  %213 = bitcast <2 x half> %115 to i32, !dbg !30
  %214 = bitcast <2 x half> %134 to i32, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %211, i32 %212, i32 %213, i32 %214, ptr addrspace(1) %57, i1 %13) #2, !dbg !30
  %215 = bitcast <2 x half> %153 to i32, !dbg !30
  %216 = bitcast <2 x half> %172 to i32, !dbg !30
  %217 = bitcast <2 x half> %191 to i32, !dbg !30
  %218 = bitcast <2 x half> %210 to i32, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %215, i32 %216, i32 %217, i32 %218, ptr addrspace(1) %58, i1 %14) #2, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyfokqimwdos23k644loots6y52qecw7pxfxlxfpkicijq4ryanz.py", directory: "/tmp/torchinductor_root/yf")
!4 = !{ptr @triton_poi_fused_mul_silu_7, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused_mul_silu_7", linkageName: "triton_poi_fused_mul_silu_7", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 19, column: 28, scope: !6)
!10 = !DILocation(line: 19, column: 33, scope: !6)
!11 = !DILocation(line: 20, column: 36, scope: !6)
!12 = !DILocation(line: 20, column: 23, scope: !6)
!13 = !DILocation(line: 21, column: 21, scope: !6)
!14 = !DILocation(line: 23, column: 30, scope: !6)
!15 = !DILocation(line: 23, column: 35, scope: !6)
!16 = !DILocation(line: 24, column: 30, scope: !6)
!17 = !DILocation(line: 24, column: 35, scope: !6)
!18 = !DILocation(line: 30, column: 25, scope: !6)
!19 = !DILocation(line: 23, column: 45, scope: !6)
!20 = !DILocation(line: 24, column: 45, scope: !6)
!21 = !DILocation(line: 47, column: 30, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !6, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!24 = !DILocation(line: 26, column: 22, scope: !6)
!25 = !DILocation(line: 47, column: 29, scope: !22, inlinedAt: !24)
!26 = !DILocation(line: 47, column: 20, scope: !22, inlinedAt: !24)
!27 = !DILocation(line: 47, column: 16, scope: !22, inlinedAt: !24)
!28 = !DILocation(line: 27, column: 18, scope: !6)
!29 = !DILocation(line: 29, column: 18, scope: !6)
!30 = !DILocation(line: 30, column: 36, scope: !6)
!31 = !DILocation(line: 30, column: 4, scope: !6)
