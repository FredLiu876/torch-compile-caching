; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = icmp slt i32 %9, %5, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 31, !dbg !11
  %13 = lshr i32 %11, 5, !dbg !11
  %14 = shl i32 %11, 3, !dbg !11
  %15 = and i32 %14, 4088, !dbg !11
  %16 = shl i32 %9, 12, !dbg !12
  %17 = or disjoint i32 %15, %16, !dbg !13
  %18 = sext i32 %17 to i64, !dbg !14
  %19 = getelementptr half, ptr addrspace(1) %1, i64 %18, !dbg !14
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %19, i1 %10) #5, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !15
  %22 = bitcast i32 %21 to <2 x half>, !dbg !15
  %23 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !15
  %24 = bitcast i32 %23 to <2 x half>, !dbg !15
  %25 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !15
  %26 = bitcast i32 %25 to <2 x half>, !dbg !15
  %27 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !15
  %28 = bitcast i32 %27 to <2 x half>, !dbg !15
  %29 = extractelement <2 x half> %22, i64 0, !dbg !15
  %30 = extractelement <2 x half> %22, i64 1, !dbg !15
  %31 = fpext half %29 to float, !dbg !16
  %32 = fpext half %30 to float, !dbg !16
  %33 = getelementptr half, ptr addrspace(1) %2, i64 %18, !dbg !17
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %33, i1 %10) #5, !dbg !18
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !18
  %36 = bitcast i32 %35 to <2 x half>, !dbg !18
  %37 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !18
  %38 = bitcast i32 %37 to <2 x half>, !dbg !18
  %39 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !18
  %40 = bitcast i32 %39 to <2 x half>, !dbg !18
  %41 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !18
  %42 = bitcast i32 %41 to <2 x half>, !dbg !18
  %43 = extractelement <2 x half> %36, i64 0, !dbg !18
  %44 = extractelement <2 x half> %36, i64 1, !dbg !18
  %45 = fpext half %43 to float, !dbg !19
  %46 = fpext half %44 to float, !dbg !19
  %47 = fadd float %31, %45, !dbg !20
  %48 = fadd float %32, %46, !dbg !20
  %49 = fmul float %47, %47, !dbg !21
  %50 = fmul float %48, %48, !dbg !21
  %51 = fpext <2 x half> %24 to <2 x float>, !dbg !16
  %52 = fpext <2 x half> %38 to <2 x float>, !dbg !19
  %53 = fadd <2 x float> %51, %52, !dbg !20
  %54 = fmul <2 x float> %53, %53, !dbg !21
  %55 = fpext <2 x half> %26 to <2 x float>, !dbg !16
  %56 = fpext <2 x half> %40 to <2 x float>, !dbg !19
  %57 = fadd <2 x float> %55, %56, !dbg !20
  %58 = fmul <2 x float> %57, %57, !dbg !21
  %59 = fpext <2 x half> %28 to <2 x float>, !dbg !16
  %60 = fpext <2 x half> %42 to <2 x float>, !dbg !19
  %61 = fadd <2 x float> %59, %60, !dbg !20
  %62 = fmul <2 x float> %61, %61, !dbg !21
  %63 = fadd float %49, %50, !dbg !22
  %64 = extractelement <2 x float> %54, i64 0, !dbg !22
  %65 = fadd float %64, %63, !dbg !22
  %66 = extractelement <2 x float> %54, i64 1, !dbg !22
  %67 = fadd float %66, %65, !dbg !22
  %68 = extractelement <2 x float> %58, i64 0, !dbg !22
  %69 = fadd float %68, %67, !dbg !22
  %70 = extractelement <2 x float> %58, i64 1, !dbg !22
  %71 = fadd float %70, %69, !dbg !22
  %72 = extractelement <2 x float> %62, i64 0, !dbg !22
  %73 = fadd float %72, %71, !dbg !22
  %74 = extractelement <2 x float> %62, i64 1, !dbg !22
  %75 = fadd float %74, %73, !dbg !22
  %76 = select i1 %10, float %75, float 0.000000e+00, !dbg !22
  %77 = bitcast float %76 to i32, !dbg !27
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 16, i32 31), !dbg !27
  %79 = bitcast i32 %78 to float, !dbg !27
  %80 = fadd float %76, %79, !dbg !22
  %81 = bitcast float %80 to i32, !dbg !27
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 8, i32 31), !dbg !27
  %83 = bitcast i32 %82 to float, !dbg !27
  %84 = fadd float %80, %83, !dbg !22
  %85 = bitcast float %84 to i32, !dbg !27
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 4, i32 31), !dbg !27
  %87 = bitcast i32 %86 to float, !dbg !27
  %88 = fadd float %84, %87, !dbg !22
  %89 = bitcast float %88 to i32, !dbg !27
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 2, i32 31), !dbg !27
  %91 = bitcast i32 %90 to float, !dbg !27
  %92 = fadd float %88, %91, !dbg !22
  %93 = bitcast float %92 to i32, !dbg !27
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 1, i32 31), !dbg !27
  %95 = bitcast i32 %94 to float, !dbg !27
  %96 = fadd float %92, %95, !dbg !22
  %97 = and i32 %13, 15, !dbg !27
  %98 = icmp eq i32 %12, 0, !dbg !27
  %99 = getelementptr float, ptr addrspace(3) @global_smem, i32 %97, !dbg !27
  %100 = bitcast float %96 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %100, i1 %98) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %101 = icmp slt i32 %11, 16, !dbg !27
  %102 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !27
  %103 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %102, i1 %101) #5, !dbg !27
  %104 = bitcast i32 %103 to float, !dbg !27
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 8, i32 31), !dbg !27
  %106 = bitcast i32 %105 to float, !dbg !27
  %107 = fadd float %104, %106, !dbg !22
  %108 = bitcast float %107 to i32, !dbg !27
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 4, i32 31), !dbg !27
  %110 = bitcast i32 %109 to float, !dbg !27
  %111 = fadd float %107, %110, !dbg !22
  %112 = bitcast float %111 to i32, !dbg !27
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 2, i32 31), !dbg !27
  %114 = bitcast i32 %113 to float, !dbg !27
  %115 = fadd float %111, %114, !dbg !22
  %116 = bitcast float %115 to i32, !dbg !27
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 1, i32 31), !dbg !27
  %118 = bitcast i32 %117 to float, !dbg !27
  %119 = fadd float %115, %118, !dbg !22
  %120 = and i32 %11, 15, !dbg !27
  %121 = icmp eq i32 %120, 0, !dbg !27
  %122 = and i1 %101, %121, !dbg !27
  %123 = bitcast float %119 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %123, i1 %122) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %124 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !27
  %125 = tail call float @llvm.nvvm.div.full(float %124, float 4.096000e+03), !dbg !28
  %126 = fadd float %125, 0x3EE4F8B580000000, !dbg !29
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %.not.i = icmp eq i32 %127, 0, !dbg !30
  br i1 %.not.i, label %130, label %128, !dbg !30

128:                                              ; preds = %8
  %129 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %126), !dbg !30
  br label %__nv_rsqrtf.exit, !dbg !30

130:                                              ; preds = %8
  %131 = tail call float @llvm.nvvm.rsqrt.approx.f(float %126), !dbg !30
  br label %__nv_rsqrtf.exit, !dbg !30

__nv_rsqrtf.exit:                                 ; preds = %128, %130
  %.0.i = phi float [ %129, %128 ], [ %131, %130 ], !dbg !30
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %.not.i22 = icmp eq i32 %139, 0, !dbg !30
  br i1 %.not.i22, label %142, label %140, !dbg !30

140:                                              ; preds = %__nv_rsqrtf.exit
  %141 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %126), !dbg !30
  br label %__nv_rsqrtf.exit24, !dbg !30

142:                                              ; preds = %__nv_rsqrtf.exit
  %143 = tail call float @llvm.nvvm.rsqrt.approx.f(float %126), !dbg !30
  br label %__nv_rsqrtf.exit24, !dbg !30

__nv_rsqrtf.exit24:                               ; preds = %140, %142
  %.0.i23 = phi float [ %141, %140 ], [ %143, %142 ], !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %144 = sext i32 %9 to i64, !dbg !32
  %145 = getelementptr float, ptr addrspace(1) %0, i64 %144, !dbg !32
  %146 = and i32 %11, 511, !dbg !33
  %147 = icmp eq i32 %146, 0, !dbg !33
  %148 = bitcast float %.0.i to i32, !dbg !33
  %149 = and i1 %147, %10, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %148, ptr addrspace(1) %145, i1 %149) #5, !dbg !33
  %150 = zext nneg i32 %15 to i64, !dbg !34
  %151 = getelementptr half, ptr addrspace(1) %3, i64 %150, !dbg !34
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %151, i1 true) #5, !dbg !35
  %153 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !35
  %154 = bitcast i32 %153 to <2 x half>, !dbg !35
  %155 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !35
  %156 = bitcast i32 %155 to <2 x half>, !dbg !35
  %157 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !35
  %158 = bitcast i32 %157 to <2 x half>, !dbg !35
  %159 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !35
  %160 = bitcast i32 %159 to <2 x half>, !dbg !35
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %19, i1 %10) #5, !dbg !36
  %162 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !36
  %163 = bitcast i32 %162 to <2 x half>, !dbg !36
  %164 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !36
  %165 = bitcast i32 %164 to <2 x half>, !dbg !36
  %166 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !36
  %167 = bitcast i32 %166 to <2 x half>, !dbg !36
  %168 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !36
  %169 = bitcast i32 %168 to <2 x half>, !dbg !36
  %170 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %33, i1 %10) #5, !dbg !37
  %171 = extractvalue { i32, i32, i32, i32 } %170, 0, !dbg !37
  %172 = bitcast i32 %171 to <2 x half>, !dbg !37
  %173 = extractvalue { i32, i32, i32, i32 } %170, 1, !dbg !37
  %174 = bitcast i32 %173 to <2 x half>, !dbg !37
  %175 = extractvalue { i32, i32, i32, i32 } %170, 2, !dbg !37
  %176 = bitcast i32 %175 to <2 x half>, !dbg !37
  %177 = extractvalue { i32, i32, i32, i32 } %170, 3, !dbg !37
  %178 = bitcast i32 %177 to <2 x half>, !dbg !37
  %179 = getelementptr half, ptr addrspace(1) %4, i64 %18, !dbg !38
  %180 = fpext <2 x half> %154 to <2 x float>, !dbg !39
  %181 = fpext <2 x half> %163 to <2 x float>, !dbg !40
  %182 = fpext <2 x half> %172 to <2 x float>, !dbg !41
  %183 = fadd <2 x float> %181, %182, !dbg !42
  %184 = insertelement <2 x float> poison, float %.0.i23, i64 0, !dbg !43
  %185 = shufflevector <2 x float> %184, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !43
  %186 = fmul <2 x float> %185, %183, !dbg !43
  %187 = fmul <2 x float> %186, %180, !dbg !44
  %188 = fptrunc <2 x float> %187 to <2 x half>, !dbg !45
  %189 = fpext <2 x half> %156 to <2 x float>, !dbg !39
  %190 = fpext <2 x half> %165 to <2 x float>, !dbg !40
  %191 = fpext <2 x half> %174 to <2 x float>, !dbg !41
  %192 = fadd <2 x float> %190, %191, !dbg !42
  %193 = fmul <2 x float> %185, %192, !dbg !43
  %194 = fmul <2 x float> %193, %189, !dbg !44
  %195 = fptrunc <2 x float> %194 to <2 x half>, !dbg !45
  %196 = fpext <2 x half> %158 to <2 x float>, !dbg !39
  %197 = fpext <2 x half> %167 to <2 x float>, !dbg !40
  %198 = fpext <2 x half> %176 to <2 x float>, !dbg !41
  %199 = fadd <2 x float> %197, %198, !dbg !42
  %200 = fmul <2 x float> %185, %199, !dbg !43
  %201 = fmul <2 x float> %200, %196, !dbg !44
  %202 = fptrunc <2 x float> %201 to <2 x half>, !dbg !45
  %203 = fpext <2 x half> %160 to <2 x float>, !dbg !39
  %204 = fpext <2 x half> %169 to <2 x float>, !dbg !40
  %205 = fpext <2 x half> %178 to <2 x float>, !dbg !41
  %206 = fadd <2 x float> %204, %205, !dbg !42
  %207 = fmul <2 x float> %185, %206, !dbg !43
  %208 = fmul <2 x float> %207, %203, !dbg !44
  %209 = fptrunc <2 x float> %208 to <2 x half>, !dbg !45
  %210 = bitcast <2 x half> %188 to i32, !dbg !45
  %211 = bitcast <2 x half> %195 to i32, !dbg !45
  %212 = bitcast <2 x half> %202 to i32, !dbg !45
  %213 = bitcast <2 x half> %209 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %210, i32 %211, i32 %212, i32 %213, ptr addrspace(1) %179, i1 %10) #5, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxdna3iuiarg5df5zltn5jik5bvuuyvpn2rygiz2q4ninczsg7t7.py", directory: "/tmp/torchinductor_root/xd")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 21, scope: !6)
!11 = !DILocation(line: 25, column: 37, scope: !6)
!12 = !DILocation(line: 35, column: 46, scope: !6)
!13 = !DILocation(line: 35, column: 41, scope: !6)
!14 = !DILocation(line: 35, column: 34, scope: !6)
!15 = !DILocation(line: 35, column: 51, scope: !6)
!16 = !DILocation(line: 35, column: 112, scope: !6)
!17 = !DILocation(line: 36, column: 34, scope: !6)
!18 = !DILocation(line: 36, column: 51, scope: !6)
!19 = !DILocation(line: 36, column: 112, scope: !6)
!20 = !DILocation(line: 37, column: 22, scope: !6)
!21 = !DILocation(line: 39, column: 22, scope: !6)
!22 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !26)
!23 = distinct !DILexicalBlockFile(scope: !25, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!25 = distinct !DILexicalBlockFile(scope: !6, file: !24, discriminator: 0)
!26 = !DILocation(line: 43, column: 25, scope: !6)
!27 = !DILocation(line: 286, column: 36, scope: !25, inlinedAt: !26)
!28 = !DILocation(line: 45, column: 19, scope: !6)
!29 = !DILocation(line: 47, column: 19, scope: !6)
!30 = !DILocation(line: 48, column: 28, scope: !6)
!31 = !DILocation(line: 49, column: 4, scope: !6)
!32 = !DILocation(line: 50, column: 28, scope: !6)
!33 = !DILocation(line: 50, column: 40, scope: !6)
!34 = !DILocation(line: 57, column: 35, scope: !6)
!35 = !DILocation(line: 57, column: 42, scope: !6)
!36 = !DILocation(line: 58, column: 52, scope: !6)
!37 = !DILocation(line: 59, column: 52, scope: !6)
!38 = !DILocation(line: 65, column: 29, scope: !6)
!39 = !DILocation(line: 57, column: 95, scope: !6)
!40 = !DILocation(line: 58, column: 114, scope: !6)
!41 = !DILocation(line: 59, column: 114, scope: !6)
!42 = !DILocation(line: 60, column: 24, scope: !6)
!43 = !DILocation(line: 62, column: 24, scope: !6)
!44 = !DILocation(line: 64, column: 24, scope: !6)
!45 = !DILocation(line: 65, column: 53, scope: !6)
!46 = !DILocation(line: 51, column: 4, scope: !6)
