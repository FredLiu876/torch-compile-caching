; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/yi/cyihme7t354xdekku5rks7waotqdnz3mpo47q3uhqjtr5ixrgolb.py\00"
@assertMessage_0 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp4 < 128256\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !10 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %11 = shl i32 %10, 1, !dbg !12
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %13 = and i32 %12, 256, !dbg !13
  %.lobit = lshr exact i32 %13, 8, !dbg !13
  %14 = and i32 %12, 1, !dbg !13
  %15 = or disjoint i32 %.lobit, %11, !dbg !14
  %16 = or disjoint i32 %11, 1, !dbg !14
  %17 = icmp slt i32 %15, %6, !dbg !15
  %18 = icmp slt i32 %11, %6, !dbg !15
  %19 = icmp slt i32 %16, %6, !dbg !15
  %20 = shl i32 %12, 3, !dbg !16
  %21 = and i32 %20, 2040, !dbg !16
  %22 = sext i32 %15 to i64, !dbg !17
  %23 = getelementptr i64, ptr addrspace(1) %1, i64 %22, !dbg !17
  %24 = sext i32 %11 to i64, !dbg !17
  %25 = getelementptr i64, ptr addrspace(1) %1, i64 %24, !dbg !17
  %26 = sext i32 %16 to i64, !dbg !17
  %27 = getelementptr i64, ptr addrspace(1) %1, i64 %26, !dbg !17
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 %17) #6, !dbg !18
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 %17) #6, !dbg !18
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 %17) #6, !dbg !18
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 %17) #6, !dbg !18
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 %17) #6, !dbg !18
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 %17) #6, !dbg !18
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 %17) #6, !dbg !18
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 %17) #6, !dbg !18
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 %18) #6, !dbg !18
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 %19) #6, !dbg !18
  %38 = insertelement <2 x i64> poison, i64 %37, i64 0, !dbg !19
  %39 = insertelement <2 x i64> %38, i64 %36, i64 1, !dbg !19
  %40 = add <2 x i64> %39, splat (i64 128256), !dbg !19
  %41 = icmp slt <2 x i64> %39, zeroinitializer, !dbg !20
  %42 = select <2 x i1> %41, <2 x i64> %40, <2 x i64> %39, !dbg !21
  %43 = icmp ugt <2 x i64> %42, splat (i64 128255), !dbg !22
  %44 = extractelement <2 x i1> %43, i64 1, !dbg !23
  %.not10 = and i1 %18, %44, !dbg !23
  %45 = extractelement <2 x i1> %43, i64 0, !dbg !24
  %.not11 = and i1 %19, %45, !dbg !24
  %46 = or i1 %.not10, %.not11
  br i1 %46, label %186, label %.split.preheader, !dbg !25

.split.preheader:                                 ; preds = %9
  %47 = shl i32 %15, 12, !dbg !26
  %invariant.op = or disjoint i32 %21, %47, !dbg !27
  %48 = icmp slt i64 %35, 0, !dbg !20
  %49 = shl i64 %35, 12, !dbg !24
  %50 = add i64 %49, 525336576, !dbg !24
  %51 = select i1 %48, i64 %50, i64 %49, !dbg !24
  %52 = and i32 %12, 31, !dbg !13
  %53 = lshr i32 %12, 5, !dbg !13
  %54 = zext nneg i32 %21 to i64, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %55 = or disjoint i64 %51, %54, !dbg !28
  %56 = getelementptr half, ptr addrspace(1) %2, i64 %55, !dbg !29
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %56, i1 %17) #6, !dbg !30
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !30
  %59 = bitcast i32 %58 to <2 x half>, !dbg !30
  %60 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !30
  %61 = bitcast i32 %60 to <2 x half>, !dbg !30
  %62 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !30
  %63 = bitcast i32 %62 to <2 x half>, !dbg !30
  %64 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !30
  %65 = bitcast i32 %64 to <2 x half>, !dbg !30
  %66 = extractelement <2 x half> %59, i64 0, !dbg !30
  %67 = extractelement <2 x half> %59, i64 1, !dbg !30
  %68 = fpext half %66 to float, !dbg !31
  %69 = fpext half %67 to float, !dbg !31
  %70 = fmul float %68, %68, !dbg !32
  %71 = fmul float %69, %69, !dbg !32
  %72 = sext i32 %invariant.op to i64, !dbg !33
  %73 = getelementptr half, ptr addrspace(1) %4, i64 %72, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %58, i32 %60, i32 %62, i32 %64, ptr addrspace(1) %73, i1 %17) #6, !dbg !34
  %74 = or disjoint i64 %54, 2048, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %75 = or disjoint i64 %51, %74, !dbg !28
  %76 = getelementptr half, ptr addrspace(1) %2, i64 %75, !dbg !29
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %76, i1 %17) #6, !dbg !30
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !30
  %79 = bitcast i32 %78 to <2 x half>, !dbg !30
  %80 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !30
  %81 = bitcast i32 %80 to <2 x half>, !dbg !30
  %82 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !30
  %83 = bitcast i32 %82 to <2 x half>, !dbg !30
  %84 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !30
  %85 = bitcast i32 %84 to <2 x half>, !dbg !30
  %86 = extractelement <2 x half> %79, i64 0, !dbg !30
  %87 = extractelement <2 x half> %79, i64 1, !dbg !30
  %88 = fpext half %86 to float, !dbg !31
  %89 = fpext half %87 to float, !dbg !31
  %90 = fmul float %88, %88, !dbg !32
  %91 = fmul float %89, %89, !dbg !32
  %92 = fadd float %70, %90, !dbg !36
  %93 = fadd float %71, %91, !dbg !36
  %94 = fpext <2 x half> %61 to <2 x float>, !dbg !31
  %95 = fmul <2 x float> %94, %94, !dbg !32
  %96 = fpext <2 x half> %81 to <2 x float>, !dbg !31
  %97 = fmul <2 x float> %96, %96, !dbg !32
  %98 = fadd <2 x float> %95, %97, !dbg !36
  %99 = fpext <2 x half> %63 to <2 x float>, !dbg !31
  %100 = fmul <2 x float> %99, %99, !dbg !32
  %101 = fpext <2 x half> %83 to <2 x float>, !dbg !31
  %102 = fmul <2 x float> %101, %101, !dbg !32
  %103 = fadd <2 x float> %100, %102, !dbg !36
  %104 = fpext <2 x half> %65 to <2 x float>, !dbg !31
  %105 = fmul <2 x float> %104, %104, !dbg !32
  %106 = fpext <2 x half> %85 to <2 x float>, !dbg !31
  %107 = fmul <2 x float> %106, %106, !dbg !32
  %108 = fadd <2 x float> %105, %107, !dbg !36
  %.reass.1 = or disjoint i32 %invariant.op, 2048
  %109 = sext i32 %.reass.1 to i64, !dbg !33
  %110 = getelementptr half, ptr addrspace(1) %4, i64 %109, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %78, i32 %80, i32 %82, i32 %84, ptr addrspace(1) %110, i1 %17) #6, !dbg !34
  %111 = fadd float %92, %93, !dbg !37
  %112 = extractelement <2 x float> %98, i64 0, !dbg !37
  %113 = fadd float %112, %111, !dbg !37
  %114 = extractelement <2 x float> %98, i64 1, !dbg !37
  %115 = fadd float %114, %113, !dbg !37
  %116 = extractelement <2 x float> %103, i64 0, !dbg !37
  %117 = fadd float %116, %115, !dbg !37
  %118 = extractelement <2 x float> %103, i64 1, !dbg !37
  %119 = fadd float %118, %117, !dbg !37
  %120 = extractelement <2 x float> %108, i64 0, !dbg !37
  %121 = fadd float %120, %119, !dbg !37
  %122 = extractelement <2 x float> %108, i64 1, !dbg !37
  %123 = fadd float %122, %121, !dbg !37
  %124 = select i1 %17, float %123, float 0.000000e+00, !dbg !37
  %125 = bitcast float %124 to i32, !dbg !42
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 16, i32 31), !dbg !42
  %127 = bitcast i32 %126 to float, !dbg !42
  %128 = fadd float %124, %127, !dbg !37
  %129 = bitcast float %128 to i32, !dbg !42
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 8, i32 31), !dbg !42
  %131 = bitcast i32 %130 to float, !dbg !42
  %132 = fadd float %128, %131, !dbg !37
  %133 = bitcast float %132 to i32, !dbg !42
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 4, i32 31), !dbg !42
  %135 = bitcast i32 %134 to float, !dbg !42
  %136 = fadd float %132, %135, !dbg !37
  %137 = bitcast float %136 to i32, !dbg !42
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 2, i32 31), !dbg !42
  %139 = bitcast i32 %138 to float, !dbg !42
  %140 = fadd float %136, %139, !dbg !37
  %141 = bitcast float %140 to i32, !dbg !42
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 1, i32 31), !dbg !42
  %143 = bitcast i32 %142 to float, !dbg !42
  %144 = fadd float %140, %143, !dbg !37
  %145 = and i32 %53, 7, !dbg !42
  %146 = icmp eq i32 %52, 0, !dbg !42
  %147 = lshr exact i32 %13, 5, !dbg !42
  %148 = or disjoint i32 %147, %145, !dbg !42
  %149 = zext nneg i32 %148 to i64, !dbg !42
  %150 = getelementptr float, ptr addrspace(3) @global_smem, i64 %149, !dbg !42
  %151 = bitcast float %144 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 %146) #6, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %152 = icmp slt i32 %12, 16, !dbg !42
  %153 = sext i32 %12 to i64, !dbg !42
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i64 %153, !dbg !42
  %155 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %154, i1 %152) #6, !dbg !42
  %156 = bitcast i32 %155 to float, !dbg !42
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 4, i32 31), !dbg !42
  %158 = bitcast i32 %157 to float, !dbg !42
  %159 = fadd float %156, %158, !dbg !37
  %160 = bitcast float %159 to i32, !dbg !42
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 2, i32 31), !dbg !42
  %162 = bitcast i32 %161 to float, !dbg !42
  %163 = fadd float %159, %162, !dbg !37
  %164 = bitcast float %163 to i32, !dbg !42
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 1, i32 31), !dbg !42
  %166 = bitcast i32 %165 to float, !dbg !42
  %167 = fadd float %163, %166, !dbg !37
  %168 = and i32 %12, 7, !dbg !42
  %169 = icmp eq i32 %168, 0, !dbg !42
  %170 = and i1 %152, %169, !dbg !42
  %171 = bitcast float %167 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %171, i1 %170) #6, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %172 = zext nneg i32 %147 to i64, !dbg !42
  %173 = getelementptr float, ptr addrspace(3) @global_smem, i64 %172, !dbg !42
  %174 = load float, ptr addrspace(3) %173, align 16, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %175 = zext nneg i32 %.lobit to i64, !dbg !43
  %176 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %175, !dbg !43
  %177 = bitcast float %174 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %177, i1 true) #6, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %178 = zext nneg i32 %14 to i64, !dbg !43
  %179 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %178, !dbg !43
  %180 = load float, ptr addrspace(3) %179, align 4, !dbg !43
  %181 = tail call float @llvm.nvvm.div.full(float %180, float 4.096000e+03), !dbg !44
  %182 = tail call float @llvm.nvvm.div.full(float %174, float 4.096000e+03), !dbg !44
  %183 = fadd float %181, 0x3EE4F8B580000000, !dbg !45
  %184 = fadd float %182, 0x3EE4F8B580000000, !dbg !45
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %.not.i = icmp eq i32 %185, 0, !dbg !43
  br i1 %.not.i, label %189, label %187, !dbg !43

186:                                              ; preds = %9
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !25
  unreachable, !dbg !25

187:                                              ; preds = %.split.preheader
  %188 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %183), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

189:                                              ; preds = %.split.preheader
  %190 = tail call float @llvm.nvvm.rsqrt.approx.f(float %183), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

__nv_rsqrtf.exit:                                 ; preds = %187, %189
  %.0.i = phi float [ %188, %187 ], [ %190, %189 ], !dbg !43
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %.not.i33 = icmp eq i32 %198, 0, !dbg !43
  br i1 %.not.i33, label %201, label %199, !dbg !43

199:                                              ; preds = %__nv_rsqrtf.exit
  %200 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %184), !dbg !43
  br label %__nv_rsqrtf.exit35, !dbg !43

201:                                              ; preds = %__nv_rsqrtf.exit
  %202 = tail call float @llvm.nvvm.rsqrt.approx.f(float %184), !dbg !43
  br label %__nv_rsqrtf.exit35, !dbg !43

__nv_rsqrtf.exit35:                               ; preds = %199, %201
  %.0.i34 = phi float [ %200, %199 ], [ %202, %201 ], !dbg !43
  %203 = shl i32 %12, 2, !dbg !16
  %204 = and i32 %203, 2044, !dbg !16
  %205 = or disjoint i32 %11, %14, !dbg !14
  %206 = icmp slt i32 %205, %6, !dbg !15
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %207 = sext i32 %205 to i64, !dbg !47
  %208 = getelementptr float, ptr addrspace(1) %0, i64 %207, !dbg !47
  %209 = and i32 %12, 510, !dbg !48
  %210 = icmp eq i32 %209, 0, !dbg !48
  %211 = bitcast float %.0.i to i32, !dbg !48
  %212 = and i1 %210, %206, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %211, ptr addrspace(1) %208, i1 %212) #6, !dbg !48
  %213 = zext nneg i32 %204 to i64
  %214 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %213
  %215 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %54
  %216 = or disjoint i32 %21, 4
  %217 = zext nneg i32 %216 to i64
  %218 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %217
  %219 = getelementptr half, ptr addrspace(1) %3, i64 %213, !dbg !49
  %220 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %219, i1 true) #6, !dbg !50
  %221 = extractvalue { i32, i32 } %220, 0, !dbg !50
  %222 = bitcast i32 %221 to <2 x half>, !dbg !50
  %223 = extractvalue { i32, i32 } %220, 1, !dbg !50
  %224 = bitcast i32 %223 to <2 x half>, !dbg !50
  %225 = extractelement <2 x half> %222, i64 0, !dbg !50
  %226 = extractelement <2 x half> %222, i64 1, !dbg !50
  %227 = extractelement <2 x half> %224, i64 0, !dbg !50
  %228 = extractelement <2 x half> %224, i64 1, !dbg !50
  %229 = fpext half %225 to float, !dbg !51
  %230 = fpext half %226 to float, !dbg !51
  %231 = fpext half %227 to float, !dbg !51
  %232 = fpext half %228 to float, !dbg !51
  %233 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %73, i1 %17) #6, !dbg !52
  %234 = extractvalue { i32, i32, i32, i32 } %233, 0, !dbg !52
  %235 = bitcast i32 %234 to <2 x half>, !dbg !52
  %236 = extractvalue { i32, i32, i32, i32 } %233, 1, !dbg !52
  %237 = bitcast i32 %236 to <2 x half>, !dbg !52
  %238 = extractvalue { i32, i32, i32, i32 } %233, 2, !dbg !52
  %239 = bitcast i32 %238 to <2 x half>, !dbg !52
  %240 = extractvalue { i32, i32, i32, i32 } %233, 3, !dbg !52
  %241 = bitcast i32 %240 to <2 x half>, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %242 = bitcast float %229 to i32, !dbg !53
  %243 = bitcast float %230 to i32, !dbg !53
  %244 = bitcast float %231 to i32, !dbg !53
  %245 = bitcast float %232 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %214, i32 %242, i32 %243, i32 %244, i32 %245, i1 true) #6, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %246 = getelementptr inbounds nuw i8, ptr addrspace(3) %215, i64 8, !dbg !53
  %247 = getelementptr inbounds nuw i8, ptr addrspace(3) %218, i64 8, !dbg !53
  %248 = getelementptr half, ptr addrspace(1) %5, i64 %72, !dbg !54
  %249 = fpext <2 x half> %235 to <2 x float>, !dbg !55
  %250 = insertelement <2 x float> poison, float %.0.i34, i64 0, !dbg !56
  %251 = shufflevector <2 x float> %250, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %252 = fmul <2 x float> %251, %249, !dbg !56
  %253 = load <2 x float>, ptr addrspace(3) %215, align 16, !dbg !53
  %254 = fmul <2 x float> %253, %252, !dbg !53
  %255 = fptrunc <2 x float> %254 to <2 x half>, !dbg !57
  %256 = fpext <2 x half> %237 to <2 x float>, !dbg !55
  %257 = fmul <2 x float> %251, %256, !dbg !56
  %258 = load <2 x float>, ptr addrspace(3) %246, align 8, !dbg !53
  %259 = fmul <2 x float> %258, %257, !dbg !53
  %260 = fptrunc <2 x float> %259 to <2 x half>, !dbg !57
  %261 = fpext <2 x half> %239 to <2 x float>, !dbg !55
  %262 = fmul <2 x float> %251, %261, !dbg !56
  %263 = load <2 x float>, ptr addrspace(3) %218, align 16, !dbg !53
  %264 = fmul <2 x float> %262, %263, !dbg !53
  %265 = fptrunc <2 x float> %264 to <2 x half>, !dbg !57
  %266 = fpext <2 x half> %241 to <2 x float>, !dbg !55
  %267 = fmul <2 x float> %251, %266, !dbg !56
  %268 = load <2 x float>, ptr addrspace(3) %247, align 8, !dbg !53
  %269 = fmul <2 x float> %267, %268, !dbg !53
  %270 = fptrunc <2 x float> %269 to <2 x half>, !dbg !57
  %271 = bitcast <2 x half> %255 to i32, !dbg !57
  %272 = bitcast <2 x half> %260 to i32, !dbg !57
  %273 = bitcast <2 x half> %265 to i32, !dbg !57
  %274 = bitcast <2 x half> %270 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %271, i32 %272, i32 %273, i32 %274, ptr addrspace(1) %248, i1 %17) #6, !dbg !57
  %275 = or disjoint i64 %213, 2048, !dbg !58
  %276 = getelementptr half, ptr addrspace(1) %3, i64 %275, !dbg !49
  %277 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %276, i1 true) #6, !dbg !50
  %278 = extractvalue { i32, i32 } %277, 0, !dbg !50
  %279 = bitcast i32 %278 to <2 x half>, !dbg !50
  %280 = extractvalue { i32, i32 } %277, 1, !dbg !50
  %281 = bitcast i32 %280 to <2 x half>, !dbg !50
  %282 = extractelement <2 x half> %279, i64 0, !dbg !50
  %283 = extractelement <2 x half> %279, i64 1, !dbg !50
  %284 = extractelement <2 x half> %281, i64 0, !dbg !50
  %285 = extractelement <2 x half> %281, i64 1, !dbg !50
  %286 = fpext half %282 to float, !dbg !51
  %287 = fpext half %283 to float, !dbg !51
  %288 = fpext half %284 to float, !dbg !51
  %289 = fpext half %285 to float, !dbg !51
  %290 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %110, i1 %17) #6, !dbg !52
  %291 = extractvalue { i32, i32, i32, i32 } %290, 0, !dbg !52
  %292 = bitcast i32 %291 to <2 x half>, !dbg !52
  %293 = extractvalue { i32, i32, i32, i32 } %290, 1, !dbg !52
  %294 = bitcast i32 %293 to <2 x half>, !dbg !52
  %295 = extractvalue { i32, i32, i32, i32 } %290, 2, !dbg !52
  %296 = bitcast i32 %295 to <2 x half>, !dbg !52
  %297 = extractvalue { i32, i32, i32, i32 } %290, 3, !dbg !52
  %298 = bitcast i32 %297 to <2 x half>, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %299 = bitcast float %286 to i32, !dbg !53
  %300 = bitcast float %287 to i32, !dbg !53
  %301 = bitcast float %288 to i32, !dbg !53
  %302 = bitcast float %289 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %214, i32 %299, i32 %300, i32 %301, i32 %302, i1 true) #6, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %303 = getelementptr half, ptr addrspace(1) %5, i64 %109, !dbg !54
  %304 = fpext <2 x half> %292 to <2 x float>, !dbg !55
  %305 = fmul <2 x float> %251, %304, !dbg !56
  %306 = load <2 x float>, ptr addrspace(3) %215, align 16, !dbg !53
  %307 = fmul <2 x float> %306, %305, !dbg !53
  %308 = fptrunc <2 x float> %307 to <2 x half>, !dbg !57
  %309 = fpext <2 x half> %294 to <2 x float>, !dbg !55
  %310 = fmul <2 x float> %251, %309, !dbg !56
  %311 = load <2 x float>, ptr addrspace(3) %246, align 8, !dbg !53
  %312 = fmul <2 x float> %311, %310, !dbg !53
  %313 = fptrunc <2 x float> %312 to <2 x half>, !dbg !57
  %314 = fpext <2 x half> %296 to <2 x float>, !dbg !55
  %315 = fmul <2 x float> %251, %314, !dbg !56
  %316 = load <2 x float>, ptr addrspace(3) %218, align 16, !dbg !53
  %317 = fmul <2 x float> %315, %316, !dbg !53
  %318 = fptrunc <2 x float> %317 to <2 x half>, !dbg !57
  %319 = fpext <2 x half> %298 to <2 x float>, !dbg !55
  %320 = fmul <2 x float> %251, %319, !dbg !56
  %321 = load <2 x float>, ptr addrspace(3) %247, align 8, !dbg !53
  %322 = fmul <2 x float> %320, %321, !dbg !53
  %323 = fptrunc <2 x float> %322 to <2 x half>, !dbg !57
  %324 = bitcast <2 x half> %308 to i32, !dbg !57
  %325 = bitcast <2 x half> %313 to i32, !dbg !57
  %326 = bitcast <2 x half> %318 to i32, !dbg !57
  %327 = bitcast <2 x half> %323 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %324, i32 %325, i32 %326, i32 %327, ptr addrspace(1) %303, i1 %17) #6, !dbg !57
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyihme7t354xdekku5rks7waotqdnz3mpo47q3uhqjtr5ixrgolb.py", directory: "/tmp/torchinductor_root/yi")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 22, column: 28, scope: !10)
!12 = !DILocation(line: 22, column: 33, scope: !10)
!13 = !DILocation(line: 23, column: 44, scope: !10)
!14 = !DILocation(line: 23, column: 23, scope: !10)
!15 = !DILocation(line: 24, column: 21, scope: !10)
!16 = !DILocation(line: 25, column: 37, scope: !10)
!17 = !DILocation(line: 28, column: 30, scope: !10)
!18 = !DILocation(line: 28, column: 35, scope: !10)
!19 = !DILocation(line: 37, column: 22, scope: !10)
!20 = !DILocation(line: 38, column: 22, scope: !10)
!21 = !DILocation(line: 39, column: 36, scope: !10)
!22 = !DILocation(line: 40, column: 41, scope: !10)
!23 = !DILocation(line: 40, column: 59, scope: !10)
!24 = !DILocation(line: 41, column: 46, scope: !10)
!25 = !DILocation(line: 40, column: 69, scope: !10)
!26 = !DILocation(line: 47, column: 41, scope: !10)
!27 = !DILocation(line: 30, column: 40, scope: !10)
!28 = !DILocation(line: 41, column: 41, scope: !10)
!29 = !DILocation(line: 41, column: 34, scope: !10)
!30 = !DILocation(line: 41, column: 53, scope: !10)
!31 = !DILocation(line: 41, column: 115, scope: !10)
!32 = !DILocation(line: 43, column: 22, scope: !10)
!33 = !DILocation(line: 47, column: 29, scope: !10)
!34 = !DILocation(line: 47, column: 52, scope: !10)
!35 = !DILocation(line: 31, column: 31, scope: !10)
!36 = !DILocation(line: 45, column: 25, scope: !10)
!37 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !41)
!38 = distinct !DILexicalBlockFile(scope: !40, file: !39, discriminator: 0)
!39 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!40 = distinct !DILexicalBlockFile(scope: !10, file: !39, discriminator: 0)
!41 = !DILocation(line: 48, column: 27, scope: !10)
!42 = !DILocation(line: 286, column: 36, scope: !40, inlinedAt: !41)
!43 = !DILocation(line: 53, column: 28, scope: !10)
!44 = !DILocation(line: 50, column: 21, scope: !10)
!45 = !DILocation(line: 52, column: 20, scope: !10)
!46 = !DILocation(line: 54, column: 4, scope: !10)
!47 = !DILocation(line: 55, column: 28, scope: !10)
!48 = !DILocation(line: 55, column: 40, scope: !10)
!49 = !DILocation(line: 62, column: 35, scope: !10)
!50 = !DILocation(line: 62, column: 42, scope: !10)
!51 = !DILocation(line: 62, column: 95, scope: !10)
!52 = !DILocation(line: 63, column: 53, scope: !10)
!53 = !DILocation(line: 67, column: 24, scope: !10)
!54 = !DILocation(line: 68, column: 29, scope: !10)
!55 = !DILocation(line: 63, column: 115, scope: !10)
!56 = !DILocation(line: 65, column: 24, scope: !10)
!57 = !DILocation(line: 68, column: 53, scope: !10)
!58 = !DILocation(line: 57, column: 31, scope: !10)
!59 = !DILocation(line: 56, column: 4, scope: !10)
