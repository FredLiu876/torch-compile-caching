; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = shl i32 %10, 6, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = lshr i32 %12, 3, !dbg !11
  %14 = and i32 %13, 63, !dbg !11
  %15 = or disjoint i32 %14, %11, !dbg !12
  %16 = icmp slt i32 %15, %6, !dbg !13
  %17 = shl i32 %12, 3, !dbg !14
  %18 = and i32 %17, 56, !dbg !14
  %19 = shl i32 %15, 12, !dbg !15
  %20 = or disjoint i32 %19, %18
  %21 = insertelement <8 x i1> poison, i1 %16, i64 0, !dbg !16
  %22 = shufflevector <8 x i1> %21, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !16
  br label %23, !dbg !17

23:                                               ; preds = %9, %23
  %24 = phi i32 [ 0, %9 ], [ %121, %23 ]
  %25 = phi <8 x float> [ zeroinitializer, %9 ], [ %92, %23 ]
  %26 = or i32 %20, %24, !dbg !18
  %27 = sext i32 %26 to i64, !dbg !19
  %28 = getelementptr half, ptr addrspace(1) %2, i64 %27, !dbg !19
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %28, i1 %16) #5, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !20
  %31 = bitcast i32 %30 to <2 x half>, !dbg !20
  %32 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !20
  %33 = bitcast i32 %32 to <2 x half>, !dbg !20
  %34 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !20
  %35 = bitcast i32 %34 to <2 x half>, !dbg !20
  %36 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !20
  %37 = bitcast i32 %36 to <2 x half>, !dbg !20
  %38 = getelementptr half, ptr addrspace(1) %3, i64 %27, !dbg !21
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %38, i1 %16) #5, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !22
  %41 = bitcast i32 %40 to <2 x half>, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !22
  %43 = bitcast i32 %42 to <2 x half>, !dbg !22
  %44 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !22
  %45 = bitcast i32 %44 to <2 x half>, !dbg !22
  %46 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !22
  %47 = bitcast i32 %46 to <2 x half>, !dbg !22
  %48 = getelementptr half, ptr addrspace(1) %0, i64 %27, !dbg !23
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %48, i1 %16) #5, !dbg !24
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !24
  %51 = bitcast i32 %50 to <2 x half>, !dbg !24
  %52 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !24
  %53 = bitcast i32 %52 to <2 x half>, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !24
  %55 = bitcast i32 %54 to <2 x half>, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !24
  %57 = bitcast i32 %56 to <2 x half>, !dbg !24
  %58 = shufflevector <2 x half> %31, <2 x half> %33, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %59 = shufflevector <2 x half> %35, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %60 = shufflevector <8 x half> %58, <8 x half> %59, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !25
  %61 = shufflevector <2 x half> %35, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %62 = shufflevector <8 x half> %60, <8 x half> %61, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !25
  %63 = shufflevector <2 x half> %37, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %64 = shufflevector <8 x half> %62, <8 x half> %63, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !25
  %65 = shufflevector <2 x half> %37, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !25
  %66 = shufflevector <8 x half> %64, <8 x half> %65, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !25
  %67 = fpext <8 x half> %66 to <8 x float>, !dbg !25
  %68 = shufflevector <2 x half> %41, <2 x half> %43, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %69 = shufflevector <2 x half> %45, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %70 = shufflevector <8 x half> %68, <8 x half> %69, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !26
  %71 = shufflevector <2 x half> %45, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %72 = shufflevector <8 x half> %70, <8 x half> %71, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !26
  %73 = shufflevector <2 x half> %47, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %74 = shufflevector <8 x half> %72, <8 x half> %73, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !26
  %75 = shufflevector <2 x half> %47, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !26
  %76 = shufflevector <8 x half> %74, <8 x half> %75, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !26
  %77 = fpext <8 x half> %76 to <8 x float>, !dbg !26
  %78 = shufflevector <2 x half> %51, <2 x half> %53, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %79 = shufflevector <2 x half> %55, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %80 = shufflevector <8 x half> %78, <8 x half> %79, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>, !dbg !27
  %81 = shufflevector <2 x half> %55, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %82 = shufflevector <8 x half> %80, <8 x half> %81, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>, !dbg !27
  %83 = shufflevector <2 x half> %57, <2 x half> poison, <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %84 = shufflevector <8 x half> %82, <8 x half> %83, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>, !dbg !27
  %85 = shufflevector <2 x half> %57, <2 x half> poison, <8 x i32> <i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %86 = shufflevector <8 x half> %84, <8 x half> %85, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>, !dbg !27
  %87 = fpext <8 x half> %86 to <8 x float>, !dbg !27
  %88 = fadd <8 x float> %67, %77, !dbg !28
  %89 = fadd <8 x float> %88, %87, !dbg !29
  %90 = fmul <8 x float> %89, %89, !dbg !30
  %91 = fadd <8 x float> %25, %90, !dbg !31
  %92 = select <8 x i1> %22, <8 x float> %91, <8 x float> %25, !dbg !16
  %93 = extractelement <8 x float> %89, i64 0, !dbg !32
  %94 = fptrunc float %93 to half, !dbg !32
  %95 = extractelement <8 x float> %89, i64 1, !dbg !32
  %96 = fptrunc float %95 to half, !dbg !32
  %97 = extractelement <8 x float> %89, i64 2, !dbg !32
  %98 = fptrunc float %97 to half, !dbg !32
  %99 = extractelement <8 x float> %89, i64 3, !dbg !32
  %100 = fptrunc float %99 to half, !dbg !32
  %101 = extractelement <8 x float> %89, i64 4, !dbg !32
  %102 = fptrunc float %101 to half, !dbg !32
  %103 = extractelement <8 x float> %89, i64 5, !dbg !32
  %104 = fptrunc float %103 to half, !dbg !32
  %105 = extractelement <8 x float> %89, i64 6, !dbg !32
  %106 = fptrunc float %105 to half, !dbg !32
  %107 = extractelement <8 x float> %89, i64 7, !dbg !32
  %108 = fptrunc float %107 to half, !dbg !32
  %109 = insertelement <2 x half> poison, half %94, i64 0, !dbg !32
  %110 = insertelement <2 x half> %109, half %96, i64 1, !dbg !32
  %111 = bitcast <2 x half> %110 to i32, !dbg !32
  %112 = insertelement <2 x half> poison, half %98, i64 0, !dbg !32
  %113 = insertelement <2 x half> %112, half %100, i64 1, !dbg !32
  %114 = bitcast <2 x half> %113 to i32, !dbg !32
  %115 = insertelement <2 x half> poison, half %102, i64 0, !dbg !32
  %116 = insertelement <2 x half> %115, half %104, i64 1, !dbg !32
  %117 = bitcast <2 x half> %116 to i32, !dbg !32
  %118 = insertelement <2 x half> poison, half %106, i64 0, !dbg !32
  %119 = insertelement <2 x half> %118, half %108, i64 1, !dbg !32
  %120 = bitcast <2 x half> %119 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %111, i32 %114, i32 %117, i32 %120, ptr addrspace(1) %48, i1 %16) #5, !dbg !32
  %121 = add nuw nsw i32 %24, 64, !dbg !17
  %122 = icmp samesign ult i32 %24, 4032, !dbg !17
  br i1 %122, label %23, label %123, !dbg !17

123:                                              ; preds = %23
  %124 = and i32 %12, 63, !dbg !11
  %125 = or disjoint i32 %11, %124, !dbg !12
  %126 = icmp slt i32 %125, %6, !dbg !13
  %shift = shufflevector <8 x float> %92, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %127 = fadd <8 x float> %92, %shift, !dbg !33
  %shift49 = shufflevector <8 x float> %92, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %128 = fadd <8 x float> %shift49, %127, !dbg !33
  %shift50 = shufflevector <8 x float> %92, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %129 = fadd <8 x float> %shift50, %128, !dbg !33
  %shift51 = shufflevector <8 x float> %92, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %130 = fadd <8 x float> %shift51, %129, !dbg !33
  %shift52 = shufflevector <8 x float> %92, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %131 = fadd <8 x float> %shift52, %130, !dbg !33
  %shift53 = shufflevector <8 x float> %92, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %132 = fadd <8 x float> %shift53, %131, !dbg !33
  %shift54 = shufflevector <8 x float> %92, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %133 = fadd <8 x float> %shift54, %132, !dbg !33
  %134 = extractelement <8 x float> %133, i64 0, !dbg !33
  %135 = bitcast float %134 to i32, !dbg !38
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 4, i32 31), !dbg !38
  %137 = bitcast i32 %136 to float, !dbg !38
  %138 = fadd float %134, %137, !dbg !33
  %139 = bitcast float %138 to i32, !dbg !38
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 2, i32 31), !dbg !38
  %141 = bitcast i32 %140 to float, !dbg !38
  %142 = fadd float %138, %141, !dbg !33
  %143 = bitcast float %142 to i32, !dbg !38
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 1, i32 31), !dbg !38
  %145 = bitcast i32 %144 to float, !dbg !38
  %146 = fadd float %142, %145, !dbg !33
  %147 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %14, !dbg !39
  %148 = bitcast float %146 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 true) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %149 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %124, !dbg !39
  %150 = load float, ptr addrspace(3) %149, align 4, !dbg !39
  %151 = tail call float @llvm.nvvm.div.full(float %150, float 4.096000e+03), !dbg !40
  %152 = tail call float @llvm.nvvm.div.full(float %146, float 4.096000e+03), !dbg !40
  %153 = fadd float %151, 0x3EE4F8B580000000, !dbg !41
  %154 = fadd float %152, 0x3EE4F8B580000000, !dbg !41
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i = icmp eq i32 %155, 0, !dbg !39
  br i1 %.not.i, label %158, label %156, !dbg !39

156:                                              ; preds = %123
  %157 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %153), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

158:                                              ; preds = %123
  %159 = tail call float @llvm.nvvm.rsqrt.approx.f(float %153), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

__nv_rsqrtf.exit:                                 ; preds = %156, %158
  %.0.i = phi float [ %157, %156 ], [ %159, %158 ], !dbg !39
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i25 = icmp eq i32 %167, 0, !dbg !39
  br i1 %.not.i25, label %170, label %168, !dbg !39

168:                                              ; preds = %__nv_rsqrtf.exit
  %169 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %154), !dbg !39
  br label %__nv_rsqrtf.exit27, !dbg !39

170:                                              ; preds = %__nv_rsqrtf.exit
  %171 = tail call float @llvm.nvvm.rsqrt.approx.f(float %154), !dbg !39
  br label %__nv_rsqrtf.exit27, !dbg !39

__nv_rsqrtf.exit27:                               ; preds = %168, %170
  %.0.i26 = phi float [ %169, %168 ], [ %171, %170 ], !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %172 = sext i32 %125 to i64, !dbg !43
  %173 = getelementptr float, ptr addrspace(1) %1, i64 %172, !dbg !43
  %174 = and i32 %12, 448, !dbg !44
  %175 = icmp eq i32 %174, 0, !dbg !44
  %176 = bitcast float %.0.i to i32, !dbg !44
  %177 = and i1 %175, %126, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %176, ptr addrspace(1) %173, i1 %177) #5, !dbg !44
  %178 = zext nneg i32 %18 to i64, !dbg !45
  %179 = insertelement <2 x float> poison, float %.0.i26, i64 0, !dbg !46
  %180 = shufflevector <2 x float> %179, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !46
  br label %181, !dbg !45

181:                                              ; preds = %__nv_rsqrtf.exit27, %181
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit27 ], [ %indvars.iv.next, %181 ]
  %182 = or disjoint i64 %indvars.iv, %178, !dbg !47
  %183 = getelementptr half, ptr addrspace(1) %4, i64 %182, !dbg !48
  %184 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %183, i1 true) #5, !dbg !49
  %185 = extractvalue { i32, i32, i32, i32 } %184, 0, !dbg !49
  %186 = bitcast i32 %185 to <2 x half>, !dbg !49
  %187 = extractvalue { i32, i32, i32, i32 } %184, 1, !dbg !49
  %188 = bitcast i32 %187 to <2 x half>, !dbg !49
  %189 = extractvalue { i32, i32, i32, i32 } %184, 2, !dbg !49
  %190 = bitcast i32 %189 to <2 x half>, !dbg !49
  %191 = extractvalue { i32, i32, i32, i32 } %184, 3, !dbg !49
  %192 = bitcast i32 %191 to <2 x half>, !dbg !49
  %193 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %20, %193
  %194 = sext i32 %.reass to i64, !dbg !50
  %195 = getelementptr half, ptr addrspace(1) %0, i64 %194, !dbg !50
  %196 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %195, i1 %16) #5, !dbg !51
  %197 = extractvalue { i32, i32, i32, i32 } %196, 0, !dbg !51
  %198 = bitcast i32 %197 to <2 x half>, !dbg !51
  %199 = extractvalue { i32, i32, i32, i32 } %196, 1, !dbg !51
  %200 = bitcast i32 %199 to <2 x half>, !dbg !51
  %201 = extractvalue { i32, i32, i32, i32 } %196, 2, !dbg !51
  %202 = bitcast i32 %201 to <2 x half>, !dbg !51
  %203 = extractvalue { i32, i32, i32, i32 } %196, 3, !dbg !51
  %204 = bitcast i32 %203 to <2 x half>, !dbg !51
  %205 = getelementptr half, ptr addrspace(1) %5, i64 %194, !dbg !52
  %206 = fpext <2 x half> %186 to <2 x float>, !dbg !53
  %207 = fpext <2 x half> %198 to <2 x float>, !dbg !54
  %208 = fmul <2 x float> %180, %207, !dbg !46
  %209 = fmul <2 x float> %208, %206, !dbg !55
  %210 = fptrunc <2 x float> %209 to <2 x half>, !dbg !56
  %211 = fpext <2 x half> %188 to <2 x float>, !dbg !53
  %212 = fpext <2 x half> %200 to <2 x float>, !dbg !54
  %213 = fmul <2 x float> %180, %212, !dbg !46
  %214 = fmul <2 x float> %213, %211, !dbg !55
  %215 = fptrunc <2 x float> %214 to <2 x half>, !dbg !56
  %216 = fpext <2 x half> %190 to <2 x float>, !dbg !53
  %217 = fpext <2 x half> %202 to <2 x float>, !dbg !54
  %218 = fmul <2 x float> %180, %217, !dbg !46
  %219 = fmul <2 x float> %218, %216, !dbg !55
  %220 = fptrunc <2 x float> %219 to <2 x half>, !dbg !56
  %221 = fpext <2 x half> %192 to <2 x float>, !dbg !53
  %222 = fpext <2 x half> %204 to <2 x float>, !dbg !54
  %223 = fmul <2 x float> %180, %222, !dbg !46
  %224 = fmul <2 x float> %223, %221, !dbg !55
  %225 = fptrunc <2 x float> %224 to <2 x half>, !dbg !56
  %226 = bitcast <2 x half> %210 to i32, !dbg !56
  %227 = bitcast <2 x half> %215 to i32, !dbg !56
  %228 = bitcast <2 x half> %220 to i32, !dbg !56
  %229 = bitcast <2 x half> %225 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %226, i32 %227, i32 %228, i32 %229, ptr addrspace(1) %205, i1 %16) #5, !dbg !56
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !45
  %230 = icmp samesign ult i64 %indvars.iv, 4032, !dbg !45
  br i1 %230, label %181, label %231, !dbg !45

231:                                              ; preds = %181
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c77oi4n34co2lyl6w3uyrpu25nlsmz2qimbxcpjl3nsdatstbw7t.py", directory: "./local_cache/77")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 44, column: 48, scope: !6)
!17 = !DILocation(line: 29, column: 40, scope: !6)
!18 = !DILocation(line: 35, column: 41, scope: !6)
!19 = !DILocation(line: 35, column: 34, scope: !6)
!20 = !DILocation(line: 35, column: 51, scope: !6)
!21 = !DILocation(line: 36, column: 34, scope: !6)
!22 = !DILocation(line: 36, column: 51, scope: !6)
!23 = !DILocation(line: 37, column: 38, scope: !6)
!24 = !DILocation(line: 37, column: 55, scope: !6)
!25 = !DILocation(line: 35, column: 113, scope: !6)
!26 = !DILocation(line: 36, column: 113, scope: !6)
!27 = !DILocation(line: 37, column: 117, scope: !6)
!28 = !DILocation(line: 38, column: 22, scope: !6)
!29 = !DILocation(line: 39, column: 22, scope: !6)
!30 = !DILocation(line: 41, column: 22, scope: !6)
!31 = !DILocation(line: 43, column: 23, scope: !6)
!32 = !DILocation(line: 45, column: 55, scope: !6)
!33 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !37)
!34 = distinct !DILexicalBlockFile(scope: !36, file: !35, discriminator: 0)
!35 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!36 = distinct !DILexicalBlockFile(scope: !6, file: !35, discriminator: 0)
!37 = !DILocation(line: 46, column: 25, scope: !6)
!38 = !DILocation(line: 286, column: 36, scope: !36, inlinedAt: !37)
!39 = !DILocation(line: 51, column: 28, scope: !6)
!40 = !DILocation(line: 48, column: 20, scope: !6)
!41 = !DILocation(line: 50, column: 20, scope: !6)
!42 = !DILocation(line: 52, column: 4, scope: !6)
!43 = !DILocation(line: 53, column: 28, scope: !6)
!44 = !DILocation(line: 53, column: 40, scope: !6)
!45 = !DILocation(line: 54, column: 40, scope: !6)
!46 = !DILocation(line: 63, column: 24, scope: !6)
!47 = !DILocation(line: 55, column: 31, scope: !6)
!48 = !DILocation(line: 60, column: 35, scope: !6)
!49 = !DILocation(line: 60, column: 42, scope: !6)
!50 = !DILocation(line: 61, column: 39, scope: !6)
!51 = !DILocation(line: 61, column: 56, scope: !6)
!52 = !DILocation(line: 66, column: 29, scope: !6)
!53 = !DILocation(line: 60, column: 95, scope: !6)
!54 = !DILocation(line: 61, column: 118, scope: !6)
!55 = !DILocation(line: 65, column: 24, scope: !6)
!56 = !DILocation(line: 66, column: 53, scope: !6)
!57 = !DILocation(line: 54, column: 4, scope: !6)
