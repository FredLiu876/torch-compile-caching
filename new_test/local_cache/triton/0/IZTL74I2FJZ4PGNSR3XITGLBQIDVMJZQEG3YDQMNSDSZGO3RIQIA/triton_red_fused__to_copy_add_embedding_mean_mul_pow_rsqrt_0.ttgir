#blocked = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":18:0)
#loc1 = loc(unknown)
#loc34 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":48:27)
#loc63 = loc(callsite(#loc1 at #loc34))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":18:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":18:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":18:0), %arg3: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":18:0), %arg4: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":18:0), %arg5: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":18:0), %arg6: i32 loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":18:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":18:0)) attributes {noinline = false} {
    %cst = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x2048xf16, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<4096> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<4096> : tensor<1x1xi64, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<128256> : tensor<1x1xi64, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<128256> : tensor<1x1xi64, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<0> : tensor<1x1xi64, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<0> : tensor<1x1xi64, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<4.096000e+03> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<4.096000e+03> : tensor<1x1xf32, #blocked2> loc(#loc1)
    %cst_10 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked2> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %arg6 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<2048xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2048xi32, #blocked> loc(#loc4)
    %4 = tt.addptr %arg1, %0 : !tt.ptr<i64>, i32 loc(#loc5)
    %5 = tt.splat %4 : !tt.ptr<i64> -> tensor<1x1x!tt.ptr<i64>, #blocked> loc(#loc6)
    %6 = tt.splat %4 : !tt.ptr<i64> -> tensor<1x1x!tt.ptr<i64>, #blocked1> loc(#loc6)
    %7 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc6)
    %8 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc6)
    %9 = tt.load %5, %7 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<i64>, #blocked> loc(#loc6)
    %10 = tt.load %6, %8 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<i64>, #blocked1> loc(#loc6)
    %11 = arith.addi %9, %cst_3 : tensor<1x1xi64, #blocked> loc(#loc7)
    %12 = arith.addi %10, %cst_4 : tensor<1x1xi64, #blocked1> loc(#loc7)
    %13 = arith.cmpi slt, %9, %cst_5 : tensor<1x1xi64, #blocked> loc(#loc8)
    %14 = arith.cmpi slt, %10, %cst_6 : tensor<1x1xi64, #blocked1> loc(#loc8)
    %15 = arith.select %13, %11, %9 : tensor<1x1xi1, #blocked>, tensor<1x1xi64, #blocked> loc(#loc9)
    %16 = arith.select %14, %12, %10 : tensor<1x1xi1, #blocked1>, tensor<1x1xi64, #blocked1> loc(#loc9)
    %17 = arith.cmpi sge, %16, %cst_6 : tensor<1x1xi64, #blocked1> loc(#loc10)
    %18 = arith.cmpi slt, %16, %cst_4 : tensor<1x1xi64, #blocked1> loc(#loc11)
    %19 = arith.andi %17, %18 : tensor<1x1xi1, #blocked1> loc(#loc12)
    %20 = arith.cmpi sge, %0, %arg6 : i32 loc(#loc59)
    %21 = tt.splat %20 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc13)
    %22 = arith.ori %19, %21 : tensor<1x1xi1, #blocked1> loc(#loc14)
    %23 = tt.broadcast %22 : tensor<1x1xi1, #blocked1> -> tensor<1x2048xi1, #blocked1> loc(#loc14)
    %24 = arith.muli %15, %cst_2 : tensor<1x1xi64, #blocked> loc(#loc15)
    %25 = tt.broadcast %24 : tensor<1x1xi64, #blocked> -> tensor<1x2048xi64, #blocked> loc(#loc15)
    %26 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<1x2048x!tt.ptr<f16>, #blocked> loc(#loc16)
    %27 = tt.splat %1 : i1 -> tensor<1x2048xi1, #blocked> loc(#loc60)
    %28 = arith.muli %0, %c4096_i32 : i32 loc(#loc18)
    %29 = tt.splat %28 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc61)
    %30 = tt.splat %arg4 : !tt.ptr<f16> -> tensor<1x2048x!tt.ptr<f16>, #blocked> loc(#loc20)
    %31 = scf.for %arg8 = %c0_i32 to %c4096_i32 step %c2048_i32 iter_args(%arg9 = %cst_7) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %48 = tt.splat %arg8 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc22)
      %49 = arith.addi %48, %3 : tensor<1x2048xi32, #blocked> loc(#loc22)
      %50 = arith.cmpi slt, %49, %cst_1 : tensor<1x2048xi32, #blocked> loc(#loc23)
      tt.assert %23, "index out of bounds: 0 <= tmp4 < 128256" : tensor<1x2048xi1, #blocked1> loc(#loc24)
      %51 = arith.extsi %49 : tensor<1x2048xi32, #blocked> to tensor<1x2048xi64, #blocked> loc(#loc25)
      %52 = arith.addi %51, %25 : tensor<1x2048xi64, #blocked> loc(#loc25)
      %53 = tt.addptr %26, %52 : tensor<1x2048x!tt.ptr<f16>, #blocked>, tensor<1x2048xi64, #blocked> loc(#loc16)
      %54 = arith.andi %27, %50 : tensor<1x2048xi1, #blocked> loc(#loc17)
      %55 = tt.load %53, %54, %cst_0 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f16>, #blocked> loc(#loc26)
      %56 = arith.extf %55 : tensor<1x2048xf16, #blocked> to tensor<1x2048xf32, #blocked> loc(#loc27)
      %57 = arith.mulf %56, %56 : tensor<1x2048xf32, #blocked> loc(#loc28)
      %58 = arith.addf %arg9, %57 : tensor<1x2048xf32, #blocked> loc(#loc29)
      %59 = arith.select %54, %58, %arg9 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc30)
      %60 = arith.addi %49, %29 : tensor<1x2048xi32, #blocked> loc(#loc19)
      %61 = tt.addptr %30, %60 : tensor<1x2048x!tt.ptr<f16>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc20)
      %62 = arith.truncf %56 : tensor<1x2048xf32, #blocked> to tensor<1x2048xf16, #blocked> loc(#loc31)
      tt.store %61, %62, %54 : tensor<1x2048x!tt.ptr<f16>, #blocked> loc(#loc31)
      scf.yield %59 : tensor<1x2048xf32, #blocked> loc(#loc32)
    } loc(#loc21)
    %32 = "tt.reduce"(%31) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32 loc(callsite(#loc1 at #loc34)), %arg9: f32 loc(callsite(#loc1 at #loc34))):
      %48 = arith.addf %arg8, %arg9 : f32 loc(#loc65)
      tt.reduce.return %48 : f32 loc(#loc62)
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc62)
    %33 = ttg.convert_layout %32 : tensor<1xf32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc36)
    %34 = tt.expand_dims %33 {axis = 1 : i32} : tensor<1xf32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<1x1xf32, #blocked2> loc(#loc37)
    %35 = tt.expand_dims %32 {axis = 1 : i32} : tensor<1xf32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc37)
    %36 = arith.divf %34, %cst_9 : tensor<1x1xf32, #blocked2> loc(#loc38)
    %37 = arith.divf %35, %cst_8 : tensor<1x1xf32, #blocked> loc(#loc38)
    %38 = arith.addf %36, %cst_10 : tensor<1x1xf32, #blocked2> loc(#loc39)
    %39 = arith.addf %37, %cst : tensor<1x1xf32, #blocked> loc(#loc39)
    %40 = tt.extern_elementwise %38 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked2>) -> tensor<1x1xf32, #blocked2> loc(#loc36)
    %41 = tt.extern_elementwise %39 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc36)
    gpu.barrier loc(#loc40)
    %42 = tt.addptr %arg0, %0 : !tt.ptr<f32>, i32 loc(#loc41)
    %43 = tt.splat %42 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked2> loc(#loc42)
    %44 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked2> loc(#loc42)
    tt.store %43, %40, %44 : tensor<1x1x!tt.ptr<f32>, #blocked2> loc(#loc42)
    %45 = tt.splat %arg3 : !tt.ptr<f16> -> tensor<1x2048x!tt.ptr<f16>, #blocked> loc(#loc43)
    %46 = tt.broadcast %41 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc44)
    %47 = tt.splat %arg5 : !tt.ptr<f16> -> tensor<1x2048x!tt.ptr<f16>, #blocked> loc(#loc45)
    scf.for %arg8 = %c0_i32 to %c4096_i32 step %c2048_i32  : i32 {
      %48 = tt.splat %arg8 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc47)
      %49 = arith.addi %48, %3 : tensor<1x2048xi32, #blocked> loc(#loc47)
      %50 = arith.cmpi slt, %49, %cst_1 : tensor<1x2048xi32, #blocked> loc(#loc48)
      %51 = tt.addptr %45, %49 : tensor<1x2048x!tt.ptr<f16>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc43)
      %52 = tt.load %51, %50, %cst_0 evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<f16>, #blocked> loc(#loc49)
      %53 = arith.extf %52 : tensor<1x2048xf16, #blocked> to tensor<1x2048xf32, #blocked> loc(#loc50)
      %54 = arith.addi %49, %29 : tensor<1x2048xi32, #blocked> loc(#loc51)
      %55 = tt.addptr %30, %54 : tensor<1x2048x!tt.ptr<f16>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc52)
      %56 = arith.andi %27, %50 : tensor<1x2048xi1, #blocked> loc(#loc53)
      %57 = tt.load %55, %56, %cst_0 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f16>, #blocked> loc(#loc54)
      %58 = arith.extf %57 : tensor<1x2048xf16, #blocked> to tensor<1x2048xf32, #blocked> loc(#loc55)
      %59 = arith.mulf %58, %46 : tensor<1x2048xf32, #blocked> loc(#loc44)
      %60 = arith.mulf %53, %59 : tensor<1x2048xf32, #blocked> loc(#loc56)
      %61 = tt.addptr %47, %54 : tensor<1x2048x!tt.ptr<f16>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc45)
      %62 = arith.truncf %60 : tensor<1x2048xf32, #blocked> to tensor<1x2048xf16, #blocked> loc(#loc57)
      tt.store %61, %62, %56 : tensor<1x2048x!tt.ptr<f16>, #blocked> loc(#loc57)
    } loc(#loc46)
    tt.return loc(#loc58)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":22:28)
#loc3 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":24:21)
#loc4 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":25:37)
#loc5 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":28:30)
#loc6 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":28:35)
#loc7 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":37:22)
#loc8 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":38:22)
#loc9 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":39:36)
#loc10 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":40:32)
#loc11 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":40:48)
#loc12 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":40:41)
#loc13 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":40:61)
#loc14 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":40:59)
#loc15 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":41:46)
#loc16 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":41:34)
#loc17 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":41:61)
#loc18 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":47:41)
#loc19 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":47:36)
#loc20 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":47:29)
#loc21 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":30:40)
#loc22 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":31:31)
#loc23 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":32:29)
#loc24 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":40:69)
#loc25 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":41:41)
#loc26 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":41:53)
#loc27 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":41:115)
#loc28 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":43:22)
#loc29 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":45:25)
#loc30 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":46:50)
#loc31 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":47:52)
#loc32 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":47:8)
#loc33 = loc("/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language/standard.py":286:36)
#loc35 = loc("/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language/standard.py":256:15)
#loc36 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":53:28)
#loc37 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":48:30)
#loc38 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":50:21)
#loc39 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":52:20)
#loc40 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":54:4)
#loc41 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":55:28)
#loc42 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":55:40)
#loc43 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":62:35)
#loc44 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":65:24)
#loc45 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":68:29)
#loc46 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":56:40)
#loc47 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":57:31)
#loc48 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":58:29)
#loc49 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":62:42)
#loc50 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":62:95)
#loc51 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":63:43)
#loc52 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":63:36)
#loc53 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":63:61)
#loc54 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":63:53)
#loc55 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":63:115)
#loc56 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":67:24)
#loc57 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":68:53)
#loc58 = loc("/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py":56:4)
#loc59 = loc(fused[#loc13, #loc3])
#loc60 = loc(fused[#loc17, #loc3])
#loc61 = loc(fused[#loc19, #loc18])
#loc62 = loc(callsite(#loc33 at #loc34))
#loc64 = loc(callsite(#loc35 at #loc33))
#loc65 = loc(callsite(#loc64 at #loc34))
