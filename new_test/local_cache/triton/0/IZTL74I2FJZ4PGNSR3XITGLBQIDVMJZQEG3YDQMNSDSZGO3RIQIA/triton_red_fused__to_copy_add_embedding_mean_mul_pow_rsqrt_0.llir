; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [83 x i8] c"/tmp/torchinductor_root/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py\00"
@assertMessage_0 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp4 < 128256\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !10 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %11 = icmp slt i32 %10, %6, !dbg !12
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %13 = shl i32 %12, 3, !dbg !13
  %14 = and i32 %13, 1016, !dbg !13
  %15 = or disjoint i32 %14, 1024, !dbg !13
  %16 = sext i32 %10 to i64, !dbg !14
  %17 = getelementptr i64, ptr addrspace(1) %1, i64 %16, !dbg !14
  %18 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %17, i1 %11) #6, !dbg !15
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %17, i1 %11) #6, !dbg !15
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %17, i1 %11) #6, !dbg !15
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %17, i1 %11) #6, !dbg !15
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %17, i1 %11) #6, !dbg !15
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %17, i1 %11) #6, !dbg !15
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %17, i1 %11) #6, !dbg !15
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %17, i1 %11) #6, !dbg !15
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %17, i1 %11) #6, !dbg !15
  %27 = add i64 %26, 128256, !dbg !16
  %28 = icmp slt i64 %26, 0, !dbg !17
  %29 = select i1 %28, i64 %27, i64 %26, !dbg !18
  %30 = icmp ugt i64 %29, 128255, !dbg !19
  %.not3 = and i1 %11, %30, !dbg !20
  %31 = shl i32 %10, 12, !dbg !21
  %invariant.op = or disjoint i32 %14, %31, !dbg !22
  %invariant.op29 = or disjoint i32 %15, %31, !dbg !22
  br i1 %.not3, label %241, label %.split.preheader, !dbg !23

.split.preheader:                                 ; preds = %9
  %32 = icmp slt i64 %25, 0, !dbg !17
  %33 = shl i64 %25, 12, !dbg !20
  %34 = add i64 %33, 525336576, !dbg !20
  %35 = select i1 %32, i64 %34, i64 %33, !dbg !20
  %36 = getelementptr half, ptr addrspace(1) %2, i64 %35
  %37 = lshr i32 %12, 5, !dbg !13
  %38 = and i32 %12, 31, !dbg !13
  %39 = zext nneg i32 %14 to i64, !dbg !22
  %40 = zext nneg i32 %15 to i64, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %41 = getelementptr half, ptr addrspace(1) %36, i64 %39, !dbg !24
  %42 = getelementptr half, ptr addrspace(1) %36, i64 %40, !dbg !24
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %41, i1 %11) #6, !dbg !25
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !25
  %45 = bitcast i32 %44 to <2 x half>, !dbg !25
  %46 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !25
  %47 = bitcast i32 %46 to <2 x half>, !dbg !25
  %48 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !25
  %49 = bitcast i32 %48 to <2 x half>, !dbg !25
  %50 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !25
  %51 = bitcast i32 %50 to <2 x half>, !dbg !25
  %52 = extractelement <2 x half> %45, i64 0, !dbg !25
  %53 = extractelement <2 x half> %45, i64 1, !dbg !25
  %54 = extractelement <2 x half> %47, i64 0, !dbg !25
  %55 = extractelement <2 x half> %47, i64 1, !dbg !25
  %56 = extractelement <2 x half> %49, i64 0, !dbg !25
  %57 = extractelement <2 x half> %49, i64 1, !dbg !25
  %58 = extractelement <2 x half> %51, i64 0, !dbg !25
  %59 = extractelement <2 x half> %51, i64 1, !dbg !25
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %42, i1 %11) #6, !dbg !25
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !25
  %62 = bitcast i32 %61 to <2 x half>, !dbg !25
  %63 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !25
  %64 = bitcast i32 %63 to <2 x half>, !dbg !25
  %65 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !25
  %66 = bitcast i32 %65 to <2 x half>, !dbg !25
  %67 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !25
  %68 = bitcast i32 %67 to <2 x half>, !dbg !25
  %69 = extractelement <2 x half> %62, i64 0, !dbg !25
  %70 = extractelement <2 x half> %62, i64 1, !dbg !25
  %71 = fpext half %52 to float, !dbg !26
  %72 = fpext half %53 to float, !dbg !26
  %73 = fpext half %54 to float, !dbg !26
  %74 = fpext half %55 to float, !dbg !26
  %75 = fpext half %56 to float, !dbg !26
  %76 = fpext half %57 to float, !dbg !26
  %77 = fpext half %58 to float, !dbg !26
  %78 = fpext half %59 to float, !dbg !26
  %79 = fpext half %69 to float, !dbg !26
  %80 = fpext half %70 to float, !dbg !26
  %81 = fmul float %71, %71, !dbg !27
  %82 = fmul float %72, %72, !dbg !27
  %83 = fmul float %73, %73, !dbg !27
  %84 = fmul float %74, %74, !dbg !27
  %85 = fmul float %75, %75, !dbg !27
  %86 = fmul float %76, %76, !dbg !27
  %87 = fmul float %77, %77, !dbg !27
  %88 = fmul float %78, %78, !dbg !27
  %89 = fmul float %79, %79, !dbg !27
  %90 = fmul float %80, %80, !dbg !27
  %91 = sext i32 %invariant.op to i64, !dbg !28
  %92 = getelementptr half, ptr addrspace(1) %4, i64 %91, !dbg !28
  %93 = sext i32 %invariant.op29 to i64, !dbg !28
  %94 = getelementptr half, ptr addrspace(1) %4, i64 %93, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %44, i32 %46, i32 %48, i32 %50, ptr addrspace(1) %92, i1 %11) #6, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %61, i32 %63, i32 %65, i32 %67, ptr addrspace(1) %94, i1 %11) #6, !dbg !29
  %95 = or disjoint i64 %40, 2048, !dbg !30
  %96 = or disjoint i64 %39, 2048, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %97 = getelementptr half, ptr addrspace(1) %36, i64 %96, !dbg !24
  %98 = getelementptr half, ptr addrspace(1) %36, i64 %95, !dbg !24
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %97, i1 %11) #6, !dbg !25
  %100 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !25
  %101 = bitcast i32 %100 to <2 x half>, !dbg !25
  %102 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !25
  %103 = bitcast i32 %102 to <2 x half>, !dbg !25
  %104 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !25
  %105 = bitcast i32 %104 to <2 x half>, !dbg !25
  %106 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !25
  %107 = bitcast i32 %106 to <2 x half>, !dbg !25
  %108 = extractelement <2 x half> %101, i64 0, !dbg !25
  %109 = extractelement <2 x half> %101, i64 1, !dbg !25
  %110 = extractelement <2 x half> %103, i64 0, !dbg !25
  %111 = extractelement <2 x half> %103, i64 1, !dbg !25
  %112 = extractelement <2 x half> %105, i64 0, !dbg !25
  %113 = extractelement <2 x half> %105, i64 1, !dbg !25
  %114 = extractelement <2 x half> %107, i64 0, !dbg !25
  %115 = extractelement <2 x half> %107, i64 1, !dbg !25
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %98, i1 %11) #6, !dbg !25
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !25
  %118 = bitcast i32 %117 to <2 x half>, !dbg !25
  %119 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !25
  %120 = bitcast i32 %119 to <2 x half>, !dbg !25
  %121 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !25
  %122 = bitcast i32 %121 to <2 x half>, !dbg !25
  %123 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !25
  %124 = bitcast i32 %123 to <2 x half>, !dbg !25
  %125 = extractelement <2 x half> %118, i64 0, !dbg !25
  %126 = extractelement <2 x half> %118, i64 1, !dbg !25
  %127 = fpext half %108 to float, !dbg !26
  %128 = fpext half %109 to float, !dbg !26
  %129 = fpext half %110 to float, !dbg !26
  %130 = fpext half %111 to float, !dbg !26
  %131 = fpext half %112 to float, !dbg !26
  %132 = fpext half %113 to float, !dbg !26
  %133 = fpext half %114 to float, !dbg !26
  %134 = fpext half %115 to float, !dbg !26
  %135 = fpext half %125 to float, !dbg !26
  %136 = fpext half %126 to float, !dbg !26
  %137 = fmul float %127, %127, !dbg !27
  %138 = fmul float %128, %128, !dbg !27
  %139 = fmul float %129, %129, !dbg !27
  %140 = fmul float %130, %130, !dbg !27
  %141 = fmul float %131, %131, !dbg !27
  %142 = fmul float %132, %132, !dbg !27
  %143 = fmul float %133, %133, !dbg !27
  %144 = fmul float %134, %134, !dbg !27
  %145 = fmul float %135, %135, !dbg !27
  %146 = fmul float %136, %136, !dbg !27
  %147 = fadd float %81, %137, !dbg !31
  %148 = fadd float %82, %138, !dbg !31
  %149 = fadd float %83, %139, !dbg !31
  %150 = fadd float %84, %140, !dbg !31
  %151 = fadd float %85, %141, !dbg !31
  %152 = fadd float %86, %142, !dbg !31
  %153 = fadd float %87, %143, !dbg !31
  %154 = fadd float %88, %144, !dbg !31
  %155 = fadd float %89, %145, !dbg !31
  %156 = fadd float %90, %146, !dbg !31
  %157 = fpext <2 x half> %64 to <2 x float>, !dbg !26
  %158 = fmul <2 x float> %157, %157, !dbg !27
  %159 = fpext <2 x half> %120 to <2 x float>, !dbg !26
  %160 = fmul <2 x float> %159, %159, !dbg !27
  %161 = fadd <2 x float> %158, %160, !dbg !31
  %162 = fpext <2 x half> %66 to <2 x float>, !dbg !26
  %163 = fmul <2 x float> %162, %162, !dbg !27
  %164 = fpext <2 x half> %122 to <2 x float>, !dbg !26
  %165 = fmul <2 x float> %164, %164, !dbg !27
  %166 = fadd <2 x float> %163, %165, !dbg !31
  %167 = fpext <2 x half> %68 to <2 x float>, !dbg !26
  %168 = fmul <2 x float> %167, %167, !dbg !27
  %169 = fpext <2 x half> %124 to <2 x float>, !dbg !26
  %170 = fmul <2 x float> %169, %169, !dbg !27
  %171 = fadd <2 x float> %168, %170, !dbg !31
  %.reass.1 = or disjoint i32 %invariant.op, 2048
  %.reass30.1 = or disjoint i32 %invariant.op29, 2048
  %172 = sext i32 %.reass.1 to i64, !dbg !28
  %173 = getelementptr half, ptr addrspace(1) %4, i64 %172, !dbg !28
  %174 = sext i32 %.reass30.1 to i64, !dbg !28
  %175 = getelementptr half, ptr addrspace(1) %4, i64 %174, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %100, i32 %102, i32 %104, i32 %106, ptr addrspace(1) %173, i1 %11) #6, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %117, i32 %119, i32 %121, i32 %123, ptr addrspace(1) %175, i1 %11) #6, !dbg !29
  %176 = fadd float %147, %148, !dbg !32
  %177 = fadd float %149, %176, !dbg !32
  %178 = fadd float %150, %177, !dbg !32
  %179 = fadd float %151, %178, !dbg !32
  %180 = fadd float %152, %179, !dbg !32
  %181 = fadd float %153, %180, !dbg !32
  %182 = fadd float %154, %181, !dbg !32
  %183 = fadd float %155, %182, !dbg !32
  %184 = fadd float %156, %183, !dbg !32
  %185 = extractelement <2 x float> %161, i64 0, !dbg !32
  %186 = fadd float %185, %184, !dbg !32
  %187 = extractelement <2 x float> %161, i64 1, !dbg !32
  %188 = fadd float %187, %186, !dbg !32
  %189 = extractelement <2 x float> %166, i64 0, !dbg !32
  %190 = fadd float %189, %188, !dbg !32
  %191 = extractelement <2 x float> %166, i64 1, !dbg !32
  %192 = fadd float %191, %190, !dbg !32
  %193 = extractelement <2 x float> %171, i64 0, !dbg !32
  %194 = fadd float %193, %192, !dbg !32
  %195 = extractelement <2 x float> %171, i64 1, !dbg !32
  %196 = fadd float %195, %194, !dbg !32
  %197 = select i1 %11, float %196, float 0.000000e+00, !dbg !32
  %198 = bitcast float %197 to i32, !dbg !37
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 16, i32 31), !dbg !37
  %200 = bitcast i32 %199 to float, !dbg !37
  %201 = fadd float %197, %200, !dbg !32
  %202 = bitcast float %201 to i32, !dbg !37
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 8, i32 31), !dbg !37
  %204 = bitcast i32 %203 to float, !dbg !37
  %205 = fadd float %201, %204, !dbg !32
  %206 = bitcast float %205 to i32, !dbg !37
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 4, i32 31), !dbg !37
  %208 = bitcast i32 %207 to float, !dbg !37
  %209 = fadd float %205, %208, !dbg !32
  %210 = bitcast float %209 to i32, !dbg !37
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 2, i32 31), !dbg !37
  %212 = bitcast i32 %211 to float, !dbg !37
  %213 = fadd float %209, %212, !dbg !32
  %214 = bitcast float %213 to i32, !dbg !37
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 1, i32 31), !dbg !37
  %216 = bitcast i32 %215 to float, !dbg !37
  %217 = fadd float %213, %216, !dbg !32
  %218 = and i32 %37, 3, !dbg !37
  %219 = icmp eq i32 %38, 0, !dbg !37
  %220 = getelementptr float, ptr addrspace(3) @global_smem, i32 %218, !dbg !37
  %221 = bitcast float %217 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %221, i1 %219) #6, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %222 = icmp slt i32 %12, 4, !dbg !37
  %223 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !37
  %224 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %223, i1 %222) #6, !dbg !37
  %225 = bitcast i32 %224 to float, !dbg !37
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 2, i32 31), !dbg !37
  %227 = bitcast i32 %226 to float, !dbg !37
  %228 = fadd float %225, %227, !dbg !32
  %229 = bitcast float %228 to i32, !dbg !37
  %230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %229, i32 1, i32 31), !dbg !37
  %231 = bitcast i32 %230 to float, !dbg !37
  %232 = fadd float %228, %231, !dbg !32
  %233 = and i32 %12, 3, !dbg !37
  %234 = icmp eq i32 %233, 0, !dbg !37
  %235 = and i1 %222, %234, !dbg !37
  %236 = bitcast float %232 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %236, i1 %235) #6, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %237 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !37
  %238 = tail call float @llvm.nvvm.div.full(float %237, float 4.096000e+03), !dbg !38
  %239 = fadd float %238, 0x3EE4F8B580000000, !dbg !39
  %240 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %.not.i = icmp eq i32 %240, 0, !dbg !40
  br i1 %.not.i, label %244, label %242, !dbg !40

241:                                              ; preds = %9
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !23
  unreachable, !dbg !23

242:                                              ; preds = %.split.preheader
  %243 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %239), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

244:                                              ; preds = %.split.preheader
  %245 = tail call float @llvm.nvvm.rsqrt.approx.f(float %239), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

__nv_rsqrtf.exit:                                 ; preds = %242, %244
  %.0.i = phi float [ %243, %242 ], [ %245, %244 ], !dbg !40
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %247 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %248 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %251 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !40
  %.not.i25 = icmp eq i32 %253, 0, !dbg !40
  br i1 %.not.i25, label %256, label %254, !dbg !40

254:                                              ; preds = %__nv_rsqrtf.exit
  %255 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %239), !dbg !40
  br label %__nv_rsqrtf.exit27, !dbg !40

256:                                              ; preds = %__nv_rsqrtf.exit
  %257 = tail call float @llvm.nvvm.rsqrt.approx.f(float %239), !dbg !40
  br label %__nv_rsqrtf.exit27, !dbg !40

__nv_rsqrtf.exit27:                               ; preds = %254, %256
  %.0.i26 = phi float [ %255, %254 ], [ %257, %256 ], !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %258 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !42
  %259 = and i32 %12, 127, !dbg !43
  %260 = icmp eq i32 %259, 0, !dbg !43
  %261 = bitcast float %.0.i to i32, !dbg !43
  %262 = and i1 %260, %11, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %261, ptr addrspace(1) %258, i1 %262) #6, !dbg !43
  %263 = insertelement <2 x float> poison, float %.0.i26, i64 0, !dbg !44
  %264 = shufflevector <2 x float> %263, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !44
  %265 = getelementptr half, ptr addrspace(1) %3, i64 %39, !dbg !45
  %266 = getelementptr half, ptr addrspace(1) %3, i64 %40, !dbg !45
  %267 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %265, i1 true) #6, !dbg !46
  %268 = extractvalue { i32, i32, i32, i32 } %267, 0, !dbg !46
  %269 = bitcast i32 %268 to <2 x half>, !dbg !46
  %270 = extractvalue { i32, i32, i32, i32 } %267, 1, !dbg !46
  %271 = bitcast i32 %270 to <2 x half>, !dbg !46
  %272 = extractvalue { i32, i32, i32, i32 } %267, 2, !dbg !46
  %273 = bitcast i32 %272 to <2 x half>, !dbg !46
  %274 = extractvalue { i32, i32, i32, i32 } %267, 3, !dbg !46
  %275 = bitcast i32 %274 to <2 x half>, !dbg !46
  %276 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %266, i1 true) #6, !dbg !46
  %277 = extractvalue { i32, i32, i32, i32 } %276, 0, !dbg !46
  %278 = bitcast i32 %277 to <2 x half>, !dbg !46
  %279 = extractvalue { i32, i32, i32, i32 } %276, 1, !dbg !46
  %280 = bitcast i32 %279 to <2 x half>, !dbg !46
  %281 = extractvalue { i32, i32, i32, i32 } %276, 2, !dbg !46
  %282 = bitcast i32 %281 to <2 x half>, !dbg !46
  %283 = extractvalue { i32, i32, i32, i32 } %276, 3, !dbg !46
  %284 = bitcast i32 %283 to <2 x half>, !dbg !46
  %285 = sext i32 %invariant.op to i64, !dbg !47
  %286 = getelementptr half, ptr addrspace(1) %4, i64 %285, !dbg !47
  %287 = sext i32 %invariant.op29 to i64, !dbg !47
  %288 = getelementptr half, ptr addrspace(1) %4, i64 %287, !dbg !47
  %289 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %286, i1 %11) #6, !dbg !48
  %290 = extractvalue { i32, i32, i32, i32 } %289, 0, !dbg !48
  %291 = bitcast i32 %290 to <2 x half>, !dbg !48
  %292 = extractvalue { i32, i32, i32, i32 } %289, 1, !dbg !48
  %293 = bitcast i32 %292 to <2 x half>, !dbg !48
  %294 = extractvalue { i32, i32, i32, i32 } %289, 2, !dbg !48
  %295 = bitcast i32 %294 to <2 x half>, !dbg !48
  %296 = extractvalue { i32, i32, i32, i32 } %289, 3, !dbg !48
  %297 = bitcast i32 %296 to <2 x half>, !dbg !48
  %298 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %288, i1 %11) #6, !dbg !48
  %299 = extractvalue { i32, i32, i32, i32 } %298, 0, !dbg !48
  %300 = bitcast i32 %299 to <2 x half>, !dbg !48
  %301 = extractvalue { i32, i32, i32, i32 } %298, 1, !dbg !48
  %302 = bitcast i32 %301 to <2 x half>, !dbg !48
  %303 = extractvalue { i32, i32, i32, i32 } %298, 2, !dbg !48
  %304 = bitcast i32 %303 to <2 x half>, !dbg !48
  %305 = extractvalue { i32, i32, i32, i32 } %298, 3, !dbg !48
  %306 = bitcast i32 %305 to <2 x half>, !dbg !48
  %307 = getelementptr half, ptr addrspace(1) %5, i64 %285, !dbg !49
  %308 = getelementptr half, ptr addrspace(1) %5, i64 %287, !dbg !49
  %309 = fpext <2 x half> %269 to <2 x float>, !dbg !50
  %310 = fpext <2 x half> %291 to <2 x float>, !dbg !51
  %311 = fmul <2 x float> %264, %310, !dbg !44
  %312 = fmul <2 x float> %311, %309, !dbg !52
  %313 = fptrunc <2 x float> %312 to <2 x half>, !dbg !53
  %314 = fpext <2 x half> %271 to <2 x float>, !dbg !50
  %315 = fpext <2 x half> %293 to <2 x float>, !dbg !51
  %316 = fmul <2 x float> %264, %315, !dbg !44
  %317 = fmul <2 x float> %316, %314, !dbg !52
  %318 = fptrunc <2 x float> %317 to <2 x half>, !dbg !53
  %319 = fpext <2 x half> %273 to <2 x float>, !dbg !50
  %320 = fpext <2 x half> %295 to <2 x float>, !dbg !51
  %321 = fmul <2 x float> %264, %320, !dbg !44
  %322 = fmul <2 x float> %321, %319, !dbg !52
  %323 = fptrunc <2 x float> %322 to <2 x half>, !dbg !53
  %324 = fpext <2 x half> %275 to <2 x float>, !dbg !50
  %325 = fpext <2 x half> %297 to <2 x float>, !dbg !51
  %326 = fmul <2 x float> %264, %325, !dbg !44
  %327 = fmul <2 x float> %326, %324, !dbg !52
  %328 = fptrunc <2 x float> %327 to <2 x half>, !dbg !53
  %329 = fpext <2 x half> %278 to <2 x float>, !dbg !50
  %330 = fpext <2 x half> %300 to <2 x float>, !dbg !51
  %331 = fmul <2 x float> %264, %330, !dbg !44
  %332 = fmul <2 x float> %331, %329, !dbg !52
  %333 = fptrunc <2 x float> %332 to <2 x half>, !dbg !53
  %334 = fpext <2 x half> %280 to <2 x float>, !dbg !50
  %335 = fpext <2 x half> %302 to <2 x float>, !dbg !51
  %336 = fmul <2 x float> %264, %335, !dbg !44
  %337 = fmul <2 x float> %336, %334, !dbg !52
  %338 = fptrunc <2 x float> %337 to <2 x half>, !dbg !53
  %339 = fpext <2 x half> %282 to <2 x float>, !dbg !50
  %340 = fpext <2 x half> %304 to <2 x float>, !dbg !51
  %341 = fmul <2 x float> %264, %340, !dbg !44
  %342 = fmul <2 x float> %341, %339, !dbg !52
  %343 = fptrunc <2 x float> %342 to <2 x half>, !dbg !53
  %344 = fpext <2 x half> %284 to <2 x float>, !dbg !50
  %345 = fpext <2 x half> %306 to <2 x float>, !dbg !51
  %346 = fmul <2 x float> %264, %345, !dbg !44
  %347 = fmul <2 x float> %346, %344, !dbg !52
  %348 = fptrunc <2 x float> %347 to <2 x half>, !dbg !53
  %349 = bitcast <2 x half> %313 to i32, !dbg !53
  %350 = bitcast <2 x half> %318 to i32, !dbg !53
  %351 = bitcast <2 x half> %323 to i32, !dbg !53
  %352 = bitcast <2 x half> %328 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %349, i32 %350, i32 %351, i32 %352, ptr addrspace(1) %307, i1 %11) #6, !dbg !53
  %353 = bitcast <2 x half> %333 to i32, !dbg !53
  %354 = bitcast <2 x half> %338 to i32, !dbg !53
  %355 = bitcast <2 x half> %343 to i32, !dbg !53
  %356 = bitcast <2 x half> %348 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %353, i32 %354, i32 %355, i32 %356, ptr addrspace(1) %308, i1 %11) #6, !dbg !53
  %357 = or disjoint i64 %39, 2048, !dbg !54
  %358 = or disjoint i64 %40, 2048, !dbg !54
  %359 = getelementptr half, ptr addrspace(1) %3, i64 %357, !dbg !45
  %360 = getelementptr half, ptr addrspace(1) %3, i64 %358, !dbg !45
  %361 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %359, i1 true) #6, !dbg !46
  %362 = extractvalue { i32, i32, i32, i32 } %361, 0, !dbg !46
  %363 = bitcast i32 %362 to <2 x half>, !dbg !46
  %364 = extractvalue { i32, i32, i32, i32 } %361, 1, !dbg !46
  %365 = bitcast i32 %364 to <2 x half>, !dbg !46
  %366 = extractvalue { i32, i32, i32, i32 } %361, 2, !dbg !46
  %367 = bitcast i32 %366 to <2 x half>, !dbg !46
  %368 = extractvalue { i32, i32, i32, i32 } %361, 3, !dbg !46
  %369 = bitcast i32 %368 to <2 x half>, !dbg !46
  %370 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %360, i1 true) #6, !dbg !46
  %371 = extractvalue { i32, i32, i32, i32 } %370, 0, !dbg !46
  %372 = bitcast i32 %371 to <2 x half>, !dbg !46
  %373 = extractvalue { i32, i32, i32, i32 } %370, 1, !dbg !46
  %374 = bitcast i32 %373 to <2 x half>, !dbg !46
  %375 = extractvalue { i32, i32, i32, i32 } %370, 2, !dbg !46
  %376 = bitcast i32 %375 to <2 x half>, !dbg !46
  %377 = extractvalue { i32, i32, i32, i32 } %370, 3, !dbg !46
  %378 = bitcast i32 %377 to <2 x half>, !dbg !46
  %.reass32.1 = or disjoint i32 %invariant.op, 2048
  %.reass34.1 = or disjoint i32 %invariant.op29, 2048
  %379 = sext i32 %.reass32.1 to i64, !dbg !47
  %380 = getelementptr half, ptr addrspace(1) %4, i64 %379, !dbg !47
  %381 = sext i32 %.reass34.1 to i64, !dbg !47
  %382 = getelementptr half, ptr addrspace(1) %4, i64 %381, !dbg !47
  %383 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %380, i1 %11) #6, !dbg !48
  %384 = extractvalue { i32, i32, i32, i32 } %383, 0, !dbg !48
  %385 = bitcast i32 %384 to <2 x half>, !dbg !48
  %386 = extractvalue { i32, i32, i32, i32 } %383, 1, !dbg !48
  %387 = bitcast i32 %386 to <2 x half>, !dbg !48
  %388 = extractvalue { i32, i32, i32, i32 } %383, 2, !dbg !48
  %389 = bitcast i32 %388 to <2 x half>, !dbg !48
  %390 = extractvalue { i32, i32, i32, i32 } %383, 3, !dbg !48
  %391 = bitcast i32 %390 to <2 x half>, !dbg !48
  %392 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %382, i1 %11) #6, !dbg !48
  %393 = extractvalue { i32, i32, i32, i32 } %392, 0, !dbg !48
  %394 = bitcast i32 %393 to <2 x half>, !dbg !48
  %395 = extractvalue { i32, i32, i32, i32 } %392, 1, !dbg !48
  %396 = bitcast i32 %395 to <2 x half>, !dbg !48
  %397 = extractvalue { i32, i32, i32, i32 } %392, 2, !dbg !48
  %398 = bitcast i32 %397 to <2 x half>, !dbg !48
  %399 = extractvalue { i32, i32, i32, i32 } %392, 3, !dbg !48
  %400 = bitcast i32 %399 to <2 x half>, !dbg !48
  %401 = getelementptr half, ptr addrspace(1) %5, i64 %379, !dbg !49
  %402 = getelementptr half, ptr addrspace(1) %5, i64 %381, !dbg !49
  %403 = fpext <2 x half> %363 to <2 x float>, !dbg !50
  %404 = fpext <2 x half> %385 to <2 x float>, !dbg !51
  %405 = fmul <2 x float> %264, %404, !dbg !44
  %406 = fmul <2 x float> %405, %403, !dbg !52
  %407 = fptrunc <2 x float> %406 to <2 x half>, !dbg !53
  %408 = fpext <2 x half> %365 to <2 x float>, !dbg !50
  %409 = fpext <2 x half> %387 to <2 x float>, !dbg !51
  %410 = fmul <2 x float> %264, %409, !dbg !44
  %411 = fmul <2 x float> %410, %408, !dbg !52
  %412 = fptrunc <2 x float> %411 to <2 x half>, !dbg !53
  %413 = fpext <2 x half> %367 to <2 x float>, !dbg !50
  %414 = fpext <2 x half> %389 to <2 x float>, !dbg !51
  %415 = fmul <2 x float> %264, %414, !dbg !44
  %416 = fmul <2 x float> %415, %413, !dbg !52
  %417 = fptrunc <2 x float> %416 to <2 x half>, !dbg !53
  %418 = fpext <2 x half> %369 to <2 x float>, !dbg !50
  %419 = fpext <2 x half> %391 to <2 x float>, !dbg !51
  %420 = fmul <2 x float> %264, %419, !dbg !44
  %421 = fmul <2 x float> %420, %418, !dbg !52
  %422 = fptrunc <2 x float> %421 to <2 x half>, !dbg !53
  %423 = fpext <2 x half> %372 to <2 x float>, !dbg !50
  %424 = fpext <2 x half> %394 to <2 x float>, !dbg !51
  %425 = fmul <2 x float> %264, %424, !dbg !44
  %426 = fmul <2 x float> %425, %423, !dbg !52
  %427 = fptrunc <2 x float> %426 to <2 x half>, !dbg !53
  %428 = fpext <2 x half> %374 to <2 x float>, !dbg !50
  %429 = fpext <2 x half> %396 to <2 x float>, !dbg !51
  %430 = fmul <2 x float> %264, %429, !dbg !44
  %431 = fmul <2 x float> %430, %428, !dbg !52
  %432 = fptrunc <2 x float> %431 to <2 x half>, !dbg !53
  %433 = fpext <2 x half> %376 to <2 x float>, !dbg !50
  %434 = fpext <2 x half> %398 to <2 x float>, !dbg !51
  %435 = fmul <2 x float> %264, %434, !dbg !44
  %436 = fmul <2 x float> %435, %433, !dbg !52
  %437 = fptrunc <2 x float> %436 to <2 x half>, !dbg !53
  %438 = fpext <2 x half> %378 to <2 x float>, !dbg !50
  %439 = fpext <2 x half> %400 to <2 x float>, !dbg !51
  %440 = fmul <2 x float> %264, %439, !dbg !44
  %441 = fmul <2 x float> %440, %438, !dbg !52
  %442 = fptrunc <2 x float> %441 to <2 x half>, !dbg !53
  %443 = bitcast <2 x half> %407 to i32, !dbg !53
  %444 = bitcast <2 x half> %412 to i32, !dbg !53
  %445 = bitcast <2 x half> %417 to i32, !dbg !53
  %446 = bitcast <2 x half> %422 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %443, i32 %444, i32 %445, i32 %446, ptr addrspace(1) %401, i1 %11) #6, !dbg !53
  %447 = bitcast <2 x half> %427 to i32, !dbg !53
  %448 = bitcast <2 x half> %432 to i32, !dbg !53
  %449 = bitcast <2 x half> %437 to i32, !dbg !53
  %450 = bitcast <2 x half> %442 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %447, i32 %448, i32 %449, i32 %450, ptr addrspace(1) %402, i1 %11) #6, !dbg !53
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py", directory: "/tmp/torchinductor_root/3k")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 22, column: 28, scope: !10)
!12 = !DILocation(line: 24, column: 21, scope: !10)
!13 = !DILocation(line: 25, column: 37, scope: !10)
!14 = !DILocation(line: 28, column: 30, scope: !10)
!15 = !DILocation(line: 28, column: 35, scope: !10)
!16 = !DILocation(line: 37, column: 22, scope: !10)
!17 = !DILocation(line: 38, column: 22, scope: !10)
!18 = !DILocation(line: 39, column: 36, scope: !10)
!19 = !DILocation(line: 40, column: 41, scope: !10)
!20 = !DILocation(line: 41, column: 46, scope: !10)
!21 = !DILocation(line: 47, column: 41, scope: !10)
!22 = !DILocation(line: 30, column: 40, scope: !10)
!23 = !DILocation(line: 40, column: 69, scope: !10)
!24 = !DILocation(line: 41, column: 34, scope: !10)
!25 = !DILocation(line: 41, column: 53, scope: !10)
!26 = !DILocation(line: 41, column: 115, scope: !10)
!27 = !DILocation(line: 43, column: 22, scope: !10)
!28 = !DILocation(line: 47, column: 29, scope: !10)
!29 = !DILocation(line: 47, column: 52, scope: !10)
!30 = !DILocation(line: 31, column: 31, scope: !10)
!31 = !DILocation(line: 45, column: 25, scope: !10)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !36)
!33 = distinct !DILexicalBlockFile(scope: !35, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!35 = distinct !DILexicalBlockFile(scope: !10, file: !34, discriminator: 0)
!36 = !DILocation(line: 48, column: 27, scope: !10)
!37 = !DILocation(line: 286, column: 36, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 50, column: 21, scope: !10)
!39 = !DILocation(line: 52, column: 20, scope: !10)
!40 = !DILocation(line: 53, column: 28, scope: !10)
!41 = !DILocation(line: 54, column: 4, scope: !10)
!42 = !DILocation(line: 55, column: 28, scope: !10)
!43 = !DILocation(line: 55, column: 40, scope: !10)
!44 = !DILocation(line: 65, column: 24, scope: !10)
!45 = !DILocation(line: 62, column: 35, scope: !10)
!46 = !DILocation(line: 62, column: 42, scope: !10)
!47 = !DILocation(line: 63, column: 36, scope: !10)
!48 = !DILocation(line: 63, column: 53, scope: !10)
!49 = !DILocation(line: 68, column: 29, scope: !10)
!50 = !DILocation(line: 62, column: 95, scope: !10)
!51 = !DILocation(line: 63, column: 115, scope: !10)
!52 = !DILocation(line: 67, column: 24, scope: !10)
!53 = !DILocation(line: 68, column: 53, scope: !10)
!54 = !DILocation(line: 57, column: 31, scope: !10)
!55 = !DILocation(line: 56, column: 4, scope: !10)
