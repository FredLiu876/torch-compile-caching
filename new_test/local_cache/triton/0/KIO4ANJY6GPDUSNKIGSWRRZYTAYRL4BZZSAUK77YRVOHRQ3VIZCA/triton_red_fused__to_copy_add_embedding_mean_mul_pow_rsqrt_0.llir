; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [73 x i8] c"./local_cache/3k/c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py\00"
@assertMessage_0 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp4 < 128256\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !10 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %11 = shl i32 %10, 6, !dbg !12
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %13 = and i32 %12, 64, !dbg !13
  %14 = icmp eq i32 %13, 0, !dbg !13
  %15 = lshr i32 %12, 1, !dbg !13
  %16 = and i32 %15, 63, !dbg !13
  %17 = lshr i32 %12, 3, !dbg !13
  %18 = and i32 %17, 15, !dbg !13
  %19 = and i32 %12, 63, !dbg !13
  %20 = or disjoint i32 %16, %11, !dbg !14
  %21 = or disjoint i32 %11, %19, !dbg !14
  %22 = icmp slt i32 %20, %6, !dbg !15
  %23 = icmp slt i32 %21, %6, !dbg !15
  %24 = shl i32 %12, 2, !dbg !16
  %25 = and i32 %24, 4, !dbg !16
  %26 = sext i32 %20 to i64, !dbg !17
  %27 = getelementptr i64, ptr addrspace(1) %1, i64 %26, !dbg !17
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 %22) #6, !dbg !18
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 %22) #6, !dbg !18
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 %22) #6, !dbg !18
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 %22) #6, !dbg !18
  %32 = or disjoint i32 %18, %11, !dbg !14
  %33 = or disjoint i32 %32, 16, !dbg !14
  %34 = or disjoint i32 %32, 32, !dbg !14
  %35 = or disjoint i32 %32, 48, !dbg !14
  %36 = insertelement <4 x i32> poison, i32 %32, i64 0, !dbg !15
  %37 = insertelement <4 x i32> %36, i32 %33, i64 1, !dbg !15
  %38 = insertelement <4 x i32> %37, i32 %34, i64 2, !dbg !15
  %39 = insertelement <4 x i32> %38, i32 %35, i64 3, !dbg !15
  %40 = insertelement <4 x i32> poison, i32 %6, i64 0, !dbg !15
  %41 = shufflevector <4 x i32> %40, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !15
  %42 = icmp slt <4 x i32> %39, %41, !dbg !15
  %43 = sext i32 %32 to i64, !dbg !17
  %44 = getelementptr i64, ptr addrspace(1) %1, i64 %43, !dbg !17
  %45 = sext i32 %33 to i64, !dbg !17
  %46 = getelementptr i64, ptr addrspace(1) %1, i64 %45, !dbg !17
  %47 = sext i32 %34 to i64, !dbg !17
  %48 = getelementptr i64, ptr addrspace(1) %1, i64 %47, !dbg !17
  %49 = sext i32 %35 to i64, !dbg !17
  %50 = getelementptr i64, ptr addrspace(1) %1, i64 %49, !dbg !17
  %51 = extractelement <4 x i1> %42, i64 0, !dbg !18
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %51) #6, !dbg !18
  %53 = extractelement <4 x i1> %42, i64 1, !dbg !18
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 %53) #6, !dbg !18
  %55 = extractelement <4 x i1> %42, i64 2, !dbg !18
  %56 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 %55) #6, !dbg !18
  %57 = extractelement <4 x i1> %42, i64 3, !dbg !18
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %50, i1 %57) #6, !dbg !18
  %59 = insertelement <4 x i64> poison, i64 %52, i64 0, !dbg !19
  %60 = insertelement <4 x i64> %59, i64 %54, i64 1, !dbg !19
  %61 = insertelement <4 x i64> %60, i64 %56, i64 2, !dbg !19
  %62 = insertelement <4 x i64> %61, i64 %58, i64 3, !dbg !19
  %63 = add <4 x i64> %62, splat (i64 128256), !dbg !19
  %64 = icmp slt <4 x i64> %62, zeroinitializer, !dbg !20
  %65 = select <4 x i1> %64, <4 x i64> %63, <4 x i64> %62, !dbg !21
  %66 = icmp ugt <4 x i64> %65, splat (i64 128255), !dbg !22
  %67 = and <4 x i1> %42, %66, !dbg !23
  %68 = shl i32 %20, 12, !dbg !24
  %69 = bitcast <4 x i1> %67 to i4
  %.not = icmp eq i4 %69, 0
  %invariant.op = or disjoint i32 %25, %68, !dbg !25
  br i1 %.not, label %.split.preheader, label %111, !dbg !26

.split.preheader:                                 ; preds = %9
  %70 = icmp slt i64 %31, 0, !dbg !20
  %71 = shl i64 %31, 12, !dbg !27
  %72 = add i64 %71, 525336576, !dbg !27
  %73 = select i1 %70, i64 %72, i64 %71, !dbg !27
  %74 = zext nneg i32 %25 to i64, !dbg !25
  %75 = or disjoint i64 %73, %74
  br label %.split, !dbg !25

.split:                                           ; preds = %.split.preheader, %.split
  %indvars.iv = phi i64 [ 0, %.split.preheader ], [ %indvars.iv.next, %.split ]
  %76 = phi float [ 0.000000e+00, %.split.preheader ], [ %103, %.split ]
  %77 = phi float [ 0.000000e+00, %.split.preheader ], [ %104, %.split ]
  %78 = phi float [ 0.000000e+00, %.split.preheader ], [ %105, %.split ]
  %79 = phi float [ 0.000000e+00, %.split.preheader ], [ %106, %.split ]
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %80 = or i64 %75, %indvars.iv, !dbg !28
  %81 = getelementptr half, ptr addrspace(1) %2, i64 %80, !dbg !29
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %81, i1 %22) #6, !dbg !30
  %83 = extractvalue { i32, i32 } %82, 0, !dbg !30
  %84 = bitcast i32 %83 to <2 x half>, !dbg !30
  %85 = extractvalue { i32, i32 } %82, 1, !dbg !30
  %86 = bitcast i32 %85 to <2 x half>, !dbg !30
  %87 = extractelement <2 x half> %84, i64 0, !dbg !30
  %88 = extractelement <2 x half> %84, i64 1, !dbg !30
  %89 = extractelement <2 x half> %86, i64 0, !dbg !30
  %90 = extractelement <2 x half> %86, i64 1, !dbg !30
  %91 = fpext half %87 to float, !dbg !31
  %92 = fpext half %88 to float, !dbg !31
  %93 = fpext half %89 to float, !dbg !31
  %94 = fpext half %90 to float, !dbg !31
  %95 = fmul float %91, %91, !dbg !32
  %96 = fmul float %92, %92, !dbg !32
  %97 = fmul float %93, %93, !dbg !32
  %98 = fmul float %94, %94, !dbg !32
  %99 = fadd float %76, %95, !dbg !33
  %100 = fadd float %77, %96, !dbg !33
  %101 = fadd float %78, %97, !dbg !33
  %102 = fadd float %79, %98, !dbg !33
  %103 = select i1 %22, float %99, float %76, !dbg !34
  %104 = select i1 %22, float %100, float %77, !dbg !34
  %105 = select i1 %22, float %101, float %78, !dbg !34
  %106 = select i1 %22, float %102, float %79, !dbg !34
  %107 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %107
  %108 = sext i32 %.reass to i64, !dbg !35
  %109 = getelementptr half, ptr addrspace(1) %4, i64 %108, !dbg !35
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %83, i32 %85, ptr addrspace(1) %109, i1 %22) #6, !dbg !36
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !25
  %110 = icmp samesign ult i64 %indvars.iv, 4088, !dbg !25
  br i1 %110, label %.split, label %112, !dbg !25

111:                                              ; preds = %9
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !26
  unreachable, !dbg !26

112:                                              ; preds = %.split
  %113 = fadd float %103, %104, !dbg !37
  %114 = fadd float %105, %113, !dbg !37
  %115 = fadd float %106, %114, !dbg !37
  %116 = bitcast float %115 to i32, !dbg !42
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 1, i32 31), !dbg !42
  %118 = bitcast i32 %117 to float, !dbg !42
  %119 = fadd float %115, %118, !dbg !37
  %120 = zext nneg i32 %16 to i64, !dbg !43
  %121 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %120, !dbg !43
  %122 = bitcast float %119 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 true) #6, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %123 = zext nneg i32 %19 to i64, !dbg !43
  %124 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i64 %123, !dbg !43
  %125 = load float, ptr addrspace(3) %124, align 4, !dbg !43
  %126 = tail call float @llvm.nvvm.div.full(float %125, float 4.096000e+03), !dbg !44
  %127 = tail call float @llvm.nvvm.div.full(float %119, float 4.096000e+03), !dbg !44
  %128 = fadd float %126, 0x3EE4F8B580000000, !dbg !45
  %129 = fadd float %127, 0x3EE4F8B580000000, !dbg !45
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %.not.i = icmp eq i32 %130, 0, !dbg !43
  br i1 %.not.i, label %133, label %131, !dbg !43

131:                                              ; preds = %112
  %132 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %128), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

133:                                              ; preds = %112
  %134 = tail call float @llvm.nvvm.rsqrt.approx.f(float %128), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

__nv_rsqrtf.exit:                                 ; preds = %131, %133
  %.0.i = phi float [ %132, %131 ], [ %134, %133 ], !dbg !43
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %.not.i19 = icmp eq i32 %138, 0, !dbg !43
  br i1 %.not.i19, label %141, label %139, !dbg !43

139:                                              ; preds = %__nv_rsqrtf.exit
  %140 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %129), !dbg !43
  br label %__nv_rsqrtf.exit21, !dbg !43

141:                                              ; preds = %__nv_rsqrtf.exit
  %142 = tail call float @llvm.nvvm.rsqrt.approx.f(float %129), !dbg !43
  br label %__nv_rsqrtf.exit21, !dbg !43

__nv_rsqrtf.exit21:                               ; preds = %139, %141
  %.0.i20 = phi float [ %140, %139 ], [ %142, %141 ], !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %143 = sext i32 %21 to i64, !dbg !47
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !47
  %145 = bitcast float %.0.i to i32, !dbg !48
  %146 = and i1 %14, %23, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %145, ptr addrspace(1) %144, i1 %146) #6, !dbg !48
  %147 = insertelement <2 x float> poison, float %.0.i20, i64 0, !dbg !49
  %148 = shufflevector <2 x float> %147, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  br label %149, !dbg !50

149:                                              ; preds = %__nv_rsqrtf.exit21, %149
  %indvars.iv28 = phi i64 [ 0, %__nv_rsqrtf.exit21 ], [ %indvars.iv.next29, %149 ]
  %150 = or disjoint i64 %indvars.iv28, %74, !dbg !51
  %151 = getelementptr half, ptr addrspace(1) %3, i64 %150, !dbg !52
  %152 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %151, i1 true) #6, !dbg !53
  %153 = extractvalue { i32, i32 } %152, 0, !dbg !53
  %154 = bitcast i32 %153 to <2 x half>, !dbg !53
  %155 = extractvalue { i32, i32 } %152, 1, !dbg !53
  %156 = bitcast i32 %155 to <2 x half>, !dbg !53
  %157 = trunc nuw nsw i64 %indvars.iv28 to i32
  %.reass24 = or i32 %invariant.op, %157
  %158 = sext i32 %.reass24 to i64, !dbg !54
  %159 = getelementptr half, ptr addrspace(1) %4, i64 %158, !dbg !54
  %160 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %159, i1 %22) #6, !dbg !55
  %161 = extractvalue { i32, i32 } %160, 0, !dbg !55
  %162 = bitcast i32 %161 to <2 x half>, !dbg !55
  %163 = extractvalue { i32, i32 } %160, 1, !dbg !55
  %164 = bitcast i32 %163 to <2 x half>, !dbg !55
  %165 = getelementptr half, ptr addrspace(1) %5, i64 %158, !dbg !56
  %166 = fpext <2 x half> %154 to <2 x float>, !dbg !57
  %167 = fpext <2 x half> %162 to <2 x float>, !dbg !58
  %168 = fmul <2 x float> %148, %167, !dbg !49
  %169 = fmul <2 x float> %168, %166, !dbg !59
  %170 = fptrunc <2 x float> %169 to <2 x half>, !dbg !60
  %171 = fpext <2 x half> %156 to <2 x float>, !dbg !57
  %172 = fpext <2 x half> %164 to <2 x float>, !dbg !58
  %173 = fmul <2 x float> %148, %172, !dbg !49
  %174 = fmul <2 x float> %173, %171, !dbg !59
  %175 = fptrunc <2 x float> %174 to <2 x half>, !dbg !60
  %176 = bitcast <2 x half> %170 to i32, !dbg !60
  %177 = bitcast <2 x half> %175 to i32, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %176, i32 %177, ptr addrspace(1) %165, i1 %22) #6, !dbg !60
  %indvars.iv.next29 = add nuw nsw i64 %indvars.iv28, 8, !dbg !50
  %178 = icmp samesign ult i64 %indvars.iv28, 4088, !dbg !50
  br i1 %178, label %149, label %179, !dbg !50

179:                                              ; preds = %149
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3kp3uisolqkxpkp44yxtd4m4gm5tvzfgnb4pfz7r37cv7lkmwh5.py", directory: "./local_cache/3k")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 22, column: 28, scope: !10)
!12 = !DILocation(line: 22, column: 33, scope: !10)
!13 = !DILocation(line: 23, column: 44, scope: !10)
!14 = !DILocation(line: 23, column: 23, scope: !10)
!15 = !DILocation(line: 24, column: 21, scope: !10)
!16 = !DILocation(line: 25, column: 37, scope: !10)
!17 = !DILocation(line: 28, column: 30, scope: !10)
!18 = !DILocation(line: 28, column: 35, scope: !10)
!19 = !DILocation(line: 37, column: 22, scope: !10)
!20 = !DILocation(line: 38, column: 22, scope: !10)
!21 = !DILocation(line: 39, column: 36, scope: !10)
!22 = !DILocation(line: 40, column: 41, scope: !10)
!23 = !DILocation(line: 40, column: 59, scope: !10)
!24 = !DILocation(line: 47, column: 41, scope: !10)
!25 = !DILocation(line: 30, column: 40, scope: !10)
!26 = !DILocation(line: 40, column: 69, scope: !10)
!27 = !DILocation(line: 41, column: 46, scope: !10)
!28 = !DILocation(line: 41, column: 41, scope: !10)
!29 = !DILocation(line: 41, column: 34, scope: !10)
!30 = !DILocation(line: 41, column: 53, scope: !10)
!31 = !DILocation(line: 41, column: 115, scope: !10)
!32 = !DILocation(line: 43, column: 22, scope: !10)
!33 = !DILocation(line: 45, column: 25, scope: !10)
!34 = !DILocation(line: 46, column: 50, scope: !10)
!35 = !DILocation(line: 47, column: 29, scope: !10)
!36 = !DILocation(line: 47, column: 52, scope: !10)
!37 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !41)
!38 = distinct !DILexicalBlockFile(scope: !40, file: !39, discriminator: 0)
!39 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!40 = distinct !DILexicalBlockFile(scope: !10, file: !39, discriminator: 0)
!41 = !DILocation(line: 48, column: 27, scope: !10)
!42 = !DILocation(line: 286, column: 36, scope: !40, inlinedAt: !41)
!43 = !DILocation(line: 53, column: 28, scope: !10)
!44 = !DILocation(line: 50, column: 21, scope: !10)
!45 = !DILocation(line: 52, column: 20, scope: !10)
!46 = !DILocation(line: 54, column: 4, scope: !10)
!47 = !DILocation(line: 55, column: 28, scope: !10)
!48 = !DILocation(line: 55, column: 40, scope: !10)
!49 = !DILocation(line: 65, column: 24, scope: !10)
!50 = !DILocation(line: 56, column: 40, scope: !10)
!51 = !DILocation(line: 57, column: 31, scope: !10)
!52 = !DILocation(line: 62, column: 35, scope: !10)
!53 = !DILocation(line: 62, column: 42, scope: !10)
!54 = !DILocation(line: 63, column: 36, scope: !10)
!55 = !DILocation(line: 63, column: 53, scope: !10)
!56 = !DILocation(line: 68, column: 29, scope: !10)
!57 = !DILocation(line: 62, column: 95, scope: !10)
!58 = !DILocation(line: 63, column: 115, scope: !10)
!59 = !DILocation(line: 67, column: 24, scope: !10)
!60 = !DILocation(line: 68, column: 53, scope: !10)
!61 = !DILocation(line: 56, column: 4, scope: !10)
