; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %.fr10 = freeze i32 %5, !dbg !10
  %10 = icmp slt i32 %9, %.fr10, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 31, !dbg !11
  %13 = lshr i32 %11, 5, !dbg !11
  %14 = shl i32 %11, 1, !dbg !11
  %15 = and i32 %14, 1022, !dbg !11
  %16 = shl i32 %9, 12, !dbg !12
  %17 = or disjoint i32 %15, %16
  %18 = sext i32 %17 to i64, !dbg !13
  %19 = getelementptr half, ptr addrspace(1) %1, i64 %18, !dbg !13
  br i1 %10, label %.split.us.preheader, label %.split.preheader

.split.preheader:                                 ; preds = %8
  %20 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %19, i1 false) #5, !dbg !14
  %21 = getelementptr half, ptr addrspace(1) %2, i64 %18, !dbg !15
  %22 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %21, i1 false) #5, !dbg !16
  %23 = or disjoint i32 %17, 1024, !dbg !17
  %24 = sext i32 %23 to i64, !dbg !13
  %25 = getelementptr half, ptr addrspace(1) %1, i64 %24, !dbg !13
  %26 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %25, i1 false) #5, !dbg !14
  %27 = getelementptr half, ptr addrspace(1) %2, i64 %24, !dbg !15
  %28 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %27, i1 false) #5, !dbg !16
  %29 = or disjoint i32 %17, 2048, !dbg !17
  %30 = sext i32 %29 to i64, !dbg !13
  %31 = getelementptr half, ptr addrspace(1) %1, i64 %30, !dbg !13
  %32 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %31, i1 false) #5, !dbg !14
  %33 = getelementptr half, ptr addrspace(1) %2, i64 %30, !dbg !15
  %34 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %33, i1 false) #5, !dbg !16
  %35 = or disjoint i32 %17, 3072, !dbg !17
  %36 = sext i32 %35 to i64, !dbg !13
  %37 = getelementptr half, ptr addrspace(1) %1, i64 %36, !dbg !13
  %38 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %37, i1 false) #5, !dbg !14
  %39 = getelementptr half, ptr addrspace(1) %2, i64 %36, !dbg !15
  %40 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %39, i1 false) #5, !dbg !16
  br label %.split9.us, !dbg !18

.split.us.preheader:                              ; preds = %8
  %41 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %19, i1 true) #5, !dbg !14
  %42 = bitcast i32 %41 to <2 x half>, !dbg !14
  %43 = getelementptr half, ptr addrspace(1) %2, i64 %18, !dbg !15
  %44 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %43, i1 true) #5, !dbg !16
  %45 = bitcast i32 %44 to <2 x half>, !dbg !16
  %46 = or disjoint i32 %17, 1024, !dbg !17
  %47 = sext i32 %46 to i64, !dbg !13
  %48 = getelementptr half, ptr addrspace(1) %1, i64 %47, !dbg !13
  %49 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %48, i1 true) #5, !dbg !14
  %50 = bitcast i32 %49 to <2 x half>, !dbg !14
  %51 = getelementptr half, ptr addrspace(1) %2, i64 %47, !dbg !15
  %52 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %51, i1 true) #5, !dbg !16
  %53 = bitcast i32 %52 to <2 x half>, !dbg !16
  %54 = or disjoint i32 %17, 2048, !dbg !17
  %55 = sext i32 %54 to i64, !dbg !13
  %56 = getelementptr half, ptr addrspace(1) %1, i64 %55, !dbg !13
  %57 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %56, i1 true) #5, !dbg !14
  %58 = bitcast i32 %57 to <2 x half>, !dbg !14
  %59 = getelementptr half, ptr addrspace(1) %2, i64 %55, !dbg !15
  %60 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %59, i1 true) #5, !dbg !16
  %61 = bitcast i32 %60 to <2 x half>, !dbg !16
  %62 = or disjoint i32 %17, 3072, !dbg !17
  %63 = sext i32 %62 to i64, !dbg !13
  %64 = getelementptr half, ptr addrspace(1) %1, i64 %63, !dbg !13
  %65 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %64, i1 true) #5, !dbg !14
  %66 = bitcast i32 %65 to <2 x half>, !dbg !14
  %67 = getelementptr half, ptr addrspace(1) %2, i64 %63, !dbg !15
  %68 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %67, i1 true) #5, !dbg !16
  %69 = bitcast i32 %68 to <2 x half>, !dbg !16
  %70 = fpext <2 x half> %42 to <2 x float>, !dbg !22
  %71 = fpext <2 x half> %45 to <2 x float>, !dbg !23
  %72 = fadd <2 x float> %70, %71, !dbg !24
  %73 = fmul <2 x float> %72, %72, !dbg !25
  %74 = fpext <2 x half> %50 to <2 x float>, !dbg !22
  %75 = fpext <2 x half> %53 to <2 x float>, !dbg !23
  %76 = fadd <2 x float> %74, %75, !dbg !24
  %77 = fmul <2 x float> %76, %76, !dbg !25
  %78 = fadd <2 x float> %73, %77, !dbg !26
  %79 = fpext <2 x half> %58 to <2 x float>, !dbg !22
  %80 = fpext <2 x half> %61 to <2 x float>, !dbg !23
  %81 = fadd <2 x float> %79, %80, !dbg !24
  %82 = fmul <2 x float> %81, %81, !dbg !25
  %83 = fadd <2 x float> %78, %82, !dbg !26
  %84 = fpext <2 x half> %66 to <2 x float>, !dbg !22
  %85 = fpext <2 x half> %69 to <2 x float>, !dbg !23
  %86 = fadd <2 x float> %84, %85, !dbg !24
  %87 = fmul <2 x float> %86, %86, !dbg !25
  %88 = fadd <2 x float> %83, %87, !dbg !26
  %shift = shufflevector <2 x float> %88, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !18
  %89 = fadd <2 x float> %88, %shift, !dbg !18
  %90 = extractelement <2 x float> %89, i64 0, !dbg !18
  br label %.split9.us, !dbg !18

.split9.us:                                       ; preds = %.split.preheader, %.split.us.preheader
  %91 = phi float [ %90, %.split.us.preheader ], [ 0.000000e+00, %.split.preheader ], !dbg !27
  %92 = bitcast float %91 to i32, !dbg !18
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 16, i32 31), !dbg !18
  %94 = bitcast i32 %93 to float, !dbg !18
  %95 = fadd float %91, %94, !dbg !27
  %96 = bitcast float %95 to i32, !dbg !18
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 8, i32 31), !dbg !18
  %98 = bitcast i32 %97 to float, !dbg !18
  %99 = fadd float %95, %98, !dbg !27
  %100 = bitcast float %99 to i32, !dbg !18
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 4, i32 31), !dbg !18
  %102 = bitcast i32 %101 to float, !dbg !18
  %103 = fadd float %99, %102, !dbg !27
  %104 = bitcast float %103 to i32, !dbg !18
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 2, i32 31), !dbg !18
  %106 = bitcast i32 %105 to float, !dbg !18
  %107 = fadd float %103, %106, !dbg !27
  %108 = bitcast float %107 to i32, !dbg !18
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 1, i32 31), !dbg !18
  %110 = bitcast i32 %109 to float, !dbg !18
  %111 = fadd float %107, %110, !dbg !27
  %112 = and i32 %13, 15, !dbg !18
  %113 = icmp eq i32 %12, 0, !dbg !18
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !18
  %115 = bitcast float %111 to <1 x i32>, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 %113) #5, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %116 = icmp slt i32 %11, 16, !dbg !18
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !18
  %118 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %117, i1 %116) #5, !dbg !18
  %119 = bitcast i32 %118 to float, !dbg !18
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 8, i32 31), !dbg !18
  %121 = bitcast i32 %120 to float, !dbg !18
  %122 = fadd float %119, %121, !dbg !27
  %123 = bitcast float %122 to i32, !dbg !18
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 4, i32 31), !dbg !18
  %125 = bitcast i32 %124 to float, !dbg !18
  %126 = fadd float %122, %125, !dbg !27
  %127 = bitcast float %126 to i32, !dbg !18
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 2, i32 31), !dbg !18
  %129 = bitcast i32 %128 to float, !dbg !18
  %130 = fadd float %126, %129, !dbg !27
  %131 = bitcast float %130 to i32, !dbg !18
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 1, i32 31), !dbg !18
  %133 = bitcast i32 %132 to float, !dbg !18
  %134 = fadd float %130, %133, !dbg !27
  %135 = and i32 %11, 15, !dbg !18
  %136 = icmp eq i32 %135, 0, !dbg !18
  %137 = and i1 %116, %136, !dbg !18
  %138 = bitcast float %134 to <1 x i32>, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %138, i1 %137) #5, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %139 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !18
  %140 = tail call float @llvm.nvvm.div.full(float %139, float 4.096000e+03), !dbg !29
  %141 = fadd float %140, 0x3EE4F8B580000000, !dbg !30
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i = icmp eq i32 %142, 0, !dbg !31
  br i1 %.not.i, label %145, label %143, !dbg !31

143:                                              ; preds = %.split9.us
  %144 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %141), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

145:                                              ; preds = %.split9.us
  %146 = tail call float @llvm.nvvm.rsqrt.approx.f(float %141), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

__nv_rsqrtf.exit:                                 ; preds = %143, %145
  %.0.i = phi float [ %144, %143 ], [ %146, %145 ], !dbg !31
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i5 = icmp eq i32 %148, 0, !dbg !31
  br i1 %.not.i5, label %151, label %149, !dbg !31

149:                                              ; preds = %__nv_rsqrtf.exit
  %150 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %141), !dbg !31
  br label %__nv_rsqrtf.exit7, !dbg !31

151:                                              ; preds = %__nv_rsqrtf.exit
  %152 = tail call float @llvm.nvvm.rsqrt.approx.f(float %141), !dbg !31
  br label %__nv_rsqrtf.exit7, !dbg !31

__nv_rsqrtf.exit7:                                ; preds = %149, %151
  %.0.i6 = phi float [ %150, %149 ], [ %152, %151 ], !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %153 = sext i32 %9 to i64, !dbg !33
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !33
  %155 = and i32 %11, 511, !dbg !34
  %156 = icmp eq i32 %155, 0, !dbg !34
  %157 = bitcast float %.0.i to i32, !dbg !34
  %158 = and i1 %156, %10, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %157, ptr addrspace(1) %154, i1 %158) #5, !dbg !34
  %159 = zext nneg i32 %15 to i64, !dbg !35
  %160 = getelementptr half, ptr addrspace(1) %3, i64 %159, !dbg !36
  %161 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %160, i1 true) #5, !dbg !37
  %162 = bitcast i32 %161 to <2 x half>, !dbg !37
  %163 = sext i32 %17 to i64, !dbg !38
  %164 = getelementptr half, ptr addrspace(1) %1, i64 %163, !dbg !38
  %165 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %164, i1 %10) #5, !dbg !39
  %166 = bitcast i32 %165 to <2 x half>, !dbg !39
  %167 = getelementptr half, ptr addrspace(1) %2, i64 %163, !dbg !40
  %168 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %167, i1 %10) #5, !dbg !41
  %169 = bitcast i32 %168 to <2 x half>, !dbg !41
  %170 = getelementptr half, ptr addrspace(1) %4, i64 %163, !dbg !42
  %171 = fpext <2 x half> %162 to <2 x float>, !dbg !43
  %172 = fpext <2 x half> %166 to <2 x float>, !dbg !44
  %173 = fpext <2 x half> %169 to <2 x float>, !dbg !45
  %174 = fadd <2 x float> %172, %173, !dbg !46
  %175 = insertelement <2 x float> poison, float %.0.i6, i64 0, !dbg !47
  %176 = shufflevector <2 x float> %175, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !47
  %177 = fmul <2 x float> %176, %174, !dbg !47
  %178 = fmul <2 x float> %177, %171, !dbg !48
  %179 = fptrunc <2 x float> %178 to <2 x half>, !dbg !49
  %180 = bitcast <2 x half> %179 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %180, ptr addrspace(1) %170, i1 %10) #5, !dbg !49
  %181 = or disjoint i64 %159, 1024, !dbg !50
  %182 = getelementptr half, ptr addrspace(1) %3, i64 %181, !dbg !36
  %183 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %182, i1 true) #5, !dbg !37
  %184 = bitcast i32 %183 to <2 x half>, !dbg !37
  %.reass.1 = or disjoint i32 %17, 1024
  %185 = sext i32 %.reass.1 to i64, !dbg !38
  %186 = getelementptr half, ptr addrspace(1) %1, i64 %185, !dbg !38
  %187 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %186, i1 %10) #5, !dbg !39
  %188 = bitcast i32 %187 to <2 x half>, !dbg !39
  %189 = getelementptr half, ptr addrspace(1) %2, i64 %185, !dbg !40
  %190 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %189, i1 %10) #5, !dbg !41
  %191 = bitcast i32 %190 to <2 x half>, !dbg !41
  %192 = getelementptr half, ptr addrspace(1) %4, i64 %185, !dbg !42
  %193 = fpext <2 x half> %184 to <2 x float>, !dbg !43
  %194 = fpext <2 x half> %188 to <2 x float>, !dbg !44
  %195 = fpext <2 x half> %191 to <2 x float>, !dbg !45
  %196 = fadd <2 x float> %194, %195, !dbg !46
  %197 = fmul <2 x float> %176, %196, !dbg !47
  %198 = fmul <2 x float> %197, %193, !dbg !48
  %199 = fptrunc <2 x float> %198 to <2 x half>, !dbg !49
  %200 = bitcast <2 x half> %199 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %200, ptr addrspace(1) %192, i1 %10) #5, !dbg !49
  %201 = or disjoint i64 %159, 2048, !dbg !50
  %202 = getelementptr half, ptr addrspace(1) %3, i64 %201, !dbg !36
  %203 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %202, i1 true) #5, !dbg !37
  %204 = bitcast i32 %203 to <2 x half>, !dbg !37
  %.reass.2 = or disjoint i32 %17, 2048
  %205 = sext i32 %.reass.2 to i64, !dbg !38
  %206 = getelementptr half, ptr addrspace(1) %1, i64 %205, !dbg !38
  %207 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %206, i1 %10) #5, !dbg !39
  %208 = bitcast i32 %207 to <2 x half>, !dbg !39
  %209 = getelementptr half, ptr addrspace(1) %2, i64 %205, !dbg !40
  %210 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %209, i1 %10) #5, !dbg !41
  %211 = bitcast i32 %210 to <2 x half>, !dbg !41
  %212 = getelementptr half, ptr addrspace(1) %4, i64 %205, !dbg !42
  %213 = fpext <2 x half> %204 to <2 x float>, !dbg !43
  %214 = fpext <2 x half> %208 to <2 x float>, !dbg !44
  %215 = fpext <2 x half> %211 to <2 x float>, !dbg !45
  %216 = fadd <2 x float> %214, %215, !dbg !46
  %217 = fmul <2 x float> %176, %216, !dbg !47
  %218 = fmul <2 x float> %217, %213, !dbg !48
  %219 = fptrunc <2 x float> %218 to <2 x half>, !dbg !49
  %220 = bitcast <2 x half> %219 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %220, ptr addrspace(1) %212, i1 %10) #5, !dbg !49
  %221 = or disjoint i64 %159, 3072, !dbg !50
  %222 = getelementptr half, ptr addrspace(1) %3, i64 %221, !dbg !36
  %223 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %222, i1 true) #5, !dbg !37
  %224 = bitcast i32 %223 to <2 x half>, !dbg !37
  %.reass.3 = or disjoint i32 %17, 3072
  %225 = sext i32 %.reass.3 to i64, !dbg !38
  %226 = getelementptr half, ptr addrspace(1) %1, i64 %225, !dbg !38
  %227 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %226, i1 %10) #5, !dbg !39
  %228 = bitcast i32 %227 to <2 x half>, !dbg !39
  %229 = getelementptr half, ptr addrspace(1) %2, i64 %225, !dbg !40
  %230 = tail call i32 asm sideeffect "mov.u32 $0, $1;\0A\09@$3 ld.global.L1::evict_first.b32 { $0 }, [ $2 + 0 ];", "=r,r,l,b"(i32 0, ptr addrspace(1) %229, i1 %10) #5, !dbg !41
  %231 = bitcast i32 %230 to <2 x half>, !dbg !41
  %232 = getelementptr half, ptr addrspace(1) %4, i64 %225, !dbg !42
  %233 = fpext <2 x half> %224 to <2 x float>, !dbg !43
  %234 = fpext <2 x half> %228 to <2 x float>, !dbg !44
  %235 = fpext <2 x half> %231 to <2 x float>, !dbg !45
  %236 = fadd <2 x float> %234, %235, !dbg !46
  %237 = fmul <2 x float> %176, %236, !dbg !47
  %238 = fmul <2 x float> %237, %233, !dbg !48
  %239 = fptrunc <2 x float> %238 to <2 x half>, !dbg !49
  %240 = bitcast <2 x half> %239 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %240, ptr addrspace(1) %232, i1 %10) #5, !dbg !49
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxdna3iuiarg5df5zltn5jik5bvuuyvpn2rygiz2q4ninczsg7t7.py", directory: "/tmp/torchinductor_root/xd")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_6", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 21, scope: !6)
!11 = !DILocation(line: 25, column: 37, scope: !6)
!12 = !DILocation(line: 35, column: 46, scope: !6)
!13 = !DILocation(line: 35, column: 34, scope: !6)
!14 = !DILocation(line: 35, column: 51, scope: !6)
!15 = !DILocation(line: 36, column: 34, scope: !6)
!16 = !DILocation(line: 36, column: 51, scope: !6)
!17 = !DILocation(line: 35, column: 41, scope: !6)
!18 = !DILocation(line: 286, column: 36, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !6, file: !20, discriminator: 0)
!20 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!21 = !DILocation(line: 43, column: 25, scope: !6)
!22 = !DILocation(line: 35, column: 112, scope: !6)
!23 = !DILocation(line: 36, column: 112, scope: !6)
!24 = !DILocation(line: 37, column: 22, scope: !6)
!25 = !DILocation(line: 39, column: 22, scope: !6)
!26 = !DILocation(line: 41, column: 23, scope: !6)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !21)
!28 = distinct !DILexicalBlockFile(scope: !19, file: !20, discriminator: 0)
!29 = !DILocation(line: 45, column: 19, scope: !6)
!30 = !DILocation(line: 47, column: 19, scope: !6)
!31 = !DILocation(line: 48, column: 28, scope: !6)
!32 = !DILocation(line: 49, column: 4, scope: !6)
!33 = !DILocation(line: 50, column: 28, scope: !6)
!34 = !DILocation(line: 50, column: 40, scope: !6)
!35 = !DILocation(line: 51, column: 40, scope: !6)
!36 = !DILocation(line: 57, column: 35, scope: !6)
!37 = !DILocation(line: 57, column: 42, scope: !6)
!38 = !DILocation(line: 58, column: 35, scope: !6)
!39 = !DILocation(line: 58, column: 52, scope: !6)
!40 = !DILocation(line: 59, column: 35, scope: !6)
!41 = !DILocation(line: 59, column: 52, scope: !6)
!42 = !DILocation(line: 65, column: 29, scope: !6)
!43 = !DILocation(line: 57, column: 95, scope: !6)
!44 = !DILocation(line: 58, column: 114, scope: !6)
!45 = !DILocation(line: 59, column: 114, scope: !6)
!46 = !DILocation(line: 60, column: 24, scope: !6)
!47 = !DILocation(line: 62, column: 24, scope: !6)
!48 = !DILocation(line: 64, column: 24, scope: !6)
!49 = !DILocation(line: 65, column: 53, scope: !6)
!50 = !DILocation(line: 52, column: 31, scope: !6)
!51 = !DILocation(line: 51, column: 4, scope: !6)
