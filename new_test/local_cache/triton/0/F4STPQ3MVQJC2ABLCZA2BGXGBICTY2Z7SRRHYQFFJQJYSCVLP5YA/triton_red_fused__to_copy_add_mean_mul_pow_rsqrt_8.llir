; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = shl i32 %10, 1, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = and i32 %12, 31, !dbg !11
  %14 = and i32 %12, 1, !dbg !11
  %15 = or disjoint i32 %11, 1, !dbg !12
  %16 = icmp slt i32 %11, %6, !dbg !13
  %17 = icmp slt i32 %15, %6, !dbg !13
  %18 = lshr i32 %12, 5, !dbg !14
  %19 = shl i32 %12, 3, !dbg !14
  %20 = and i32 %19, 2040, !dbg !14
  %21 = or disjoint i32 %20, 2048, !dbg !14
  %22 = shl i32 %10, 13, !dbg !15
  %23 = shl i32 %15, 12, !dbg !15
  %24 = or disjoint i32 %20, %22, !dbg !16
  %25 = or disjoint i32 %21, %22, !dbg !16
  %26 = or disjoint i32 %23, %20, !dbg !16
  %27 = or disjoint i32 %21, %23, !dbg !16
  %28 = sext i32 %24 to i64, !dbg !17
  %29 = getelementptr half, ptr addrspace(1) %2, i64 %28, !dbg !17
  %30 = sext i32 %25 to i64, !dbg !17
  %31 = getelementptr half, ptr addrspace(1) %2, i64 %30, !dbg !17
  %32 = sext i32 %26 to i64, !dbg !17
  %33 = getelementptr half, ptr addrspace(1) %2, i64 %32, !dbg !17
  %34 = sext i32 %27 to i64, !dbg !17
  %35 = getelementptr half, ptr addrspace(1) %2, i64 %34, !dbg !17
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %29, i1 %16) #5, !dbg !18
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !18
  %38 = bitcast i32 %37 to <2 x half>, !dbg !18
  %39 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !18
  %40 = bitcast i32 %39 to <2 x half>, !dbg !18
  %41 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !18
  %42 = bitcast i32 %41 to <2 x half>, !dbg !18
  %43 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !18
  %44 = bitcast i32 %43 to <2 x half>, !dbg !18
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %31, i1 %16) #5, !dbg !18
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !18
  %47 = bitcast i32 %46 to <2 x half>, !dbg !18
  %48 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !18
  %49 = bitcast i32 %48 to <2 x half>, !dbg !18
  %50 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !18
  %51 = bitcast i32 %50 to <2 x half>, !dbg !18
  %52 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !18
  %53 = bitcast i32 %52 to <2 x half>, !dbg !18
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %33, i1 %17) #5, !dbg !18
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !18
  %56 = bitcast i32 %55 to <2 x half>, !dbg !18
  %57 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !18
  %58 = bitcast i32 %57 to <2 x half>, !dbg !18
  %59 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !18
  %60 = bitcast i32 %59 to <2 x half>, !dbg !18
  %61 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !18
  %62 = bitcast i32 %61 to <2 x half>, !dbg !18
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %35, i1 %17) #5, !dbg !18
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !18
  %65 = bitcast i32 %64 to <2 x half>, !dbg !18
  %66 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !18
  %67 = bitcast i32 %66 to <2 x half>, !dbg !18
  %68 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !18
  %69 = bitcast i32 %68 to <2 x half>, !dbg !18
  %70 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !18
  %71 = bitcast i32 %70 to <2 x half>, !dbg !18
  %72 = getelementptr half, ptr addrspace(1) %3, i64 %28, !dbg !19
  %73 = getelementptr half, ptr addrspace(1) %3, i64 %30, !dbg !19
  %74 = getelementptr half, ptr addrspace(1) %3, i64 %32, !dbg !19
  %75 = getelementptr half, ptr addrspace(1) %3, i64 %34, !dbg !19
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %72, i1 %16) #5, !dbg !20
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !20
  %78 = bitcast i32 %77 to <2 x half>, !dbg !20
  %79 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !20
  %80 = bitcast i32 %79 to <2 x half>, !dbg !20
  %81 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !20
  %82 = bitcast i32 %81 to <2 x half>, !dbg !20
  %83 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !20
  %84 = bitcast i32 %83 to <2 x half>, !dbg !20
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %73, i1 %16) #5, !dbg !20
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !20
  %87 = bitcast i32 %86 to <2 x half>, !dbg !20
  %88 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !20
  %89 = bitcast i32 %88 to <2 x half>, !dbg !20
  %90 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !20
  %91 = bitcast i32 %90 to <2 x half>, !dbg !20
  %92 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !20
  %93 = bitcast i32 %92 to <2 x half>, !dbg !20
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %74, i1 %17) #5, !dbg !20
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !20
  %96 = bitcast i32 %95 to <2 x half>, !dbg !20
  %97 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !20
  %98 = bitcast i32 %97 to <2 x half>, !dbg !20
  %99 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !20
  %100 = bitcast i32 %99 to <2 x half>, !dbg !20
  %101 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !20
  %102 = bitcast i32 %101 to <2 x half>, !dbg !20
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %75, i1 %17) #5, !dbg !20
  %104 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !20
  %105 = bitcast i32 %104 to <2 x half>, !dbg !20
  %106 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !20
  %107 = bitcast i32 %106 to <2 x half>, !dbg !20
  %108 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !20
  %109 = bitcast i32 %108 to <2 x half>, !dbg !20
  %110 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !20
  %111 = bitcast i32 %110 to <2 x half>, !dbg !20
  %112 = getelementptr half, ptr addrspace(1) %0, i64 %28, !dbg !21
  %113 = getelementptr half, ptr addrspace(1) %0, i64 %30, !dbg !21
  %114 = getelementptr half, ptr addrspace(1) %0, i64 %32, !dbg !21
  %115 = getelementptr half, ptr addrspace(1) %0, i64 %34, !dbg !21
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %112, i1 %16) #5, !dbg !22
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !22
  %118 = bitcast i32 %117 to <2 x half>, !dbg !22
  %119 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !22
  %120 = bitcast i32 %119 to <2 x half>, !dbg !22
  %121 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !22
  %122 = bitcast i32 %121 to <2 x half>, !dbg !22
  %123 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !22
  %124 = bitcast i32 %123 to <2 x half>, !dbg !22
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %113, i1 %16) #5, !dbg !22
  %126 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !22
  %127 = bitcast i32 %126 to <2 x half>, !dbg !22
  %128 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !22
  %129 = bitcast i32 %128 to <2 x half>, !dbg !22
  %130 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !22
  %131 = bitcast i32 %130 to <2 x half>, !dbg !22
  %132 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !22
  %133 = bitcast i32 %132 to <2 x half>, !dbg !22
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %114, i1 %17) #5, !dbg !22
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !22
  %136 = bitcast i32 %135 to <2 x half>, !dbg !22
  %137 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !22
  %138 = bitcast i32 %137 to <2 x half>, !dbg !22
  %139 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !22
  %140 = bitcast i32 %139 to <2 x half>, !dbg !22
  %141 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !22
  %142 = bitcast i32 %141 to <2 x half>, !dbg !22
  %143 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %115, i1 %17) #5, !dbg !22
  %144 = extractvalue { i32, i32, i32, i32 } %143, 0, !dbg !22
  %145 = bitcast i32 %144 to <2 x half>, !dbg !22
  %146 = extractvalue { i32, i32, i32, i32 } %143, 1, !dbg !22
  %147 = bitcast i32 %146 to <2 x half>, !dbg !22
  %148 = extractvalue { i32, i32, i32, i32 } %143, 2, !dbg !22
  %149 = bitcast i32 %148 to <2 x half>, !dbg !22
  %150 = extractvalue { i32, i32, i32, i32 } %143, 3, !dbg !22
  %151 = bitcast i32 %150 to <2 x half>, !dbg !22
  %152 = fpext <2 x half> %38 to <2 x float>, !dbg !23
  %153 = fpext <2 x half> %78 to <2 x float>, !dbg !24
  %154 = fpext <2 x half> %118 to <2 x float>, !dbg !25
  %155 = fadd <2 x float> %152, %153, !dbg !26
  %156 = fadd <2 x float> %155, %154, !dbg !27
  %157 = fmul <2 x float> %156, %156, !dbg !28
  %158 = fmul <2 x float> %156, %156, !dbg !28
  %159 = fptrunc <2 x float> %156 to <2 x half>, !dbg !29
  %160 = fpext <2 x half> %40 to <2 x float>, !dbg !23
  %161 = fpext <2 x half> %80 to <2 x float>, !dbg !24
  %162 = fpext <2 x half> %120 to <2 x float>, !dbg !25
  %163 = fadd <2 x float> %160, %161, !dbg !26
  %164 = fadd <2 x float> %163, %162, !dbg !27
  %165 = fmul <2 x float> %164, %164, !dbg !28
  %166 = fmul <2 x float> %164, %164, !dbg !28
  %167 = fptrunc <2 x float> %164 to <2 x half>, !dbg !29
  %168 = fpext <2 x half> %42 to <2 x float>, !dbg !23
  %169 = fpext <2 x half> %82 to <2 x float>, !dbg !24
  %170 = fpext <2 x half> %122 to <2 x float>, !dbg !25
  %171 = fadd <2 x float> %168, %169, !dbg !26
  %172 = fadd <2 x float> %171, %170, !dbg !27
  %173 = fmul <2 x float> %172, %172, !dbg !28
  %174 = fmul <2 x float> %172, %172, !dbg !28
  %175 = fptrunc <2 x float> %172 to <2 x half>, !dbg !29
  %176 = fpext <2 x half> %44 to <2 x float>, !dbg !23
  %177 = fpext <2 x half> %84 to <2 x float>, !dbg !24
  %178 = fpext <2 x half> %124 to <2 x float>, !dbg !25
  %179 = fadd <2 x float> %176, %177, !dbg !26
  %180 = fadd <2 x float> %179, %178, !dbg !27
  %181 = fmul <2 x float> %180, %180, !dbg !28
  %182 = fmul <2 x float> %180, %180, !dbg !28
  %183 = fptrunc <2 x float> %180 to <2 x half>, !dbg !29
  %184 = fpext <2 x half> %47 to <2 x float>, !dbg !23
  %185 = fpext <2 x half> %87 to <2 x float>, !dbg !24
  %186 = fpext <2 x half> %127 to <2 x float>, !dbg !25
  %187 = fadd <2 x float> %184, %185, !dbg !26
  %188 = fadd <2 x float> %187, %186, !dbg !27
  %189 = fmul <2 x float> %188, %188, !dbg !28
  %190 = fmul <2 x float> %188, %188, !dbg !28
  %191 = fptrunc <2 x float> %188 to <2 x half>, !dbg !29
  %192 = fpext <2 x half> %49 to <2 x float>, !dbg !23
  %193 = fpext <2 x half> %89 to <2 x float>, !dbg !24
  %194 = fpext <2 x half> %129 to <2 x float>, !dbg !25
  %195 = fadd <2 x float> %192, %193, !dbg !26
  %196 = fadd <2 x float> %195, %194, !dbg !27
  %197 = fmul <2 x float> %196, %196, !dbg !28
  %198 = fmul <2 x float> %196, %196, !dbg !28
  %199 = fptrunc <2 x float> %196 to <2 x half>, !dbg !29
  %200 = fpext <2 x half> %51 to <2 x float>, !dbg !23
  %201 = fpext <2 x half> %91 to <2 x float>, !dbg !24
  %202 = fpext <2 x half> %131 to <2 x float>, !dbg !25
  %203 = fadd <2 x float> %200, %201, !dbg !26
  %204 = fadd <2 x float> %203, %202, !dbg !27
  %205 = fmul <2 x float> %204, %204, !dbg !28
  %206 = fmul <2 x float> %204, %204, !dbg !28
  %207 = fptrunc <2 x float> %204 to <2 x half>, !dbg !29
  %208 = fpext <2 x half> %53 to <2 x float>, !dbg !23
  %209 = fpext <2 x half> %93 to <2 x float>, !dbg !24
  %210 = fpext <2 x half> %133 to <2 x float>, !dbg !25
  %211 = fadd <2 x float> %208, %209, !dbg !26
  %212 = fadd <2 x float> %211, %210, !dbg !27
  %213 = fmul <2 x float> %212, %212, !dbg !28
  %214 = fmul <2 x float> %212, %212, !dbg !28
  %215 = fptrunc <2 x float> %212 to <2 x half>, !dbg !29
  %216 = fpext <2 x half> %56 to <2 x float>, !dbg !23
  %217 = fpext <2 x half> %96 to <2 x float>, !dbg !24
  %218 = fpext <2 x half> %136 to <2 x float>, !dbg !25
  %219 = fadd <2 x float> %216, %217, !dbg !26
  %220 = fadd <2 x float> %219, %218, !dbg !27
  %221 = fmul <2 x float> %220, %220, !dbg !28
  %222 = fmul <2 x float> %220, %220, !dbg !28
  %223 = fptrunc <2 x float> %220 to <2 x half>, !dbg !29
  %224 = fpext <2 x half> %58 to <2 x float>, !dbg !23
  %225 = fpext <2 x half> %98 to <2 x float>, !dbg !24
  %226 = fpext <2 x half> %138 to <2 x float>, !dbg !25
  %227 = fadd <2 x float> %224, %225, !dbg !26
  %228 = fadd <2 x float> %227, %226, !dbg !27
  %229 = fmul <2 x float> %228, %228, !dbg !28
  %230 = fmul <2 x float> %228, %228, !dbg !28
  %231 = fptrunc <2 x float> %228 to <2 x half>, !dbg !29
  %232 = fpext <2 x half> %60 to <2 x float>, !dbg !23
  %233 = fpext <2 x half> %100 to <2 x float>, !dbg !24
  %234 = fpext <2 x half> %140 to <2 x float>, !dbg !25
  %235 = fadd <2 x float> %232, %233, !dbg !26
  %236 = fadd <2 x float> %235, %234, !dbg !27
  %237 = fmul <2 x float> %236, %236, !dbg !28
  %238 = fmul <2 x float> %236, %236, !dbg !28
  %239 = fptrunc <2 x float> %236 to <2 x half>, !dbg !29
  %240 = fpext <2 x half> %62 to <2 x float>, !dbg !23
  %241 = fpext <2 x half> %102 to <2 x float>, !dbg !24
  %242 = fpext <2 x half> %142 to <2 x float>, !dbg !25
  %243 = fadd <2 x float> %240, %241, !dbg !26
  %244 = fadd <2 x float> %243, %242, !dbg !27
  %245 = fmul <2 x float> %244, %244, !dbg !28
  %246 = fmul <2 x float> %244, %244, !dbg !28
  %247 = fptrunc <2 x float> %244 to <2 x half>, !dbg !29
  %248 = fpext <2 x half> %65 to <2 x float>, !dbg !23
  %249 = fpext <2 x half> %105 to <2 x float>, !dbg !24
  %250 = fpext <2 x half> %145 to <2 x float>, !dbg !25
  %251 = fadd <2 x float> %248, %249, !dbg !26
  %252 = fadd <2 x float> %251, %250, !dbg !27
  %253 = fmul <2 x float> %252, %252, !dbg !28
  %254 = fmul <2 x float> %252, %252, !dbg !28
  %255 = fptrunc <2 x float> %252 to <2 x half>, !dbg !29
  %256 = fpext <2 x half> %67 to <2 x float>, !dbg !23
  %257 = fpext <2 x half> %107 to <2 x float>, !dbg !24
  %258 = fpext <2 x half> %147 to <2 x float>, !dbg !25
  %259 = fadd <2 x float> %256, %257, !dbg !26
  %260 = fadd <2 x float> %259, %258, !dbg !27
  %261 = fmul <2 x float> %260, %260, !dbg !28
  %262 = fmul <2 x float> %260, %260, !dbg !28
  %263 = fptrunc <2 x float> %260 to <2 x half>, !dbg !29
  %264 = fpext <2 x half> %69 to <2 x float>, !dbg !23
  %265 = fpext <2 x half> %109 to <2 x float>, !dbg !24
  %266 = fpext <2 x half> %149 to <2 x float>, !dbg !25
  %267 = fadd <2 x float> %264, %265, !dbg !26
  %268 = fadd <2 x float> %267, %266, !dbg !27
  %269 = fmul <2 x float> %268, %268, !dbg !28
  %270 = fmul <2 x float> %268, %268, !dbg !28
  %271 = fptrunc <2 x float> %268 to <2 x half>, !dbg !29
  %272 = fpext <2 x half> %71 to <2 x float>, !dbg !23
  %273 = fpext <2 x half> %111 to <2 x float>, !dbg !24
  %274 = fpext <2 x half> %151 to <2 x float>, !dbg !25
  %275 = fadd <2 x float> %272, %273, !dbg !26
  %276 = fadd <2 x float> %275, %274, !dbg !27
  %277 = fmul <2 x float> %276, %276, !dbg !28
  %278 = fmul <2 x float> %276, %276, !dbg !28
  %279 = fptrunc <2 x float> %276 to <2 x half>, !dbg !29
  %280 = bitcast <2 x half> %159 to i32, !dbg !29
  %281 = bitcast <2 x half> %167 to i32, !dbg !29
  %282 = bitcast <2 x half> %175 to i32, !dbg !29
  %283 = bitcast <2 x half> %183 to i32, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %280, i32 %281, i32 %282, i32 %283, ptr addrspace(1) %112, i1 %16) #5, !dbg !29
  %284 = bitcast <2 x half> %191 to i32, !dbg !29
  %285 = bitcast <2 x half> %199 to i32, !dbg !29
  %286 = bitcast <2 x half> %207 to i32, !dbg !29
  %287 = bitcast <2 x half> %215 to i32, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %284, i32 %285, i32 %286, i32 %287, ptr addrspace(1) %113, i1 %16) #5, !dbg !29
  %288 = bitcast <2 x half> %223 to i32, !dbg !29
  %289 = bitcast <2 x half> %231 to i32, !dbg !29
  %290 = bitcast <2 x half> %239 to i32, !dbg !29
  %291 = bitcast <2 x half> %247 to i32, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %288, i32 %289, i32 %290, i32 %291, ptr addrspace(1) %114, i1 %17) #5, !dbg !29
  %292 = bitcast <2 x half> %255 to i32, !dbg !29
  %293 = bitcast <2 x half> %263 to i32, !dbg !29
  %294 = bitcast <2 x half> %271 to i32, !dbg !29
  %295 = bitcast <2 x half> %279 to i32, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %292, i32 %293, i32 %294, i32 %295, ptr addrspace(1) %115, i1 %17) #5, !dbg !29
  %shift = shufflevector <2 x float> %158, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %296 = fadd <2 x float> %157, %shift, !dbg !30
  %297 = fadd <2 x float> %165, %296, !dbg !30
  %shift49 = shufflevector <2 x float> %166, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %298 = fadd <2 x float> %shift49, %297, !dbg !30
  %299 = fadd <2 x float> %173, %298, !dbg !30
  %shift50 = shufflevector <2 x float> %174, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %300 = fadd <2 x float> %shift50, %299, !dbg !30
  %301 = fadd <2 x float> %181, %300, !dbg !30
  %shift51 = shufflevector <2 x float> %182, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %302 = fadd <2 x float> %shift51, %301, !dbg !30
  %303 = fadd <2 x float> %189, %302, !dbg !30
  %shift52 = shufflevector <2 x float> %190, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %304 = fadd <2 x float> %shift52, %303, !dbg !30
  %305 = fadd <2 x float> %197, %304, !dbg !30
  %shift53 = shufflevector <2 x float> %198, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %306 = fadd <2 x float> %shift53, %305, !dbg !30
  %307 = fadd <2 x float> %205, %306, !dbg !30
  %shift54 = shufflevector <2 x float> %206, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %308 = fadd <2 x float> %shift54, %307, !dbg !30
  %309 = fadd <2 x float> %213, %308, !dbg !30
  %shift55 = shufflevector <2 x float> %214, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %310 = fadd <2 x float> %shift55, %309, !dbg !30
  %311 = extractelement <2 x float> %310, i64 0, !dbg !30
  %312 = select i1 %16, float %311, float 0.000000e+00, !dbg !30
  %shift56 = shufflevector <2 x float> %222, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %313 = fadd <2 x float> %221, %shift56, !dbg !30
  %314 = fadd <2 x float> %229, %313, !dbg !30
  %shift57 = shufflevector <2 x float> %230, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %315 = fadd <2 x float> %shift57, %314, !dbg !30
  %316 = fadd <2 x float> %237, %315, !dbg !30
  %shift58 = shufflevector <2 x float> %238, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %317 = fadd <2 x float> %shift58, %316, !dbg !30
  %318 = fadd <2 x float> %245, %317, !dbg !30
  %shift59 = shufflevector <2 x float> %246, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %319 = fadd <2 x float> %shift59, %318, !dbg !30
  %320 = fadd <2 x float> %253, %319, !dbg !30
  %shift60 = shufflevector <2 x float> %254, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %321 = fadd <2 x float> %shift60, %320, !dbg !30
  %322 = fadd <2 x float> %261, %321, !dbg !30
  %shift61 = shufflevector <2 x float> %262, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %323 = fadd <2 x float> %shift61, %322, !dbg !30
  %324 = fadd <2 x float> %269, %323, !dbg !30
  %shift62 = shufflevector <2 x float> %270, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %325 = fadd <2 x float> %shift62, %324, !dbg !30
  %326 = fadd <2 x float> %277, %325, !dbg !30
  %shift63 = shufflevector <2 x float> %278, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %327 = fadd <2 x float> %shift63, %326, !dbg !30
  %328 = extractelement <2 x float> %327, i64 0, !dbg !30
  %329 = select i1 %17, float %328, float 0.000000e+00, !dbg !30
  %330 = bitcast float %312 to i32, !dbg !35
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 16, i32 31), !dbg !35
  %332 = bitcast i32 %331 to float, !dbg !35
  %333 = fadd float %312, %332, !dbg !30
  %334 = bitcast float %333 to i32, !dbg !35
  %335 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %334, i32 8, i32 31), !dbg !35
  %336 = bitcast i32 %335 to float, !dbg !35
  %337 = fadd float %333, %336, !dbg !30
  %338 = bitcast float %337 to i32, !dbg !35
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 4, i32 31), !dbg !35
  %340 = bitcast i32 %339 to float, !dbg !35
  %341 = fadd float %337, %340, !dbg !30
  %342 = bitcast float %341 to i32, !dbg !35
  %343 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %342, i32 2, i32 31), !dbg !35
  %344 = bitcast i32 %343 to float, !dbg !35
  %345 = fadd float %341, %344, !dbg !30
  %346 = bitcast float %345 to i32, !dbg !35
  %347 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %346, i32 1, i32 31), !dbg !35
  %348 = bitcast i32 %347 to float, !dbg !35
  %349 = fadd float %345, %348, !dbg !30
  %350 = bitcast float %329 to i32, !dbg !35
  %351 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %350, i32 16, i32 31), !dbg !35
  %352 = bitcast i32 %351 to float, !dbg !35
  %353 = fadd float %329, %352, !dbg !30
  %354 = bitcast float %353 to i32, !dbg !35
  %355 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %354, i32 8, i32 31), !dbg !35
  %356 = bitcast i32 %355 to float, !dbg !35
  %357 = fadd float %353, %356, !dbg !30
  %358 = bitcast float %357 to i32, !dbg !35
  %359 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %358, i32 4, i32 31), !dbg !35
  %360 = bitcast i32 %359 to float, !dbg !35
  %361 = fadd float %357, %360, !dbg !30
  %362 = bitcast float %361 to i32, !dbg !35
  %363 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %362, i32 2, i32 31), !dbg !35
  %364 = bitcast i32 %363 to float, !dbg !35
  %365 = fadd float %361, %364, !dbg !30
  %366 = bitcast float %365 to i32, !dbg !35
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 1, i32 31), !dbg !35
  %368 = bitcast i32 %367 to float, !dbg !35
  %369 = fadd float %365, %368, !dbg !30
  %370 = and i32 %18, 7, !dbg !35
  %371 = icmp eq i32 %13, 0, !dbg !35
  %372 = getelementptr float, ptr addrspace(3) @global_smem, i32 %370, !dbg !35
  %373 = bitcast float %349 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %372, <1 x i32> %373, i1 %371) #5, !dbg !35
  %374 = or disjoint i32 %370, 8, !dbg !35
  %375 = getelementptr float, ptr addrspace(3) @global_smem, i32 %374, !dbg !35
  %376 = bitcast float %369 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %375, <1 x i32> %376, i1 %371) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %377 = icmp slt i32 %12, 16, !dbg !35
  %378 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !35
  %379 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %378, i1 %377) #5, !dbg !35
  %380 = bitcast i32 %379 to float, !dbg !35
  %381 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %379, i32 4, i32 31), !dbg !35
  %382 = bitcast i32 %381 to float, !dbg !35
  %383 = fadd float %380, %382, !dbg !30
  %384 = bitcast float %383 to i32, !dbg !35
  %385 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %384, i32 2, i32 31), !dbg !35
  %386 = bitcast i32 %385 to float, !dbg !35
  %387 = fadd float %383, %386, !dbg !30
  %388 = bitcast float %387 to i32, !dbg !35
  %389 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %388, i32 1, i32 31), !dbg !35
  %390 = bitcast i32 %389 to float, !dbg !35
  %391 = fadd float %387, %390, !dbg !30
  %392 = and i32 %12, 7, !dbg !35
  %393 = icmp eq i32 %392, 0, !dbg !35
  %394 = and i1 %377, %393, !dbg !35
  %395 = bitcast float %391 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %378, <1 x i32> %395, i1 %394) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %396 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !35
  %397 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %398 = bitcast float %396 to i32, !dbg !36
  %399 = bitcast float %397 to i32, !dbg !36
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %398, i32 %399, i1 true) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %400 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %14, !dbg !36
  %401 = load float, ptr addrspace(3) %400, align 4, !dbg !36
  %402 = tail call float @llvm.nvvm.div.full(float %401, float 4.096000e+03), !dbg !37
  %403 = tail call float @llvm.nvvm.div.full(float %396, float 4.096000e+03), !dbg !37
  %404 = tail call float @llvm.nvvm.div.full(float %397, float 4.096000e+03), !dbg !37
  %405 = fadd float %402, 0x3EE4F8B580000000, !dbg !38
  %406 = fadd float %403, 0x3EE4F8B580000000, !dbg !38
  %407 = fadd float %404, 0x3EE4F8B580000000, !dbg !38
  %408 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i = icmp eq i32 %408, 0, !dbg !36
  br i1 %.not.i, label %411, label %409, !dbg !36

409:                                              ; preds = %9
  %410 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %405), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

411:                                              ; preds = %9
  %412 = tail call float @llvm.nvvm.rsqrt.approx.f(float %405), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

__nv_rsqrtf.exit:                                 ; preds = %409, %411
  %.0.i = phi float [ %410, %409 ], [ %412, %411 ], !dbg !36
  %413 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %414 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %415 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %416 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %417 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %418 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %419 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %420 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i22 = icmp eq i32 %420, 0, !dbg !36
  br i1 %.not.i22, label %423, label %421, !dbg !36

421:                                              ; preds = %__nv_rsqrtf.exit
  %422 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %406), !dbg !36
  br label %__nv_rsqrtf.exit24, !dbg !36

423:                                              ; preds = %__nv_rsqrtf.exit
  %424 = tail call float @llvm.nvvm.rsqrt.approx.f(float %406), !dbg !36
  br label %__nv_rsqrtf.exit24, !dbg !36

__nv_rsqrtf.exit24:                               ; preds = %421, %423
  %.0.i23 = phi float [ %422, %421 ], [ %424, %423 ], !dbg !36
  %425 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %426 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %427 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %428 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %429 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %430 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %431 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %432 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i46 = icmp eq i32 %432, 0, !dbg !36
  br i1 %.not.i46, label %435, label %433, !dbg !36

433:                                              ; preds = %__nv_rsqrtf.exit24
  %434 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %407), !dbg !36
  br label %__nv_rsqrtf.exit48, !dbg !36

435:                                              ; preds = %__nv_rsqrtf.exit24
  %436 = tail call float @llvm.nvvm.rsqrt.approx.f(float %407), !dbg !36
  br label %__nv_rsqrtf.exit48, !dbg !36

__nv_rsqrtf.exit48:                               ; preds = %433, %435
  %.0.i47 = phi float [ %434, %433 ], [ %436, %435 ], !dbg !36
  %437 = or disjoint i32 %11, %14, !dbg !12
  %438 = icmp slt i32 %437, %6, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %439 = sext i32 %437 to i64, !dbg !40
  %440 = getelementptr float, ptr addrspace(1) %1, i64 %439, !dbg !40
  %441 = and i32 %12, 254, !dbg !41
  %442 = icmp eq i32 %441, 0, !dbg !41
  %443 = bitcast float %.0.i to i32, !dbg !41
  %444 = and i1 %442, %438, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %443, ptr addrspace(1) %440, i1 %444) #5, !dbg !41
  %445 = zext nneg i32 %20 to i64, !dbg !42
  %446 = getelementptr half, ptr addrspace(1) %4, i64 %445, !dbg !42
  %447 = zext nneg i32 %21 to i64, !dbg !42
  %448 = getelementptr half, ptr addrspace(1) %4, i64 %447, !dbg !42
  %449 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %446, i1 true) #5, !dbg !43
  %450 = extractvalue { i32, i32, i32, i32 } %449, 0, !dbg !43
  %451 = bitcast i32 %450 to <2 x half>, !dbg !43
  %452 = extractvalue { i32, i32, i32, i32 } %449, 1, !dbg !43
  %453 = bitcast i32 %452 to <2 x half>, !dbg !43
  %454 = extractvalue { i32, i32, i32, i32 } %449, 2, !dbg !43
  %455 = bitcast i32 %454 to <2 x half>, !dbg !43
  %456 = extractvalue { i32, i32, i32, i32 } %449, 3, !dbg !43
  %457 = bitcast i32 %456 to <2 x half>, !dbg !43
  %458 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %448, i1 true) #5, !dbg !43
  %459 = extractvalue { i32, i32, i32, i32 } %458, 0, !dbg !43
  %460 = bitcast i32 %459 to <2 x half>, !dbg !43
  %461 = extractvalue { i32, i32, i32, i32 } %458, 1, !dbg !43
  %462 = bitcast i32 %461 to <2 x half>, !dbg !43
  %463 = extractvalue { i32, i32, i32, i32 } %458, 2, !dbg !43
  %464 = bitcast i32 %463 to <2 x half>, !dbg !43
  %465 = extractvalue { i32, i32, i32, i32 } %458, 3, !dbg !43
  %466 = bitcast i32 %465 to <2 x half>, !dbg !43
  %467 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %112, i1 %16) #5, !dbg !44
  %468 = extractvalue { i32, i32, i32, i32 } %467, 0, !dbg !44
  %469 = bitcast i32 %468 to <2 x half>, !dbg !44
  %470 = extractvalue { i32, i32, i32, i32 } %467, 1, !dbg !44
  %471 = bitcast i32 %470 to <2 x half>, !dbg !44
  %472 = extractvalue { i32, i32, i32, i32 } %467, 2, !dbg !44
  %473 = bitcast i32 %472 to <2 x half>, !dbg !44
  %474 = extractvalue { i32, i32, i32, i32 } %467, 3, !dbg !44
  %475 = bitcast i32 %474 to <2 x half>, !dbg !44
  %476 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %113, i1 %16) #5, !dbg !44
  %477 = extractvalue { i32, i32, i32, i32 } %476, 0, !dbg !44
  %478 = bitcast i32 %477 to <2 x half>, !dbg !44
  %479 = extractvalue { i32, i32, i32, i32 } %476, 1, !dbg !44
  %480 = bitcast i32 %479 to <2 x half>, !dbg !44
  %481 = extractvalue { i32, i32, i32, i32 } %476, 2, !dbg !44
  %482 = bitcast i32 %481 to <2 x half>, !dbg !44
  %483 = extractvalue { i32, i32, i32, i32 } %476, 3, !dbg !44
  %484 = bitcast i32 %483 to <2 x half>, !dbg !44
  %485 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %114, i1 %17) #5, !dbg !44
  %486 = extractvalue { i32, i32, i32, i32 } %485, 0, !dbg !44
  %487 = bitcast i32 %486 to <2 x half>, !dbg !44
  %488 = extractvalue { i32, i32, i32, i32 } %485, 1, !dbg !44
  %489 = bitcast i32 %488 to <2 x half>, !dbg !44
  %490 = extractvalue { i32, i32, i32, i32 } %485, 2, !dbg !44
  %491 = bitcast i32 %490 to <2 x half>, !dbg !44
  %492 = extractvalue { i32, i32, i32, i32 } %485, 3, !dbg !44
  %493 = bitcast i32 %492 to <2 x half>, !dbg !44
  %494 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %115, i1 %17) #5, !dbg !44
  %495 = extractvalue { i32, i32, i32, i32 } %494, 0, !dbg !44
  %496 = bitcast i32 %495 to <2 x half>, !dbg !44
  %497 = extractvalue { i32, i32, i32, i32 } %494, 1, !dbg !44
  %498 = bitcast i32 %497 to <2 x half>, !dbg !44
  %499 = extractvalue { i32, i32, i32, i32 } %494, 2, !dbg !44
  %500 = bitcast i32 %499 to <2 x half>, !dbg !44
  %501 = extractvalue { i32, i32, i32, i32 } %494, 3, !dbg !44
  %502 = bitcast i32 %501 to <2 x half>, !dbg !44
  %503 = getelementptr half, ptr addrspace(1) %5, i64 %28, !dbg !45
  %504 = getelementptr half, ptr addrspace(1) %5, i64 %30, !dbg !45
  %505 = getelementptr half, ptr addrspace(1) %5, i64 %32, !dbg !45
  %506 = getelementptr half, ptr addrspace(1) %5, i64 %34, !dbg !45
  %507 = fpext <2 x half> %451 to <2 x float>, !dbg !46
  %508 = fpext <2 x half> %469 to <2 x float>, !dbg !47
  %509 = insertelement <2 x float> poison, float %.0.i23, i64 0, !dbg !48
  %510 = shufflevector <2 x float> %509, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !48
  %511 = fmul <2 x float> %510, %508, !dbg !48
  %512 = fmul <2 x float> %511, %507, !dbg !49
  %513 = fptrunc <2 x float> %512 to <2 x half>, !dbg !50
  %514 = fpext <2 x half> %453 to <2 x float>, !dbg !46
  %515 = fpext <2 x half> %471 to <2 x float>, !dbg !47
  %516 = fmul <2 x float> %510, %515, !dbg !48
  %517 = fmul <2 x float> %516, %514, !dbg !49
  %518 = fptrunc <2 x float> %517 to <2 x half>, !dbg !50
  %519 = fpext <2 x half> %455 to <2 x float>, !dbg !46
  %520 = fpext <2 x half> %473 to <2 x float>, !dbg !47
  %521 = fmul <2 x float> %510, %520, !dbg !48
  %522 = fmul <2 x float> %521, %519, !dbg !49
  %523 = fptrunc <2 x float> %522 to <2 x half>, !dbg !50
  %524 = fpext <2 x half> %457 to <2 x float>, !dbg !46
  %525 = fpext <2 x half> %475 to <2 x float>, !dbg !47
  %526 = fmul <2 x float> %510, %525, !dbg !48
  %527 = fmul <2 x float> %526, %524, !dbg !49
  %528 = fptrunc <2 x float> %527 to <2 x half>, !dbg !50
  %529 = fpext <2 x half> %460 to <2 x float>, !dbg !46
  %530 = fpext <2 x half> %478 to <2 x float>, !dbg !47
  %531 = fmul <2 x float> %510, %530, !dbg !48
  %532 = fmul <2 x float> %531, %529, !dbg !49
  %533 = fptrunc <2 x float> %532 to <2 x half>, !dbg !50
  %534 = fpext <2 x half> %462 to <2 x float>, !dbg !46
  %535 = fpext <2 x half> %480 to <2 x float>, !dbg !47
  %536 = fmul <2 x float> %510, %535, !dbg !48
  %537 = fmul <2 x float> %536, %534, !dbg !49
  %538 = fptrunc <2 x float> %537 to <2 x half>, !dbg !50
  %539 = fpext <2 x half> %464 to <2 x float>, !dbg !46
  %540 = fpext <2 x half> %482 to <2 x float>, !dbg !47
  %541 = fmul <2 x float> %510, %540, !dbg !48
  %542 = fmul <2 x float> %541, %539, !dbg !49
  %543 = fptrunc <2 x float> %542 to <2 x half>, !dbg !50
  %544 = fpext <2 x half> %466 to <2 x float>, !dbg !46
  %545 = fpext <2 x half> %484 to <2 x float>, !dbg !47
  %546 = fmul <2 x float> %510, %545, !dbg !48
  %547 = fmul <2 x float> %546, %544, !dbg !49
  %548 = fptrunc <2 x float> %547 to <2 x half>, !dbg !50
  %549 = fpext <2 x half> %487 to <2 x float>, !dbg !47
  %550 = insertelement <2 x float> poison, float %.0.i47, i64 0, !dbg !48
  %551 = shufflevector <2 x float> %550, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !48
  %552 = fmul <2 x float> %551, %549, !dbg !48
  %553 = fmul <2 x float> %552, %507, !dbg !49
  %554 = fptrunc <2 x float> %553 to <2 x half>, !dbg !50
  %555 = fpext <2 x half> %489 to <2 x float>, !dbg !47
  %556 = fmul <2 x float> %551, %555, !dbg !48
  %557 = fmul <2 x float> %556, %514, !dbg !49
  %558 = fptrunc <2 x float> %557 to <2 x half>, !dbg !50
  %559 = fpext <2 x half> %491 to <2 x float>, !dbg !47
  %560 = fmul <2 x float> %551, %559, !dbg !48
  %561 = fmul <2 x float> %560, %519, !dbg !49
  %562 = fptrunc <2 x float> %561 to <2 x half>, !dbg !50
  %563 = fpext <2 x half> %493 to <2 x float>, !dbg !47
  %564 = fmul <2 x float> %551, %563, !dbg !48
  %565 = fmul <2 x float> %564, %524, !dbg !49
  %566 = fptrunc <2 x float> %565 to <2 x half>, !dbg !50
  %567 = fpext <2 x half> %496 to <2 x float>, !dbg !47
  %568 = fmul <2 x float> %551, %567, !dbg !48
  %569 = fmul <2 x float> %568, %529, !dbg !49
  %570 = fptrunc <2 x float> %569 to <2 x half>, !dbg !50
  %571 = fpext <2 x half> %498 to <2 x float>, !dbg !47
  %572 = fmul <2 x float> %551, %571, !dbg !48
  %573 = fmul <2 x float> %572, %534, !dbg !49
  %574 = fptrunc <2 x float> %573 to <2 x half>, !dbg !50
  %575 = fpext <2 x half> %500 to <2 x float>, !dbg !47
  %576 = fmul <2 x float> %551, %575, !dbg !48
  %577 = fmul <2 x float> %576, %539, !dbg !49
  %578 = fptrunc <2 x float> %577 to <2 x half>, !dbg !50
  %579 = fpext <2 x half> %502 to <2 x float>, !dbg !47
  %580 = fmul <2 x float> %551, %579, !dbg !48
  %581 = fmul <2 x float> %580, %544, !dbg !49
  %582 = fptrunc <2 x float> %581 to <2 x half>, !dbg !50
  %583 = bitcast <2 x half> %513 to i32, !dbg !50
  %584 = bitcast <2 x half> %518 to i32, !dbg !50
  %585 = bitcast <2 x half> %523 to i32, !dbg !50
  %586 = bitcast <2 x half> %528 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %583, i32 %584, i32 %585, i32 %586, ptr addrspace(1) %503, i1 %16) #5, !dbg !50
  %587 = bitcast <2 x half> %533 to i32, !dbg !50
  %588 = bitcast <2 x half> %538 to i32, !dbg !50
  %589 = bitcast <2 x half> %543 to i32, !dbg !50
  %590 = bitcast <2 x half> %548 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %587, i32 %588, i32 %589, i32 %590, ptr addrspace(1) %504, i1 %16) #5, !dbg !50
  %591 = bitcast <2 x half> %554 to i32, !dbg !50
  %592 = bitcast <2 x half> %558 to i32, !dbg !50
  %593 = bitcast <2 x half> %562 to i32, !dbg !50
  %594 = bitcast <2 x half> %566 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %591, i32 %592, i32 %593, i32 %594, ptr addrspace(1) %505, i1 %17) #5, !dbg !50
  %595 = bitcast <2 x half> %570 to i32, !dbg !50
  %596 = bitcast <2 x half> %574 to i32, !dbg !50
  %597 = bitcast <2 x half> %578 to i32, !dbg !50
  %598 = bitcast <2 x half> %582 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %595, i32 %596, i32 %597, i32 %598, ptr addrspace(1) %506, i1 %17) #5, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjjwjnmyb5ylskx6e3eg4yueoaqwlte7kuhtcnu2a4ncpavggv5i.py", directory: "/tmp/torchinductor_root/jj")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8, !"reqntidx", i32 256}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 35, column: 41, scope: !6)
!17 = !DILocation(line: 35, column: 34, scope: !6)
!18 = !DILocation(line: 35, column: 51, scope: !6)
!19 = !DILocation(line: 36, column: 34, scope: !6)
!20 = !DILocation(line: 36, column: 51, scope: !6)
!21 = !DILocation(line: 37, column: 38, scope: !6)
!22 = !DILocation(line: 37, column: 55, scope: !6)
!23 = !DILocation(line: 35, column: 113, scope: !6)
!24 = !DILocation(line: 36, column: 113, scope: !6)
!25 = !DILocation(line: 37, column: 117, scope: !6)
!26 = !DILocation(line: 38, column: 22, scope: !6)
!27 = !DILocation(line: 39, column: 22, scope: !6)
!28 = !DILocation(line: 41, column: 22, scope: !6)
!29 = !DILocation(line: 45, column: 55, scope: !6)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !34)
!31 = distinct !DILexicalBlockFile(scope: !33, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!33 = distinct !DILexicalBlockFile(scope: !6, file: !32, discriminator: 0)
!34 = !DILocation(line: 46, column: 25, scope: !6)
!35 = !DILocation(line: 286, column: 36, scope: !33, inlinedAt: !34)
!36 = !DILocation(line: 51, column: 28, scope: !6)
!37 = !DILocation(line: 48, column: 20, scope: !6)
!38 = !DILocation(line: 50, column: 20, scope: !6)
!39 = !DILocation(line: 52, column: 4, scope: !6)
!40 = !DILocation(line: 53, column: 28, scope: !6)
!41 = !DILocation(line: 53, column: 40, scope: !6)
!42 = !DILocation(line: 60, column: 35, scope: !6)
!43 = !DILocation(line: 60, column: 42, scope: !6)
!44 = !DILocation(line: 61, column: 56, scope: !6)
!45 = !DILocation(line: 66, column: 29, scope: !6)
!46 = !DILocation(line: 60, column: 95, scope: !6)
!47 = !DILocation(line: 61, column: 118, scope: !6)
!48 = !DILocation(line: 63, column: 24, scope: !6)
!49 = !DILocation(line: 65, column: 24, scope: !6)
!50 = !DILocation(line: 66, column: 53, scope: !6)
!51 = !DILocation(line: 54, column: 4, scope: !6)
