; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@__cudart_i2opi_f = internal unnamed_addr addrspace(1) constant [6 x i32] [i32 1011060801, i32 -614296167, i32 -181084736, i32 -64530479, i32 1313084713, i32 -1560706194], align 4

define ptx_kernel void @triton_poi_fused_clone_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, ptr addrspace(1) readnone captures(none) %6) local_unnamed_addr !dbg !6 {
  %result.i.i.i.i = alloca [7 x i32], align 4
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %9 = shl i32 %8, 7, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = and i32 %10, 127, !dbg !11
  %12 = or disjoint i32 %9, %11, !dbg !12
  %13 = icmp slt i32 %12, %5, !dbg !13
  %14 = sdiv i32 %12, 128, !dbg !14
  %15 = mul i32 %14, 128, !dbg !15
  %.decomposed = sub i32 %12, %15, !dbg !15
  %16 = sdiv i32 %12, 1024, !dbg !16
  %17 = shl i32 %14, 9, !dbg !17
  %18 = add i32 %17, %.decomposed, !dbg !18
  %19 = sext i32 %18 to i64, !dbg !19
  %20 = getelementptr half, ptr addrspace(1) %1, i64 %19, !dbg !19
  %21 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %20, i1 %13) #4, !dbg !20
  %22 = add i32 %18, 128, !dbg !21
  %23 = sext i32 %22 to i64, !dbg !22
  %24 = getelementptr half, ptr addrspace(1) %1, i64 %23, !dbg !22
  %25 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %24, i1 %13) #4, !dbg !23
  %26 = add i32 %18, 256, !dbg !24
  %27 = sext i32 %26 to i64, !dbg !25
  %28 = getelementptr half, ptr addrspace(1) %1, i64 %27, !dbg !25
  %29 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %28, i1 %13) #4, !dbg !26
  %30 = add i32 %18, 384, !dbg !27
  %31 = sext i32 %30 to i64, !dbg !28
  %32 = getelementptr half, ptr addrspace(1) %1, i64 %31, !dbg !28
  %33 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %32, i1 %13) #4, !dbg !29
  %.lhs.trunc = trunc nsw i32 %.decomposed to i8, !dbg !30
  %34 = srem i8 %.lhs.trunc, 64, !dbg !30
  %.sext = sext i8 %34 to i32, !dbg !30
  %35 = mul i32 %4, %.sext, !dbg !31
  %36 = add i32 %35, %16, !dbg !32
  %37 = sext i32 %36 to i64, !dbg !33
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !33
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %13) #4, !dbg !34
  %40 = bitcast i32 %39 to float, !dbg !34
  %41 = icmp sgt i32 %.decomposed, 63, !dbg !35
  %42 = add i32 %12, -64, !dbg !36
  %43 = sext i32 %42 to i64, !dbg !37
  %44 = getelementptr half, ptr addrspace(1) %0, i64 %43, !dbg !37
  %45 = and i1 %41, %13, !dbg !38
  %46 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %44, i1 %45) #4, !dbg !39
  %47 = icmp slt i32 %.decomposed, 64, !dbg !40
  %48 = add i32 %12, 64, !dbg !41
  %49 = sext i32 %48 to i64, !dbg !42
  %50 = getelementptr half, ptr addrspace(1) %0, i64 %49, !dbg !42
  %51 = and i1 %47, %13, !dbg !43
  %52 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %50, i1 %51) #4, !dbg !44
  call void @llvm.lifetime.start.p0(i64 28, ptr nonnull %result.i.i.i.i), !dbg !45
  %53 = fmul float %40, 0x3FE45F3060000000, !dbg !45
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i = icmp eq i32 %54, 0, !dbg !45
  %55 = tail call i32 @llvm.nvvm.f2i.rn.ftz(float %53) #4, !dbg !45
  %56 = tail call i32 @llvm.nvvm.f2i.rn(float %53) #4, !dbg !45
  %.01.i = select i1 %.not.i, i32 %56, i32 %55, !dbg !45
  %57 = sitofp i32 %.01.i to float, !dbg !45
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not15.i = icmp eq i32 %58, 0, !dbg !45
  %59 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %57, float 0xBFF921FB40000000, float %40) #4, !dbg !45
  %60 = tail call float @llvm.nvvm.fma.rn.f(float %57, float 0xBFF921FB40000000, float %40) #4, !dbg !45
  %.02.i = select i1 %.not15.i, float %60, float %59, !dbg !45
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not16.i = icmp eq i32 %61, 0, !dbg !45
  %62 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %57, float 0xBE74442D00000000, float %.02.i) #4, !dbg !45
  %63 = tail call float @llvm.nvvm.fma.rn.f(float %57, float 0xBE74442D00000000, float %.02.i) #4, !dbg !45
  %.03.i = select i1 %.not16.i, float %63, float %62, !dbg !45
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not17.i = icmp eq i32 %64, 0, !dbg !45
  %65 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %57, float 0xBCF84698A0000000, float %.03.i) #4, !dbg !45
  %66 = tail call float @llvm.nvvm.fma.rn.f(float %57, float 0xBCF84698A0000000, float %.03.i) #4, !dbg !45
  %.04.i = select i1 %.not17.i, float %66, float %65, !dbg !45
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not18.i = icmp eq i32 %67, 0, !dbg !45
  %68 = tail call float @llvm.nvvm.fabs.ftz.f(float %40) #4, !dbg !45
  %69 = tail call float @llvm.nvvm.fabs.f(float %40) #4, !dbg !45
  %.06.i = select i1 %.not18.i, float %69, float %68, !dbg !45
  %70 = fcmp ult float %.06.i, 1.056150e+05, !dbg !45
  br i1 %70, label %__internal_trig_reduction_kernel.exit.i.i, label %__nv_isinff.exit.i.i.i, !dbg !45

__nv_isinff.exit.i.i.i:                           ; preds = %7
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not19.i = icmp eq i32 %71, 0, !dbg !45
  %.07.i = select i1 %.not19.i, float %69, float %68, !dbg !45
  %72 = fcmp oeq float %.07.i, 0x7FF0000000000000, !dbg !45
  br i1 %72, label %__nv_fmul_rn.exit.i.i.i, label %76, !dbg !45

__nv_fmul_rn.exit.i.i.i:                          ; preds = %__nv_isinff.exit.i.i.i
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not27.i = icmp eq i32 %73, 0, !dbg !45
  %74 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %40, float 0.000000e+00) #4, !dbg !45
  %75 = tail call float @llvm.nvvm.mul.rn.f(float %40, float 0.000000e+00) #4, !dbg !45
  %.08.i = select i1 %.not27.i, float %75, float %74, !dbg !45
  br label %__internal_trig_reduction_kernel.exit.i.i, !dbg !45

76:                                               ; preds = %__nv_isinff.exit.i.i.i
  %77 = lshr i32 %39, 23, !dbg !45
  %78 = and i32 %77, 224, !dbg !45
  %79 = add nsw i32 %78, -128, !dbg !45
  %80 = shl i32 %39, 8, !dbg !45
  %81 = or i32 %80, -2147483648, !dbg !45
  %82 = lshr exact i32 %79, 5, !dbg !45
  br label %83, !dbg !45

83:                                               ; preds = %76, %83
  %indvars.iv = phi i64 [ 0, %76 ], [ %indvars.iv.next, %83 ]
  %hi.i.i.i.0.i1 = phi i32 [ 0, %76 ], [ %88, %83 ]
  %84 = getelementptr inbounds nuw [6 x i32], ptr addrspace(1) @__cudart_i2opi_f, i64 0, i64 %indvars.iv, !dbg !45
  %85 = load i32, ptr addrspace(1) %84, align 4, !dbg !45
  %86 = tail call { i32, i32 } asm "{\0A\09mad.lo.cc.u32   $0, $2, $3, $4;\0A\09madc.hi.u32     $1, $2, $3,  0;\0A\09}", "=r,=r,r,r,r"(i32 %85, i32 %81, i32 %hi.i.i.i.0.i1) #5, !dbg !45, !srcloc !46
  %87 = extractvalue { i32, i32 } %86, 0, !dbg !45
  %88 = extractvalue { i32, i32 } %86, 1, !dbg !45
  %89 = getelementptr inbounds nuw [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %indvars.iv, !dbg !45
  store i32 %87, ptr %89, align 4, !dbg !45
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !45
  %exitcond.not = icmp eq i64 %indvars.iv.next, 6, !dbg !45
  br i1 %exitcond.not, label %90, label %83, !dbg !45, !llvm.loop !47

90:                                               ; preds = %83
  %91 = getelementptr inbounds nuw i8, ptr %result.i.i.i.i, i64 24, !dbg !45
  store i32 %88, ptr %91, align 4, !dbg !45
  %92 = sub nsw i32 6, %82, !dbg !45
  %93 = sext i32 %92 to i64, !dbg !45
  %94 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %93, !dbg !45
  %95 = load i32, ptr %94, align 4, !dbg !45
  %96 = sub nsw i32 5, %82, !dbg !45
  %97 = sext i32 %96 to i64, !dbg !45
  %98 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %97, !dbg !45
  %99 = load i32, ptr %98, align 4, !dbg !45
  %100 = freeze i32 %99, !dbg !45
  %101 = and i32 %39, 260046848, !dbg !45
  %.not20.i = icmp eq i32 %101, 0, !dbg !45
  br i1 %.not20.i, label %__internal_trig_reduction_slowpath.exit.i.i.i, label %102, !dbg !45

102:                                              ; preds = %90
  %103 = sub nsw i32 4, %82, !dbg !45
  %104 = sext i32 %103 to i64, !dbg !45
  %105 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %104, !dbg !45
  %106 = load i32, ptr %105, align 4, !dbg !45
  %107 = tail call i32 @llvm.fshl.i32(i32 %100, i32 %106, i32 %77), !dbg !45
  br label %__internal_trig_reduction_slowpath.exit.i.i.i, !dbg !45

__internal_trig_reduction_slowpath.exit.i.i.i:    ; preds = %102, %90
  %lo.i.i.i.0.i = phi i32 [ %107, %102 ], [ %100, %90 ], !dbg !45
  %108 = tail call i32 @llvm.fshl.i32(i32 %95, i32 %100, i32 %77), !dbg !45
  %109 = lshr i32 %108, 30, !dbg !45
  %110 = tail call i32 @llvm.fshl.i32(i32 %108, i32 %lo.i.i.i.0.i, i32 2), !dbg !45
  %111 = shl i32 %lo.i.i.i.0.i, 2, !dbg !45
  %112 = lshr i32 %110, 31, !dbg !45
  %113 = add nuw nsw i32 %112, %109, !dbg !45
  %114 = sub nsw i32 0, %113, !dbg !45
  %.not2123.i = icmp slt i32 %39, 0, !dbg !45
  %spec.select.i = select i1 %.not2123.i, i32 %114, i32 %113, !dbg !45
  %115 = xor i32 %110, %39, !dbg !45
  %.lobit.i = ashr i32 %110, 31, !dbg !45
  %hi.i.i.i.2.i = xor i32 %.lobit.i, %110, !dbg !45
  %lo.i.i.i.1.i = xor i32 %.lobit.i, %111, !dbg !45
  %116 = zext i32 %hi.i.i.i.2.i to i64, !dbg !45
  %117 = shl nuw i64 %116, 32, !dbg !45
  %118 = zext i32 %lo.i.i.i.1.i to i64, !dbg !45
  %119 = or disjoint i64 %117, %118, !dbg !45
  %120 = sitofp i64 %119 to double, !dbg !45
  %121 = fmul double %120, 0x3BF921FB54442D19, !dbg !45
  %122 = fptrunc double %121 to float, !dbg !45
  %123 = fneg float %122, !dbg !45
  %.not2526.i = icmp slt i32 %115, 0, !dbg !45
  %r.i.i.i.0.i = select i1 %.not2526.i, float %123, float %122, !dbg !45
  br label %__internal_trig_reduction_kernel.exit.i.i, !dbg !45

__internal_trig_reduction_kernel.exit.i.i:        ; preds = %__internal_trig_reduction_slowpath.exit.i.i.i, %__nv_fmul_rn.exit.i.i.i, %7
  %i.i.1.i = phi i32 [ %.01.i, %7 ], [ 0, %__nv_fmul_rn.exit.i.i.i ], [ %spec.select.i, %__internal_trig_reduction_slowpath.exit.i.i.i ], !dbg !45
  %t.i.i.1.i = phi float [ %.04.i, %7 ], [ %.08.i, %__nv_fmul_rn.exit.i.i.i ], [ %r.i.i.i.0.i, %__internal_trig_reduction_slowpath.exit.i.i.i ], !dbg !45
  %124 = add i32 %i.i.1.i, 1, !dbg !45
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not28.i = icmp eq i32 %125, 0, !dbg !45
  %126 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %t.i.i.1.i, float %t.i.i.1.i) #4, !dbg !45
  %127 = tail call float @llvm.nvvm.mul.rn.f(float %t.i.i.1.i, float %t.i.i.1.i) #4, !dbg !45
  %.011.i = select i1 %.not28.i, float %127, float %126, !dbg !45
  %128 = and i32 %i.i.1.i, 1, !dbg !45
  %.not29.not.i = icmp eq i32 %128, 0, !dbg !45
  %129 = select i1 %.not29.not.i, float 1.000000e+00, float %t.i.i.1.i, !dbg !45
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not30.i = icmp eq i32 %130, 0, !dbg !45
  %131 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %129, float 0.000000e+00) #4, !dbg !45
  %132 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %129, float 0.000000e+00) #4, !dbg !45
  %.012.i = select i1 %.not30.i, float %132, float %131, !dbg !45
  br i1 %.not29.not.i, label %__internal_fmad.exit1.i.i.i, label %__internal_fmad.exit2.i.i.i, !dbg !45

__internal_fmad.exit1.i.i.i:                      ; preds = %__internal_trig_reduction_kernel.exit.i.i
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not31.i = icmp eq i32 %133, 0, !dbg !45
  %134 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3EF9758000000000, float %.011.i, float 0xBF56C0FDA0000000) #4, !dbg !45
  %135 = tail call float @llvm.nvvm.fma.rn.f(float 0x3EF9758000000000, float %.011.i, float 0xBF56C0FDA0000000) #4, !dbg !45
  %.013.i = select i1 %.not31.i, float %135, float %134, !dbg !45
  br label %__internal_fmad.exit2.i.i.i, !dbg !45

__internal_fmad.exit2.i.i.i:                      ; preds = %__internal_fmad.exit1.i.i.i, %__internal_trig_reduction_kernel.exit.i.i
  %136 = phi float [ 0xBFDFFFFFE0000000, %__internal_fmad.exit1.i.i.i ], [ 0xBFC5555500000000, %__internal_trig_reduction_kernel.exit.i.i ], !dbg !45
  %137 = phi float [ 0x3FA5555760000000, %__internal_fmad.exit1.i.i.i ], [ 0x3F8110BC80000000, %__internal_trig_reduction_kernel.exit.i.i ], !dbg !45
  %138 = phi float [ %.013.i, %__internal_fmad.exit1.i.i.i ], [ 0xBF29A82A60000000, %__internal_trig_reduction_kernel.exit.i.i ], !dbg !45
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not32.i = icmp eq i32 %139, 0, !dbg !45
  %140 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %138, float %.011.i, float %137) #4, !dbg !45
  %141 = tail call float @llvm.nvvm.fma.rn.f(float %138, float %.011.i, float %137) #4, !dbg !45
  %.010.i = select i1 %.not32.i, float %141, float %140, !dbg !45
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not33.i = icmp eq i32 %142, 0, !dbg !45
  %143 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %.011.i, float %136) #4, !dbg !45
  %144 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %.011.i, float %136) #4, !dbg !45
  %.09.i = select i1 %.not33.i, float %144, float %143, !dbg !45
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not34.i = icmp eq i32 %145, 0, !dbg !45
  %146 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %.012.i, float %129) #4, !dbg !45
  %147 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %.012.i, float %129) #4, !dbg !45
  %.05.i = select i1 %.not34.i, float %147, float %146, !dbg !45
  %148 = and i32 %124, 2, !dbg !45
  %.not35.i = icmp eq i32 %148, 0, !dbg !45
  br i1 %.not35.i, label %__nv_cosf.exit, label %__internal_fmad.exit5.i.i.i, !dbg !45

__internal_fmad.exit5.i.i.i:                      ; preds = %__internal_fmad.exit2.i.i.i
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not36.i = icmp eq i32 %149, 0, !dbg !45
  %150 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float -1.000000e+00, float 0.000000e+00) #4, !dbg !45
  %151 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float -1.000000e+00, float 0.000000e+00) #4, !dbg !45
  %.0.i = select i1 %.not36.i, float %151, float %150, !dbg !45
  br label %__nv_cosf.exit, !dbg !45

__nv_cosf.exit:                                   ; preds = %__internal_fmad.exit2.i.i.i, %__internal_fmad.exit5.i.i.i
  %z.i.i.0.i = phi float [ %.0.i, %__internal_fmad.exit5.i.i.i ], [ %.05.i, %__internal_fmad.exit2.i.i.i ], !dbg !45
  %152 = bitcast i16 %21 to half, !dbg !20
  %153 = fpext half %152 to float, !dbg !49
  %154 = bitcast i16 %25 to half, !dbg !23
  %155 = fpext half %154 to float, !dbg !50
  %156 = fadd float %153, %155, !dbg !51
  %157 = bitcast i16 %29 to half, !dbg !26
  %158 = fpext half %157 to float, !dbg !52
  %159 = fadd float %156, %158, !dbg !53
  %160 = bitcast i16 %33 to half, !dbg !29
  %161 = fpext half %160 to float, !dbg !54
  %162 = fadd float %159, %161, !dbg !55
  %163 = bitcast i16 %46 to half, !dbg !39
  %164 = fpext half %163 to float, !dbg !56
  %165 = fsub float 0.000000e+00, %164, !dbg !57
  %166 = select i1 %41, float %165, float 0.000000e+00, !dbg !58
  %167 = bitcast i16 %52 to half, !dbg !44
  %168 = fpext half %167 to float, !dbg !59
  %169 = select i1 %47, float %168, float 0.000000e+00, !dbg !60
  %170 = fadd float %166, %169, !dbg !61
  call void @llvm.lifetime.end.p0(i64 28, ptr nonnull %result.i.i.i.i), !dbg !45
  %171 = fmul float %162, %z.i.i.0.i, !dbg !62
  %172 = fadd float %170, %171, !dbg !63
  %173 = sext i32 %12 to i64, !dbg !64
  %174 = getelementptr half, ptr addrspace(1) %3, i64 %173, !dbg !64
  %175 = fptrunc float %172 to half, !dbg !65
  %176 = bitcast half %175 to i16, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %176, ptr addrspace(1) %174, i1 %13) #4, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.nvvm.f2i.rn.ftz(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.nvvm.f2i.rn(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.mul.rn.ftz.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.mul.rn.f(float, float) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.fshl.i32(i32, i32, i32) #2

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr captures(none)) #3

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr captures(none)) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { nounwind }
attributes #5 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c33pslorb5xd2k34plkaxwh25sawddifcuabgrgv6gfhofwkut75.py", directory: "/tmp/torchinductor_root/33")
!4 = !{ptr @triton_poi_fused_clone_8, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_poi_fused_clone_8", linkageName: "triton_poi_fused_clone_8", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 19, column: 28, scope: !6)
!10 = !DILocation(line: 19, column: 33, scope: !6)
!11 = !DILocation(line: 20, column: 36, scope: !6)
!12 = !DILocation(line: 20, column: 23, scope: !6)
!13 = !DILocation(line: 21, column: 21, scope: !6)
!14 = !DILocation(line: 24, column: 19, scope: !6)
!15 = !DILocation(line: 22, column: 19, scope: !6)
!16 = !DILocation(line: 25, column: 19, scope: !6)
!17 = !DILocation(line: 26, column: 40, scope: !6)
!18 = !DILocation(line: 26, column: 36, scope: !6)
!19 = !DILocation(line: 26, column: 31, scope: !6)
!20 = !DILocation(line: 26, column: 45, scope: !6)
!21 = !DILocation(line: 27, column: 42, scope: !6)
!22 = !DILocation(line: 27, column: 31, scope: !6)
!23 = !DILocation(line: 27, column: 51, scope: !6)
!24 = !DILocation(line: 28, column: 42, scope: !6)
!25 = !DILocation(line: 28, column: 31, scope: !6)
!26 = !DILocation(line: 28, column: 51, scope: !6)
!27 = !DILocation(line: 29, column: 42, scope: !6)
!28 = !DILocation(line: 29, column: 31, scope: !6)
!29 = !DILocation(line: 29, column: 51, scope: !6)
!30 = !DILocation(line: 30, column: 47, scope: !6)
!31 = !DILocation(line: 30, column: 42, scope: !6)
!32 = !DILocation(line: 30, column: 36, scope: !6)
!33 = !DILocation(line: 30, column: 31, scope: !6)
!34 = !DILocation(line: 30, column: 54, scope: !6)
!35 = !DILocation(line: 33, column: 19, scope: !6)
!36 = !DILocation(line: 34, column: 38, scope: !6)
!37 = !DILocation(line: 34, column: 30, scope: !6)
!38 = !DILocation(line: 34, column: 51, scope: !6)
!39 = !DILocation(line: 34, column: 43, scope: !6)
!40 = !DILocation(line: 40, column: 18, scope: !6)
!41 = !DILocation(line: 41, column: 36, scope: !6)
!42 = !DILocation(line: 41, column: 31, scope: !6)
!43 = !DILocation(line: 41, column: 49, scope: !6)
!44 = !DILocation(line: 41, column: 41, scope: !6)
!45 = !DILocation(line: 47, column: 24, scope: !6)
!46 = !{i32 30999, i32 31003, i32 31048, i32 31093}
!47 = distinct !{!47, !48}
!48 = !{!"llvm.loop.unroll.count", i32 1}
!49 = !DILocation(line: 26, column: 55, scope: !6)
!50 = !DILocation(line: 27, column: 61, scope: !6)
!51 = !DILocation(line: 44, column: 20, scope: !6)
!52 = !DILocation(line: 28, column: 61, scope: !6)
!53 = !DILocation(line: 45, column: 20, scope: !6)
!54 = !DILocation(line: 29, column: 61, scope: !6)
!55 = !DILocation(line: 46, column: 20, scope: !6)
!56 = !DILocation(line: 34, column: 71, scope: !6)
!57 = !DILocation(line: 35, column: 12, scope: !6)
!58 = !DILocation(line: 0, scope: !6)
!59 = !DILocation(line: 41, column: 69, scope: !6)
!60 = !DILocation(line: 42, column: 34, scope: !6)
!61 = !DILocation(line: 43, column: 19, scope: !6)
!62 = !DILocation(line: 51, column: 20, scope: !6)
!63 = !DILocation(line: 52, column: 20, scope: !6)
!64 = !DILocation(line: 53, column: 25, scope: !6)
!65 = !DILocation(line: 53, column: 37, scope: !6)
!66 = !DILocation(line: 53, column: 4, scope: !6)
