; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [73 x i8] c"./local_cache/yi/cyihme7t354xdekku5rks7waotqdnz3mpo47q3uhqjtr5ixrgolb.py\00"
@assertMessage_0 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp4 < 128256\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !6 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define ptx_kernel void @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !10 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit2 = lshr i32 %11, 4, !dbg !12
  %12 = and i32 %.lobit2, 3, !dbg !12
  %13 = and i32 %11, 3, !dbg !12
  %14 = shl i32 %11, 2, !dbg !13
  %15 = and i32 %14, 60, !dbg !13
  %16 = and i32 %11, 63, !dbg !13
  %17 = shl i32 %10, 2, !dbg !14
  %18 = or disjoint i32 %12, %17, !dbg !15
  %19 = or disjoint i32 %17, 1, !dbg !15
  %20 = or disjoint i32 %17, 2, !dbg !15
  %21 = or disjoint i32 %17, 3, !dbg !15
  %22 = or disjoint i32 %17, %13, !dbg !15
  %23 = icmp slt i32 %18, %6, !dbg !16
  %24 = insertelement <4 x i32> poison, i32 %17, i64 0, !dbg !16
  %25 = insertelement <4 x i32> %24, i32 %19, i64 1, !dbg !16
  %26 = insertelement <4 x i32> %25, i32 %20, i64 2, !dbg !16
  %27 = insertelement <4 x i32> %26, i32 %21, i64 3, !dbg !16
  %28 = insertelement <4 x i32> poison, i32 %6, i64 0, !dbg !16
  %29 = shufflevector <4 x i32> %28, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !16
  %30 = icmp slt <4 x i32> %27, %29, !dbg !16
  %31 = icmp slt i32 %22, %6, !dbg !16
  %32 = sext i32 %18 to i64, !dbg !17
  %33 = getelementptr i64, ptr addrspace(1) %1, i64 %32, !dbg !17
  %34 = sext i32 %17 to i64, !dbg !17
  %35 = getelementptr i64, ptr addrspace(1) %1, i64 %34, !dbg !17
  %36 = sext i32 %19 to i64, !dbg !17
  %37 = getelementptr i64, ptr addrspace(1) %1, i64 %36, !dbg !17
  %38 = sext i32 %20 to i64, !dbg !17
  %39 = getelementptr i64, ptr addrspace(1) %1, i64 %38, !dbg !17
  %40 = sext i32 %21 to i64, !dbg !17
  %41 = getelementptr i64, ptr addrspace(1) %1, i64 %40, !dbg !17
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 %23) #6, !dbg !18
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 %23) #6, !dbg !18
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 %23) #6, !dbg !18
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 %23) #6, !dbg !18
  %46 = extractelement <4 x i1> %30, i64 0, !dbg !18
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 %46) #6, !dbg !18
  %48 = extractelement <4 x i1> %30, i64 1, !dbg !18
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 %48) #6, !dbg !18
  %50 = extractelement <4 x i1> %30, i64 2, !dbg !18
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 %50) #6, !dbg !18
  %52 = extractelement <4 x i1> %30, i64 3, !dbg !18
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %52) #6, !dbg !18
  %54 = insertelement <4 x i64> poison, i64 %47, i64 0, !dbg !19
  %55 = insertelement <4 x i64> %54, i64 %49, i64 1, !dbg !19
  %56 = insertelement <4 x i64> %55, i64 %51, i64 2, !dbg !19
  %57 = insertelement <4 x i64> %56, i64 %53, i64 3, !dbg !19
  %58 = add <4 x i64> %57, splat (i64 128256), !dbg !19
  %59 = icmp slt <4 x i64> %57, zeroinitializer, !dbg !20
  %60 = select <4 x i1> %59, <4 x i64> %58, <4 x i64> %57, !dbg !21
  %61 = icmp ugt <4 x i64> %60, splat (i64 128255), !dbg !22
  %62 = and <4 x i1> %30, %61, !dbg !23
  %63 = shl i32 %18, 12, !dbg !24
  %64 = bitcast <4 x i1> %62 to i4
  %.not = icmp eq i4 %64, 0
  %invariant.op = or disjoint i32 %15, %63, !dbg !25
  br i1 %.not, label %.split.preheader, label %106, !dbg !26

.split.preheader:                                 ; preds = %9
  %65 = icmp slt i64 %45, 0, !dbg !20
  %66 = shl i64 %45, 12, !dbg !27
  %67 = add i64 %66, 525336576, !dbg !27
  %68 = select i1 %65, i64 %67, i64 %66, !dbg !27
  %69 = zext nneg i32 %15 to i64, !dbg !25
  %70 = or disjoint i64 %68, %69
  br label %.split, !dbg !25

.split:                                           ; preds = %.split.preheader, %.split
  %indvars.iv = phi i64 [ 0, %.split.preheader ], [ %indvars.iv.next, %.split ]
  %71 = phi float [ 0.000000e+00, %.split.preheader ], [ %98, %.split ]
  %72 = phi float [ 0.000000e+00, %.split.preheader ], [ %99, %.split ]
  %73 = phi float [ 0.000000e+00, %.split.preheader ], [ %100, %.split ]
  %74 = phi float [ 0.000000e+00, %.split.preheader ], [ %101, %.split ]
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %75 = or i64 %70, %indvars.iv, !dbg !28
  %76 = getelementptr half, ptr addrspace(1) %2, i64 %75, !dbg !29
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %76, i1 %23) #6, !dbg !30
  %78 = extractvalue { i32, i32 } %77, 0, !dbg !30
  %79 = bitcast i32 %78 to <2 x half>, !dbg !30
  %80 = extractvalue { i32, i32 } %77, 1, !dbg !30
  %81 = bitcast i32 %80 to <2 x half>, !dbg !30
  %82 = extractelement <2 x half> %79, i64 0, !dbg !30
  %83 = extractelement <2 x half> %79, i64 1, !dbg !30
  %84 = extractelement <2 x half> %81, i64 0, !dbg !30
  %85 = extractelement <2 x half> %81, i64 1, !dbg !30
  %86 = fpext half %82 to float, !dbg !31
  %87 = fpext half %83 to float, !dbg !31
  %88 = fpext half %84 to float, !dbg !31
  %89 = fpext half %85 to float, !dbg !31
  %90 = fmul float %86, %86, !dbg !32
  %91 = fmul float %87, %87, !dbg !32
  %92 = fmul float %88, %88, !dbg !32
  %93 = fmul float %89, %89, !dbg !32
  %94 = fadd float %71, %90, !dbg !33
  %95 = fadd float %72, %91, !dbg !33
  %96 = fadd float %73, %92, !dbg !33
  %97 = fadd float %74, %93, !dbg !33
  %98 = select i1 %23, float %94, float %71, !dbg !34
  %99 = select i1 %23, float %95, float %72, !dbg !34
  %100 = select i1 %23, float %96, float %73, !dbg !34
  %101 = select i1 %23, float %97, float %74, !dbg !34
  %102 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %invariant.op, %102
  %103 = sext i32 %.reass to i64, !dbg !35
  %104 = getelementptr half, ptr addrspace(1) %4, i64 %103, !dbg !35
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %78, i32 %80, ptr addrspace(1) %104, i1 %23) #6, !dbg !36
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !25
  %105 = icmp samesign ult i64 %indvars.iv, 4032, !dbg !25
  br i1 %105, label %.split, label %107, !dbg !25

106:                                              ; preds = %9
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !26
  unreachable, !dbg !26

107:                                              ; preds = %.split
  %108 = fadd float %98, %99, !dbg !37
  %109 = fadd float %100, %108, !dbg !37
  %110 = fadd float %101, %109, !dbg !37
  %111 = bitcast float %110 to i32, !dbg !42
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 8, i32 31), !dbg !42
  %113 = bitcast i32 %112 to float, !dbg !42
  %114 = fadd float %110, %113, !dbg !37
  %115 = bitcast float %114 to i32, !dbg !42
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 4, i32 31), !dbg !42
  %117 = bitcast i32 %116 to float, !dbg !42
  %118 = fadd float %114, %117, !dbg !37
  %119 = bitcast float %118 to i32, !dbg !42
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 2, i32 31), !dbg !42
  %121 = bitcast i32 %120 to float, !dbg !42
  %122 = fadd float %118, %121, !dbg !37
  %123 = bitcast float %122 to i32, !dbg !42
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 1, i32 31), !dbg !42
  %125 = bitcast i32 %124 to float, !dbg !42
  %126 = fadd float %122, %125, !dbg !37
  %127 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %12, !dbg !43
  %128 = bitcast float %126 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %128, i1 true) #6, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %129 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %13, !dbg !43
  %130 = load float, ptr addrspace(3) %129, align 4, !dbg !43
  %131 = tail call float @llvm.nvvm.div.full(float %130, float 4.096000e+03), !dbg !44
  %132 = tail call float @llvm.nvvm.div.full(float %126, float 4.096000e+03), !dbg !44
  %133 = fadd float %131, 0x3EE4F8B580000000, !dbg !45
  %134 = fadd float %132, 0x3EE4F8B580000000, !dbg !45
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %.not.i = icmp eq i32 %135, 0, !dbg !43
  br i1 %.not.i, label %138, label %136, !dbg !43

136:                                              ; preds = %107
  %137 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %133), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

138:                                              ; preds = %107
  %139 = tail call float @llvm.nvvm.rsqrt.approx.f(float %133), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

__nv_rsqrtf.exit:                                 ; preds = %136, %138
  %.0.i = phi float [ %137, %136 ], [ %139, %138 ], !dbg !43
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !43
  %.not.i20 = icmp eq i32 %143, 0, !dbg !43
  br i1 %.not.i20, label %146, label %144, !dbg !43

144:                                              ; preds = %__nv_rsqrtf.exit
  %145 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %134), !dbg !43
  br label %__nv_rsqrtf.exit22, !dbg !43

146:                                              ; preds = %__nv_rsqrtf.exit
  %147 = tail call float @llvm.nvvm.rsqrt.approx.f(float %134), !dbg !43
  br label %__nv_rsqrtf.exit22, !dbg !43

__nv_rsqrtf.exit22:                               ; preds = %144, %146
  %.0.i21 = phi float [ %145, %144 ], [ %147, %146 ], !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %148 = sext i32 %22 to i64, !dbg !47
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !47
  %150 = and i32 %11, 60, !dbg !48
  %151 = icmp eq i32 %150, 0, !dbg !48
  %152 = bitcast float %.0.i to i32, !dbg !48
  %153 = and i1 %151, %31, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %152, ptr addrspace(1) %149, i1 %153) #6, !dbg !48
  %154 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %16
  %155 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %15
  %156 = zext nneg i32 %16 to i64, !dbg !49
  %157 = getelementptr inbounds nuw i8, ptr addrspace(3) %155, i32 8
  %158 = insertelement <2 x float> poison, float %.0.i21, i64 0, !dbg !50
  %159 = shufflevector <2 x float> %158, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  br label %160, !dbg !49

160:                                              ; preds = %__nv_rsqrtf.exit22, %160
  %indvars.iv27 = phi i64 [ 0, %__nv_rsqrtf.exit22 ], [ %indvars.iv.next28, %160 ]
  %161 = or disjoint i64 %indvars.iv27, %156, !dbg !51
  %162 = getelementptr half, ptr addrspace(1) %3, i64 %161, !dbg !52
  %163 = tail call i16 asm sideeffect "mov.u16 $0, $1;\0A\09@$3 ld.global.L1::evict_last.b16 { $0 }, [ $2 + 0 ];", "=c,c,l,b"(i16 0, ptr addrspace(1) %162, i1 true) #6, !dbg !53
  %164 = bitcast i16 %163 to half, !dbg !53
  %165 = fpext half %164 to float, !dbg !54
  %166 = trunc nuw nsw i64 %indvars.iv27 to i32, !dbg !55
  %167 = or i32 %invariant.op, %166, !dbg !55
  %168 = sext i32 %167 to i64, !dbg !56
  %169 = getelementptr half, ptr addrspace(1) %4, i64 %168, !dbg !56
  %170 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %169, i1 %23) #6, !dbg !57
  %171 = extractvalue { i32, i32 } %170, 0, !dbg !57
  %172 = bitcast i32 %171 to <2 x half>, !dbg !57
  %173 = extractvalue { i32, i32 } %170, 1, !dbg !57
  %174 = bitcast i32 %173 to <2 x half>, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %175 = bitcast float %165 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %175, i1 true) #6, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %176 = getelementptr half, ptr addrspace(1) %5, i64 %168, !dbg !59
  %177 = fpext <2 x half> %172 to <2 x float>, !dbg !60
  %178 = fmul <2 x float> %159, %177, !dbg !50
  %179 = load <2 x float>, ptr addrspace(3) %155, align 16, !dbg !58
  %180 = fmul <2 x float> %179, %178, !dbg !58
  %181 = fptrunc <2 x float> %180 to <2 x half>, !dbg !61
  %182 = fpext <2 x half> %174 to <2 x float>, !dbg !60
  %183 = fmul <2 x float> %159, %182, !dbg !50
  %184 = load <2 x float>, ptr addrspace(3) %157, align 8, !dbg !58
  %185 = fmul <2 x float> %184, %183, !dbg !58
  %186 = fptrunc <2 x float> %185 to <2 x half>, !dbg !61
  %187 = bitcast <2 x half> %181 to i32, !dbg !61
  %188 = bitcast <2 x half> %186 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %187, i32 %188, ptr addrspace(1) %176, i1 %23) #6, !dbg !61
  %indvars.iv.next28 = add nuw nsw i64 %indvars.iv27, 64, !dbg !49
  %189 = icmp samesign ult i64 %indvars.iv27, 4032, !dbg !49
  br i1 %189, label %160, label %190, !dbg !49

190:                                              ; preds = %160
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #4

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyihme7t354xdekku5rks7waotqdnz3mpo47q3uhqjtr5ixrgolb.py", directory: "./local_cache/yi")
!4 = !{ptr @triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0, !"reqntidx", i32 64}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !7, file: !7, type: !8, spFlags: DISPFlagOptimized)
!7 = !DIFile(filename: "<unknown>", directory: "")
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", linkageName: "triton_red_fused__to_copy_add_embedding_mean_mul_pow_rsqrt_0", scope: !3, file: !3, line: 18, type: !8, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!11 = !DILocation(line: 22, column: 28, scope: !10)
!12 = !DILocation(line: 23, column: 44, scope: !10)
!13 = !DILocation(line: 25, column: 37, scope: !10)
!14 = !DILocation(line: 22, column: 33, scope: !10)
!15 = !DILocation(line: 23, column: 23, scope: !10)
!16 = !DILocation(line: 24, column: 21, scope: !10)
!17 = !DILocation(line: 28, column: 30, scope: !10)
!18 = !DILocation(line: 28, column: 35, scope: !10)
!19 = !DILocation(line: 37, column: 22, scope: !10)
!20 = !DILocation(line: 38, column: 22, scope: !10)
!21 = !DILocation(line: 39, column: 36, scope: !10)
!22 = !DILocation(line: 40, column: 41, scope: !10)
!23 = !DILocation(line: 40, column: 59, scope: !10)
!24 = !DILocation(line: 47, column: 41, scope: !10)
!25 = !DILocation(line: 30, column: 40, scope: !10)
!26 = !DILocation(line: 40, column: 69, scope: !10)
!27 = !DILocation(line: 41, column: 46, scope: !10)
!28 = !DILocation(line: 41, column: 41, scope: !10)
!29 = !DILocation(line: 41, column: 34, scope: !10)
!30 = !DILocation(line: 41, column: 53, scope: !10)
!31 = !DILocation(line: 41, column: 115, scope: !10)
!32 = !DILocation(line: 43, column: 22, scope: !10)
!33 = !DILocation(line: 45, column: 25, scope: !10)
!34 = !DILocation(line: 46, column: 50, scope: !10)
!35 = !DILocation(line: 47, column: 29, scope: !10)
!36 = !DILocation(line: 47, column: 52, scope: !10)
!37 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !41)
!38 = distinct !DILexicalBlockFile(scope: !40, file: !39, discriminator: 0)
!39 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!40 = distinct !DILexicalBlockFile(scope: !10, file: !39, discriminator: 0)
!41 = !DILocation(line: 48, column: 27, scope: !10)
!42 = !DILocation(line: 286, column: 36, scope: !40, inlinedAt: !41)
!43 = !DILocation(line: 53, column: 28, scope: !10)
!44 = !DILocation(line: 50, column: 21, scope: !10)
!45 = !DILocation(line: 52, column: 20, scope: !10)
!46 = !DILocation(line: 54, column: 4, scope: !10)
!47 = !DILocation(line: 55, column: 28, scope: !10)
!48 = !DILocation(line: 55, column: 40, scope: !10)
!49 = !DILocation(line: 56, column: 40, scope: !10)
!50 = !DILocation(line: 65, column: 24, scope: !10)
!51 = !DILocation(line: 57, column: 31, scope: !10)
!52 = !DILocation(line: 62, column: 35, scope: !10)
!53 = !DILocation(line: 62, column: 42, scope: !10)
!54 = !DILocation(line: 62, column: 95, scope: !10)
!55 = !DILocation(line: 63, column: 43, scope: !10)
!56 = !DILocation(line: 63, column: 36, scope: !10)
!57 = !DILocation(line: 63, column: 53, scope: !10)
!58 = !DILocation(line: 67, column: 24, scope: !10)
!59 = !DILocation(line: 68, column: 29, scope: !10)
!60 = !DILocation(line: 63, column: 115, scope: !10)
!61 = !DILocation(line: 68, column: 53, scope: !10)
!62 = !DILocation(line: 56, column: 4, scope: !10)
