; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = icmp slt i32 %10, %6, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = and i32 %12, 31, !dbg !11
  %14 = lshr i32 %12, 5, !dbg !11
  %15 = shl i32 %12, 3, !dbg !11
  %16 = and i32 %15, 1016, !dbg !11
  %17 = or disjoint i32 %16, 1024, !dbg !11
  %18 = or disjoint i32 %16, 2048, !dbg !11
  %19 = or disjoint i32 %16, 3072, !dbg !11
  %20 = shl i32 %10, 12, !dbg !12
  %21 = or disjoint i32 %16, %20, !dbg !13
  %22 = or disjoint i32 %17, %20, !dbg !13
  %23 = or disjoint i32 %18, %20, !dbg !13
  %24 = or disjoint i32 %19, %20, !dbg !13
  %25 = sext i32 %21 to i64, !dbg !14
  %26 = getelementptr half, ptr addrspace(1) %2, i64 %25, !dbg !14
  %27 = sext i32 %22 to i64, !dbg !14
  %28 = getelementptr half, ptr addrspace(1) %2, i64 %27, !dbg !14
  %29 = sext i32 %23 to i64, !dbg !14
  %30 = getelementptr half, ptr addrspace(1) %2, i64 %29, !dbg !14
  %31 = sext i32 %24 to i64, !dbg !14
  %32 = getelementptr half, ptr addrspace(1) %2, i64 %31, !dbg !14
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %26, i1 %11) #5, !dbg !15
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !15
  %35 = bitcast i32 %34 to <2 x half>, !dbg !15
  %36 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !15
  %37 = bitcast i32 %36 to <2 x half>, !dbg !15
  %38 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !15
  %39 = bitcast i32 %38 to <2 x half>, !dbg !15
  %40 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !15
  %41 = bitcast i32 %40 to <2 x half>, !dbg !15
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %28, i1 %11) #5, !dbg !15
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !15
  %44 = bitcast i32 %43 to <2 x half>, !dbg !15
  %45 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !15
  %46 = bitcast i32 %45 to <2 x half>, !dbg !15
  %47 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !15
  %48 = bitcast i32 %47 to <2 x half>, !dbg !15
  %49 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !15
  %50 = bitcast i32 %49 to <2 x half>, !dbg !15
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %30, i1 %11) #5, !dbg !15
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !15
  %53 = bitcast i32 %52 to <2 x half>, !dbg !15
  %54 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !15
  %55 = bitcast i32 %54 to <2 x half>, !dbg !15
  %56 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !15
  %57 = bitcast i32 %56 to <2 x half>, !dbg !15
  %58 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !15
  %59 = bitcast i32 %58 to <2 x half>, !dbg !15
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %32, i1 %11) #5, !dbg !15
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !15
  %62 = bitcast i32 %61 to <2 x half>, !dbg !15
  %63 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !15
  %64 = bitcast i32 %63 to <2 x half>, !dbg !15
  %65 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !15
  %66 = bitcast i32 %65 to <2 x half>, !dbg !15
  %67 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !15
  %68 = bitcast i32 %67 to <2 x half>, !dbg !15
  %69 = getelementptr half, ptr addrspace(1) %3, i64 %25, !dbg !16
  %70 = getelementptr half, ptr addrspace(1) %3, i64 %27, !dbg !16
  %71 = getelementptr half, ptr addrspace(1) %3, i64 %29, !dbg !16
  %72 = getelementptr half, ptr addrspace(1) %3, i64 %31, !dbg !16
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %69, i1 %11) #5, !dbg !17
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !17
  %75 = bitcast i32 %74 to <2 x half>, !dbg !17
  %76 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !17
  %77 = bitcast i32 %76 to <2 x half>, !dbg !17
  %78 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !17
  %79 = bitcast i32 %78 to <2 x half>, !dbg !17
  %80 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !17
  %81 = bitcast i32 %80 to <2 x half>, !dbg !17
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %70, i1 %11) #5, !dbg !17
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !17
  %84 = bitcast i32 %83 to <2 x half>, !dbg !17
  %85 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !17
  %86 = bitcast i32 %85 to <2 x half>, !dbg !17
  %87 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !17
  %88 = bitcast i32 %87 to <2 x half>, !dbg !17
  %89 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !17
  %90 = bitcast i32 %89 to <2 x half>, !dbg !17
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %71, i1 %11) #5, !dbg !17
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !17
  %93 = bitcast i32 %92 to <2 x half>, !dbg !17
  %94 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !17
  %95 = bitcast i32 %94 to <2 x half>, !dbg !17
  %96 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !17
  %97 = bitcast i32 %96 to <2 x half>, !dbg !17
  %98 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !17
  %99 = bitcast i32 %98 to <2 x half>, !dbg !17
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %72, i1 %11) #5, !dbg !17
  %101 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !17
  %102 = bitcast i32 %101 to <2 x half>, !dbg !17
  %103 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !17
  %104 = bitcast i32 %103 to <2 x half>, !dbg !17
  %105 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !17
  %106 = bitcast i32 %105 to <2 x half>, !dbg !17
  %107 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !17
  %108 = bitcast i32 %107 to <2 x half>, !dbg !17
  %109 = getelementptr half, ptr addrspace(1) %0, i64 %25, !dbg !18
  %110 = getelementptr half, ptr addrspace(1) %0, i64 %27, !dbg !18
  %111 = getelementptr half, ptr addrspace(1) %0, i64 %29, !dbg !18
  %112 = getelementptr half, ptr addrspace(1) %0, i64 %31, !dbg !18
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %109, i1 %11) #5, !dbg !19
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !19
  %115 = bitcast i32 %114 to <2 x half>, !dbg !19
  %116 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !19
  %117 = bitcast i32 %116 to <2 x half>, !dbg !19
  %118 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !19
  %119 = bitcast i32 %118 to <2 x half>, !dbg !19
  %120 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !19
  %121 = bitcast i32 %120 to <2 x half>, !dbg !19
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %110, i1 %11) #5, !dbg !19
  %123 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !19
  %124 = bitcast i32 %123 to <2 x half>, !dbg !19
  %125 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !19
  %126 = bitcast i32 %125 to <2 x half>, !dbg !19
  %127 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !19
  %128 = bitcast i32 %127 to <2 x half>, !dbg !19
  %129 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !19
  %130 = bitcast i32 %129 to <2 x half>, !dbg !19
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %111, i1 %11) #5, !dbg !19
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !19
  %133 = bitcast i32 %132 to <2 x half>, !dbg !19
  %134 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !19
  %135 = bitcast i32 %134 to <2 x half>, !dbg !19
  %136 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !19
  %137 = bitcast i32 %136 to <2 x half>, !dbg !19
  %138 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !19
  %139 = bitcast i32 %138 to <2 x half>, !dbg !19
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %112, i1 %11) #5, !dbg !19
  %141 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !19
  %142 = bitcast i32 %141 to <2 x half>, !dbg !19
  %143 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !19
  %144 = bitcast i32 %143 to <2 x half>, !dbg !19
  %145 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !19
  %146 = bitcast i32 %145 to <2 x half>, !dbg !19
  %147 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !19
  %148 = bitcast i32 %147 to <2 x half>, !dbg !19
  %149 = fpext <2 x half> %35 to <2 x float>, !dbg !20
  %150 = fpext <2 x half> %75 to <2 x float>, !dbg !21
  %151 = fpext <2 x half> %115 to <2 x float>, !dbg !22
  %152 = fadd <2 x float> %149, %150, !dbg !23
  %153 = fadd <2 x float> %152, %151, !dbg !24
  %154 = fmul <2 x float> %153, %153, !dbg !25
  %155 = fmul <2 x float> %153, %153, !dbg !25
  %156 = fptrunc <2 x float> %153 to <2 x half>, !dbg !26
  %157 = fpext <2 x half> %37 to <2 x float>, !dbg !20
  %158 = fpext <2 x half> %77 to <2 x float>, !dbg !21
  %159 = fpext <2 x half> %117 to <2 x float>, !dbg !22
  %160 = fadd <2 x float> %157, %158, !dbg !23
  %161 = fadd <2 x float> %160, %159, !dbg !24
  %162 = fmul <2 x float> %161, %161, !dbg !25
  %163 = fmul <2 x float> %161, %161, !dbg !25
  %164 = fptrunc <2 x float> %161 to <2 x half>, !dbg !26
  %165 = fpext <2 x half> %39 to <2 x float>, !dbg !20
  %166 = fpext <2 x half> %79 to <2 x float>, !dbg !21
  %167 = fpext <2 x half> %119 to <2 x float>, !dbg !22
  %168 = fadd <2 x float> %165, %166, !dbg !23
  %169 = fadd <2 x float> %168, %167, !dbg !24
  %170 = fmul <2 x float> %169, %169, !dbg !25
  %171 = fmul <2 x float> %169, %169, !dbg !25
  %172 = fptrunc <2 x float> %169 to <2 x half>, !dbg !26
  %173 = fpext <2 x half> %41 to <2 x float>, !dbg !20
  %174 = fpext <2 x half> %81 to <2 x float>, !dbg !21
  %175 = fpext <2 x half> %121 to <2 x float>, !dbg !22
  %176 = fadd <2 x float> %173, %174, !dbg !23
  %177 = fadd <2 x float> %176, %175, !dbg !24
  %178 = fmul <2 x float> %177, %177, !dbg !25
  %179 = fmul <2 x float> %177, %177, !dbg !25
  %180 = fptrunc <2 x float> %177 to <2 x half>, !dbg !26
  %181 = fpext <2 x half> %44 to <2 x float>, !dbg !20
  %182 = fpext <2 x half> %84 to <2 x float>, !dbg !21
  %183 = fpext <2 x half> %124 to <2 x float>, !dbg !22
  %184 = fadd <2 x float> %181, %182, !dbg !23
  %185 = fadd <2 x float> %184, %183, !dbg !24
  %186 = fmul <2 x float> %185, %185, !dbg !25
  %187 = fmul <2 x float> %185, %185, !dbg !25
  %188 = fptrunc <2 x float> %185 to <2 x half>, !dbg !26
  %189 = fpext <2 x half> %46 to <2 x float>, !dbg !20
  %190 = fpext <2 x half> %86 to <2 x float>, !dbg !21
  %191 = fpext <2 x half> %126 to <2 x float>, !dbg !22
  %192 = fadd <2 x float> %189, %190, !dbg !23
  %193 = fadd <2 x float> %192, %191, !dbg !24
  %194 = fmul <2 x float> %193, %193, !dbg !25
  %195 = fmul <2 x float> %193, %193, !dbg !25
  %196 = fptrunc <2 x float> %193 to <2 x half>, !dbg !26
  %197 = fpext <2 x half> %48 to <2 x float>, !dbg !20
  %198 = fpext <2 x half> %88 to <2 x float>, !dbg !21
  %199 = fpext <2 x half> %128 to <2 x float>, !dbg !22
  %200 = fadd <2 x float> %197, %198, !dbg !23
  %201 = fadd <2 x float> %200, %199, !dbg !24
  %202 = fmul <2 x float> %201, %201, !dbg !25
  %203 = fmul <2 x float> %201, %201, !dbg !25
  %204 = fptrunc <2 x float> %201 to <2 x half>, !dbg !26
  %205 = fpext <2 x half> %50 to <2 x float>, !dbg !20
  %206 = fpext <2 x half> %90 to <2 x float>, !dbg !21
  %207 = fpext <2 x half> %130 to <2 x float>, !dbg !22
  %208 = fadd <2 x float> %205, %206, !dbg !23
  %209 = fadd <2 x float> %208, %207, !dbg !24
  %210 = fmul <2 x float> %209, %209, !dbg !25
  %211 = fmul <2 x float> %209, %209, !dbg !25
  %212 = fptrunc <2 x float> %209 to <2 x half>, !dbg !26
  %213 = fpext <2 x half> %53 to <2 x float>, !dbg !20
  %214 = fpext <2 x half> %93 to <2 x float>, !dbg !21
  %215 = fpext <2 x half> %133 to <2 x float>, !dbg !22
  %216 = fadd <2 x float> %213, %214, !dbg !23
  %217 = fadd <2 x float> %216, %215, !dbg !24
  %218 = fmul <2 x float> %217, %217, !dbg !25
  %219 = fmul <2 x float> %217, %217, !dbg !25
  %220 = fptrunc <2 x float> %217 to <2 x half>, !dbg !26
  %221 = fpext <2 x half> %55 to <2 x float>, !dbg !20
  %222 = fpext <2 x half> %95 to <2 x float>, !dbg !21
  %223 = fpext <2 x half> %135 to <2 x float>, !dbg !22
  %224 = fadd <2 x float> %221, %222, !dbg !23
  %225 = fadd <2 x float> %224, %223, !dbg !24
  %226 = fmul <2 x float> %225, %225, !dbg !25
  %227 = fmul <2 x float> %225, %225, !dbg !25
  %228 = fptrunc <2 x float> %225 to <2 x half>, !dbg !26
  %229 = fpext <2 x half> %57 to <2 x float>, !dbg !20
  %230 = fpext <2 x half> %97 to <2 x float>, !dbg !21
  %231 = fpext <2 x half> %137 to <2 x float>, !dbg !22
  %232 = fadd <2 x float> %229, %230, !dbg !23
  %233 = fadd <2 x float> %232, %231, !dbg !24
  %234 = fmul <2 x float> %233, %233, !dbg !25
  %235 = fmul <2 x float> %233, %233, !dbg !25
  %236 = fptrunc <2 x float> %233 to <2 x half>, !dbg !26
  %237 = fpext <2 x half> %59 to <2 x float>, !dbg !20
  %238 = fpext <2 x half> %99 to <2 x float>, !dbg !21
  %239 = fpext <2 x half> %139 to <2 x float>, !dbg !22
  %240 = fadd <2 x float> %237, %238, !dbg !23
  %241 = fadd <2 x float> %240, %239, !dbg !24
  %242 = fmul <2 x float> %241, %241, !dbg !25
  %243 = fmul <2 x float> %241, %241, !dbg !25
  %244 = fptrunc <2 x float> %241 to <2 x half>, !dbg !26
  %245 = fpext <2 x half> %62 to <2 x float>, !dbg !20
  %246 = fpext <2 x half> %102 to <2 x float>, !dbg !21
  %247 = fpext <2 x half> %142 to <2 x float>, !dbg !22
  %248 = fadd <2 x float> %245, %246, !dbg !23
  %249 = fadd <2 x float> %248, %247, !dbg !24
  %250 = fmul <2 x float> %249, %249, !dbg !25
  %251 = fmul <2 x float> %249, %249, !dbg !25
  %252 = fptrunc <2 x float> %249 to <2 x half>, !dbg !26
  %253 = fpext <2 x half> %64 to <2 x float>, !dbg !20
  %254 = fpext <2 x half> %104 to <2 x float>, !dbg !21
  %255 = fpext <2 x half> %144 to <2 x float>, !dbg !22
  %256 = fadd <2 x float> %253, %254, !dbg !23
  %257 = fadd <2 x float> %256, %255, !dbg !24
  %258 = fmul <2 x float> %257, %257, !dbg !25
  %259 = fmul <2 x float> %257, %257, !dbg !25
  %260 = fptrunc <2 x float> %257 to <2 x half>, !dbg !26
  %261 = fpext <2 x half> %66 to <2 x float>, !dbg !20
  %262 = fpext <2 x half> %106 to <2 x float>, !dbg !21
  %263 = fpext <2 x half> %146 to <2 x float>, !dbg !22
  %264 = fadd <2 x float> %261, %262, !dbg !23
  %265 = fadd <2 x float> %264, %263, !dbg !24
  %266 = fmul <2 x float> %265, %265, !dbg !25
  %267 = fmul <2 x float> %265, %265, !dbg !25
  %268 = fptrunc <2 x float> %265 to <2 x half>, !dbg !26
  %269 = fpext <2 x half> %68 to <2 x float>, !dbg !20
  %270 = fpext <2 x half> %108 to <2 x float>, !dbg !21
  %271 = fpext <2 x half> %148 to <2 x float>, !dbg !22
  %272 = fadd <2 x float> %269, %270, !dbg !23
  %273 = fadd <2 x float> %272, %271, !dbg !24
  %274 = fmul <2 x float> %273, %273, !dbg !25
  %275 = fmul <2 x float> %273, %273, !dbg !25
  %276 = fptrunc <2 x float> %273 to <2 x half>, !dbg !26
  %277 = bitcast <2 x half> %156 to i32, !dbg !26
  %278 = bitcast <2 x half> %164 to i32, !dbg !26
  %279 = bitcast <2 x half> %172 to i32, !dbg !26
  %280 = bitcast <2 x half> %180 to i32, !dbg !26
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %277, i32 %278, i32 %279, i32 %280, ptr addrspace(1) %109, i1 %11) #5, !dbg !26
  %281 = bitcast <2 x half> %188 to i32, !dbg !26
  %282 = bitcast <2 x half> %196 to i32, !dbg !26
  %283 = bitcast <2 x half> %204 to i32, !dbg !26
  %284 = bitcast <2 x half> %212 to i32, !dbg !26
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %281, i32 %282, i32 %283, i32 %284, ptr addrspace(1) %110, i1 %11) #5, !dbg !26
  %285 = bitcast <2 x half> %220 to i32, !dbg !26
  %286 = bitcast <2 x half> %228 to i32, !dbg !26
  %287 = bitcast <2 x half> %236 to i32, !dbg !26
  %288 = bitcast <2 x half> %244 to i32, !dbg !26
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %285, i32 %286, i32 %287, i32 %288, ptr addrspace(1) %111, i1 %11) #5, !dbg !26
  %289 = bitcast <2 x half> %252 to i32, !dbg !26
  %290 = bitcast <2 x half> %260 to i32, !dbg !26
  %291 = bitcast <2 x half> %268 to i32, !dbg !26
  %292 = bitcast <2 x half> %276 to i32, !dbg !26
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %289, i32 %290, i32 %291, i32 %292, ptr addrspace(1) %112, i1 %11) #5, !dbg !26
  %shift = shufflevector <2 x float> %155, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %293 = fadd <2 x float> %154, %shift, !dbg !27
  %294 = fadd <2 x float> %162, %293, !dbg !27
  %shift25 = shufflevector <2 x float> %163, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %295 = fadd <2 x float> %shift25, %294, !dbg !27
  %296 = fadd <2 x float> %170, %295, !dbg !27
  %shift26 = shufflevector <2 x float> %171, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %297 = fadd <2 x float> %shift26, %296, !dbg !27
  %298 = fadd <2 x float> %178, %297, !dbg !27
  %shift27 = shufflevector <2 x float> %179, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %299 = fadd <2 x float> %shift27, %298, !dbg !27
  %300 = fadd <2 x float> %186, %299, !dbg !27
  %shift28 = shufflevector <2 x float> %187, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %301 = fadd <2 x float> %shift28, %300, !dbg !27
  %302 = fadd <2 x float> %194, %301, !dbg !27
  %shift29 = shufflevector <2 x float> %195, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %303 = fadd <2 x float> %shift29, %302, !dbg !27
  %304 = fadd <2 x float> %202, %303, !dbg !27
  %shift30 = shufflevector <2 x float> %203, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %305 = fadd <2 x float> %shift30, %304, !dbg !27
  %306 = fadd <2 x float> %210, %305, !dbg !27
  %shift31 = shufflevector <2 x float> %211, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %307 = fadd <2 x float> %shift31, %306, !dbg !27
  %308 = fadd <2 x float> %218, %307, !dbg !27
  %shift32 = shufflevector <2 x float> %219, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %309 = fadd <2 x float> %shift32, %308, !dbg !27
  %310 = fadd <2 x float> %226, %309, !dbg !27
  %shift33 = shufflevector <2 x float> %227, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %311 = fadd <2 x float> %shift33, %310, !dbg !27
  %312 = fadd <2 x float> %234, %311, !dbg !27
  %shift34 = shufflevector <2 x float> %235, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %313 = fadd <2 x float> %shift34, %312, !dbg !27
  %314 = fadd <2 x float> %242, %313, !dbg !27
  %shift35 = shufflevector <2 x float> %243, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %315 = fadd <2 x float> %shift35, %314, !dbg !27
  %316 = fadd <2 x float> %250, %315, !dbg !27
  %shift36 = shufflevector <2 x float> %251, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %317 = fadd <2 x float> %shift36, %316, !dbg !27
  %318 = fadd <2 x float> %258, %317, !dbg !27
  %shift37 = shufflevector <2 x float> %259, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %319 = fadd <2 x float> %shift37, %318, !dbg !27
  %320 = fadd <2 x float> %266, %319, !dbg !27
  %shift38 = shufflevector <2 x float> %267, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %321 = fadd <2 x float> %shift38, %320, !dbg !27
  %322 = fadd <2 x float> %274, %321, !dbg !27
  %shift39 = shufflevector <2 x float> %275, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !27
  %323 = fadd <2 x float> %shift39, %322, !dbg !27
  %324 = extractelement <2 x float> %323, i64 0, !dbg !27
  %325 = select i1 %11, float %324, float 0.000000e+00, !dbg !27
  %326 = bitcast float %325 to i32, !dbg !32
  %327 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %326, i32 16, i32 31), !dbg !32
  %328 = bitcast i32 %327 to float, !dbg !32
  %329 = fadd float %325, %328, !dbg !27
  %330 = bitcast float %329 to i32, !dbg !32
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 8, i32 31), !dbg !32
  %332 = bitcast i32 %331 to float, !dbg !32
  %333 = fadd float %329, %332, !dbg !27
  %334 = bitcast float %333 to i32, !dbg !32
  %335 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %334, i32 4, i32 31), !dbg !32
  %336 = bitcast i32 %335 to float, !dbg !32
  %337 = fadd float %333, %336, !dbg !27
  %338 = bitcast float %337 to i32, !dbg !32
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 2, i32 31), !dbg !32
  %340 = bitcast i32 %339 to float, !dbg !32
  %341 = fadd float %337, %340, !dbg !27
  %342 = bitcast float %341 to i32, !dbg !32
  %343 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %342, i32 1, i32 31), !dbg !32
  %344 = bitcast i32 %343 to float, !dbg !32
  %345 = fadd float %341, %344, !dbg !27
  %346 = and i32 %14, 3, !dbg !32
  %347 = icmp eq i32 %13, 0, !dbg !32
  %348 = getelementptr float, ptr addrspace(3) @global_smem, i32 %346, !dbg !32
  %349 = bitcast float %345 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %348, <1 x i32> %349, i1 %347) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %350 = icmp slt i32 %12, 4, !dbg !32
  %351 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !32
  %352 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %351, i1 %350) #5, !dbg !32
  %353 = bitcast i32 %352 to float, !dbg !32
  %354 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %352, i32 2, i32 31), !dbg !32
  %355 = bitcast i32 %354 to float, !dbg !32
  %356 = fadd float %353, %355, !dbg !27
  %357 = bitcast float %356 to i32, !dbg !32
  %358 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %357, i32 1, i32 31), !dbg !32
  %359 = bitcast i32 %358 to float, !dbg !32
  %360 = fadd float %356, %359, !dbg !27
  %361 = and i32 %12, 3, !dbg !32
  %362 = icmp eq i32 %361, 0, !dbg !32
  %363 = and i1 %350, %362, !dbg !32
  %364 = bitcast float %360 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %351, <1 x i32> %364, i1 %363) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %365 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !32
  %366 = tail call float @llvm.nvvm.div.full(float %365, float 4.096000e+03), !dbg !33
  %367 = fadd float %366, 0x3EE4F8B580000000, !dbg !34
  %368 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i = icmp eq i32 %368, 0, !dbg !35
  br i1 %.not.i, label %371, label %369, !dbg !35

369:                                              ; preds = %9
  %370 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %367), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

371:                                              ; preds = %9
  %372 = tail call float @llvm.nvvm.rsqrt.approx.f(float %367), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

__nv_rsqrtf.exit:                                 ; preds = %369, %371
  %.0.i = phi float [ %370, %369 ], [ %372, %371 ], !dbg !35
  %373 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %374 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %375 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %376 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %377 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %378 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %379 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %380 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i22 = icmp eq i32 %380, 0, !dbg !35
  br i1 %.not.i22, label %383, label %381, !dbg !35

381:                                              ; preds = %__nv_rsqrtf.exit
  %382 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %367), !dbg !35
  br label %__nv_rsqrtf.exit24, !dbg !35

383:                                              ; preds = %__nv_rsqrtf.exit
  %384 = tail call float @llvm.nvvm.rsqrt.approx.f(float %367), !dbg !35
  br label %__nv_rsqrtf.exit24, !dbg !35

__nv_rsqrtf.exit24:                               ; preds = %381, %383
  %.0.i23 = phi float [ %382, %381 ], [ %384, %383 ], !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %385 = sext i32 %10 to i64, !dbg !37
  %386 = getelementptr float, ptr addrspace(1) %1, i64 %385, !dbg !37
  %387 = and i32 %12, 127, !dbg !38
  %388 = icmp eq i32 %387, 0, !dbg !38
  %389 = bitcast float %.0.i to i32, !dbg !38
  %390 = and i1 %388, %11, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %389, ptr addrspace(1) %386, i1 %390) #5, !dbg !38
  %391 = zext nneg i32 %16 to i64, !dbg !39
  %392 = getelementptr half, ptr addrspace(1) %4, i64 %391, !dbg !39
  %393 = zext nneg i32 %17 to i64, !dbg !39
  %394 = getelementptr half, ptr addrspace(1) %4, i64 %393, !dbg !39
  %395 = zext nneg i32 %18 to i64, !dbg !39
  %396 = getelementptr half, ptr addrspace(1) %4, i64 %395, !dbg !39
  %397 = zext nneg i32 %19 to i64, !dbg !39
  %398 = getelementptr half, ptr addrspace(1) %4, i64 %397, !dbg !39
  %399 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %392, i1 true) #5, !dbg !40
  %400 = extractvalue { i32, i32, i32, i32 } %399, 0, !dbg !40
  %401 = bitcast i32 %400 to <2 x half>, !dbg !40
  %402 = extractvalue { i32, i32, i32, i32 } %399, 1, !dbg !40
  %403 = bitcast i32 %402 to <2 x half>, !dbg !40
  %404 = extractvalue { i32, i32, i32, i32 } %399, 2, !dbg !40
  %405 = bitcast i32 %404 to <2 x half>, !dbg !40
  %406 = extractvalue { i32, i32, i32, i32 } %399, 3, !dbg !40
  %407 = bitcast i32 %406 to <2 x half>, !dbg !40
  %408 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %394, i1 true) #5, !dbg !40
  %409 = extractvalue { i32, i32, i32, i32 } %408, 0, !dbg !40
  %410 = bitcast i32 %409 to <2 x half>, !dbg !40
  %411 = extractvalue { i32, i32, i32, i32 } %408, 1, !dbg !40
  %412 = bitcast i32 %411 to <2 x half>, !dbg !40
  %413 = extractvalue { i32, i32, i32, i32 } %408, 2, !dbg !40
  %414 = bitcast i32 %413 to <2 x half>, !dbg !40
  %415 = extractvalue { i32, i32, i32, i32 } %408, 3, !dbg !40
  %416 = bitcast i32 %415 to <2 x half>, !dbg !40
  %417 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %396, i1 true) #5, !dbg !40
  %418 = extractvalue { i32, i32, i32, i32 } %417, 0, !dbg !40
  %419 = bitcast i32 %418 to <2 x half>, !dbg !40
  %420 = extractvalue { i32, i32, i32, i32 } %417, 1, !dbg !40
  %421 = bitcast i32 %420 to <2 x half>, !dbg !40
  %422 = extractvalue { i32, i32, i32, i32 } %417, 2, !dbg !40
  %423 = bitcast i32 %422 to <2 x half>, !dbg !40
  %424 = extractvalue { i32, i32, i32, i32 } %417, 3, !dbg !40
  %425 = bitcast i32 %424 to <2 x half>, !dbg !40
  %426 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %398, i1 true) #5, !dbg !40
  %427 = extractvalue { i32, i32, i32, i32 } %426, 0, !dbg !40
  %428 = bitcast i32 %427 to <2 x half>, !dbg !40
  %429 = extractvalue { i32, i32, i32, i32 } %426, 1, !dbg !40
  %430 = bitcast i32 %429 to <2 x half>, !dbg !40
  %431 = extractvalue { i32, i32, i32, i32 } %426, 2, !dbg !40
  %432 = bitcast i32 %431 to <2 x half>, !dbg !40
  %433 = extractvalue { i32, i32, i32, i32 } %426, 3, !dbg !40
  %434 = bitcast i32 %433 to <2 x half>, !dbg !40
  %435 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %109, i1 %11) #5, !dbg !41
  %436 = extractvalue { i32, i32, i32, i32 } %435, 0, !dbg !41
  %437 = bitcast i32 %436 to <2 x half>, !dbg !41
  %438 = extractvalue { i32, i32, i32, i32 } %435, 1, !dbg !41
  %439 = bitcast i32 %438 to <2 x half>, !dbg !41
  %440 = extractvalue { i32, i32, i32, i32 } %435, 2, !dbg !41
  %441 = bitcast i32 %440 to <2 x half>, !dbg !41
  %442 = extractvalue { i32, i32, i32, i32 } %435, 3, !dbg !41
  %443 = bitcast i32 %442 to <2 x half>, !dbg !41
  %444 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %110, i1 %11) #5, !dbg !41
  %445 = extractvalue { i32, i32, i32, i32 } %444, 0, !dbg !41
  %446 = bitcast i32 %445 to <2 x half>, !dbg !41
  %447 = extractvalue { i32, i32, i32, i32 } %444, 1, !dbg !41
  %448 = bitcast i32 %447 to <2 x half>, !dbg !41
  %449 = extractvalue { i32, i32, i32, i32 } %444, 2, !dbg !41
  %450 = bitcast i32 %449 to <2 x half>, !dbg !41
  %451 = extractvalue { i32, i32, i32, i32 } %444, 3, !dbg !41
  %452 = bitcast i32 %451 to <2 x half>, !dbg !41
  %453 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %111, i1 %11) #5, !dbg !41
  %454 = extractvalue { i32, i32, i32, i32 } %453, 0, !dbg !41
  %455 = bitcast i32 %454 to <2 x half>, !dbg !41
  %456 = extractvalue { i32, i32, i32, i32 } %453, 1, !dbg !41
  %457 = bitcast i32 %456 to <2 x half>, !dbg !41
  %458 = extractvalue { i32, i32, i32, i32 } %453, 2, !dbg !41
  %459 = bitcast i32 %458 to <2 x half>, !dbg !41
  %460 = extractvalue { i32, i32, i32, i32 } %453, 3, !dbg !41
  %461 = bitcast i32 %460 to <2 x half>, !dbg !41
  %462 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %112, i1 %11) #5, !dbg !41
  %463 = extractvalue { i32, i32, i32, i32 } %462, 0, !dbg !41
  %464 = bitcast i32 %463 to <2 x half>, !dbg !41
  %465 = extractvalue { i32, i32, i32, i32 } %462, 1, !dbg !41
  %466 = bitcast i32 %465 to <2 x half>, !dbg !41
  %467 = extractvalue { i32, i32, i32, i32 } %462, 2, !dbg !41
  %468 = bitcast i32 %467 to <2 x half>, !dbg !41
  %469 = extractvalue { i32, i32, i32, i32 } %462, 3, !dbg !41
  %470 = bitcast i32 %469 to <2 x half>, !dbg !41
  %471 = getelementptr half, ptr addrspace(1) %5, i64 %25, !dbg !42
  %472 = getelementptr half, ptr addrspace(1) %5, i64 %27, !dbg !42
  %473 = getelementptr half, ptr addrspace(1) %5, i64 %29, !dbg !42
  %474 = getelementptr half, ptr addrspace(1) %5, i64 %31, !dbg !42
  %475 = fpext <2 x half> %401 to <2 x float>, !dbg !43
  %476 = fpext <2 x half> %437 to <2 x float>, !dbg !44
  %477 = insertelement <2 x float> poison, float %.0.i23, i64 0, !dbg !45
  %478 = shufflevector <2 x float> %477, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !45
  %479 = fmul <2 x float> %478, %476, !dbg !45
  %480 = fmul <2 x float> %479, %475, !dbg !46
  %481 = fptrunc <2 x float> %480 to <2 x half>, !dbg !47
  %482 = fpext <2 x half> %403 to <2 x float>, !dbg !43
  %483 = fpext <2 x half> %439 to <2 x float>, !dbg !44
  %484 = fmul <2 x float> %478, %483, !dbg !45
  %485 = fmul <2 x float> %484, %482, !dbg !46
  %486 = fptrunc <2 x float> %485 to <2 x half>, !dbg !47
  %487 = fpext <2 x half> %405 to <2 x float>, !dbg !43
  %488 = fpext <2 x half> %441 to <2 x float>, !dbg !44
  %489 = fmul <2 x float> %478, %488, !dbg !45
  %490 = fmul <2 x float> %489, %487, !dbg !46
  %491 = fptrunc <2 x float> %490 to <2 x half>, !dbg !47
  %492 = fpext <2 x half> %407 to <2 x float>, !dbg !43
  %493 = fpext <2 x half> %443 to <2 x float>, !dbg !44
  %494 = fmul <2 x float> %478, %493, !dbg !45
  %495 = fmul <2 x float> %494, %492, !dbg !46
  %496 = fptrunc <2 x float> %495 to <2 x half>, !dbg !47
  %497 = fpext <2 x half> %410 to <2 x float>, !dbg !43
  %498 = fpext <2 x half> %446 to <2 x float>, !dbg !44
  %499 = fmul <2 x float> %478, %498, !dbg !45
  %500 = fmul <2 x float> %499, %497, !dbg !46
  %501 = fptrunc <2 x float> %500 to <2 x half>, !dbg !47
  %502 = fpext <2 x half> %412 to <2 x float>, !dbg !43
  %503 = fpext <2 x half> %448 to <2 x float>, !dbg !44
  %504 = fmul <2 x float> %478, %503, !dbg !45
  %505 = fmul <2 x float> %504, %502, !dbg !46
  %506 = fptrunc <2 x float> %505 to <2 x half>, !dbg !47
  %507 = fpext <2 x half> %414 to <2 x float>, !dbg !43
  %508 = fpext <2 x half> %450 to <2 x float>, !dbg !44
  %509 = fmul <2 x float> %478, %508, !dbg !45
  %510 = fmul <2 x float> %509, %507, !dbg !46
  %511 = fptrunc <2 x float> %510 to <2 x half>, !dbg !47
  %512 = fpext <2 x half> %416 to <2 x float>, !dbg !43
  %513 = fpext <2 x half> %452 to <2 x float>, !dbg !44
  %514 = fmul <2 x float> %478, %513, !dbg !45
  %515 = fmul <2 x float> %514, %512, !dbg !46
  %516 = fptrunc <2 x float> %515 to <2 x half>, !dbg !47
  %517 = fpext <2 x half> %419 to <2 x float>, !dbg !43
  %518 = fpext <2 x half> %455 to <2 x float>, !dbg !44
  %519 = fmul <2 x float> %478, %518, !dbg !45
  %520 = fmul <2 x float> %519, %517, !dbg !46
  %521 = fptrunc <2 x float> %520 to <2 x half>, !dbg !47
  %522 = fpext <2 x half> %421 to <2 x float>, !dbg !43
  %523 = fpext <2 x half> %457 to <2 x float>, !dbg !44
  %524 = fmul <2 x float> %478, %523, !dbg !45
  %525 = fmul <2 x float> %524, %522, !dbg !46
  %526 = fptrunc <2 x float> %525 to <2 x half>, !dbg !47
  %527 = fpext <2 x half> %423 to <2 x float>, !dbg !43
  %528 = fpext <2 x half> %459 to <2 x float>, !dbg !44
  %529 = fmul <2 x float> %478, %528, !dbg !45
  %530 = fmul <2 x float> %529, %527, !dbg !46
  %531 = fptrunc <2 x float> %530 to <2 x half>, !dbg !47
  %532 = fpext <2 x half> %425 to <2 x float>, !dbg !43
  %533 = fpext <2 x half> %461 to <2 x float>, !dbg !44
  %534 = fmul <2 x float> %478, %533, !dbg !45
  %535 = fmul <2 x float> %534, %532, !dbg !46
  %536 = fptrunc <2 x float> %535 to <2 x half>, !dbg !47
  %537 = fpext <2 x half> %428 to <2 x float>, !dbg !43
  %538 = fpext <2 x half> %464 to <2 x float>, !dbg !44
  %539 = fmul <2 x float> %478, %538, !dbg !45
  %540 = fmul <2 x float> %539, %537, !dbg !46
  %541 = fptrunc <2 x float> %540 to <2 x half>, !dbg !47
  %542 = fpext <2 x half> %430 to <2 x float>, !dbg !43
  %543 = fpext <2 x half> %466 to <2 x float>, !dbg !44
  %544 = fmul <2 x float> %478, %543, !dbg !45
  %545 = fmul <2 x float> %544, %542, !dbg !46
  %546 = fptrunc <2 x float> %545 to <2 x half>, !dbg !47
  %547 = fpext <2 x half> %432 to <2 x float>, !dbg !43
  %548 = fpext <2 x half> %468 to <2 x float>, !dbg !44
  %549 = fmul <2 x float> %478, %548, !dbg !45
  %550 = fmul <2 x float> %549, %547, !dbg !46
  %551 = fptrunc <2 x float> %550 to <2 x half>, !dbg !47
  %552 = fpext <2 x half> %434 to <2 x float>, !dbg !43
  %553 = fpext <2 x half> %470 to <2 x float>, !dbg !44
  %554 = fmul <2 x float> %478, %553, !dbg !45
  %555 = fmul <2 x float> %554, %552, !dbg !46
  %556 = fptrunc <2 x float> %555 to <2 x half>, !dbg !47
  %557 = bitcast <2 x half> %481 to i32, !dbg !47
  %558 = bitcast <2 x half> %486 to i32, !dbg !47
  %559 = bitcast <2 x half> %491 to i32, !dbg !47
  %560 = bitcast <2 x half> %496 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %557, i32 %558, i32 %559, i32 %560, ptr addrspace(1) %471, i1 %11) #5, !dbg !47
  %561 = bitcast <2 x half> %501 to i32, !dbg !47
  %562 = bitcast <2 x half> %506 to i32, !dbg !47
  %563 = bitcast <2 x half> %511 to i32, !dbg !47
  %564 = bitcast <2 x half> %516 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %561, i32 %562, i32 %563, i32 %564, ptr addrspace(1) %472, i1 %11) #5, !dbg !47
  %565 = bitcast <2 x half> %521 to i32, !dbg !47
  %566 = bitcast <2 x half> %526 to i32, !dbg !47
  %567 = bitcast <2 x half> %531 to i32, !dbg !47
  %568 = bitcast <2 x half> %536 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %565, i32 %566, i32 %567, i32 %568, ptr addrspace(1) %473, i1 %11) #5, !dbg !47
  %569 = bitcast <2 x half> %541 to i32, !dbg !47
  %570 = bitcast <2 x half> %546 to i32, !dbg !47
  %571 = bitcast <2 x half> %551 to i32, !dbg !47
  %572 = bitcast <2 x half> %556 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %569, i32 %570, i32 %571, i32 %572, ptr addrspace(1) %474, i1 %11) #5, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjjwjnmyb5ylskx6e3eg4yueoaqwlte7kuhtcnu2a4ncpavggv5i.py", directory: "/tmp/torchinductor_root/jj")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8, !"reqntidx", i32 128}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 21, scope: !6)
!11 = !DILocation(line: 25, column: 37, scope: !6)
!12 = !DILocation(line: 35, column: 46, scope: !6)
!13 = !DILocation(line: 35, column: 41, scope: !6)
!14 = !DILocation(line: 35, column: 34, scope: !6)
!15 = !DILocation(line: 35, column: 51, scope: !6)
!16 = !DILocation(line: 36, column: 34, scope: !6)
!17 = !DILocation(line: 36, column: 51, scope: !6)
!18 = !DILocation(line: 37, column: 38, scope: !6)
!19 = !DILocation(line: 37, column: 55, scope: !6)
!20 = !DILocation(line: 35, column: 113, scope: !6)
!21 = !DILocation(line: 36, column: 113, scope: !6)
!22 = !DILocation(line: 37, column: 117, scope: !6)
!23 = !DILocation(line: 38, column: 22, scope: !6)
!24 = !DILocation(line: 39, column: 22, scope: !6)
!25 = !DILocation(line: 41, column: 22, scope: !6)
!26 = !DILocation(line: 45, column: 55, scope: !6)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!30 = distinct !DILexicalBlockFile(scope: !6, file: !29, discriminator: 0)
!31 = !DILocation(line: 46, column: 25, scope: !6)
!32 = !DILocation(line: 286, column: 36, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 48, column: 20, scope: !6)
!34 = !DILocation(line: 50, column: 20, scope: !6)
!35 = !DILocation(line: 51, column: 28, scope: !6)
!36 = !DILocation(line: 52, column: 4, scope: !6)
!37 = !DILocation(line: 53, column: 28, scope: !6)
!38 = !DILocation(line: 53, column: 40, scope: !6)
!39 = !DILocation(line: 60, column: 35, scope: !6)
!40 = !DILocation(line: 60, column: 42, scope: !6)
!41 = !DILocation(line: 61, column: 56, scope: !6)
!42 = !DILocation(line: 66, column: 29, scope: !6)
!43 = !DILocation(line: 60, column: 95, scope: !6)
!44 = !DILocation(line: 61, column: 118, scope: !6)
!45 = !DILocation(line: 63, column: 24, scope: !6)
!46 = !DILocation(line: 65, column: 24, scope: !6)
!47 = !DILocation(line: 66, column: 53, scope: !6)
!48 = !DILocation(line: 54, column: 4, scope: !6)
