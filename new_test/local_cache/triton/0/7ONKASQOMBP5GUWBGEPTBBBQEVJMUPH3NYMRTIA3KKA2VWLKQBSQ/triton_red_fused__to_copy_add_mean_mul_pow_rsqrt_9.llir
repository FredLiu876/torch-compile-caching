; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, ptr addrspace(1) readnone captures(none) %7) local_unnamed_addr !dbg !6 {
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %10 = icmp slt i32 %9, %5, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 31, !dbg !11
  %13 = shl i32 %11, 2, !dbg !11
  %14 = and i32 %13, 2044, !dbg !11
  %15 = shl i32 %9, 12, !dbg !12
  %16 = or disjoint i32 %14, %15
  %17 = sext i32 %16 to i64, !dbg !13
  %18 = getelementptr half, ptr addrspace(1) %2, i64 %17, !dbg !13
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %18, i1 %10) #5, !dbg !14
  %20 = extractvalue { i32, i32 } %19, 0, !dbg !14
  %21 = bitcast i32 %20 to <2 x half>, !dbg !14
  %22 = extractvalue { i32, i32 } %19, 1, !dbg !14
  %23 = bitcast i32 %22 to <2 x half>, !dbg !14
  %24 = getelementptr half, ptr addrspace(1) %0, i64 %17, !dbg !15
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %24, i1 %10) #5, !dbg !16
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !16
  %27 = bitcast i32 %26 to <2 x half>, !dbg !16
  %28 = extractvalue { i32, i32 } %25, 1, !dbg !16
  %29 = bitcast i32 %28 to <2 x half>, !dbg !16
  %30 = fpext <2 x half> %21 to <2 x float>, !dbg !17
  %31 = fpext <2 x half> %27 to <2 x float>, !dbg !18
  %32 = fadd <2 x float> %30, %31, !dbg !19
  %33 = fptrunc <2 x float> %32 to <2 x half>, !dbg !20
  %34 = fpext <2 x half> %23 to <2 x float>, !dbg !17
  %35 = fpext <2 x half> %29 to <2 x float>, !dbg !18
  %36 = fadd <2 x float> %34, %35, !dbg !19
  %37 = fptrunc <2 x float> %36 to <2 x half>, !dbg !20
  %38 = bitcast <2 x half> %33 to i32, !dbg !20
  %39 = bitcast <2 x half> %37 to i32, !dbg !20
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %38, i32 %39, ptr addrspace(1) %24, i1 %10) #5, !dbg !20
  %40 = or disjoint i32 %16, 2048, !dbg !21
  %41 = sext i32 %40 to i64, !dbg !13
  %42 = getelementptr half, ptr addrspace(1) %2, i64 %41, !dbg !13
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %42, i1 %10) #5, !dbg !14
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !14
  %45 = bitcast i32 %44 to <2 x half>, !dbg !14
  %46 = extractvalue { i32, i32 } %43, 1, !dbg !14
  %47 = bitcast i32 %46 to <2 x half>, !dbg !14
  %48 = getelementptr half, ptr addrspace(1) %0, i64 %41, !dbg !15
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %48, i1 %10) #5, !dbg !16
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !16
  %51 = bitcast i32 %50 to <2 x half>, !dbg !16
  %52 = extractvalue { i32, i32 } %49, 1, !dbg !16
  %53 = bitcast i32 %52 to <2 x half>, !dbg !16
  %54 = fpext <2 x half> %45 to <2 x float>, !dbg !17
  %55 = fpext <2 x half> %51 to <2 x float>, !dbg !18
  %56 = fadd <2 x float> %54, %55, !dbg !19
  %57 = fmul <2 x float> %32, %32, !dbg !22
  %58 = fmul <2 x float> %56, %56, !dbg !22
  %59 = fadd <2 x float> %57, %58, !dbg !23
  %60 = fptrunc <2 x float> %56 to <2 x half>, !dbg !20
  %61 = fpext <2 x half> %47 to <2 x float>, !dbg !17
  %62 = fpext <2 x half> %53 to <2 x float>, !dbg !18
  %63 = fadd <2 x float> %61, %62, !dbg !19
  %64 = fmul <2 x float> %36, %36, !dbg !22
  %65 = fmul <2 x float> %63, %63, !dbg !22
  %66 = fadd <2 x float> %64, %65, !dbg !23
  %67 = fptrunc <2 x float> %63 to <2 x half>, !dbg !20
  %68 = bitcast <2 x half> %60 to i32, !dbg !20
  %69 = bitcast <2 x half> %67 to i32, !dbg !20
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %68, i32 %69, ptr addrspace(1) %48, i1 %10) #5, !dbg !20
  %70 = lshr i32 %11, 5, !dbg !11
  %shift = shufflevector <2 x float> %59, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !24
  %71 = fadd <2 x float> %59, %shift, !dbg !24
  %72 = fadd <2 x float> %66, %71, !dbg !24
  %shift17 = shufflevector <2 x float> %66, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !24
  %73 = fadd <2 x float> %shift17, %72, !dbg !24
  %74 = extractelement <2 x float> %73, i64 0, !dbg !24
  %75 = select i1 %10, float %74, float 0.000000e+00, !dbg !24
  %76 = bitcast float %75 to i32, !dbg !29
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 16, i32 31), !dbg !29
  %78 = bitcast i32 %77 to float, !dbg !29
  %79 = fadd float %75, %78, !dbg !24
  %80 = bitcast float %79 to i32, !dbg !29
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 8, i32 31), !dbg !29
  %82 = bitcast i32 %81 to float, !dbg !29
  %83 = fadd float %79, %82, !dbg !24
  %84 = bitcast float %83 to i32, !dbg !29
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 4, i32 31), !dbg !29
  %86 = bitcast i32 %85 to float, !dbg !29
  %87 = fadd float %83, %86, !dbg !24
  %88 = bitcast float %87 to i32, !dbg !29
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 2, i32 31), !dbg !29
  %90 = bitcast i32 %89 to float, !dbg !29
  %91 = fadd float %87, %90, !dbg !24
  %92 = bitcast float %91 to i32, !dbg !29
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 1, i32 31), !dbg !29
  %94 = bitcast i32 %93 to float, !dbg !29
  %95 = fadd float %91, %94, !dbg !24
  %96 = and i32 %70, 15, !dbg !29
  %97 = icmp eq i32 %12, 0, !dbg !29
  %98 = zext nneg i32 %96 to i64, !dbg !29
  %99 = getelementptr float, ptr addrspace(3) @global_smem, i64 %98, !dbg !29
  %100 = bitcast float %95 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %100, i1 %97) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %101 = icmp slt i32 %11, 16, !dbg !29
  %102 = sext i32 %11 to i64, !dbg !29
  %103 = getelementptr float, ptr addrspace(3) @global_smem, i64 %102, !dbg !29
  %104 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %103, i1 %101) #5, !dbg !29
  %105 = bitcast i32 %104 to float, !dbg !29
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 8, i32 31), !dbg !29
  %107 = bitcast i32 %106 to float, !dbg !29
  %108 = fadd float %105, %107, !dbg !24
  %109 = bitcast float %108 to i32, !dbg !29
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 4, i32 31), !dbg !29
  %111 = bitcast i32 %110 to float, !dbg !29
  %112 = fadd float %108, %111, !dbg !24
  %113 = bitcast float %112 to i32, !dbg !29
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 2, i32 31), !dbg !29
  %115 = bitcast i32 %114 to float, !dbg !29
  %116 = fadd float %112, %115, !dbg !24
  %117 = bitcast float %116 to i32, !dbg !29
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 1, i32 31), !dbg !29
  %119 = bitcast i32 %118 to float, !dbg !29
  %120 = fadd float %116, %119, !dbg !24
  %121 = and i32 %11, 15, !dbg !29
  %122 = icmp eq i32 %121, 0, !dbg !29
  %123 = and i1 %101, %122, !dbg !29
  %124 = bitcast float %120 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %124, i1 %123) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %125 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !29
  %126 = tail call float @llvm.nvvm.div.full(float %125, float 4.096000e+03), !dbg !30
  %127 = fadd float %126, 0x3EE4F8B580000000, !dbg !31
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i = icmp eq i32 %128, 0, !dbg !32
  br i1 %.not.i, label %131, label %129, !dbg !32

129:                                              ; preds = %8
  %130 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %127), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

131:                                              ; preds = %8
  %132 = tail call float @llvm.nvvm.rsqrt.approx.f(float %127), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

__nv_rsqrtf.exit:                                 ; preds = %129, %131
  %.0.i = phi float [ %130, %129 ], [ %132, %131 ], !dbg !32
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i11 = icmp eq i32 %136, 0, !dbg !32
  br i1 %.not.i11, label %139, label %137, !dbg !32

137:                                              ; preds = %__nv_rsqrtf.exit
  %138 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %127), !dbg !32
  br label %__nv_rsqrtf.exit13, !dbg !32

139:                                              ; preds = %__nv_rsqrtf.exit
  %140 = tail call float @llvm.nvvm.rsqrt.approx.f(float %127), !dbg !32
  br label %__nv_rsqrtf.exit13, !dbg !32

__nv_rsqrtf.exit13:                               ; preds = %137, %139
  %.0.i12 = phi float [ %138, %137 ], [ %140, %139 ], !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %141 = sext i32 %9 to i64, !dbg !34
  %142 = getelementptr float, ptr addrspace(1) %1, i64 %141, !dbg !34
  %143 = and i32 %11, 511, !dbg !35
  %144 = icmp eq i32 %143, 0, !dbg !35
  %145 = bitcast float %.0.i to i32, !dbg !35
  %146 = and i1 %144, %10, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %145, ptr addrspace(1) %142, i1 %146) #5, !dbg !35
  %147 = zext nneg i32 %14 to i64, !dbg !36
  %148 = getelementptr half, ptr addrspace(1) %3, i64 %147, !dbg !37
  %149 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %148, i1 true) #5, !dbg !38
  %150 = extractvalue { i32, i32 } %149, 0, !dbg !38
  %151 = bitcast i32 %150 to <2 x half>, !dbg !38
  %152 = extractvalue { i32, i32 } %149, 1, !dbg !38
  %153 = bitcast i32 %152 to <2 x half>, !dbg !38
  %154 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %24, i1 %10) #5, !dbg !39
  %155 = extractvalue { i32, i32 } %154, 0, !dbg !39
  %156 = bitcast i32 %155 to <2 x half>, !dbg !39
  %157 = extractvalue { i32, i32 } %154, 1, !dbg !39
  %158 = bitcast i32 %157 to <2 x half>, !dbg !39
  %159 = getelementptr half, ptr addrspace(1) %4, i64 %17, !dbg !40
  %160 = fpext <2 x half> %151 to <2 x float>, !dbg !41
  %161 = fpext <2 x half> %156 to <2 x float>, !dbg !42
  %162 = insertelement <2 x float> poison, float %.0.i12, i64 0, !dbg !43
  %163 = shufflevector <2 x float> %162, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !43
  %164 = fmul <2 x float> %163, %161, !dbg !43
  %165 = fmul <2 x float> %164, %160, !dbg !44
  %166 = fptrunc <2 x float> %165 to <2 x half>, !dbg !45
  %167 = fpext <2 x half> %153 to <2 x float>, !dbg !41
  %168 = fpext <2 x half> %158 to <2 x float>, !dbg !42
  %169 = fmul <2 x float> %163, %168, !dbg !43
  %170 = fmul <2 x float> %169, %167, !dbg !44
  %171 = fptrunc <2 x float> %170 to <2 x half>, !dbg !45
  %172 = bitcast <2 x half> %166 to i32, !dbg !45
  %173 = bitcast <2 x half> %171 to i32, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %172, i32 %173, ptr addrspace(1) %159, i1 %10) #5, !dbg !45
  %174 = or disjoint i64 %147, 2048, !dbg !46
  %175 = getelementptr half, ptr addrspace(1) %3, i64 %174, !dbg !37
  %176 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %175, i1 true) #5, !dbg !38
  %177 = extractvalue { i32, i32 } %176, 0, !dbg !38
  %178 = bitcast i32 %177 to <2 x half>, !dbg !38
  %179 = extractvalue { i32, i32 } %176, 1, !dbg !38
  %180 = bitcast i32 %179 to <2 x half>, !dbg !38
  %181 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, $2;\0A\09mov.u32 $1, $3;\0A\09@$5 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $4 + 0 ];", "=r,=r,r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %48, i1 %10) #5, !dbg !39
  %182 = extractvalue { i32, i32 } %181, 0, !dbg !39
  %183 = bitcast i32 %182 to <2 x half>, !dbg !39
  %184 = extractvalue { i32, i32 } %181, 1, !dbg !39
  %185 = bitcast i32 %184 to <2 x half>, !dbg !39
  %186 = getelementptr half, ptr addrspace(1) %4, i64 %41, !dbg !40
  %187 = fpext <2 x half> %178 to <2 x float>, !dbg !41
  %188 = fpext <2 x half> %183 to <2 x float>, !dbg !42
  %189 = fmul <2 x float> %163, %188, !dbg !43
  %190 = fmul <2 x float> %189, %187, !dbg !44
  %191 = fptrunc <2 x float> %190 to <2 x half>, !dbg !45
  %192 = fpext <2 x half> %180 to <2 x float>, !dbg !41
  %193 = fpext <2 x half> %185 to <2 x float>, !dbg !42
  %194 = fmul <2 x float> %163, %193, !dbg !43
  %195 = fmul <2 x float> %194, %192, !dbg !44
  %196 = fptrunc <2 x float> %195 to <2 x half>, !dbg !45
  %197 = bitcast <2 x half> %191 to i32, !dbg !45
  %198 = bitcast <2 x half> %196 to i32, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %197, i32 %198, ptr addrspace(1) %186, i1 %10) #5, !dbg !45
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6w7ysj4hzbjrc3ky2bllh4hizall6zebpysmidywv3kv2zvm2ex.py", directory: "./local_cache/6w")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_9", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 24, column: 21, scope: !6)
!11 = !DILocation(line: 25, column: 37, scope: !6)
!12 = !DILocation(line: 35, column: 46, scope: !6)
!13 = !DILocation(line: 35, column: 34, scope: !6)
!14 = !DILocation(line: 35, column: 51, scope: !6)
!15 = !DILocation(line: 36, column: 38, scope: !6)
!16 = !DILocation(line: 36, column: 55, scope: !6)
!17 = !DILocation(line: 35, column: 113, scope: !6)
!18 = !DILocation(line: 36, column: 117, scope: !6)
!19 = !DILocation(line: 37, column: 22, scope: !6)
!20 = !DILocation(line: 43, column: 55, scope: !6)
!21 = !DILocation(line: 35, column: 41, scope: !6)
!22 = !DILocation(line: 39, column: 22, scope: !6)
!23 = !DILocation(line: 41, column: 23, scope: !6)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !6, file: !26, discriminator: 0)
!28 = !DILocation(line: 44, column: 25, scope: !6)
!29 = !DILocation(line: 286, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 46, column: 19, scope: !6)
!31 = !DILocation(line: 48, column: 19, scope: !6)
!32 = !DILocation(line: 49, column: 28, scope: !6)
!33 = !DILocation(line: 50, column: 4, scope: !6)
!34 = !DILocation(line: 51, column: 28, scope: !6)
!35 = !DILocation(line: 51, column: 40, scope: !6)
!36 = !DILocation(line: 52, column: 40, scope: !6)
!37 = !DILocation(line: 58, column: 35, scope: !6)
!38 = !DILocation(line: 58, column: 42, scope: !6)
!39 = !DILocation(line: 59, column: 56, scope: !6)
!40 = !DILocation(line: 64, column: 29, scope: !6)
!41 = !DILocation(line: 58, column: 95, scope: !6)
!42 = !DILocation(line: 59, column: 118, scope: !6)
!43 = !DILocation(line: 61, column: 24, scope: !6)
!44 = !DILocation(line: 63, column: 24, scope: !6)
!45 = !DILocation(line: 64, column: 53, scope: !6)
!46 = !DILocation(line: 53, column: 31, scope: !6)
!47 = !DILocation(line: 52, column: 4, scope: !6)
