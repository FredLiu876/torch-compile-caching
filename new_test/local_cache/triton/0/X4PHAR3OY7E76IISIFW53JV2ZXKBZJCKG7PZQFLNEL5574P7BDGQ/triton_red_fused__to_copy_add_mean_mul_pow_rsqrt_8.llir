; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-p6:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define ptx_kernel void @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, ptr addrspace(1) readnone captures(none) %8) local_unnamed_addr !dbg !6 {
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x(), !dbg !9
  %11 = shl i32 %10, 1, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = and i32 %12, 31, !dbg !11
  %14 = and i32 %12, 1, !dbg !11
  %15 = or disjoint i32 %11, 1, !dbg !12
  %16 = icmp slt i32 %11, %6, !dbg !13
  %17 = icmp slt i32 %15, %6, !dbg !13
  %18 = lshr i32 %12, 5, !dbg !14
  %19 = shl i32 %12, 3, !dbg !14
  %20 = and i32 %19, 4088, !dbg !14
  %21 = shl i32 %10, 13, !dbg !15
  %22 = shl i32 %15, 12, !dbg !15
  %23 = or disjoint i32 %20, %21, !dbg !16
  %24 = or disjoint i32 %22, %20, !dbg !16
  %25 = sext i32 %23 to i64, !dbg !17
  %26 = getelementptr half, ptr addrspace(1) %2, i64 %25, !dbg !17
  %27 = sext i32 %24 to i64, !dbg !17
  %28 = getelementptr half, ptr addrspace(1) %2, i64 %27, !dbg !17
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %26, i1 %16) #5, !dbg !18
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !18
  %31 = bitcast i32 %30 to <2 x half>, !dbg !18
  %32 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !18
  %33 = bitcast i32 %32 to <2 x half>, !dbg !18
  %34 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !18
  %35 = bitcast i32 %34 to <2 x half>, !dbg !18
  %36 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !18
  %37 = bitcast i32 %36 to <2 x half>, !dbg !18
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %28, i1 %17) #5, !dbg !18
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !18
  %40 = bitcast i32 %39 to <2 x half>, !dbg !18
  %41 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !18
  %42 = bitcast i32 %41 to <2 x half>, !dbg !18
  %43 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !18
  %44 = bitcast i32 %43 to <2 x half>, !dbg !18
  %45 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !18
  %46 = bitcast i32 %45 to <2 x half>, !dbg !18
  %47 = getelementptr half, ptr addrspace(1) %3, i64 %25, !dbg !19
  %48 = getelementptr half, ptr addrspace(1) %3, i64 %27, !dbg !19
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %47, i1 %16) #5, !dbg !20
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !20
  %51 = bitcast i32 %50 to <2 x half>, !dbg !20
  %52 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !20
  %53 = bitcast i32 %52 to <2 x half>, !dbg !20
  %54 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !20
  %55 = bitcast i32 %54 to <2 x half>, !dbg !20
  %56 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !20
  %57 = bitcast i32 %56 to <2 x half>, !dbg !20
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %48, i1 %17) #5, !dbg !20
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !20
  %60 = bitcast i32 %59 to <2 x half>, !dbg !20
  %61 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !20
  %62 = bitcast i32 %61 to <2 x half>, !dbg !20
  %63 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !20
  %64 = bitcast i32 %63 to <2 x half>, !dbg !20
  %65 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !20
  %66 = bitcast i32 %65 to <2 x half>, !dbg !20
  %67 = getelementptr half, ptr addrspace(1) %0, i64 %25, !dbg !21
  %68 = getelementptr half, ptr addrspace(1) %0, i64 %27, !dbg !21
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %67, i1 %16) #5, !dbg !22
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !22
  %71 = bitcast i32 %70 to <2 x half>, !dbg !22
  %72 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !22
  %73 = bitcast i32 %72 to <2 x half>, !dbg !22
  %74 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !22
  %75 = bitcast i32 %74 to <2 x half>, !dbg !22
  %76 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !22
  %77 = bitcast i32 %76 to <2 x half>, !dbg !22
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %68, i1 %17) #5, !dbg !22
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !22
  %80 = bitcast i32 %79 to <2 x half>, !dbg !22
  %81 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !22
  %82 = bitcast i32 %81 to <2 x half>, !dbg !22
  %83 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !22
  %84 = bitcast i32 %83 to <2 x half>, !dbg !22
  %85 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !22
  %86 = bitcast i32 %85 to <2 x half>, !dbg !22
  %87 = fpext <2 x half> %31 to <2 x float>, !dbg !23
  %88 = fpext <2 x half> %51 to <2 x float>, !dbg !24
  %89 = fpext <2 x half> %71 to <2 x float>, !dbg !25
  %90 = fadd <2 x float> %87, %88, !dbg !26
  %91 = fadd <2 x float> %90, %89, !dbg !27
  %92 = fmul <2 x float> %91, %91, !dbg !28
  %93 = fmul <2 x float> %91, %91, !dbg !28
  %94 = fptrunc <2 x float> %91 to <2 x half>, !dbg !29
  %95 = fpext <2 x half> %33 to <2 x float>, !dbg !23
  %96 = fpext <2 x half> %53 to <2 x float>, !dbg !24
  %97 = fpext <2 x half> %73 to <2 x float>, !dbg !25
  %98 = fadd <2 x float> %95, %96, !dbg !26
  %99 = fadd <2 x float> %98, %97, !dbg !27
  %100 = fmul <2 x float> %99, %99, !dbg !28
  %101 = fmul <2 x float> %99, %99, !dbg !28
  %102 = fptrunc <2 x float> %99 to <2 x half>, !dbg !29
  %103 = fpext <2 x half> %35 to <2 x float>, !dbg !23
  %104 = fpext <2 x half> %55 to <2 x float>, !dbg !24
  %105 = fpext <2 x half> %75 to <2 x float>, !dbg !25
  %106 = fadd <2 x float> %103, %104, !dbg !26
  %107 = fadd <2 x float> %106, %105, !dbg !27
  %108 = fmul <2 x float> %107, %107, !dbg !28
  %109 = fmul <2 x float> %107, %107, !dbg !28
  %110 = fptrunc <2 x float> %107 to <2 x half>, !dbg !29
  %111 = fpext <2 x half> %37 to <2 x float>, !dbg !23
  %112 = fpext <2 x half> %57 to <2 x float>, !dbg !24
  %113 = fpext <2 x half> %77 to <2 x float>, !dbg !25
  %114 = fadd <2 x float> %111, %112, !dbg !26
  %115 = fadd <2 x float> %114, %113, !dbg !27
  %116 = fmul <2 x float> %115, %115, !dbg !28
  %117 = fmul <2 x float> %115, %115, !dbg !28
  %118 = fptrunc <2 x float> %115 to <2 x half>, !dbg !29
  %119 = fpext <2 x half> %40 to <2 x float>, !dbg !23
  %120 = fpext <2 x half> %60 to <2 x float>, !dbg !24
  %121 = fpext <2 x half> %80 to <2 x float>, !dbg !25
  %122 = fadd <2 x float> %119, %120, !dbg !26
  %123 = fadd <2 x float> %122, %121, !dbg !27
  %124 = fmul <2 x float> %123, %123, !dbg !28
  %125 = fmul <2 x float> %123, %123, !dbg !28
  %126 = fptrunc <2 x float> %123 to <2 x half>, !dbg !29
  %127 = fpext <2 x half> %42 to <2 x float>, !dbg !23
  %128 = fpext <2 x half> %62 to <2 x float>, !dbg !24
  %129 = fpext <2 x half> %82 to <2 x float>, !dbg !25
  %130 = fadd <2 x float> %127, %128, !dbg !26
  %131 = fadd <2 x float> %130, %129, !dbg !27
  %132 = fmul <2 x float> %131, %131, !dbg !28
  %133 = fmul <2 x float> %131, %131, !dbg !28
  %134 = fptrunc <2 x float> %131 to <2 x half>, !dbg !29
  %135 = fpext <2 x half> %44 to <2 x float>, !dbg !23
  %136 = fpext <2 x half> %64 to <2 x float>, !dbg !24
  %137 = fpext <2 x half> %84 to <2 x float>, !dbg !25
  %138 = fadd <2 x float> %135, %136, !dbg !26
  %139 = fadd <2 x float> %138, %137, !dbg !27
  %140 = fmul <2 x float> %139, %139, !dbg !28
  %141 = fmul <2 x float> %139, %139, !dbg !28
  %142 = fptrunc <2 x float> %139 to <2 x half>, !dbg !29
  %143 = fpext <2 x half> %46 to <2 x float>, !dbg !23
  %144 = fpext <2 x half> %66 to <2 x float>, !dbg !24
  %145 = fpext <2 x half> %86 to <2 x float>, !dbg !25
  %146 = fadd <2 x float> %143, %144, !dbg !26
  %147 = fadd <2 x float> %146, %145, !dbg !27
  %148 = fmul <2 x float> %147, %147, !dbg !28
  %149 = fmul <2 x float> %147, %147, !dbg !28
  %150 = fptrunc <2 x float> %147 to <2 x half>, !dbg !29
  %151 = bitcast <2 x half> %94 to i32, !dbg !29
  %152 = bitcast <2 x half> %102 to i32, !dbg !29
  %153 = bitcast <2 x half> %110 to i32, !dbg !29
  %154 = bitcast <2 x half> %118 to i32, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %151, i32 %152, i32 %153, i32 %154, ptr addrspace(1) %67, i1 %16) #5, !dbg !29
  %155 = bitcast <2 x half> %126 to i32, !dbg !29
  %156 = bitcast <2 x half> %134 to i32, !dbg !29
  %157 = bitcast <2 x half> %142 to i32, !dbg !29
  %158 = bitcast <2 x half> %150 to i32, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %155, i32 %156, i32 %157, i32 %158, ptr addrspace(1) %68, i1 %17) #5, !dbg !29
  %shift = shufflevector <2 x float> %93, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %159 = fadd <2 x float> %92, %shift, !dbg !30
  %160 = fadd <2 x float> %100, %159, !dbg !30
  %shift49 = shufflevector <2 x float> %101, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %161 = fadd <2 x float> %shift49, %160, !dbg !30
  %162 = fadd <2 x float> %108, %161, !dbg !30
  %shift50 = shufflevector <2 x float> %109, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %163 = fadd <2 x float> %shift50, %162, !dbg !30
  %164 = fadd <2 x float> %116, %163, !dbg !30
  %shift51 = shufflevector <2 x float> %117, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %165 = fadd <2 x float> %shift51, %164, !dbg !30
  %166 = extractelement <2 x float> %165, i64 0, !dbg !30
  %167 = select i1 %16, float %166, float 0.000000e+00, !dbg !30
  %shift52 = shufflevector <2 x float> %125, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %168 = fadd <2 x float> %124, %shift52, !dbg !30
  %169 = fadd <2 x float> %132, %168, !dbg !30
  %shift53 = shufflevector <2 x float> %133, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %170 = fadd <2 x float> %shift53, %169, !dbg !30
  %171 = fadd <2 x float> %140, %170, !dbg !30
  %shift54 = shufflevector <2 x float> %141, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %172 = fadd <2 x float> %shift54, %171, !dbg !30
  %173 = fadd <2 x float> %148, %172, !dbg !30
  %shift55 = shufflevector <2 x float> %149, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %174 = fadd <2 x float> %shift55, %173, !dbg !30
  %175 = extractelement <2 x float> %174, i64 0, !dbg !30
  %176 = select i1 %17, float %175, float 0.000000e+00, !dbg !30
  %177 = bitcast float %167 to i32, !dbg !35
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 16, i32 31), !dbg !35
  %179 = bitcast i32 %178 to float, !dbg !35
  %180 = fadd float %167, %179, !dbg !30
  %181 = bitcast float %180 to i32, !dbg !35
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 8, i32 31), !dbg !35
  %183 = bitcast i32 %182 to float, !dbg !35
  %184 = fadd float %180, %183, !dbg !30
  %185 = bitcast float %184 to i32, !dbg !35
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 4, i32 31), !dbg !35
  %187 = bitcast i32 %186 to float, !dbg !35
  %188 = fadd float %184, %187, !dbg !30
  %189 = bitcast float %188 to i32, !dbg !35
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 2, i32 31), !dbg !35
  %191 = bitcast i32 %190 to float, !dbg !35
  %192 = fadd float %188, %191, !dbg !30
  %193 = bitcast float %192 to i32, !dbg !35
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 1, i32 31), !dbg !35
  %195 = bitcast i32 %194 to float, !dbg !35
  %196 = fadd float %192, %195, !dbg !30
  %197 = bitcast float %176 to i32, !dbg !35
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 16, i32 31), !dbg !35
  %199 = bitcast i32 %198 to float, !dbg !35
  %200 = fadd float %176, %199, !dbg !30
  %201 = bitcast float %200 to i32, !dbg !35
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 8, i32 31), !dbg !35
  %203 = bitcast i32 %202 to float, !dbg !35
  %204 = fadd float %200, %203, !dbg !30
  %205 = bitcast float %204 to i32, !dbg !35
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 4, i32 31), !dbg !35
  %207 = bitcast i32 %206 to float, !dbg !35
  %208 = fadd float %204, %207, !dbg !30
  %209 = bitcast float %208 to i32, !dbg !35
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 2, i32 31), !dbg !35
  %211 = bitcast i32 %210 to float, !dbg !35
  %212 = fadd float %208, %211, !dbg !30
  %213 = bitcast float %212 to i32, !dbg !35
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 1, i32 31), !dbg !35
  %215 = bitcast i32 %214 to float, !dbg !35
  %216 = fadd float %212, %215, !dbg !30
  %217 = and i32 %18, 15, !dbg !35
  %218 = icmp eq i32 %13, 0, !dbg !35
  %219 = getelementptr float, ptr addrspace(3) @global_smem, i32 %217, !dbg !35
  %220 = bitcast float %196 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %220, i1 %218) #5, !dbg !35
  %221 = or disjoint i32 %217, 16, !dbg !35
  %222 = getelementptr float, ptr addrspace(3) @global_smem, i32 %221, !dbg !35
  %223 = bitcast float %216 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, <1 x i32> %223, i1 %218) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %224 = icmp slt i32 %12, 32, !dbg !35
  %225 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !35
  %226 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %225, i1 %224) #5, !dbg !35
  %227 = bitcast i32 %226 to float, !dbg !35
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 8, i32 31), !dbg !35
  %229 = bitcast i32 %228 to float, !dbg !35
  %230 = fadd float %227, %229, !dbg !30
  %231 = bitcast float %230 to i32, !dbg !35
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 4, i32 31), !dbg !35
  %233 = bitcast i32 %232 to float, !dbg !35
  %234 = fadd float %230, %233, !dbg !30
  %235 = bitcast float %234 to i32, !dbg !35
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 2, i32 31), !dbg !35
  %237 = bitcast i32 %236 to float, !dbg !35
  %238 = fadd float %234, %237, !dbg !30
  %239 = bitcast float %238 to i32, !dbg !35
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 1, i32 31), !dbg !35
  %241 = bitcast i32 %240 to float, !dbg !35
  %242 = fadd float %238, %241, !dbg !30
  %243 = and i32 %12, 15, !dbg !35
  %244 = icmp eq i32 %243, 0, !dbg !35
  %245 = and i1 %224, %244, !dbg !35
  %246 = bitcast float %242 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %246, i1 %245) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %247 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !35
  %248 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %249 = bitcast float %247 to i32, !dbg !36
  %250 = bitcast float %248 to i32, !dbg !36
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %249, i32 %250, i1 true) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %251 = getelementptr inbounds nuw float, ptr addrspace(3) @global_smem, i32 %14, !dbg !36
  %252 = load float, ptr addrspace(3) %251, align 4, !dbg !36
  %253 = tail call float @llvm.nvvm.div.full(float %252, float 4.096000e+03), !dbg !37
  %254 = tail call float @llvm.nvvm.div.full(float %247, float 4.096000e+03), !dbg !37
  %255 = tail call float @llvm.nvvm.div.full(float %248, float 4.096000e+03), !dbg !37
  %256 = fadd float %253, 0x3EE4F8B580000000, !dbg !38
  %257 = fadd float %254, 0x3EE4F8B580000000, !dbg !38
  %258 = fadd float %255, 0x3EE4F8B580000000, !dbg !38
  %259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i = icmp eq i32 %259, 0, !dbg !36
  br i1 %.not.i, label %262, label %260, !dbg !36

260:                                              ; preds = %9
  %261 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %256), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

262:                                              ; preds = %9
  %263 = tail call float @llvm.nvvm.rsqrt.approx.f(float %256), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

__nv_rsqrtf.exit:                                 ; preds = %260, %262
  %.0.i = phi float [ %261, %260 ], [ %263, %262 ], !dbg !36
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %266 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %267 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %271 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i22 = icmp eq i32 %271, 0, !dbg !36
  br i1 %.not.i22, label %274, label %272, !dbg !36

272:                                              ; preds = %__nv_rsqrtf.exit
  %273 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %257), !dbg !36
  br label %__nv_rsqrtf.exit24, !dbg !36

274:                                              ; preds = %__nv_rsqrtf.exit
  %275 = tail call float @llvm.nvvm.rsqrt.approx.f(float %257), !dbg !36
  br label %__nv_rsqrtf.exit24, !dbg !36

__nv_rsqrtf.exit24:                               ; preds = %272, %274
  %.0.i23 = phi float [ %273, %272 ], [ %275, %274 ], !dbg !36
  %276 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %277 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %278 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %279 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %283 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i46 = icmp eq i32 %283, 0, !dbg !36
  br i1 %.not.i46, label %286, label %284, !dbg !36

284:                                              ; preds = %__nv_rsqrtf.exit24
  %285 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %258), !dbg !36
  br label %__nv_rsqrtf.exit48, !dbg !36

286:                                              ; preds = %__nv_rsqrtf.exit24
  %287 = tail call float @llvm.nvvm.rsqrt.approx.f(float %258), !dbg !36
  br label %__nv_rsqrtf.exit48, !dbg !36

__nv_rsqrtf.exit48:                               ; preds = %284, %286
  %.0.i47 = phi float [ %285, %284 ], [ %287, %286 ], !dbg !36
  %288 = or disjoint i32 %11, %14, !dbg !12
  %289 = icmp slt i32 %288, %6, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %290 = sext i32 %288 to i64, !dbg !40
  %291 = getelementptr float, ptr addrspace(1) %1, i64 %290, !dbg !40
  %292 = and i32 %12, 510, !dbg !41
  %293 = icmp eq i32 %292, 0, !dbg !41
  %294 = bitcast float %.0.i to i32, !dbg !41
  %295 = and i1 %293, %289, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %294, ptr addrspace(1) %291, i1 %295) #5, !dbg !41
  %296 = zext nneg i32 %20 to i64, !dbg !42
  %297 = getelementptr half, ptr addrspace(1) %4, i64 %296, !dbg !42
  %298 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %297, i1 true) #5, !dbg !43
  %299 = extractvalue { i32, i32, i32, i32 } %298, 0, !dbg !43
  %300 = bitcast i32 %299 to <2 x half>, !dbg !43
  %301 = extractvalue { i32, i32, i32, i32 } %298, 1, !dbg !43
  %302 = bitcast i32 %301 to <2 x half>, !dbg !43
  %303 = extractvalue { i32, i32, i32, i32 } %298, 2, !dbg !43
  %304 = bitcast i32 %303 to <2 x half>, !dbg !43
  %305 = extractvalue { i32, i32, i32, i32 } %298, 3, !dbg !43
  %306 = bitcast i32 %305 to <2 x half>, !dbg !43
  %307 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %67, i1 %16) #5, !dbg !44
  %308 = extractvalue { i32, i32, i32, i32 } %307, 0, !dbg !44
  %309 = bitcast i32 %308 to <2 x half>, !dbg !44
  %310 = extractvalue { i32, i32, i32, i32 } %307, 1, !dbg !44
  %311 = bitcast i32 %310 to <2 x half>, !dbg !44
  %312 = extractvalue { i32, i32, i32, i32 } %307, 2, !dbg !44
  %313 = bitcast i32 %312 to <2 x half>, !dbg !44
  %314 = extractvalue { i32, i32, i32, i32 } %307, 3, !dbg !44
  %315 = bitcast i32 %314 to <2 x half>, !dbg !44
  %316 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, $4;\0A\09mov.u32 $1, $5;\0A\09mov.u32 $2, $6;\0A\09mov.u32 $3, $7;\0A\09@$9 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $8 + 0 ];", "=r,=r,=r,=r,r,r,r,r,l,b"(i32 0, i32 0, i32 0, i32 0, ptr addrspace(1) %68, i1 %17) #5, !dbg !44
  %317 = extractvalue { i32, i32, i32, i32 } %316, 0, !dbg !44
  %318 = bitcast i32 %317 to <2 x half>, !dbg !44
  %319 = extractvalue { i32, i32, i32, i32 } %316, 1, !dbg !44
  %320 = bitcast i32 %319 to <2 x half>, !dbg !44
  %321 = extractvalue { i32, i32, i32, i32 } %316, 2, !dbg !44
  %322 = bitcast i32 %321 to <2 x half>, !dbg !44
  %323 = extractvalue { i32, i32, i32, i32 } %316, 3, !dbg !44
  %324 = bitcast i32 %323 to <2 x half>, !dbg !44
  %325 = getelementptr half, ptr addrspace(1) %5, i64 %25, !dbg !45
  %326 = getelementptr half, ptr addrspace(1) %5, i64 %27, !dbg !45
  %327 = fpext <2 x half> %300 to <2 x float>, !dbg !46
  %328 = fpext <2 x half> %309 to <2 x float>, !dbg !47
  %329 = insertelement <2 x float> poison, float %.0.i23, i64 0, !dbg !48
  %330 = shufflevector <2 x float> %329, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !48
  %331 = fmul <2 x float> %330, %328, !dbg !48
  %332 = fmul <2 x float> %331, %327, !dbg !49
  %333 = fptrunc <2 x float> %332 to <2 x half>, !dbg !50
  %334 = fpext <2 x half> %302 to <2 x float>, !dbg !46
  %335 = fpext <2 x half> %311 to <2 x float>, !dbg !47
  %336 = fmul <2 x float> %330, %335, !dbg !48
  %337 = fmul <2 x float> %336, %334, !dbg !49
  %338 = fptrunc <2 x float> %337 to <2 x half>, !dbg !50
  %339 = fpext <2 x half> %304 to <2 x float>, !dbg !46
  %340 = fpext <2 x half> %313 to <2 x float>, !dbg !47
  %341 = fmul <2 x float> %330, %340, !dbg !48
  %342 = fmul <2 x float> %341, %339, !dbg !49
  %343 = fptrunc <2 x float> %342 to <2 x half>, !dbg !50
  %344 = fpext <2 x half> %306 to <2 x float>, !dbg !46
  %345 = fpext <2 x half> %315 to <2 x float>, !dbg !47
  %346 = fmul <2 x float> %330, %345, !dbg !48
  %347 = fmul <2 x float> %346, %344, !dbg !49
  %348 = fptrunc <2 x float> %347 to <2 x half>, !dbg !50
  %349 = fpext <2 x half> %318 to <2 x float>, !dbg !47
  %350 = insertelement <2 x float> poison, float %.0.i47, i64 0, !dbg !48
  %351 = shufflevector <2 x float> %350, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !48
  %352 = fmul <2 x float> %351, %349, !dbg !48
  %353 = fmul <2 x float> %352, %327, !dbg !49
  %354 = fptrunc <2 x float> %353 to <2 x half>, !dbg !50
  %355 = fpext <2 x half> %320 to <2 x float>, !dbg !47
  %356 = fmul <2 x float> %351, %355, !dbg !48
  %357 = fmul <2 x float> %356, %334, !dbg !49
  %358 = fptrunc <2 x float> %357 to <2 x half>, !dbg !50
  %359 = fpext <2 x half> %322 to <2 x float>, !dbg !47
  %360 = fmul <2 x float> %351, %359, !dbg !48
  %361 = fmul <2 x float> %360, %339, !dbg !49
  %362 = fptrunc <2 x float> %361 to <2 x half>, !dbg !50
  %363 = fpext <2 x half> %324 to <2 x float>, !dbg !47
  %364 = fmul <2 x float> %351, %363, !dbg !48
  %365 = fmul <2 x float> %364, %344, !dbg !49
  %366 = fptrunc <2 x float> %365 to <2 x half>, !dbg !50
  %367 = bitcast <2 x half> %333 to i32, !dbg !50
  %368 = bitcast <2 x half> %338 to i32, !dbg !50
  %369 = bitcast <2 x half> %343 to i32, !dbg !50
  %370 = bitcast <2 x half> %348 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %367, i32 %368, i32 %369, i32 %370, ptr addrspace(1) %325, i1 %16) #5, !dbg !50
  %371 = bitcast <2 x half> %354 to i32, !dbg !50
  %372 = bitcast <2 x half> %358 to i32, !dbg !50
  %373 = bitcast <2 x half> %362 to i32, !dbg !50
  %374 = bitcast <2 x half> %366 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %371, i32 %372, i32 %373, i32 %374, ptr addrspace(1) %326, i1 %17) #5, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.div.full(float, float) #3

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c77oi4n34co2lyl6w3uyrpu25nlsmz2qimbxcpjl3nsdatstbw7t.py", directory: "/tmp/torchinductor_root/77")
!4 = !{ptr @triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8, !"reqntidx", i32 512}
!5 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!6 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", linkageName: "triton_red_fused__to_copy_add_mean_mul_pow_rsqrt_8", scope: !3, file: !3, line: 18, type: !7, scopeLine: 18, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 22, column: 28, scope: !6)
!10 = !DILocation(line: 22, column: 33, scope: !6)
!11 = !DILocation(line: 23, column: 44, scope: !6)
!12 = !DILocation(line: 23, column: 23, scope: !6)
!13 = !DILocation(line: 24, column: 21, scope: !6)
!14 = !DILocation(line: 25, column: 37, scope: !6)
!15 = !DILocation(line: 35, column: 46, scope: !6)
!16 = !DILocation(line: 35, column: 41, scope: !6)
!17 = !DILocation(line: 35, column: 34, scope: !6)
!18 = !DILocation(line: 35, column: 51, scope: !6)
!19 = !DILocation(line: 36, column: 34, scope: !6)
!20 = !DILocation(line: 36, column: 51, scope: !6)
!21 = !DILocation(line: 37, column: 38, scope: !6)
!22 = !DILocation(line: 37, column: 55, scope: !6)
!23 = !DILocation(line: 35, column: 113, scope: !6)
!24 = !DILocation(line: 36, column: 113, scope: !6)
!25 = !DILocation(line: 37, column: 117, scope: !6)
!26 = !DILocation(line: 38, column: 22, scope: !6)
!27 = !DILocation(line: 39, column: 22, scope: !6)
!28 = !DILocation(line: 41, column: 22, scope: !6)
!29 = !DILocation(line: 45, column: 55, scope: !6)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !34)
!31 = distinct !DILexicalBlockFile(scope: !33, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/workspace/torch-compile-caching/.venv/lib/python3.11/site-packages/triton/language")
!33 = distinct !DILexicalBlockFile(scope: !6, file: !32, discriminator: 0)
!34 = !DILocation(line: 46, column: 25, scope: !6)
!35 = !DILocation(line: 286, column: 36, scope: !33, inlinedAt: !34)
!36 = !DILocation(line: 51, column: 28, scope: !6)
!37 = !DILocation(line: 48, column: 20, scope: !6)
!38 = !DILocation(line: 50, column: 20, scope: !6)
!39 = !DILocation(line: 52, column: 4, scope: !6)
!40 = !DILocation(line: 53, column: 28, scope: !6)
!41 = !DILocation(line: 53, column: 40, scope: !6)
!42 = !DILocation(line: 60, column: 35, scope: !6)
!43 = !DILocation(line: 60, column: 42, scope: !6)
!44 = !DILocation(line: 61, column: 56, scope: !6)
!45 = !DILocation(line: 66, column: 29, scope: !6)
!46 = !DILocation(line: 60, column: 95, scope: !6)
!47 = !DILocation(line: 61, column: 118, scope: !6)
!48 = !DILocation(line: 63, column: 24, scope: !6)
!49 = !DILocation(line: 65, column: 24, scope: !6)
!50 = !DILocation(line: 66, column: 53, scope: !6)
!51 = !DILocation(line: 54, column: 4, scope: !6)
