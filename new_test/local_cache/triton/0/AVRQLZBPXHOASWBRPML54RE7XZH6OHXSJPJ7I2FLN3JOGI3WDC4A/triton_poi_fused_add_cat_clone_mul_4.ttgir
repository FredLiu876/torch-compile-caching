#blocked = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [8], order = [0]}>
#loc = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":18:0)
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 8 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_add_cat_clone_mul_4(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":18:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":18:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":18:0), %arg3: i32 loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":18:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":18:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<512xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<512xf16, #blocked> loc(#loc1)
    %c512_i32 = arith.constant 512 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<128> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<4096> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<32> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<64> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<64> : tensor<512xi64, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<-64> : tensor<512xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c512_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<512xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<512xi32, #blocked> loc(#loc5)
    %5 = arith.remsi %4, %cst_1 : tensor<512xi32, #blocked> loc(#loc6)
    %6 = arith.divsi %4, %cst_2 : tensor<512xi32, #blocked> loc(#loc7)
    %7 = arith.divsi %4, %cst_1 : tensor<512xi32, #blocked> loc(#loc8)
    %8 = arith.remsi %7, %cst_3 : tensor<512xi32, #blocked> loc(#loc9)
    %9 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<512x!tt.ptr<f16>, #blocked> loc(#loc10)
    %10 = tt.addptr %9, %4 : tensor<512x!tt.ptr<f16>, #blocked>, tensor<512xi32, #blocked> loc(#loc10)
    %11 = tt.load %10 : tensor<512x!tt.ptr<f16>, #blocked> loc(#loc11)
    %12 = arith.extf %11 : tensor<512xf16, #blocked> to tensor<512xf32, #blocked> loc(#loc12)
    %13 = arith.remsi %5, %cst_4 : tensor<512xi32, #blocked> loc(#loc13)
    %14 = tt.splat %arg3 : i32 -> tensor<512xi32, #blocked> loc(#loc14)
    %15 = arith.muli %14, %13 : tensor<512xi32, #blocked> loc(#loc14)
    %16 = arith.addi %6, %15 : tensor<512xi32, #blocked> loc(#loc15)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = tt.addptr %17, %16 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc16)
    %19 = tt.load %18 evictionPolicy = evict_last : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc17)
    %20 = math.cos %19 : tensor<512xf32, #blocked> loc(#loc18)
    %21 = arith.mulf %12, %20 : tensor<512xf32, #blocked> loc(#loc19)
    %22 = arith.extsi %5 : tensor<512xi32, #blocked> to tensor<512xi64, #blocked> loc(#loc20)
    %23 = arith.cmpi slt, %22, %cst_5 : tensor<512xi64, #blocked> loc(#loc20)
    %24 = arith.muli %7, %cst_1 : tensor<512xi32, #blocked> loc(#loc21)
    %25 = arith.addi %24, %cst_4 : tensor<512xi32, #blocked> loc(#loc22)
    %26 = arith.addi %25, %5 : tensor<512xi32, #blocked> loc(#loc23)
    %27 = tt.addptr %9, %26 : tensor<512x!tt.ptr<f16>, #blocked>, tensor<512xi32, #blocked> loc(#loc24)
    %28 = tt.load %27, %23, %cst_0 evictionPolicy = evict_last : tensor<512x!tt.ptr<f16>, #blocked> loc(#loc25)
    %29 = arith.extf %28 : tensor<512xf16, #blocked> to tensor<512xf32, #blocked> loc(#loc26)
    %30 = arith.subf %cst, %29 : tensor<512xf32, #blocked> loc(#loc27)
    %31 = arith.cmpi sge, %22, %cst_5 : tensor<512xi64, #blocked> loc(#loc28)
    %32 = arith.addi %5, %cst_6 : tensor<512xi32, #blocked> loc(#loc29)
    %33 = arith.addi %24, %32 : tensor<512xi32, #blocked> loc(#loc30)
    %34 = tt.addptr %9, %33 : tensor<512x!tt.ptr<f16>, #blocked>, tensor<512xi32, #blocked> loc(#loc31)
    %35 = tt.load %34, %31, %cst_0 evictionPolicy = evict_last : tensor<512x!tt.ptr<f16>, #blocked> loc(#loc32)
    %36 = arith.extf %35 : tensor<512xf16, #blocked> to tensor<512xf32, #blocked> loc(#loc33)
    %37 = arith.select %23, %30, %36 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked> loc(#loc47)
    %38 = math.sin %19 : tensor<512xf32, #blocked> loc(#loc36)
    %39 = arith.mulf %37, %38 : tensor<512xf32, #blocked> loc(#loc37)
    %40 = arith.addf %21, %39 : tensor<512xf32, #blocked> loc(#loc38)
    %41 = arith.muli %6, %cst_1 : tensor<512xi32, #blocked> loc(#loc39)
    %42 = arith.addi %5, %41 : tensor<512xi32, #blocked> loc(#loc40)
    %43 = arith.muli %arg3, %c128_i32 : i32 loc(#loc41)
    %44 = tt.splat %43 : i32 -> tensor<512xi32, #blocked> loc(#loc42)
    %45 = arith.muli %44, %8 : tensor<512xi32, #blocked> loc(#loc42)
    %46 = arith.addi %42, %45 : tensor<512xi32, #blocked> loc(#loc43)
    %47 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<512x!tt.ptr<f16>, #blocked> loc(#loc44)
    %48 = tt.addptr %47, %46 : tensor<512x!tt.ptr<f16>, #blocked>, tensor<512xi32, #blocked> loc(#loc44)
    %49 = arith.truncf %40 : tensor<512xf32, #blocked> to tensor<512xf16, #blocked> loc(#loc45)
    tt.store %48, %49 : tensor<512x!tt.ptr<f16>, #blocked> loc(#loc45)
    tt.return loc(#loc46)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":19:28)
#loc3 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":19:33)
#loc4 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":20:36)
#loc5 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":20:23)
#loc6 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":23:19)
#loc7 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":24:19)
#loc8 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":25:19)
#loc9 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":26:28)
#loc10 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":27:30)
#loc11 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":27:35)
#loc12 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":27:44)
#loc13 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":28:46)
#loc14 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":28:41)
#loc15 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":28:35)
#loc16 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":28:30)
#loc17 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":28:53)
#loc18 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":29:23)
#loc19 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":33:18)
#loc20 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":38:19)
#loc21 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":39:40)
#loc22 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":39:36)
#loc23 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":39:46)
#loc24 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":39:31)
#loc25 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":39:52)
#loc26 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":39:103)
#loc27 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":40:13)
#loc28 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":43:20)
#loc29 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":46:49)
#loc30 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":46:41)
#loc31 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":46:31)
#loc32 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":46:55)
#loc33 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":46:106)
#loc34 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":47:35)
#loc35 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":42:35)
#loc36 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":48:24)
#loc37 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":51:20)
#loc38 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":52:19)
#loc39 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":53:34)
#loc40 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":53:30)
#loc41 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":53:43)
#loc42 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":53:47)
#loc43 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":53:39)
#loc44 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":53:25)
#loc45 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":53:59)
#loc46 = loc("./local_cache/x4/cx4jrcr7srhfpegblhxm3eej7eho6mlukfwcvg7yliegbq5shesd.py":53:4)
#loc47 = loc(fused[#loc34, #loc35])
